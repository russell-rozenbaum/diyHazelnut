// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: App_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, App_lib = [0];
   runtime.caml_register_global(0, App_lib, "App_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: App_lib__App
//# unitInfo: Requires: Assert_failure, Async_kernel, Base__Field, Core, Core__List, Expect_test_collector, Hazelnut_lib__Hazelnut, Incr_dom__Component, Incr_dom__Incr, Monad_lib__Monad, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib, Virtual_dom__Node, Virtual_dom__Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$14 = "",
    cst_s = "%s",
    cst_app_lib = "app_lib",
    cst_e$0 = "e",
    cst_lam_input$0 = "lam_input",
    cst_lib_app_re = "lib/app.re",
    cst_lit_input$0 = "lit_input",
    cst_state$0 = "state",
    cst_t$0 = "t",
    cst_var_input$0 = "var_input",
    cst_warning$0 = "warning",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "[ ]",
    cst$1 = "\xf0\x9f\x91\x88",
    cst$2 = "\xf0\x9f\x91\x89",
    cst$3 = " -> ",
    cst$4 = " }",
    cst$5 = " -> { ",
    cst$6 = " ",
    cst$7 = " + ",
    cst$8 = ": ",
    cst$9 = " ]",
    cst$10 = "[ ",
    cst$11 = ")",
    cst$12 = "(",
    cst$13 = cst$14,
    s = [0, [0, 0], 1, 0, cst$14, cst$14, cst$14],
    warning = [0, "Theorem 1 violation (Action sensibility)"],
    cst = cst$14,
    error_source_027 = "lib/app.re.state",
    error_source_059 = "lib/app.re.Model.t",
    Core = global_data.Core,
    Incr_dom_Component = global_data.Incr_dom__Component,
    Incr_dom_Incr = global_data.Incr_dom__Incr,
    Virtual_dom_Vdom = global_data.Virtual_dom__Vdom,
    Virtual_dom_Node = global_data.Virtual_dom__Node,
    Monad_lib_Monad = global_data.Monad_lib__Monad,
    Stdlib = global_data.Stdlib,
    Async_kernel = global_data.Async_kernel,
    Hazelnut_lib_Hazelnut = global_data.Hazelnut_lib__Hazelnut,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_compare_lib = global_data.Ppx_compare_lib;
   global_data.Base__Field;
   var
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_app_lib);
   caml_call1(Expect_test_collector[5][1], cst_lib_app_re);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_app_lib, cst);
   var
    cst_Num = "Num",
    cst_fun = "fun ",
    _b_ = [0, cst_lib_app_re, 180, 0],
    cst_lit_input = cst_lit_input$0,
    cst_lam_input = cst_lam_input$0,
    cst_var_input = cst_var_input$0,
    cst_warning = cst_warning$0,
    cst_t = cst_t$0,
    cst_e = cst_e$0,
    _c_ = [0, cst_lit_input$0],
    _d_ = [0, cst_lam_input$0],
    _e_ = [0, cst_var_input$0],
    _f_ = [0, cst_warning$0],
    _g_ = [0, cst_t$0],
    _h_ = [0, cst_e$0],
    _i_ = [0, cst_lib_app_re, 191, 2],
    cst_state = cst_state$0,
    _j_ = [0, cst_state$0],
    _k_ = [0, "Var"],
    _l_ = [0, "Lam"],
    _m_ = [0, "Lit"],
    _n_ = [0, "HazelnutAction"],
    _o_ = [0, "UpdateInput"],
    _p_ = [0, "ShowWarning"];
   function pexp_of_htyp(param){
    if(typeof param === "number") return param ? 1 : 0;
    var t2 = param[2], t1 = param[1], _bg_ = pexp_of_htyp(t2);
    return [1, pexp_of_htyp(t1), _bg_];
   }
   function pexp_of_hexp(param){
    if(typeof param === "number") return 1;
    switch(param[0]){
      case 0:
       var x = param[1]; return [2, x];
      case 1:
       var e = param[2], x$0 = param[1]; return [3, x$0, pexp_of_hexp(e)];
      case 2:
       var e2 = param[2], e1 = param[1], _bd_ = pexp_of_hexp(e2);
       return [4, pexp_of_hexp(e1), _bd_];
      case 3:
       var n = param[1]; return [5, n];
      case 4:
       var e2$0 = param[2], e1$0 = param[1], _be_ = pexp_of_hexp(e2$0);
       return [6, pexp_of_hexp(e1$0), _be_];
      case 5:
       var t = param[2], e$0 = param[1], _bf_ = pexp_of_htyp(t);
       return [7, pexp_of_hexp(e$0), _bf_];
      default: var e$1 = param[1]; return [8, pexp_of_hexp(e$1)];
    }
   }
   function pexp_of_ztyp(param){
    switch(param[0]){
      case 0:
       var t = param[1]; return [0, pexp_of_htyp(t)];
      case 1:
       var t2 = param[2], t1 = param[1], _bb_ = pexp_of_htyp(t2);
       return [1, pexp_of_ztyp(t1), _bb_];
      default:
       var t2$0 = param[2], t1$0 = param[1], _bc_ = pexp_of_ztyp(t2$0);
       return [1, pexp_of_htyp(t1$0), _bc_];
    }
   }
   function pexp_of_zexp(param){
    switch(param[0]){
      case 0:
       var e = param[1]; return [0, pexp_of_hexp(e)];
      case 1:
       var e$0 = param[2], x = param[1]; return [3, x, pexp_of_zexp(e$0)];
      case 2:
       var e2 = param[2], e1 = param[1], _a7_ = pexp_of_hexp(e2);
       return [4, pexp_of_zexp(e1), _a7_];
      case 3:
       var e2$0 = param[2], e1$0 = param[1], _a8_ = pexp_of_zexp(e2$0);
       return [4, pexp_of_hexp(e1$0), _a8_];
      case 4:
       var e2$1 = param[2], e1$1 = param[1], _a9_ = pexp_of_hexp(e2$1);
       return [6, pexp_of_zexp(e1$1), _a9_];
      case 5:
       var e2$2 = param[2], e1$2 = param[1], _a__ = pexp_of_zexp(e2$2);
       return [6, pexp_of_hexp(e1$2), _a__];
      case 6:
       var t = param[2], e$1 = param[1], _a$_ = pexp_of_htyp(t);
       return [7, pexp_of_zexp(e$1), _a$_];
      case 7:
       var t$0 = param[2], e$2 = param[1], _ba_ = pexp_of_ztyp(t$0);
       return [7, pexp_of_hexp(e$2), _ba_];
      default: var e$3 = param[1]; return [8, pexp_of_zexp(e$3)];
    }
   }
   function prec(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return 0 === param$0 ? 0 : 0;
     switch(param$0[0]){
       case 0:
        var e = param$0[1]; param$0 = e; break;
       case 1:
        return 1;
       case 2:
        return 0;
       case 3:
        return 0;
       case 4:
        return 2;
       case 5:
        return 0;
       case 6:
        return 3;
       case 7:
        return 4;
       default: return 0;
     }
    }
   }
   function string_of_pexp(outer){
    if(typeof outer === "number") return 0 === outer ? cst_Num : cst$0;
    switch(outer[0]){
      case 0:
       var
        e = outer[1],
        _aN_ = string_of_pexp(e),
        _aO_ = caml_call2(Core[18], _aN_, cst$1);
       return caml_call2(Core[18], cst$2, _aO_);
      case 1:
       var
        t2 = outer[2],
        t1 = outer[1],
        _aP_ = paren(t2, outer, 1),
        _aQ_ = caml_call2(Core[18], cst$3, _aP_),
        _aR_ = paren(t1, outer, 0);
       return caml_call2(Core[18], _aR_, _aQ_);
      case 2:
       var x = outer[1]; return x;
      case 3:
       var
        e$0 = outer[2],
        x$0 = outer[1],
        _aS_ = string_of_pexp(e$0),
        _aT_ = caml_call2(Core[18], _aS_, cst$4),
        _aU_ = caml_call2(Core[18], cst$5, _aT_),
        _aV_ = caml_call2(Core[18], x$0, _aU_);
       return caml_call2(Core[18], cst_fun, _aV_);
      case 4:
       var
        e2 = outer[2],
        e1 = outer[1],
        _aW_ = paren(e2, outer, 1),
        _aX_ = caml_call2(Core[18], cst$6, _aW_),
        _aY_ = paren(e1, outer, 0);
       return caml_call2(Core[18], _aY_, _aX_);
      case 5:
       var n = outer[1]; return caml_call1(Core[22], n);
      case 6:
       var
        e2$0 = outer[2],
        e1$0 = outer[1],
        _aZ_ = paren(e2$0, outer, 1),
        _a0_ = caml_call2(Core[18], cst$7, _aZ_),
        _a1_ = paren(e1$0, outer, 0);
       return caml_call2(Core[18], _a1_, _a0_);
      case 7:
       var
        t = outer[2],
        e$1 = outer[1],
        _a2_ = paren(t, outer, 1),
        _a3_ = caml_call2(Core[18], cst$8, _a2_),
        _a4_ = paren(e$1, outer, 0);
       return caml_call2(Core[18], _a4_, _a3_);
      default:
       var
        e$2 = outer[1],
        _a5_ = string_of_pexp(e$2),
        _a6_ = caml_call2(Core[18], _a5_, cst$9);
       return caml_call2(Core[18], cst$10, _a6_);
    }
   }
   function paren(inner, outer, side){
    var
     unparenned = string_of_pexp(inner),
     _aM_ = caml_call2(Core[18], unparenned, cst$11),
     parenned = caml_call2(Core[18], cst$12, _aM_),
     prec_inner = prec(inner),
     prec_outer = prec(outer);
    if(caml_call2(Core[92], prec_inner, prec_outer)) return unparenned;
    if(caml_call2(Core[91], prec_inner, prec_outer)) return parenned;
    var param = inner;
    for(;;){
     if(typeof param === "number")
      var match = 0 === param ? 2 : 2;
     else
      switch(param[0]){
        case 0:
         var e = param[1]; param = e; continue;
        case 1:
         var match = 1; break;
        case 2:
         var match = 2; break;
        case 3:
         var match = 2; break;
        case 4:
         var match = 0; break;
        case 5:
         var match = 2; break;
        case 6:
         var match = 0; break;
        case 7:
         var match = 0; break;
        default: var match = 2;
      }
     a:
     {
      switch(match){
        case 0:
         if(1 === side) break a; break;
        case 1:
         if(! side) break a; break;
      }
      return unparenned;
     }
     return parenned;
    }
   }
   function state_of_sexp(sexp_002){
    if(0 === sexp_002[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_027, sexp_002);
    var
     field_sexps_003 = sexp_002[1],
     e_004 = [0, 0],
     t_006 = [0, 0],
     warning_008 = [0, 0],
     var_input_010 = [0, 0],
     lam_input_012 = [0, 0],
     lit_input_014 = [0, 0],
     duplicates_016 = [0, 0],
     extra_017 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_003;
       for(;;){
        if(! param) break;
        var sexp_002$0 = param[1];
        if(1 !== sexp_002$0[0]) break b;
        var _aF_ = sexp_002$0[1];
        if(! _aF_) break c;
        var _aG_ = _aF_[1];
        if(0 !== _aG_[0]) break e;
        var field_sexps_020 = _aF_[2], field_name_018 = _aG_[1];
        if(field_sexps_020 && field_sexps_020[2]) break d;
        var tail_029 = param[2];
        let field_sexps_020$0 = field_sexps_020;
        var
         field_sexp_019 =
           function(param){
            if(! field_sexps_020$0)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[10], error_source_027, sexp_002);
            if(field_sexps_020$0[2])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
            var x_030 = field_sexps_020$0[1];
            return x_030;
           };
        if(field_name_018 !== cst_e$0)
         if(field_name_018 !== cst_lam_input$0)
          if(field_name_018 !== cst_lit_input$0)
           if(field_name_018 !== cst_t$0)
            if(field_name_018 !== cst_var_input$0)
             if(field_name_018 !== cst_warning$0){
              if(Sexplib0_Sexp_conv[26][1])
               extra_017[1] = [0, field_name_018, extra_017[1]];
             }
             else if(warning_008[1])
              duplicates_016[1] = [0, field_name_018, duplicates_016[1]];
             else{
              var
               field_sexp_019$0 = field_sexp_019(0),
               fvalue_024 = caml_call2(Core[455], Core[472], field_sexp_019$0);
              warning_008[1] = [0, fvalue_024];
             }
            else if(var_input_010[1])
             duplicates_016[1] = [0, field_name_018, duplicates_016[1]];
            else{
             var
              field_sexp_019$1 = field_sexp_019(0),
              fvalue_023 = caml_call1(Core[472], field_sexp_019$1);
             var_input_010[1] = [0, fvalue_023];
            }
           else if(t_006[1])
            duplicates_016[1] = [0, field_name_018, duplicates_016[1]];
           else{
            var
             field_sexp_019$2 = field_sexp_019(0),
             fvalue_025 =
               caml_call1(Hazelnut_lib_Hazelnut[1][1], field_sexp_019$2);
            t_006[1] = [0, fvalue_025];
           }
          else if(lit_input_014[1])
           duplicates_016[1] = [0, field_name_018, duplicates_016[1]];
          else{
           var
            field_sexp_019$3 = field_sexp_019(0),
            fvalue_021 = caml_call1(Core[472], field_sexp_019$3);
           lit_input_014[1] = [0, fvalue_021];
          }
         else if(lam_input_012[1])
          duplicates_016[1] = [0, field_name_018, duplicates_016[1]];
         else{
          var
           field_sexp_019$4 = field_sexp_019(0),
           fvalue_022 = caml_call1(Core[472], field_sexp_019$4);
          lam_input_012[1] = [0, fvalue_022];
         }
        else if(e_004[1])
         duplicates_016[1] = [0, field_name_018, duplicates_016[1]];
        else{
         var
          field_sexp_019$5 = field_sexp_019(0),
          fvalue_026 =
            caml_call1(Hazelnut_lib_Hazelnut[4][1], field_sexp_019$5);
         e_004[1] = [0, fvalue_026];
        }
        param = tail_029;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_027, sexp_002$0);
    }
    if(duplicates_016[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_027,
              duplicates_016[1],
              sexp_002);
    if(extra_017[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_027,
              extra_017[1],
              sexp_002);
    var
     _aH_ = e_004[1],
     _aI_ = t_006[1],
     _aJ_ = warning_008[1],
     _aK_ = var_input_010[1],
     _aL_ = lam_input_012[1],
     match = lit_input_014[1];
    if(_aH_ && _aI_ && _aJ_ && _aK_ && _aL_ && match){
     var
      lit_input_015 = match[1],
      lam_input_013 = _aL_[1],
      var_input_011 = _aK_[1],
      warning_009 = _aJ_[1],
      t_007 = _aI_[1],
      e_005 = _aH_[1];
     return [0,
             e_005,
             t_007,
             warning_009,
             var_input_011,
             lam_input_013,
             lit_input_015];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_027,
             sexp_002,
             [0,
              [0, 0 === e_004[1] ? 1 : 0, cst_e],
              [0,
               [0, 0 === t_006[1] ? 1 : 0, cst_t],
               [0,
                [0, 0 === warning_008[1] ? 1 : 0, cst_warning],
                [0,
                 [0, 0 === var_input_010[1] ? 1 : 0, cst_var_input],
                 [0,
                  [0, 0 === lam_input_012[1] ? 1 : 0, cst_lam_input],
                  [0, [0, 0 === lit_input_014[1] ? 1 : 0, cst_lit_input], 0]]]]]]);
   }
   function t_of_sexp(sexp_049){
    if(0 === sexp_049[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_059, sexp_049);
    var
     field_sexps_050 = sexp_049[1],
     state_051 = [0, 0],
     duplicates_053 = [0, 0],
     extra_054 = [0, 0],
     param = field_sexps_050;
    for(;;){
     if(param){
      var sexp_049$0 = param[1];
      if(1 === sexp_049$0[0]){
       var _aD_ = sexp_049$0[1];
       a:
       if(_aD_){
        var _aE_ = _aD_[1];
        if(0 === _aE_[0]){
         var field_sexps_057 = _aD_[2], field_name_055 = _aE_[1];
         if(field_sexps_057 && field_sexps_057[2]) break a;
         var tail_061 = param[2];
         if(field_name_055 !== cst_state$0){
          if(Sexplib0_Sexp_conv[26][1])
           extra_054[1] = [0, field_name_055, extra_054[1]];
         }
         else if(state_051[1])
          duplicates_053[1] = [0, field_name_055, duplicates_053[1]];
         else{
          if(field_sexps_057){
           if(field_sexps_057[2])
            throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
           var x_062 = field_sexps_057[1], field_sexp_056 = x_062;
          }
          else
           var
            field_sexp_056 =
              caml_call2
               (Sexplib0_Sexp_conv_error[10], error_source_059, sexp_049);
          var fvalue_058 = state_of_sexp(field_sexp_056);
          state_051[1] = [0, fvalue_058];
         }
         param = tail_061;
         continue;
        }
       }
      }
      caml_call2(Sexplib0_Sexp_conv_error[10], error_source_059, sexp_049$0);
     }
     if(duplicates_053[1])
      return caml_call3
              (Sexplib0_Sexp_conv_error[12],
               error_source_059,
               duplicates_053[1],
               sexp_049);
     if(extra_054[1])
      return caml_call3
              (Sexplib0_Sexp_conv_error[13],
               error_source_059,
               extra_054[1],
               sexp_049);
     var match = state_051[1];
     if(! match)
      return caml_call3
              (Sexplib0_Sexp_conv_error[15],
               error_source_059,
               sexp_049,
               [0, [0, 0 === state_051[1] ? 1 : 0, cst_state], 0]);
     var state_052 = match[1];
     return [0, state_052];
    }
   }
   function sexp_of_t(param){
    var
     state_064 = param[1],
     lit_input_042 = state_064[6],
     lam_input_040 = state_064[5],
     var_input_038 = state_064[4],
     warning_036 = state_064[3],
     t_034 = state_064[2],
     e_032 = state_064[1],
     arg_043 = caml_call1(Core[471], lit_input_042),
     bnds_031 = [0, [1, [0, _c_, [0, arg_043, 0]]], 0],
     arg_041 = caml_call1(Core[471], lam_input_040),
     bnds_031$0 = [0, [1, [0, _d_, [0, arg_041, 0]]], bnds_031],
     arg_039 = caml_call1(Core[471], var_input_038),
     bnds_031$1 = [0, [1, [0, _e_, [0, arg_039, 0]]], bnds_031$0],
     arg_037 = caml_call2(Core[454], Core[471], warning_036),
     bnds_031$2 = [0, [1, [0, _f_, [0, arg_037, 0]]], bnds_031$1],
     arg_035 = caml_call1(Hazelnut_lib_Hazelnut[1][2], t_034),
     bnds_031$3 = [0, [1, [0, _g_, [0, arg_035, 0]]], bnds_031$2],
     arg_033 = caml_call1(Hazelnut_lib_Hazelnut[4][2], e_032),
     bnds_031$4 = [0, [1, [0, _h_, [0, arg_033, 0]]], bnds_031$3],
     arg_065 = [1, bnds_031$4],
     bnds_063 = [0, [1, [0, _j_, [0, arg_065, 0]]], 0];
    return [1, bnds_063];
   }
   function state(r){return r[1];}
   function cutoff(a_066, b_067){
    var _aB_ = 0;
    if(caml_call2(Ppx_compare_lib[1], a_066, b_067))
     var _aC_ = 0;
    else{
     var b_045 = b_067[1], a_044 = a_066[1];
     if(caml_call2(Ppx_compare_lib[1], a_044, b_045))
      var _aC_ = 0;
     else{
      var n = caml_call2(Hazelnut_lib_Hazelnut[4][3], a_044[1], b_045[1]);
      if(0 === n){
       var n$0 = caml_call2(Hazelnut_lib_Hazelnut[1][3], a_044[2], b_045[2]);
       if(0 === n$0){
        var
         n$1 =
           caml_call3
            (Core[451],
             function(a_046, b_047){
              return caml_call2(Core[467], a_046, b_047);
             },
             a_044[3],
             b_045[3]);
        if(0 === n$1){
         var n$2 = caml_call2(Core[467], a_044[4], b_045[4]);
         if(0 === n$2)
          var
           n$3 = caml_call2(Core[467], a_044[5], b_045[5]),
           _aC_ = 0 === n$3 ? caml_call2(Core[467], a_044[6], b_045[6]) : n$3;
         else
          var _aC_ = n$2;
        }
        else
         var _aC_ = n$1;
       }
       else
        var _aC_ = n$0;
      }
      else
       var _aC_ = n;
     }
    }
    return caml_call2(Core[90], _aC_, _aB_);
   }
   function sexp_of_action(param){
    switch(param[0]){
      case 0:
       var
        arg0_093 = param[1],
        res0_094 = caml_call1(Hazelnut_lib_Hazelnut[8][2], arg0_093);
       return [1, [0, _n_, [0, res0_094, 0]]];
      case 1:
       var arg1_096 = param[2], arg0_095 = param[1];
       switch(arg0_095){
         case 0:
          var res0_097 = _k_; break;
         case 1:
          var res0_097 = _l_; break;
         default: var res0_097 = _m_;
       }
       var res1_098 = caml_call1(Core[471], arg1_096);
       return [1, [0, _o_, [0, res0_097, [0, res1_098, 0]]]];
      default:
       var arg0_099 = param[1], res0_100 = caml_call1(Core[471], arg0_099);
       return [1, [0, _p_, [0, res0_100, 0]]];
    }
   }
   function sexp_of_t$0(x_103){
    return caml_call2(Core[421], sexp_of_action, x_103);
   }
   var
    State = [0],
    _a_ = [0, "Theorem 2 violation (movement erasure invariance)"],
    cst_Unimplemented = "Unimplemented",
    cst_Invalid_action = "Invalid action",
    _q_ = [0, [2, 0, 0], cst_s],
    _r_ = [0, [2, 0, 0], cst_s],
    cst_value = "value",
    cst_text = "text",
    _s_ = [0, [0, [0, 1]]],
    cst_Move_to_Child_2 = "Move to Child 2",
    _t_ = [0, [0, [0, 0]]],
    cst_Move_to_Child_1 = "Move to Child 1",
    _u_ = [0, [0, 0]],
    cst_Move_to_Parent = "Move to Parent",
    _v_ = [0, [1, 5]],
    cst_Construct_NEHole = "Construct NEHole",
    _w_ = [0, [1, 4]],
    cst_Construct_Plus = "Construct Plus",
    _x_ = [2, "Invalid input"],
    cst_Construct_Lit = "Construct Lit",
    _y_ = [0, [1, 3]],
    cst_Construct_Ap = "Construct Ap",
    cst_Construct_Lam = "Construct Lam",
    cst_Construct_Var = "Construct Var",
    _z_ = [0, [1, 2]],
    cst_Construct_Asc = "Construct Asc",
    _A_ = [0, [1, 1]],
    cst_Construct_Num = "Construct Num",
    _B_ = [0, [1, 0]],
    cst_Construct_Arrow = "Construct Arrow",
    _C_ = [0, 0],
    cst_Delete = "Delete",
    _D_ = [0, 1],
    cst_Finish = "Finish";
   function on_startup(param, _aA_){return caml_call1(Async_kernel[19], 0);}
   function create(model, param, inject){
    var
     let_syntax_106 =
       caml_call2
        (Incr_dom_Incr[78][4][6],
         model,
         function(model){
          return function(actions, _ao_, _ap_){
           function f(model, action){
            var state = model[1];
            function warn(warning){
             var
              s =
                [0,
                 state[1],
                 state[2],
                 [0, warning],
                 state[4],
                 state[5],
                 state[6]];
             return [0, s];
            }
            switch(action[0]){
              case 0:
               var action$0 = action[1];
               try{
                var
                 result =
                   caml_call3
                    (Hazelnut_lib_Hazelnut[14],
                     Hazelnut_lib_Hazelnut[9][1],
                     [0, state[1], state[2]],
                     action$0);
                if(result){
                 var
                  match$0 = result[1],
                  t = match$0[2],
                  e$1 = match$0[1],
                  new_state = [0, e$1, t, 0, state[4], state[5], state[6]],
                  t$0 = state[2],
                  e$2 = state[1];
                 try{
                  var
                   e = caml_call1(Hazelnut_lib_Hazelnut[11], e$2),
                   e$0 = caml_call1(Hazelnut_lib_Hazelnut[11], e$1),
                   match =
                     caml_call2
                      (Hazelnut_lib_Hazelnut[12],
                       Hazelnut_lib_Hazelnut[9][1],
                       e$0);
                  if(match)
                   var
                    syn_t = match[1],
                    _ar_ = caml_call2(Hazelnut_lib_Hazelnut[1][3], t, syn_t),
                    _as_ = caml_call2(Core[90], _ar_, 0) ? 0 : warning,
                    theorem_1 = _as_;
                  else
                   var theorem_1 = warning;
                  a:
                  {
                   if(typeof action$0 !== "number" && 0 === action$0[0]){
                    var _at_ = caml_call2(Hazelnut_lib_Hazelnut[2][3], e, e$0);
                    if(caml_call2(Core[90], _at_, 0)){
                     var _au_ = caml_call2(Hazelnut_lib_Hazelnut[1][3], t$0, t);
                     if(caml_call2(Core[90], _au_, 0)){var theorem_2 = 0; break a;}
                    }
                    var theorem_2 = _a_;
                    break a;
                   }
                   var theorem_2 = 0;
                  }
                  a:
                  {
                   if(theorem_1)
                    var warning$0 = theorem_1;
                   else{
                    if(! theorem_2){var warning$1 = 0; break a;}
                    var warning$0 = theorem_2;
                   }
                   var warning$1 = warning$0;
                  }
                  var violation = warning$1;
                 }
                 catch(_az_){
                  var _aq_ = caml_wrap_exception(_az_);
                  if(_aq_ !== Hazelnut_lib_Hazelnut[10])
                   throw caml_maybe_attach_backtrace(_aq_, 0);
                  var violation = 0;
                 }
                 if(violation)
                  var
                   s =
                     [0,
                      new_state[1],
                      new_state[2],
                      violation,
                      new_state[4],
                      new_state[5],
                      new_state[6]],
                   _aw_ = [0, s];
                 else
                  var _aw_ = [0, new_state];
                 var _ax_ = _aw_;
                }
                else
                 var _ax_ = warn(cst_Invalid_action);
                return _ax_;
               }
               catch(_ay_){
                var _av_ = caml_wrap_exception(_ay_);
                if(_av_ === Hazelnut_lib_Hazelnut[10])
                 return warn(cst_Unimplemented);
                throw caml_maybe_attach_backtrace(_av_, 0);
               }
              case 1:
               switch(action[1]){
                 case 0:
                  var
                   var_input = action[2],
                   s$0 =
                     [0,
                      state[1],
                      state[2],
                      state[3],
                      var_input,
                      state[5],
                      state[6]];
                  return [0, s$0];
                 case 1:
                  var
                   lam_input = action[2],
                   s$1 =
                     [0,
                      state[1],
                      state[2],
                      state[3],
                      state[4],
                      lam_input,
                      state[6]];
                  return [0, s$1];
                 default:
                  var
                   lit_input = action[2],
                   s$2 =
                     [0,
                      state[1],
                      state[2],
                      state[3],
                      state[4],
                      state[5],
                      lit_input];
                  return [0, s$2];
               }
              default:
               var
                warning$2 = action[1],
                s$3 =
                  [0,
                   state[1],
                   state[2],
                   [0, warning$2],
                   state[4],
                   state[5],
                   state[6]];
               return [0, s$3];
            }
           }
           return caml_call3(Core_List[87], actions, model, f);};
         }),
     _E_ = caml_call2(Incr_dom_Incr[78][2], model, state),
     _F_ =
       caml_call2
        (Incr_dom_Incr[78][4][6],
         _E_,
         function(state){
          var
           _I_ = string_of_pexp(pexp_of_htyp(state[2])),
           _J_ = [0, caml_call2(Virtual_dom_Node[6], _q_, _I_), 0],
           _K_ = [0, caml_call3(Virtual_dom_Node[29], 0, 0, _J_), 0],
           _L_ = string_of_pexp(pexp_of_zexp(state[1])),
           _M_ = [0, caml_call2(Virtual_dom_Node[6], _r_, _L_), 0],
           _N_ = [0, caml_call3(Virtual_dom_Node[29], 0, 0, _M_), _K_],
           expression = caml_call3(Virtual_dom_Node[11], 0, 0, _N_);
          function button(label, action, input){
           if(input)
            var
             input_location = input[1][1],
             actions = [0, action, [0, [1, input_location, cst$13], 0]];
           else
            var actions = [0, action, 0];
           var
            _ag_ = [0, caml_call1(Virtual_dom_Node[5], label), 0],
            _ah_ =
              [0,
               caml_call1
                (Virtual_dom_Vdom[1][47],
                 function(ev){return caml_call1(inject, actions);}),
               0],
            _ai_ = [0, caml_call1(Virtual_dom_Vdom[1][9], _ah_)],
            button_node = caml_call3(Virtual_dom_Node[9], 0, _ai_, _ag_),
            input_node =
              caml_call2
               (Monad_lib_Monad[2],
                input,
                function(param){
                 var
                  input_value = param[2],
                  input_location = param[1],
                  _ak_ =
                    [0,
                     caml_call1
                      (Virtual_dom_Vdom[1][44],
                       function(ev, text){
                        return caml_call1(inject, [0, [1, input_location, text], 0]);
                       }),
                     0],
                  _al_ =
                    [0,
                     caml_call2(Virtual_dom_Vdom[1][3], cst_value, input_value),
                     _ak_],
                  _am_ =
                    [0, caml_call1(Virtual_dom_Vdom[1][35], cst_text), _al_],
                  _an_ = [0, caml_call1(Virtual_dom_Vdom[1][9], _am_)];
                 return caml_call3(Virtual_dom_Node[23], 0, _an_, 0);
                });
           if(input_node)
            var
             input_node$0 = input_node[1],
             _aj_ = [0, button_node, [0, input_node$0, 0]];
           else
            var _aj_ = [0, button_node, 0];
           return caml_call3(Virtual_dom_Node[11], 0, 0, _aj_);
          }
          var
           _O_ = [0, button(cst_Move_to_Child_2, _s_, 0), 0],
           _P_ = [0, button(cst_Move_to_Child_1, _t_, 0), _O_],
           _Q_ = [0, button(cst_Move_to_Parent, _u_, 0), _P_],
           move_buttons = caml_call3(Virtual_dom_Node[11], 0, 0, _Q_),
           _R_ = [0, button(cst_Construct_NEHole, _v_, 0), 0],
           _S_ = [0, button(cst_Construct_Plus, _w_, 0), _R_],
           _T_ = [0, [0, 2, state[6]]];
          try{
           var
            _ae_ = [0, [1, [2, runtime.caml_int_of_string(state[6])]]],
            _V_ = _ae_;
          }
          catch(_af_){
           var _U_ = caml_wrap_exception(_af_);
           if(_U_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_U_, 0);
           var _V_ = _x_;
          }
          var
           _W_ = [0, button(cst_Construct_Lit, _V_, _T_), _S_],
           _X_ = [0, button(cst_Construct_Ap, _y_, 0), _W_],
           _Y_ =
             [0,
              button
               (cst_Construct_Lam,
                [0, [1, [1, state[5]]]],
                [0, [0, 1, state[5]]]),
              _X_],
           _Z_ =
             [0,
              button
               (cst_Construct_Var,
                [0, [1, [0, state[4]]]],
                [0, [0, 0, state[4]]]),
              _Y_],
           ___ = [0, button(cst_Construct_Asc, _z_, 0), _Z_],
           _$_ = [0, button(cst_Construct_Num, _A_, 0), ___],
           _aa_ = [0, button(cst_Construct_Arrow, _B_, 0), _$_],
           construct_buttons = caml_call3(Virtual_dom_Node[11], 0, 0, _aa_),
           _ab_ = [0, button(cst_Delete, _C_, 0), 0],
           delete_button = caml_call3(Virtual_dom_Node[11], 0, 0, _ab_),
           _ac_ = [0, button(cst_Finish, _D_, 0), 0],
           finish_button = caml_call3(Virtual_dom_Node[11], 0, 0, _ac_),
           buttons =
             caml_call3
              (Virtual_dom_Node[11],
               0,
               0,
               [0,
                move_buttons,
                [0,
                 construct_buttons,
                 [0, delete_button, [0, finish_button, 0]]]]),
           match = state[3];
          if(match)
           var
            warning = match[1],
            _ad_ = [0, caml_call1(Virtual_dom_Node[5], warning), 0];
          else
           var _ad_ = 0;
          var warning$0 = caml_call3(Virtual_dom_Node[29], 0, 0, _ad_);
          return caml_call3
                  (Virtual_dom_Node[11],
                   0,
                   0,
                   [0, expression, [0, buttons, [0, warning$0, 0]]]);
         }),
     let_syntax_107 =
       caml_call2
        (Incr_dom_Incr[78][4][6],
         _F_,
         function(body){
          return caml_call3(Virtual_dom_Node[8], 0, 0, [0, body, 0]);
         }),
     _G_ = caml_call2(Incr_dom_Incr[78][4][21], let_syntax_107, model),
     _H_ = caml_call2(Incr_dom_Incr[78][4][21], let_syntax_106, _G_);
    return caml_call2
            (Incr_dom_Incr[78][4][6],
             _H_,
             function(param){
              var
               match = param[2],
               model = match[2],
               view = match[1],
               apply_action = param[1];
              return caml_call5
                      (Incr_dom_Component[6],
                       [0, apply_action],
                       0,
                       0,
                       model,
                       view);
             });
   }
   var initial_model = [0, s];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_app_lib);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   var
    App_lib_App =
      [0,
       [0, t_of_sexp, sexp_of_t, cutoff],
       [0, sexp_of_t$0],
       State,
       on_startup,
       create,
       initial_model];
   runtime.caml_register_global(140, App_lib_App, "App_lib__App");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
