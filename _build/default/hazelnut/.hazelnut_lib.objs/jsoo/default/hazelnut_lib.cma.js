// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Hazelnut_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Hazelnut_lib = [0];
   runtime.caml_register_global(0, Hazelnut_lib, "Hazelnut_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Hazelnut_lib__Hazelnut
//# unitInfo: Requires: Expect_test_collector, Monad_lib__Monad, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Sexplib0__Sexp_conv_error, Sexplib__Std, Stdlib__Int, Stdlib__Map, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ap = "Ap",
    cst_Arrow = "Arrow",
    cst_Asc = "Asc",
    cst_Child = "Child",
    cst_Construct = "Construct",
    cst_Cursor = "Cursor",
    cst_Del = "Del",
    cst_EHole = "EHole",
    cst_Finish = "Finish",
    cst_Hole = "Hole",
    cst_LAp = "LAp",
    cst_LArrow = "LArrow",
    cst_LAsc = "LAsc",
    cst_LPlus = "LPlus",
    cst_Lam = "Lam",
    cst_Lit = "Lit",
    cst_Move = "Move",
    cst_NEHole = "NEHole",
    cst_Num = "Num",
    cst_One = "One",
    cst_Parent = "Parent",
    cst_Plus = "Plus",
    cst_RAp = "RAp",
    cst_RArrow = "RArrow",
    cst_RAsc = "RAsc",
    cst_RPlus = "RPlus",
    cst_Two = "Two",
    cst_Var = "Var",
    cst_ap = "ap",
    cst_arrow = "arrow",
    cst_asc = "asc",
    cst_child = "child",
    cst_construct = "construct",
    cst_cursor = "cursor",
    cst_del = "del",
    cst_eHole = "eHole",
    cst_finish = "finish",
    cst_hazelnut_lib = "hazelnut_lib",
    cst_hole = "hole",
    cst_lAp = "lAp",
    cst_lArrow = "lArrow",
    cst_lAsc = "lAsc",
    cst_lPlus = "lPlus",
    cst_lam = "lam",
    cst_lit = "lit",
    cst_move = "move",
    cst_nEHole = "nEHole",
    cst_num = "num",
    cst_one = "one",
    cst_parent = "parent",
    cst_plus = "plus",
    cst_rAp = "rAp",
    cst_rArrow = "rArrow",
    cst_rAsc = "rAsc",
    cst_rPlus = "rPlus",
    cst_two = "two",
    cst_var = "var",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    error_source_003 = "hazelnut/hazelnut.re.Htyp.t",
    error_source_024 = "hazelnut/hazelnut.re.Hexp.t",
    error_source_117 = "hazelnut/hazelnut.re.Ztyp.t",
    error_source_162 = "hazelnut/hazelnut.re.Zexp.t",
    error_source_291 = "hazelnut/hazelnut.re.Child.t",
    error_source_297 = "hazelnut/hazelnut.re.Dir.t",
    error_source_312 = "hazelnut/hazelnut.re.Shape.t",
    error_source_345 = "hazelnut/hazelnut.re.Action.t",
    Monad_lib_Monad = global_data.Monad_lib__Monad,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Sexplib_Std = global_data.Sexplib__Std,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Map = global_data.Stdlib__Map;
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_hazelnut_lib);
   caml_call1(Expect_test_collector[5][1], "hazelnut/hazelnut.re");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_hazelnut_lib, cst);
   var
    compare_string = Stdlib_String[9],
    compare_int = Stdlib_Int[9],
    t_of_sexp = function _aW_(_aV_){return _aW_.fun(_aV_);};
   caml_update_dummy
    (t_of_sexp,
     function(sexp_005){
      a:
      {
       if(0 === sexp_005[0]){
        var _aR_ = sexp_005[1];
        b:
        if(_aR_ !== cst_Arrow){
         c:
         if(_aR_ !== cst_Hole){
          if(_aR_ !== cst_Num){
           if(_aR_ === cst_arrow) break b;
           if(_aR_ === cst_hole) break c;
           if(_aR_ !== cst_num) break a;
          }
          return 0;
         }
         return 1;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
       }
       var _aS_ = sexp_005[1];
       if(! _aS_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
       var _aT_ = _aS_[1];
       if(0 !== _aT_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_005);
       var tag_006 = _aT_[1];
       b:
       if(tag_006 !== cst_Arrow){
        c:
        if(tag_006 !== cst_Hole){
         if(tag_006 !== cst_Num){
          if(tag_006 === cst_arrow) break b;
          if(tag_006 === cst_hole) break c;
          if(tag_006 !== cst_num) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
       }
       var sexp_args_007 = _aS_[2];
       if(sexp_args_007){
        var _aU_ = sexp_args_007[2];
        if(_aU_ && ! _aU_[2]){
         var
          arg1_009 = _aU_[1],
          arg0_008 = sexp_args_007[1],
          res0_010 = caml_call1(t_of_sexp, arg0_008),
          res1_011 = caml_call1(t_of_sexp, arg1_009);
         return [0, res0_010, res1_011];
        }
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_003,
                tag_006,
                sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[8], error_source_003, sexp_005);
     });
   var _a_ = [0, cst_Hole], _b_ = [0, cst_Num], _c_ = [0, cst_Arrow];
   function sexp_of_t(param){
    if(typeof param === "number") return param ? _a_ : _b_;
    var
     arg1_013 = param[2],
     arg0_012 = param[1],
     res0_014 = sexp_of_t(arg0_012),
     res1_015 = sexp_of_t(arg1_013);
    return [1, [0, _c_, [0, res0_014, [0, res1_015, 0]]]];
   }
   function compare(a_016, b_017){
    var a_016$0 = a_016, b_017$0 = b_017;
    for(;;){
     if(caml_call2(Ppx_compare_lib[1], a_016$0, b_017$0)) return 0;
     if(typeof a_016$0 === "number"){
      if(a_016$0){
       if(typeof b_017$0 === "number") return b_017$0 ? 0 : 1;
      }
      else if(typeof b_017$0 === "number") return b_017$0 ? -1 : 0;
      return 1;
     }
     var a_018 = a_016$0[1];
     if(typeof b_017$0 === "number") return -1;
     var
      b_021 = b_017$0[2],
      b_019 = b_017$0[1],
      a_020 = a_016$0[2],
      n = compare(a_018, b_019);
     if(0 !== n) return n;
     a_016$0 = a_020;
     b_017$0 = b_021;
    }
   }
   var
    Htyp = [0, t_of_sexp, sexp_of_t, compare],
    t_of_sexp$0 = function _aQ_(_aP_){return _aQ_.fun(_aP_);};
   caml_update_dummy
    (t_of_sexp$0,
     function(sexp_026){
      a:
      {
       if(0 === sexp_026[0]){
        var _aG_ = sexp_026[1], _aH_ = caml_string_compare(_aG_, cst_ap);
        b:
        {
         c:
         {
          d:
          {
           e:
           {
            f:
            {
             g:
             {
              h:
              {
               if(0 <= _aH_){
                if(0 < _aH_){
                 if(_aG_ === cst_asc) break h;
                 if(_aG_ === cst_eHole) break g;
                 if(_aG_ === cst_lam) break f;
                 if(_aG_ === cst_lit) break e;
                 if(_aG_ === cst_nEHole) break d;
                 if(_aG_ === cst_plus) break c;
                 if(_aG_ !== cst_var) break a;
                 break b;
                }
               }
               else if(_aG_ !== cst_Ap){
                if(_aG_ === cst_Asc) break h;
                if(_aG_ === cst_EHole) break g;
                if(_aG_ === cst_Lam) break f;
                if(_aG_ === cst_Lit) break e;
                if(_aG_ === cst_NEHole) break d;
                if(_aG_ === cst_Plus) break c;
                if(_aG_ !== cst_Var) break a;
                break b;
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
             }
             return 0;
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_024, sexp_026);
       }
       var _aI_ = sexp_026[1];
       if(! _aI_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_024, sexp_026);
       var _aJ_ = _aI_[1];
       if(0 !== _aJ_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[6], error_source_024, sexp_026);
       var tag_027 = _aJ_[1], _aK_ = caml_string_compare(tag_027, cst_ap);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              if(0 <= _aK_){
               if(0 < _aK_){
                if(tag_027 === cst_asc) break h;
                if(tag_027 === cst_eHole) break g;
                if(tag_027 === cst_lam) break f;
                if(tag_027 === cst_lit) break e;
                if(tag_027 === cst_nEHole) break d;
                if(tag_027 === cst_plus) break c;
                if(tag_027 !== cst_var) break a;
                break b;
               }
              }
              else if(tag_027 !== cst_Ap){
               if(tag_027 === cst_Asc) break h;
               if(tag_027 === cst_EHole) break g;
               if(tag_027 === cst_Lam) break f;
               if(tag_027 === cst_Lit) break e;
               if(tag_027 === cst_NEHole) break d;
               if(tag_027 === cst_Plus) break c;
               if(tag_027 !== cst_Var) break a;
               break b;
              }
              var sexp_args_040 = _aI_[2];
              if(sexp_args_040){
               var _aO_ = sexp_args_040[2];
               if(_aO_ && ! _aO_[2]){
                var
                 arg1_042 = _aO_[1],
                 arg0_041 = sexp_args_040[1],
                 res0_043 = caml_call1(t_of_sexp$0, arg0_041),
                 res1_044 = caml_call1(t_of_sexp$0, arg1_042);
                return [2, res0_043, res1_044];
               }
              }
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_024,
                       tag_027,
                       sexp_026);
             }
             var sexp_args_059 = _aI_[2];
             if(sexp_args_059){
              var _aN_ = sexp_args_059[2];
              if(_aN_ && ! _aN_[2]){
               var
                arg1_061 = _aN_[1],
                arg0_060 = sexp_args_059[1],
                res0_062 = caml_call1(t_of_sexp$0, arg0_060),
                res1_063 = caml_call1(Htyp[1], arg1_061);
               return [5, res0_062, res1_063];
              }
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_024,
                      tag_027,
                      sexp_026);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_024, sexp_026);
           }
           var sexp_args_033 = _aI_[2];
           if(sexp_args_033){
            var _aM_ = sexp_args_033[2];
            if(_aM_ && ! _aM_[2]){
             var
              arg1_035 = _aM_[1],
              arg0_034 = sexp_args_033[1],
              res0_036 = caml_call1(Sexplib_Std[10], arg0_034),
              res1_037 = caml_call1(t_of_sexp$0, arg1_035);
             return [1, res0_036, res1_037];
            }
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_024,
                    tag_027,
                    sexp_026);
          }
          var sexp_args_047 = _aI_[2];
          if(sexp_args_047 && ! sexp_args_047[2]){
           var
            arg0_048 = sexp_args_047[1],
            res0_049 = caml_call1(Sexplib_Std[16], arg0_048);
           return [3, res0_049];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_024,
                   tag_027,
                   sexp_026);
         }
         var sexp_args_066 = _aI_[2];
         if(sexp_args_066 && ! sexp_args_066[2]){
          var
           arg0_067 = sexp_args_066[1],
           res0_068 = caml_call1(t_of_sexp$0, arg0_067);
          return [6, res0_068];
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_024,
                  tag_027,
                  sexp_026);
        }
        var sexp_args_052 = _aI_[2];
        if(sexp_args_052){
         var _aL_ = sexp_args_052[2];
         if(_aL_ && ! _aL_[2]){
          var
           arg1_054 = _aL_[1],
           arg0_053 = sexp_args_052[1],
           res0_055 = caml_call1(t_of_sexp$0, arg0_053),
           res1_056 = caml_call1(t_of_sexp$0, arg1_054);
          return [4, res0_055, res1_056];
         }
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_024,
                 tag_027,
                 sexp_026);
       }
       var sexp_args_028 = _aI_[2];
       if(sexp_args_028 && ! sexp_args_028[2]){
        var
         arg0_029 = sexp_args_028[1],
         res0_030 = caml_call1(Sexplib_Std[10], arg0_029);
        return [0, res0_030];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_024,
                tag_027,
                sexp_026);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[8], error_source_024, sexp_026);
     });
   var
    _d_ = [0, cst_EHole],
    _e_ = [0, cst_Var],
    _f_ = [0, cst_Lam],
    _g_ = [0, cst_Ap],
    _h_ = [0, cst_Lit],
    _i_ = [0, cst_Plus],
    _j_ = [0, cst_Asc],
    _k_ = [0, cst_NEHole];
   function sexp_of_t$0(param){
    if(typeof param === "number") return _d_;
    switch(param[0]){
      case 0:
       var
        arg0_069 = param[1],
        res0_070 = caml_call1(Sexplib_Std[9], arg0_069);
       return [1, [0, _e_, [0, res0_070, 0]]];
      case 1:
       var
        arg1_072 = param[2],
        arg0_071 = param[1],
        res0_073 = caml_call1(Sexplib_Std[9], arg0_071),
        res1_074 = sexp_of_t$0(arg1_072);
       return [1, [0, _f_, [0, res0_073, [0, res1_074, 0]]]];
      case 2:
       var
        arg1_076 = param[2],
        arg0_075 = param[1],
        res0_077 = sexp_of_t$0(arg0_075),
        res1_078 = sexp_of_t$0(arg1_076);
       return [1, [0, _g_, [0, res0_077, [0, res1_078, 0]]]];
      case 3:
       var
        arg0_079 = param[1],
        res0_080 = caml_call1(Sexplib_Std[15], arg0_079);
       return [1, [0, _h_, [0, res0_080, 0]]];
      case 4:
       var
        arg1_082 = param[2],
        arg0_081 = param[1],
        res0_083 = sexp_of_t$0(arg0_081),
        res1_084 = sexp_of_t$0(arg1_082);
       return [1, [0, _i_, [0, res0_083, [0, res1_084, 0]]]];
      case 5:
       var
        arg1_086 = param[2],
        arg0_085 = param[1],
        res0_087 = sexp_of_t$0(arg0_085),
        res1_088 = caml_call1(Htyp[2], arg1_086);
       return [1, [0, _j_, [0, res0_087, [0, res1_088, 0]]]];
      default:
       var arg0_089 = param[1], res0_090 = sexp_of_t$0(arg0_089);
       return [1, [0, _k_, [0, res0_090, 0]]];
    }
   }
   function compare$0(a_091, b_092){
    var a_091$0 = a_091, b_092$0 = b_092;
    for(;;){
     if(caml_call2(Ppx_compare_lib[1], a_091$0, b_092$0)) return 0;
     a:
     {
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          if(typeof a_091$0 === "number"){
           if(typeof b_092$0 === "number") return 0;
           switch(b_092$0[0]){
             case 6:
              return -1;
             case 0:
              break a;
             case 1:
              break b;
             case 2:
              break c;
             case 3:
              break d;
             case 4:
              break e;
           }
          }
          else
           switch(a_091$0[0]){
             case 0:
              var a_093 = a_091$0[1];
              if(typeof b_092$0 !== "number" && 0 === b_092$0[0]){
               var b_094 = b_092$0[1];
               return caml_call2(compare_string, a_093, b_094);
              }
              return -1;
             case 1:
              var a_097 = a_091$0[2], a_095 = a_091$0[1];
              if(typeof b_092$0 !== "number")
               switch(b_092$0[0]){
                 case 0:
                  break a;
                 case 1:
                  var
                   b_098 = b_092$0[2],
                   b_096 = b_092$0[1],
                   n = caml_call2(compare_string, a_095, b_096);
                  if(0 !== n) return n;
                  a_091$0 = a_097;
                  b_092$0 = b_098;
                  continue;
               }
              return -1;
             case 2:
              var a_101 = a_091$0[2], a_099 = a_091$0[1];
              if(typeof b_092$0 !== "number")
               switch(b_092$0[0]){
                 case 0:
                  break a;
                 case 1:
                  break b;
                 case 2:
                  var
                   b_102 = b_092$0[2],
                   b_100 = b_092$0[1],
                   n$0 = compare$0(a_099, b_100);
                  if(0 !== n$0) return n$0;
                  a_091$0 = a_101;
                  b_092$0 = b_102;
                  continue;
               }
              return -1;
             case 3:
              var a_103 = a_091$0[1];
              if(typeof b_092$0 !== "number")
               switch(b_092$0[0]){
                 case 0:
                  break a;
                 case 1:
                  break b;
                 case 2:
                  break c;
                 case 3:
                  var b_104 = b_092$0[1];
                  return caml_call2(compare_int, a_103, b_104);
               }
              return -1;
             case 4:
              var a_107 = a_091$0[2], a_105 = a_091$0[1];
              if(typeof b_092$0 !== "number")
               switch(b_092$0[0]){
                 case 0:
                  break a;
                 case 1:
                  break b;
                 case 2:
                  break c;
                 case 3:
                  break d;
                 case 4:
                  var
                   b_108 = b_092$0[2],
                   b_106 = b_092$0[1],
                   n$1 = compare$0(a_105, b_106);
                  if(0 !== n$1) return n$1;
                  a_091$0 = a_107;
                  b_092$0 = b_108;
                  continue;
               }
              return -1;
             case 5:
              var a_111 = a_091$0[2], a_109 = a_091$0[1];
              if(typeof b_092$0 !== "number")
               switch(b_092$0[0]){
                 case 6: break;
                 case 0:
                  break a;
                 case 1:
                  break b;
                 case 2:
                  break c;
                 case 3:
                  break d;
                 case 4:
                  break e;
                 default:
                  var
                   b_112 = b_092$0[2],
                   b_110 = b_092$0[1],
                   n$2 = compare$0(a_109, b_110);
                  return 0 === n$2 ? caml_call2(Htyp[3], a_111, b_112) : n$2;
               }
              return -1;
             default:
              var a_113 = a_091$0[1];
              if(typeof b_092$0 === "number") return 1;
              switch(b_092$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5: break;
                default:
                 var b_114 = b_092$0[1];
                 a_091$0 = a_113;
                 b_092$0 = b_114;
                 continue;
              }
           }
          return 1;
         }
         return 1;
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
   }
   var
    Hexp = [0, t_of_sexp$0, sexp_of_t$0, compare$0],
    t_of_sexp$1 = function _aF_(_aE_){return _aF_.fun(_aE_);};
   caml_update_dummy
    (t_of_sexp$1,
     function(sexp_119){
      a:
      {
       if(0 === sexp_119[0]){
        var _az_ = sexp_119[1];
        b:
        if(_az_ !== cst_Cursor){
         c:
         if(_az_ !== cst_LArrow){
          if(_az_ !== cst_RArrow){
           if(_az_ === cst_cursor) break b;
           if(_az_ === cst_lArrow) break c;
           if(_az_ !== cst_rArrow) break a;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_117, sexp_119);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_117, sexp_119);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_117, sexp_119);
       }
       var _aA_ = sexp_119[1];
       if(! _aA_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_117, sexp_119);
       var _aB_ = _aA_[1];
       if(0 !== _aB_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[6], error_source_117, sexp_119);
       var tag_120 = _aB_[1];
       b:
       if(tag_120 !== cst_Cursor){
        c:
        if(tag_120 !== cst_LArrow){
         if(tag_120 !== cst_RArrow){
          if(tag_120 === cst_cursor) break b;
          if(tag_120 === cst_lArrow) break c;
          if(tag_120 !== cst_rArrow) break a;
         }
         var sexp_args_133 = _aA_[2];
         if(sexp_args_133){
          var _aC_ = sexp_args_133[2];
          if(_aC_ && ! _aC_[2]){
           var
            arg1_135 = _aC_[1],
            arg0_134 = sexp_args_133[1],
            res0_136 = caml_call1(Htyp[1], arg0_134),
            res1_137 = caml_call1(t_of_sexp$1, arg1_135);
           return [2, res0_136, res1_137];
          }
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_117,
                  tag_120,
                  sexp_119);
        }
        var sexp_args_126 = _aA_[2];
        if(sexp_args_126){
         var _aD_ = sexp_args_126[2];
         if(_aD_ && ! _aD_[2]){
          var
           arg1_128 = _aD_[1],
           arg0_127 = sexp_args_126[1],
           res0_129 = caml_call1(t_of_sexp$1, arg0_127),
           res1_130 = caml_call1(Htyp[1], arg1_128);
          return [1, res0_129, res1_130];
         }
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_117,
                 tag_120,
                 sexp_119);
       }
       var sexp_args_121 = _aA_[2];
       if(sexp_args_121 && ! sexp_args_121[2]){
        var
         arg0_122 = sexp_args_121[1],
         res0_123 = caml_call1(Htyp[1], arg0_122);
        return [0, res0_123];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_117,
                tag_120,
                sexp_119);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[8], error_source_117, sexp_119);
     });
   var _l_ = [0, cst_Cursor], _m_ = [0, cst_LArrow], _n_ = [0, cst_RArrow];
   function sexp_of_t$1(param){
    switch(param[0]){
      case 0:
       var arg0_138 = param[1], res0_139 = caml_call1(Htyp[2], arg0_138);
       return [1, [0, _l_, [0, res0_139, 0]]];
      case 1:
       var
        arg1_141 = param[2],
        arg0_140 = param[1],
        res0_142 = sexp_of_t$1(arg0_140),
        res1_143 = caml_call1(Htyp[2], arg1_141);
       return [1, [0, _m_, [0, res0_142, [0, res1_143, 0]]]];
      default:
       var
        arg1_145 = param[2],
        arg0_144 = param[1],
        res0_146 = caml_call1(Htyp[2], arg0_144),
        res1_147 = sexp_of_t$1(arg1_145);
       return [1, [0, _n_, [0, res0_146, [0, res1_147, 0]]]];
    }
   }
   function compare$1(a_148, b_149){
    var a_148$0 = a_148, b_149$0 = b_149;
    for(;;){
     if(caml_call2(Ppx_compare_lib[1], a_148$0, b_149$0)) return 0;
     switch(a_148$0[0]){
       case 0:
        var a_150 = a_148$0[1];
        if(0 !== b_149$0[0]) return -1;
        var b_151 = b_149$0[1];
        return caml_call2(Htyp[3], a_150, b_151);
       case 1:
        var a_154 = a_148$0[2], a_152 = a_148$0[1];
        switch(b_149$0[0]){
          case 0: break;
          case 1:
           var
            b_155 = b_149$0[2],
            b_153 = b_149$0[1],
            n = compare$1(a_152, b_153);
           return 0 === n ? caml_call2(Htyp[3], a_154, b_155) : n;
          default: return -1;
        }
        break;
       default:
        var a_158 = a_148$0[2], a_156 = a_148$0[1];
        switch(b_149$0[0]){
          case 0: break;
          case 1:
           return 1;
          default:
           var
            b_159 = b_149$0[2],
            b_157 = b_149$0[1],
            n$0 = caml_call2(Htyp[3], a_156, b_157);
           if(0 !== n$0) return n$0;
           a_148$0 = a_158;
           b_149$0 = b_159;
           continue;
        }
     }
     return 1;
    }
   }
   var
    Ztyp = [0, t_of_sexp$1, sexp_of_t$1, compare$1],
    t_of_sexp$2 = function _ay_(_ax_){return _ay_.fun(_ax_);};
   caml_update_dummy
    (t_of_sexp$2,
     function(sexp_164){
      a:
      {
       if(0 === sexp_164[0]){
        var _al_ = sexp_164[1], _am_ = caml_string_compare(_al_, cst_cursor);
        b:
        {
         c:
         {
          d:
          {
           e:
           {
            f:
            {
             g:
             {
              h:
              {
               i:
               {
                if(0 <= _am_){
                 if(0 < _am_){
                  if(_al_ === cst_lAp) break i;
                  if(_al_ === cst_lAsc) break h;
                  if(_al_ === cst_lPlus) break g;
                  if(_al_ === cst_lam) break f;
                  if(_al_ === cst_nEHole) break e;
                  if(_al_ === cst_rAp) break d;
                  if(_al_ === cst_rAsc) break c;
                  if(_al_ !== cst_rPlus) break a;
                  break b;
                 }
                }
                else if(_al_ !== cst_Cursor){
                 if(_al_ === cst_LAp) break i;
                 if(_al_ === cst_LAsc) break h;
                 if(_al_ === cst_LPlus) break g;
                 if(_al_ === cst_Lam) break f;
                 if(_al_ === cst_NEHole) break e;
                 if(_al_ === cst_RAp) break d;
                 if(_al_ === cst_RAsc) break c;
                 if(_al_ !== cst_RPlus) break a;
                 break b;
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_162, sexp_164);
       }
       var _an_ = sexp_164[1];
       if(! _an_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_162, sexp_164);
       var _ao_ = _an_[1];
       if(0 !== _ao_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[6], error_source_162, sexp_164);
       var tag_165 = _ao_[1], _ap_ = caml_string_compare(tag_165, cst_cursor);
       b:
       {
        c:
        {
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              i:
              {
               if(0 <= _ap_){
                if(0 < _ap_){
                 if(tag_165 === cst_lAp) break i;
                 if(tag_165 === cst_lAsc) break h;
                 if(tag_165 === cst_lPlus) break g;
                 if(tag_165 === cst_lam) break f;
                 if(tag_165 === cst_nEHole) break e;
                 if(tag_165 === cst_rAp) break d;
                 if(tag_165 === cst_rAsc) break c;
                 if(tag_165 !== cst_rPlus) break a;
                 break b;
                }
               }
               else if(tag_165 !== cst_Cursor){
                if(tag_165 === cst_LAp) break i;
                if(tag_165 === cst_LAsc) break h;
                if(tag_165 === cst_LPlus) break g;
                if(tag_165 === cst_Lam) break f;
                if(tag_165 === cst_NEHole) break e;
                if(tag_165 === cst_RAp) break d;
                if(tag_165 === cst_RAsc) break c;
                if(tag_165 !== cst_RPlus) break a;
                break b;
               }
               var sexp_args_166 = _an_[2];
               if(sexp_args_166 && ! sexp_args_166[2]){
                var
                 arg0_167 = sexp_args_166[1],
                 res0_168 = caml_call1(Hexp[1], arg0_167);
                return [0, res0_168];
               }
               return caml_call3
                       (Sexplib0_Sexp_conv_error[4],
                        error_source_162,
                        tag_165,
                        sexp_164);
              }
              var sexp_args_178 = _an_[2];
              if(sexp_args_178){
               var _aw_ = sexp_args_178[2];
               if(_aw_ && ! _aw_[2]){
                var
                 arg1_180 = _aw_[1],
                 arg0_179 = sexp_args_178[1],
                 res0_181 = caml_call1(t_of_sexp$2, arg0_179),
                 res1_182 = caml_call1(Hexp[1], arg1_180);
                return [2, res0_181, res1_182];
               }
              }
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_162,
                       tag_165,
                       sexp_164);
             }
             var sexp_args_206 = _an_[2];
             if(sexp_args_206){
              var _av_ = sexp_args_206[2];
              if(_av_ && ! _av_[2]){
               var
                arg1_208 = _av_[1],
                arg0_207 = sexp_args_206[1],
                res0_209 = caml_call1(t_of_sexp$2, arg0_207),
                res1_210 = caml_call1(Htyp[1], arg1_208);
               return [6, res0_209, res1_210];
              }
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_162,
                      tag_165,
                      sexp_164);
            }
            var sexp_args_192 = _an_[2];
            if(sexp_args_192){
             var _au_ = sexp_args_192[2];
             if(_au_ && ! _au_[2]){
              var
               arg1_194 = _au_[1],
               arg0_193 = sexp_args_192[1],
               res0_195 = caml_call1(t_of_sexp$2, arg0_193),
               res1_196 = caml_call1(Hexp[1], arg1_194);
              return [4, res0_195, res1_196];
             }
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_162,
                     tag_165,
                     sexp_164);
           }
           var sexp_args_171 = _an_[2];
           if(sexp_args_171){
            var _at_ = sexp_args_171[2];
            if(_at_ && ! _at_[2]){
             var
              arg1_173 = _at_[1],
              arg0_172 = sexp_args_171[1],
              res0_174 = caml_call1(Sexplib_Std[10], arg0_172),
              res1_175 = caml_call1(t_of_sexp$2, arg1_173);
             return [1, res0_174, res1_175];
            }
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_162,
                    tag_165,
                    sexp_164);
          }
          var sexp_args_220 = _an_[2];
          if(sexp_args_220 && ! sexp_args_220[2]){
           var
            arg0_221 = sexp_args_220[1],
            res0_222 = caml_call1(t_of_sexp$2, arg0_221);
           return [8, res0_222];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_162,
                   tag_165,
                   sexp_164);
         }
         var sexp_args_185 = _an_[2];
         if(sexp_args_185){
          var _as_ = sexp_args_185[2];
          if(_as_ && ! _as_[2]){
           var
            arg1_187 = _as_[1],
            arg0_186 = sexp_args_185[1],
            res0_188 = caml_call1(Hexp[1], arg0_186),
            res1_189 = caml_call1(t_of_sexp$2, arg1_187);
           return [3, res0_188, res1_189];
          }
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_162,
                  tag_165,
                  sexp_164);
        }
        var sexp_args_213 = _an_[2];
        if(sexp_args_213){
         var _ar_ = sexp_args_213[2];
         if(_ar_ && ! _ar_[2]){
          var
           arg1_215 = _ar_[1],
           arg0_214 = sexp_args_213[1],
           res0_216 = caml_call1(Hexp[1], arg0_214),
           res1_217 = caml_call1(Ztyp[1], arg1_215);
          return [7, res0_216, res1_217];
         }
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_162,
                 tag_165,
                 sexp_164);
       }
       var sexp_args_199 = _an_[2];
       if(sexp_args_199){
        var _aq_ = sexp_args_199[2];
        if(_aq_ && ! _aq_[2]){
         var
          arg1_201 = _aq_[1],
          arg0_200 = sexp_args_199[1],
          res0_202 = caml_call1(Hexp[1], arg0_200),
          res1_203 = caml_call1(t_of_sexp$2, arg1_201);
         return [5, res0_202, res1_203];
        }
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_162,
                tag_165,
                sexp_164);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[8], error_source_162, sexp_164);
     });
   var
    _o_ = [0, cst_Cursor],
    _p_ = [0, cst_Lam],
    _q_ = [0, cst_LAp],
    _r_ = [0, cst_RAp],
    _s_ = [0, cst_LPlus],
    _t_ = [0, cst_RPlus],
    _u_ = [0, cst_LAsc],
    _v_ = [0, cst_RAsc],
    _w_ = [0, cst_NEHole];
   function sexp_of_t$2(param){
    switch(param[0]){
      case 0:
       var arg0_223 = param[1], res0_224 = caml_call1(Hexp[2], arg0_223);
       return [1, [0, _o_, [0, res0_224, 0]]];
      case 1:
       var
        arg1_226 = param[2],
        arg0_225 = param[1],
        res0_227 = caml_call1(Sexplib_Std[9], arg0_225),
        res1_228 = sexp_of_t$2(arg1_226);
       return [1, [0, _p_, [0, res0_227, [0, res1_228, 0]]]];
      case 2:
       var
        arg1_230 = param[2],
        arg0_229 = param[1],
        res0_231 = sexp_of_t$2(arg0_229),
        res1_232 = caml_call1(Hexp[2], arg1_230);
       return [1, [0, _q_, [0, res0_231, [0, res1_232, 0]]]];
      case 3:
       var
        arg1_234 = param[2],
        arg0_233 = param[1],
        res0_235 = caml_call1(Hexp[2], arg0_233),
        res1_236 = sexp_of_t$2(arg1_234);
       return [1, [0, _r_, [0, res0_235, [0, res1_236, 0]]]];
      case 4:
       var
        arg1_238 = param[2],
        arg0_237 = param[1],
        res0_239 = sexp_of_t$2(arg0_237),
        res1_240 = caml_call1(Hexp[2], arg1_238);
       return [1, [0, _s_, [0, res0_239, [0, res1_240, 0]]]];
      case 5:
       var
        arg1_242 = param[2],
        arg0_241 = param[1],
        res0_243 = caml_call1(Hexp[2], arg0_241),
        res1_244 = sexp_of_t$2(arg1_242);
       return [1, [0, _t_, [0, res0_243, [0, res1_244, 0]]]];
      case 6:
       var
        arg1_246 = param[2],
        arg0_245 = param[1],
        res0_247 = sexp_of_t$2(arg0_245),
        res1_248 = caml_call1(Htyp[2], arg1_246);
       return [1, [0, _u_, [0, res0_247, [0, res1_248, 0]]]];
      case 7:
       var
        arg1_250 = param[2],
        arg0_249 = param[1],
        res0_251 = caml_call1(Hexp[2], arg0_249),
        res1_252 = caml_call1(Ztyp[2], arg1_250);
       return [1, [0, _v_, [0, res0_251, [0, res1_252, 0]]]];
      default:
       var arg0_253 = param[1], res0_254 = sexp_of_t$2(arg0_253);
       return [1, [0, _w_, [0, res0_254, 0]]];
    }
   }
   function compare$2(a_255, b_256){
    var a_255$0 = a_255, b_256$0 = b_256;
    for(;;){
     if(caml_call2(Ppx_compare_lib[1], a_255$0, b_256$0)) return 0;
     a:
     {
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           switch(a_255$0[0]){
             case 0:
              var a_257 = a_255$0[1];
              if(0 !== b_256$0[0]) return -1;
              var b_258 = b_256$0[1];
              return caml_call2(Hexp[3], a_257, b_258);
             case 1:
              var a_261 = a_255$0[2], a_259 = a_255$0[1];
              switch(b_256$0[0]){
                case 0:
                 break a;
                case 1:
                 var
                  b_262 = b_256$0[2],
                  b_260 = b_256$0[1],
                  n = caml_call2(compare_string, a_259, b_260);
                 if(0 !== n) return n;
                 a_255$0 = a_261;
                 b_256$0 = b_262;
                 continue;
                default: return -1;
              }
             case 2:
              var a_265 = a_255$0[2], a_263 = a_255$0[1];
              switch(b_256$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 var
                  b_266 = b_256$0[2],
                  b_264 = b_256$0[1],
                  n$0 = compare$2(a_263, b_264);
                 return 0 === n$0 ? caml_call2(Hexp[3], a_265, b_266) : n$0;
                default: return -1;
              }
             case 3:
              var a_269 = a_255$0[2], a_267 = a_255$0[1];
              switch(b_256$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 var
                  b_270 = b_256$0[2],
                  b_268 = b_256$0[1],
                  n$1 = caml_call2(Hexp[3], a_267, b_268);
                 if(0 !== n$1) return n$1;
                 a_255$0 = a_269;
                 b_256$0 = b_270;
                 continue;
                default: return -1;
              }
             case 4:
              var a_273 = a_255$0[2], a_271 = a_255$0[1];
              switch(b_256$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 var
                  b_274 = b_256$0[2],
                  b_272 = b_256$0[1],
                  n$2 = compare$2(a_271, b_272);
                 return 0 === n$2 ? caml_call2(Hexp[3], a_273, b_274) : n$2;
                default: return -1;
              }
             case 5:
              var a_277 = a_255$0[2], a_275 = a_255$0[1];
              switch(b_256$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5:
                 var
                  b_278 = b_256$0[2],
                  b_276 = b_256$0[1],
                  n$3 = caml_call2(Hexp[3], a_275, b_276);
                 if(0 !== n$3) return n$3;
                 a_255$0 = a_277;
                 b_256$0 = b_278;
                 continue;
                default: return -1;
              }
             case 6:
              var a_281 = a_255$0[2], a_279 = a_255$0[1];
              switch(b_256$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5:
                 break f;
                case 6:
                 var
                  b_282 = b_256$0[2],
                  b_280 = b_256$0[1],
                  n$4 = compare$2(a_279, b_280);
                 return 0 === n$4 ? caml_call2(Htyp[3], a_281, b_282) : n$4;
                default: return -1;
              }
             case 7:
              var a_285 = a_255$0[2], a_283 = a_255$0[1];
              switch(b_256$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5:
                 break f;
                case 6: break;
                case 7:
                 var
                  b_286 = b_256$0[2],
                  b_284 = b_256$0[1],
                  n$5 = caml_call2(Hexp[3], a_283, b_284);
                 return 0 === n$5 ? caml_call2(Ztyp[3], a_285, b_286) : n$5;
                default: return -1;
              }
              break;
             default:
              var a_287 = a_255$0[1];
              switch(b_256$0[0]){
                case 0:
                 break a;
                case 1:
                 break b;
                case 2:
                 break c;
                case 3:
                 break d;
                case 4:
                 break e;
                case 5:
                 break f;
                case 6: break;
                case 7:
                 return 1;
                default:
                 var b_288 = b_256$0[1];
                 a_255$0 = a_287;
                 b_256$0 = b_288;
                 continue;
              }
           }
           return 1;
          }
          return 1;
         }
         return 1;
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
   }
   var
    Zexp = [0, t_of_sexp$2, sexp_of_t$2, compare$2],
    _x_ = [0, cst_Two],
    _y_ = [0, cst_One],
    _z_ = [0, cst_Child],
    _A_ = [0, cst_Parent],
    _B_ = [0, cst_Arrow],
    _C_ = [0, cst_Num],
    _D_ = [0, cst_Asc],
    _E_ = [0, cst_Ap],
    _F_ = [0, cst_Plus],
    _G_ = [0, cst_NEHole],
    _H_ = [0, cst_Var],
    _I_ = [0, cst_Lam],
    _J_ = [0, cst_Lit],
    _K_ = [0, cst_Del],
    _L_ = [0, cst_Finish],
    _M_ = [0, cst_Move],
    _N_ = [0, cst_Construct];
   function t_of_sexp$3(sexp_347){
    a:
    {
     if(0 === sexp_347[0]){
      var _ai_ = sexp_347[1];
      b:
      if(_ai_ !== cst_Construct){
       c:
       if(_ai_ !== cst_Del){
        d:
        if(_ai_ !== cst_Finish){
         if(_ai_ !== cst_Move){
          if(_ai_ === cst_construct) break b;
          if(_ai_ === cst_del) break c;
          if(_ai_ === cst_finish) break d;
          if(_ai_ !== cst_move) break a;
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_345, sexp_347);
        }
        return 1;
       }
       return 0;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_345, sexp_347);
     }
     var _aj_ = sexp_347[1];
     if(! _aj_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_345, sexp_347);
     var _ak_ = _aj_[1];
     if(0 !== _ak_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_345, sexp_347);
     var tag_348 = _ak_[1];
     b:
     if(tag_348 !== cst_Construct){
      c:
      if(tag_348 !== cst_Del){
       d:
       if(tag_348 !== cst_Finish){
        if(tag_348 !== cst_Move){
         if(tag_348 === cst_construct) break b;
         if(tag_348 === cst_del) break c;
         if(tag_348 === cst_finish) break d;
         if(tag_348 !== cst_move) break a;
        }
        var sexp_args_349 = _aj_[2];
        if(sexp_args_349 && ! sexp_args_349[2]){
         var arg0_350 = sexp_args_349[1];
         e:
         {
          f:
          {
           if(0 === arg0_350[0]){
            var _aa_ = arg0_350[1];
            g:
            if(_aa_ !== cst_Child){
             if(_aa_ !== cst_Parent){
              if(_aa_ === cst_child) break g;
              if(_aa_ !== cst_parent) break f;
             }
             var res0_351 = 0;
             break e;
            }
            var
             res0_351 =
               caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_297, arg0_350);
            break e;
           }
           var _ab_ = arg0_350[1];
           if(! _ab_){
            var
             res0_351 =
               caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_297, arg0_350);
            break e;
           }
           var _ac_ = _ab_[1];
           if(0 !== _ac_[0]){
            var
             res0_351 =
               caml_call2
                (Sexplib0_Sexp_conv_error[6], error_source_297, arg0_350);
            break e;
           }
           var tag_300 = _ac_[1];
           g:
           if(tag_300 !== cst_Child){
            if(tag_300 !== cst_Parent){
             if(tag_300 === cst_child) break g;
             if(tag_300 !== cst_parent) break f;
            }
            var
             res0_351 =
               caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_297, arg0_350);
            break e;
           }
           var sexp_args_301 = _ab_[2];
           if(sexp_args_301 && ! sexp_args_301[2]){
            var arg0_302 = sexp_args_301[1];
            g:
            {
             h:
             {
              if(0 === arg0_302[0]){
               var _Y_ = arg0_302[1];
               i:
               if(_Y_ !== cst_One){
                if(_Y_ !== cst_Two){
                 if(_Y_ === cst_one) break i;
                 if(_Y_ !== cst_two) break h;
                }
                var res0_303 = 1;
                break g;
               }
               var res0_303 = 0;
               break g;
              }
              var _Z_ = arg0_302[1];
              if(! _Z_){
               var
                res0_303 =
                  caml_call2
                   (Sexplib0_Sexp_conv_error[7], error_source_291, arg0_302);
               break g;
              }
              var ___ = _Z_[1];
              if(0 !== ___[0]){
               var
                res0_303 =
                  caml_call2
                   (Sexplib0_Sexp_conv_error[6], error_source_291, arg0_302);
               break g;
              }
              var _$_ = ___[1];
              i:
              if(_$_ !== cst_One){
               if(_$_ !== cst_Two){
                if(_$_ === cst_one) break i;
                if(_$_ !== cst_two) break h;
               }
               var
                res0_303 =
                  caml_call2
                   (Sexplib0_Sexp_conv_error[3], error_source_291, arg0_302);
               break g;
              }
              var
               res0_303 =
                 caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_291, arg0_302);
              break g;
             }
             var
              res0_303 =
                caml_call2
                 (Sexplib0_Sexp_conv_error[8], error_source_291, arg0_302);
            }
            var res0_351 = [0, res0_303];
            break e;
           }
           var
            res0_351 =
              caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_297,
                tag_300,
                arg0_350);
           break e;
          }
          var
           res0_351 =
             caml_call2
              (Sexplib0_Sexp_conv_error[8], error_source_297, arg0_350);
         }
         return [0, res0_351];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_345,
                 tag_348,
                 sexp_347);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_345, sexp_347);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_345, sexp_347);
     }
     var sexp_args_354 = _aj_[2];
     if(sexp_args_354 && ! sexp_args_354[2]){
      var arg0_355 = sexp_args_354[1];
      b:
      {
       c:
       {
        if(0 === arg0_355[0]){
         var _ad_ = arg0_355[1], _ae_ = caml_string_compare(_ad_, cst_ap);
         d:
         {
          e:
          {
           f:
           {
            g:
            {
             h:
             {
              i:
              {
               j:
               {
                k:
                {
                 if(0 <= _ae_){
                  if(0 < _ae_){
                   if(_ad_ === cst_arrow) break k;
                   if(_ad_ === cst_asc) break j;
                   if(_ad_ === cst_lam) break i;
                   if(_ad_ === cst_lit) break h;
                   if(_ad_ === cst_nEHole) break g;
                   if(_ad_ === cst_num) break f;
                   if(_ad_ === cst_plus) break e;
                   if(_ad_ !== cst_var) break c;
                   break d;
                  }
                 }
                 else if(_ad_ !== cst_Ap){
                  if(_ad_ === cst_Arrow) break k;
                  if(_ad_ === cst_Asc) break j;
                  if(_ad_ === cst_Lam) break i;
                  if(_ad_ === cst_Lit) break h;
                  if(_ad_ === cst_NEHole) break g;
                  if(_ad_ === cst_Num) break f;
                  if(_ad_ === cst_Plus) break e;
                  if(_ad_ !== cst_Var) break c;
                  break d;
                 }
                 var res0_356 = 3;
                 break b;
                }
                var res0_356 = 0;
                break b;
               }
               var res0_356 = 2;
               break b;
              }
              var
               res0_356 =
                 caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_312, arg0_355);
              break b;
             }
             var
              res0_356 =
                caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_312, arg0_355);
             break b;
            }
            var res0_356 = 5;
            break b;
           }
           var res0_356 = 1;
           break b;
          }
          var res0_356 = 4;
          break b;
         }
         var
          res0_356 =
            caml_call2
             (Sexplib0_Sexp_conv_error[5], error_source_312, arg0_355);
         break b;
        }
        var _af_ = arg0_355[1];
        if(! _af_){
         var
          res0_356 =
            caml_call2
             (Sexplib0_Sexp_conv_error[7], error_source_312, arg0_355);
         break b;
        }
        var _ag_ = _af_[1];
        if(0 !== _ag_[0]){
         var
          res0_356 =
            caml_call2
             (Sexplib0_Sexp_conv_error[6], error_source_312, arg0_355);
         break b;
        }
        var tag_315 = _ag_[1], _ah_ = caml_string_compare(tag_315, cst_ap);
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                if(0 <= _ah_){
                 if(0 < _ah_){
                  if(tag_315 === cst_arrow) break k;
                  if(tag_315 === cst_asc) break j;
                  if(tag_315 === cst_lam) break i;
                  if(tag_315 === cst_lit) break h;
                  if(tag_315 === cst_nEHole) break g;
                  if(tag_315 === cst_num) break f;
                  if(tag_315 === cst_plus) break e;
                  if(tag_315 !== cst_var) break c;
                  break d;
                 }
                }
                else if(tag_315 !== cst_Ap){
                 if(tag_315 === cst_Arrow) break k;
                 if(tag_315 === cst_Asc) break j;
                 if(tag_315 === cst_Lam) break i;
                 if(tag_315 === cst_Lit) break h;
                 if(tag_315 === cst_NEHole) break g;
                 if(tag_315 === cst_Num) break f;
                 if(tag_315 === cst_Plus) break e;
                 if(tag_315 !== cst_Var) break c;
                 break d;
                }
                var
                 res0_356 =
                   caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_312, arg0_355);
                break b;
               }
               var
                res0_356 =
                  caml_call2
                   (Sexplib0_Sexp_conv_error[3], error_source_312, arg0_355);
               break b;
              }
              var
               res0_356 =
                 caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_312, arg0_355);
              break b;
             }
             var sexp_args_321 = _af_[2];
             if(sexp_args_321 && ! sexp_args_321[2]){
              var
               arg0_322 = sexp_args_321[1],
               res0_323 = caml_call1(Sexplib_Std[10], arg0_322),
               res0_356 = [1, res0_323];
              break b;
             }
             var
              res0_356 =
                caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_312,
                  tag_315,
                  arg0_355);
             break b;
            }
            var sexp_args_326 = _af_[2];
            if(sexp_args_326 && ! sexp_args_326[2]){
             var
              arg0_327 = sexp_args_326[1],
              res0_328 = caml_call1(Sexplib_Std[16], arg0_327),
              res0_356 = [2, res0_328];
             break b;
            }
            var
             res0_356 =
               caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_312,
                 tag_315,
                 arg0_355);
            break b;
           }
           var
            res0_356 =
              caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_312, arg0_355);
           break b;
          }
          var
           res0_356 =
             caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_312, arg0_355);
          break b;
         }
         var
          res0_356 =
            caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_312, arg0_355);
         break b;
        }
        var sexp_args_316 = _af_[2];
        if(sexp_args_316 && ! sexp_args_316[2]){
         var
          arg0_317 = sexp_args_316[1],
          res0_318 = caml_call1(Sexplib_Std[10], arg0_317),
          res0_356 = [0, res0_318];
         break b;
        }
        var
         res0_356 =
           caml_call3
            (Sexplib0_Sexp_conv_error[4], error_source_312, tag_315, arg0_355);
        break b;
       }
       var
        res0_356 =
          caml_call2(Sexplib0_Sexp_conv_error[8], error_source_312, arg0_355);
      }
      return [1, res0_356];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_345,
              tag_348,
              sexp_347);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_345, sexp_347);
   }
   function sexp_of_t$3(param){
    if(typeof param === "number") return 0 === param ? _K_ : _L_;
    if(0 !== param[0]){
     var arg0_359 = param[1];
     if(typeof arg0_359 === "number")
      switch(arg0_359){
        case 0:
         var res0_360 = _B_; break;
        case 1:
         var res0_360 = _C_; break;
        case 2:
         var res0_360 = _D_; break;
        case 3:
         var res0_360 = _E_; break;
        case 4:
         var res0_360 = _F_; break;
        default: var res0_360 = _G_;
      }
     else
      switch(arg0_359[0]){
        case 0:
         var
          arg0_329 = arg0_359[1],
          res0_330 = caml_call1(Sexplib_Std[9], arg0_329),
          res0_360 = [1, [0, _H_, [0, res0_330, 0]]];
         break;
        case 1:
         var
          arg0_331 = arg0_359[1],
          res0_332 = caml_call1(Sexplib_Std[9], arg0_331),
          res0_360 = [1, [0, _I_, [0, res0_332, 0]]];
         break;
        default:
         var
          arg0_333 = arg0_359[1],
          res0_334 = caml_call1(Sexplib_Std[15], arg0_333),
          res0_360 = [1, [0, _J_, [0, res0_334, 0]]];
      }
     return [1, [0, _N_, [0, res0_360, 0]]];
    }
    var arg0_357 = param[1];
    if(arg0_357)
     var
      arg0_304 = arg0_357[1],
      res0_305 = arg0_304 ? _x_ : _y_,
      res0_358 = [1, [0, _z_, [0, res0_305, 0]]];
    else
     var res0_358 = _A_;
    return [1, [0, _M_, [0, res0_358, 0]]];
   }
   function compare$3(a_361, b_362){
    if(caml_call2(Ppx_compare_lib[1], a_361, b_362)) return 0;
    a:
    {
     if(typeof a_361 === "number"){
      if(0 === a_361){
       if(typeof b_362 === "number") return 0 === b_362 ? 0 : -1;
       if(0 === b_362[0]) break a;
      }
      else{
       if(typeof b_362 === "number") return 0 === b_362 ? 1 : 0;
       if(0 === b_362[0]) break a;
      }
      return 1;
     }
     if(0 === a_361[0]){
      var a_306 = a_361[1];
      if(typeof b_362 !== "number" && 0 === b_362[0]){
       var b_364 = b_362[1];
       if(caml_call2(Ppx_compare_lib[1], a_306, b_364)) return 0;
       if(! a_306) return b_364 ? 1 : 0;
       var a_308 = a_306[1];
       if(! b_364) return -1;
       var b_309 = b_364[1];
       return runtime.caml_int_compare(a_308, b_309);
      }
      return -1;
     }
     var a_335 = a_361[1];
     if(typeof b_362 === "number") return -1;
     if(0 !== b_362[0]){
      var b_366 = b_362[1];
      if(caml_call2(Ppx_compare_lib[1], a_335, b_366)) return 0;
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            if(typeof a_335 === "number"){
             switch(a_335){
               case 0:
                if(typeof b_366 === "number" && ! b_366) return 0; return -1;
               case 1:
                if(typeof b_366 === "number"){
                 if(1 === b_366) return 0;
                 if(! b_366) break b;
                }
                return -1;
               case 2:
                if(typeof b_366 === "number")
                 switch(b_366){
                   case 2:
                    return 0;
                   case 0:
                    break b;
                   case 1:
                    break c;
                 }
                return -1;
               case 3:
                if(typeof b_366 === "number")
                 switch(b_366){
                   case 3:
                    return 0;
                   case 0:
                    break b;
                   case 1:
                    break c;
                   case 2:
                    break d;
                 }
                else
                 switch(b_366[0]){case 0: break e;case 1: break f;}
                return -1;
               case 4:
                if(typeof b_366 === "number")
                 switch(b_366){
                   case 4:
                    return 0;
                   case 5:
                    return -1;
                   case 0:
                    break b;
                   case 1:
                    break c;
                   case 2:
                    break d;
                   default: break g;
                 }
                switch(b_366[0]){case 0: break e;case 1: break f;
                }
                break;
               default:
                if(typeof b_366 === "number")
                 switch(b_366){
                   case 4:
                    return 1;
                   case 5:
                    return 0;
                   case 0:
                    break b;
                   case 1:
                    break c;
                   case 2:
                    break d;
                   default: break g;
                 }
                switch(b_366[0]){case 0: break e;case 1: break f;
                }
             }
             return 1;
            }
            switch(a_335[0]){
              case 0:
               var a_337 = a_335[1];
               if(typeof b_366 === "number")
                switch(b_366){case 0: break b;case 1: break c;case 2: break d;
                }
               else if(0 === b_366[0]){
                var b_338 = b_366[1];
                return caml_call2(compare_string, a_337, b_338);
               }
               return -1;
              case 1:
               var a_339 = a_335[1];
               if(typeof b_366 === "number")
                switch(b_366){case 0: break b;case 1: break c;case 2: break d;
                }
               else
                switch(b_366[0]){
                  case 2: break;
                  case 0:
                   break e;
                  default:
                   var b_340 = b_366[1];
                   return caml_call2(compare_string, a_339, b_340);
                }
               return -1;
              default:
               var a_341 = a_335[1];
               if(typeof b_366 !== "number")
                switch(b_366[0]){
                  case 0:
                   break e;
                  case 1:
                   break f;
                  default:
                   var b_342 = b_366[1];
                   return caml_call2(compare_int, a_341, b_342);
                }
               switch(b_366){
                 case 0:
                  break b;
                 case 1:
                  break c;
                 case 2:
                  break d;
                 case 3: break;
                 default: return -1;
               }
            }
           }
           return 1;
          }
          return 1;
         }
         return 1;
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
    }
    return 1;
   }
   var
    Action = [0, t_of_sexp$3, sexp_of_t$3, compare$3],
    TypCtx = caml_call1(Stdlib_Map[1], [0, Stdlib_String[9]]),
    Unimplemented =
      [248,
       "Hazelnut_lib.Hazelnut.Unimplemented",
       runtime.caml_fresh_oo_id(0)],
    _O_ = [0, [0, 1], [0, 1]],
    _P_ = [0, 0, 0],
    _Q_ = [0, 1],
    _R_ = [0, 0],
    _S_ = [0, 0],
    _T_ = [0, 1];
   function erase_exp(e){throw caml_maybe_attach_backtrace(Unimplemented, 1);}
   function matched_arrow(t){
    if(typeof t === "number") return t ? _O_ : _P_;
    var t_out = t[2], t_in = t[1];
    return [0, [0, t_in], [0, t_out]];
   }
   function consistent(t$0, t){
    var t$2 = t$0, t$1 = t;
    for(;;){
     if(typeof t$2 === "number"){
      if(t$2) return 1;
      if(typeof t$1 === "number" && t$1) return 1;
      return runtime.caml_equal(t$2, t$1);
     }
     var t_out = t$2[2], t_in = t$2[1];
     if(typeof t$1 === "number") return t$1 ? 1 : 0;
     var t_out$0 = t$1[2], t_in$0 = t$1[1], _X_ = consistent(t_in, t_in$0);
     if(! _X_) return _X_;
     t$2 = t_out;
     t$1 = t_out$0;
    }
   }
   function syn(ctx, e){
    if(typeof e === "number") return _Q_;
    switch(e[0]){
      case 0:
       var x = e[1]; return caml_call2(TypCtx[29], x, ctx);
      case 1:
       return 0;
      case 2:
       var e_2 = e[2], e_1 = e[1], _U_ = syn(ctx, e_1);
       return caml_call2
               (Monad_lib_Monad[1],
                _U_,
                function(t){
                 var
                  match = matched_arrow(t),
                  t_out = match[2],
                  t_in = match[1];
                 if(! t_in) return 0;
                 var t_in$0 = t_in[1];
                 return ana(ctx, e_2, t_in$0) ? t_out : 0;
                });
      case 3:
       return _R_;
      case 4:
       var
        e_2$0 = e[2],
        e_1$0 = e[1],
        _V_ = ana(ctx, e_1$0, 0),
        _W_ = _V_ ? ana(ctx, e_2$0, 0) : _V_;
       return _W_ ? _S_ : 0;
      case 5:
       var t = e[2], e$0 = e[1]; return ana(ctx, e$0, t) ? [0, t] : 0;
      default: var e$1 = e[1]; return syn(ctx, e$1) ? _T_ : 0;
    }
   }
   function ana(ctx, e, t){
    var ctx$0 = ctx, e$0 = e, t$0 = t;
    for(;;){
     if(typeof e$0 !== "number" && 1 === e$0[0]){
      var
       e$1 = e$0[2],
       x = e$0[1],
       match$0 = matched_arrow(t$0),
       t_out = match$0[2],
       t_in = match$0[1];
      if(! t_in) return 0;
      var t_in$0 = t_in[1];
      if(! t_out) return 0;
      var t_out$0 = t_out[1], ctx$1 = caml_call3(TypCtx[4], x, t_in$0, ctx$0);
      ctx$0 = ctx$1;
      e$0 = e$1;
      t$0 = t_out$0;
      continue;
     }
     var match = syn(ctx$0, e$0);
     if(! match) return 0;
     var t$1 = match[1];
     return consistent(t$0, t$1);
    }
   }
   function syn_action(ctx, param, a){
    throw caml_maybe_attach_backtrace(Unimplemented, 1);
   }
   function ana_action(ctx, e, a, t){
    throw caml_maybe_attach_backtrace(Unimplemented, 1);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_hazelnut_lib);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   var
    Hazelnut_lib_Hazelnut =
      [0,
       Htyp,
       Hexp,
       Ztyp,
       Zexp,
       [0],
       [0],
       [0],
       Action,
       [0, TypCtx[1]],
       Unimplemented,
       erase_exp,
       syn,
       ana,
       syn_action,
       ana_action];
   runtime.caml_register_global
    (230, Hazelnut_lib_Hazelnut, "Hazelnut_lib__Hazelnut");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
