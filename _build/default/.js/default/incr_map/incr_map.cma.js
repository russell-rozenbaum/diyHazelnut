// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Incr_map__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Incr_map = [0];
   runtime.caml_register_global(0, Incr_map, "Incr_map__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_map__Incr_map_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_map_Incr_map_intf = "Incr_map__Incr_map_intf",
    cst_incr_map = "incr_map";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_map_Incr_map_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_map);
   caml_call1(Expect_test_collector[5][1], "src/incr_map_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incr_map, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incr_map);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_map_Incr_map_intf);
   var Incr_map_Incr_map_intf = [0];
   runtime.caml_register_global
    (11, Incr_map_Incr_map_intf, cst_Incr_map_Incr_map_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incr_map
//# unitInfo: Requires: Assert_failure, CamlinternalLazy, Core, Core__Bool, Core__Info, Core__Int, Core__Lazy, Core__List, Core__Map, Core__Maybe_bound, Core__Option, Core__Sequence, Core__Set, Core__Tuple, Expect_test_collector, Incr_map__Incr_map_intf, Incremental, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incr_map = "Incr_map",
    cst_incr_map = "incr_map",
    cst_src_incr_map_ml = "src/incr_map.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_update_dummy = runtime.caml_update_dummy;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Int = global_data.Core__Int,
    Core_Map = global_data.Core__Map,
    Core = global_data.Core,
    Incremental = global_data.Incremental,
    Core_Option = global_data.Core__Option,
    Core_Info = global_data.Core__Info,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_List = global_data.Core__List,
    Core_Bool = global_data.Core__Bool,
    Core_Tuple = global_data.Core__Tuple,
    Assert_failure = global_data.Assert_failure,
    Core_Maybe_bound = global_data.Core__Maybe_bound,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Core_Lazy = global_data.Core__Lazy,
    Core_Set = global_data.Core__Set,
    Core_Sequence = global_data.Core__Sequence,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incr_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incr_map);
   caml_call1(Expect_test_collector[5][1], cst_src_incr_map_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incr_map, cst);
   var
    _a_ = [0, cst_src_incr_map_ml, 238, 11],
    _b_ = [0, cst_src_incr_map_ml, 311, 12],
    _c_ = [0, 1],
    _d_ = [0, 1],
    cst_impossible_case_BUG_in_inc =
      "impossible case: BUG in incr_map.ml subrange",
    _e_ = [0, 1],
    cst_BUG_Hit_supposedly_impossi =
      "BUG: Hit supposedly impossible case in Incr_map.index_by",
    _f_ = [0, 1],
    _g_ = [0, "to_"],
    _h_ = [0, "from"],
    cst_Invalid_indices = "Invalid indices",
    _i_ = [0, 0, 0],
    _j_ = [0, cst_src_incr_map_ml, 1195, 10],
    _k_ = [0, cst_src_incr_map_ml, 1194, 10],
    _l_ = [0, cst_src_incr_map_ml, 1210, 6],
    _m_ = [0, [0, 0, 0]],
    _n_ = [0, cst_src_incr_map_ml, 1210, 6],
    _o_ = [0, cst_src_incr_map_ml, 1210, 6],
    _p_ = [0, cst_src_incr_map_ml, 1210, 6],
    _q_ = [0, cst_src_incr_map_ml, 1210, 6],
    _r_ = [0, cst_src_incr_map_ml, 1210, 6],
    _s_ = [0, cst_src_incr_map_ml, 1210, 6],
    _t_ = [0, cst_src_incr_map_ml, 1210, 6],
    _u_ = [0, cst_src_incr_map_ml, 1210, 6],
    _v_ = [0, 1],
    _w_ = [0, 1],
    _x_ = [0, 1],
    _y_ = [0, 1],
    _z_ = [0, 1];
   function with_old(i, f){
    var old = [0, 0];
    return caml_call2
            (Incremental[76][3][5],
             i,
             function(a){
              var b = caml_call2(f, old[1], a);
              old[1] = [0, [0, a, b]];
              return b;
             });
   }
   function unordered_fold
   (opt, update, specialized_initial, _cq_, map, init, add, remove){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    if(_cq_)
     var sth$0 = _cq_[1], revert_to_init_when_empty = sth$0;
    else
     var revert_to_init_when_empty = 0;
    function default$0(key, old_data, new_data, acc){
     return caml_call3
             (add, key, new_data, caml_call3(remove, key, old_data, acc));
    }
    var update$0 = caml_call2(Core_Option[34], update, default$0);
    return with_old
            (map,
             function(old, new_in){
              if(! old){
               if(! specialized_initial)
                return caml_call3(Core_Map[55], new_in, init, add);
               var initial = specialized_initial[1];
               return caml_call2(initial, init, new_in);
              }
              var match = old[1], old_out = match[2], old_in = match[1];
              if(revert_to_init_when_empty){
               var _cr_ = caml_call1(Core_Map[29], new_in);
               if(caml_call2(Core[90], _cr_, 0)) return init;
              }
              return caml_call5
                      (Core_Map[81],
                       old_in,
                       new_in,
                       data_equal,
                       old_out,
                       function(acc, param){
                        var change = param[2], key = param[1], _cs_ = change[1];
                        if(847852583 === _cs_){
                         var old = change[2];
                         return caml_call3(remove, key, old, acc);
                        }
                        if(1013247643 <= _cs_){
                         var match = change[2], new$0 = match[2], old$0 = match[1];
                         return caml_call4(update$0, key, old$0, new$0, acc);
                        }
                        var new$1 = change[2];
                        return caml_call3(add, key, new$1, acc);
                       });
             });
   }
   function unordered_fold_nested_maps
   (opt, revert_to_init_when_empty, update, incr_map, init, add, remove){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    if(update)
     var update$0 = update[1], update$1 = update$0;
    else
     var
      update$1 =
        function(outer_key, inner_key, old_data, new_data, acc){
         return caml_call4
                 (add,
                  outer_key,
                  inner_key,
                  new_data,
                  caml_call4(remove, outer_key, inner_key, old_data, acc));
        };
    return unordered_fold
            (0,
             [0,
              function(outer_key, old_inner_map, new_inner_map, acc){
               return caml_call2
                       (caml_call3
                         (Core_Map[81], old_inner_map, new_inner_map, data_equal),
                        acc,
                        function(acc, param){
                         var diff = param[2], inner_key = param[1], _cp_ = diff[1];
                         if(847852583 === _cp_){
                          var data_removed = diff[2];
                          return caml_call4
                                  (remove, outer_key, inner_key, data_removed, acc);
                         }
                         if(1013247643 <= _cp_){
                          var
                           match = diff[2],
                           new_data = match[2],
                           old_data = match[1];
                          return caml_call5
                                  (update$1, outer_key, inner_key, old_data, new_data, acc);
                         }
                         var data_added = diff[2];
                         return caml_call4
                                 (add, outer_key, inner_key, data_added, acc);
                        });
              }],
             0,
             revert_to_init_when_empty,
             incr_map,
             init,
             function(outer_key, inner_map, acc){
              return caml_call3
                      (Core_Map[55],
                       inner_map,
                       acc,
                       function(inner_key, data, acc){
                        return caml_call4(add, outer_key, inner_key, data, acc);
                       });
             },
             function(outer_key, inner_map, acc){
              return caml_call3
                      (Core_Map[55],
                       inner_map,
                       acc,
                       function(inner_key, data, acc){
                        return caml_call4(remove, outer_key, inner_key, data, acc);
                       });
             });
   }
   function with_comparator(get_comparator, x, f){
    var
     _cn_ = caml_call2(Incremental[10], x, get_comparator),
     _co_ = caml_call2(Incremental[34], 0, _cn_);
    return caml_call2(Incremental[26], _co_, f);
   }
   function with_comparator$0(map, f){
    return with_comparator(Core_Map[2], map, f);
   }
   function of_set(set){
    return with_comparator
            (Core_Set[5],
             set,
             function(comparator){
              var
               old_input = [0, caml_call1(Core_Set[3][1], comparator)],
               old_output = [0, caml_call1(Core_Map[110][1], comparator)];
              return caml_call2
                      (Incremental[10],
                       set,
                       function(new_input){
                        var
                         _cl_ = old_output[1],
                         _cm_ = caml_call2(Core_Set[17], old_input[1], new_input),
                         new_output =
                           caml_call3
                            (Core_Sequence[18],
                             _cm_,
                             _cl_,
                             function(output, param){
                              if(0 === param[0]){
                               var k = param[1];
                               return caml_call2(Core_Map[41], output, k);
                              }
                              var k$0 = param[1];
                              return caml_call3(Core_Map[31], output, k$0, 0);
                             });
                        old_input[1] = new_input;
                        old_output[1] = new_output;
                        return new_output;
                       });
             });
   }
   function generic_mapi(witness, opt, map){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return function(f){
     return with_old
             (map,
              function(old, input){
               if(0 !== caml_call1(Core_Map[29], input) && old){
                var
                 match = old[1],
                 old_output = match[2],
                 old_input = match[1];
                return caml_call5
                        (Core_Map[81],
                         old_input,
                         input,
                         data_equal,
                         old_output,
                         function(output, param){
                          var change = param[2], key = param[1], _ck_ = change[1];
                          if(847852583 === _ck_)
                           return caml_call2(Core_Map[41], output, key);
                          var
                           new_data = 1013247643 <= _ck_ ? change[2][2] : change[2],
                           res = caml_call2(f, key, new_data);
                          if(! witness)
                           return caml_call3(Core_Map[32], output, key, res);
                          if(! res) return caml_call2(Core_Map[41], output, key);
                          var output_data = res[1];
                          return caml_call3(Core_Map[32], output, key, output_data);
                         });
               }
               return witness
                       ? caml_call2(Core_Map[63], input, f)
                       : caml_call2(Core_Map[52], input, f);
              });};
   }
   function mapi(data_equal, map, f){
    return generic_mapi(0, data_equal, map)(f);
   }
   function filter_mapi(data_equal, map, f){
    return generic_mapi(1, data_equal, map)(f);
   }
   function map(data_equal, map, f){
    return mapi
            (data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function filter_map(data_equal, map, f){
    return filter_mapi
            (data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function with_old2(i1, i2, f){
    var old = [0, 0];
    return caml_call3
            (Incremental[12],
             i1,
             i2,
             function(a1, a2){
              var b = caml_call3(f, old[1], a1, a2);
              old[1] = [0, [0, a1, a2, b]];
              return b;
             });
   }
   function mapi_count(opt, input, comparator){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return function(f){
     function add(new_key, acc){
      return caml_call3
              (Core_Map[37],
               acc,
               new_key,
               function(param){
                if(! param) return 1;
                var n = param[1];
                return n + 1 | 0;
               });
     }
     function remove(new_key, acc){
      return caml_call3
              (Core_Map[36],
               acc,
               new_key,
               function(param){
                if(! param) return 0;
                var n = param[1];
                return 1 === n ? 0 : [0, n - 1 | 0];
               });
     }
     return unordered_fold
             ([0, data_equal],
              [0,
               function(key, old_data, new_data, acc){
                var
                 prev_key = caml_call2(f, key, old_data),
                 new_key = caml_call2(f, key, new_data),
                 _cj_ = caml_call2(comparator[1][1], prev_key, new_key);
                return caml_call2(Core[90], _cj_, 0)
                        ? acc
                        : add(new_key, remove(prev_key, acc));
               }],
              0,
              0,
              input,
              caml_call1(Core_Map[4], comparator),
              function(key, data, acc){
               return add(caml_call2(f, key, data), acc);
              },
              function(key, data, acc){
               return remove(caml_call2(f, key, data), acc);
              });};
   }
   function map_count(data_equal, input, comparator, f){
    return mapi_count(data_equal, input, comparator)
            (function(param, data){return caml_call1(f, data);});
   }
   function min_helper(map){
    var match = caml_call1(Core_Map[82], map);
    if(! match) return 0;
    var min = match[1][1];
    return [0, min];
   }
   function max_helper(map){
    var match = caml_call1(Core_Map[84], map);
    if(! match) return 0;
    var max = match[1][1];
    return [0, max];
   }
   function bounds_helper(map){
    var
     match = caml_call1(Core_Map[82], map),
     match$0 = caml_call1(Core_Map[84], map);
    if(match){
     if(match$0){
      var max = match$0[1][1], min = match[1][1];
      return [0, [0, min, max]];
     }
    }
    else if(! match$0) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function mapi_min(data_equal, input, comparator, f){
    var _ci_ = mapi_count(data_equal, input, comparator)(f);
    return caml_call2(Incremental[10], _ci_, min_helper);
   }
   function mapi_max(data_equal, input, comparator, f){
    var _ch_ = mapi_count(data_equal, input, comparator)(f);
    return caml_call2(Incremental[10], _ch_, max_helper);
   }
   function mapi_bounds(data_equal, input, comparator, f){
    var _cg_ = mapi_count(data_equal, input, comparator)(f);
    return caml_call2(Incremental[10], _cg_, bounds_helper);
   }
   function mapi_mn(data_equal, input, comparator, f){
    return mapi_min
            (data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function map_max(data_equal, input, comparator, f){
    return mapi_max
            (data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function min_value(data_equal, input, comparator){
    return mapi_mn
            (data_equal, input, comparator, function(_cf_){return _cf_;});
   }
   function max_value(data_equal, input, comparator){
    return map_max
            (data_equal, input, comparator, function(_ce_){return _ce_;});
   }
   function map_bounds(data_equal, input, comparator, f){
    return mapi_bounds
            (data_equal,
             input,
             comparator,
             function(param, data){return caml_call1(f, data);});
   }
   function value_bounds(data_equal, input, comparator){
    return map_bounds
            (data_equal, input, comparator, function(_cd_){return _cd_;});
   }
   function merge(opt, _b9_, left_map, right_map, f){
    if(opt)
     var sth = opt[1], data_equal_left = sth;
    else
     var data_equal_left = Core[246];
    if(_b9_)
     var sth$0 = _b9_[1], data_equal_right = sth$0;
    else
     var data_equal_right = Core[246];
    return with_old2
            (left_map,
             right_map,
             function(old, new_left_map, new_right_map){
              var comparator = caml_call1(Core_Map[2], new_left_map);
              if(old)
               var
                x = old[1],
                old_output = x[3],
                old_right_map = x[2],
                old_left_map = x[1];
              else
               var
                old_left_map$0 = caml_call1(Core_Map[110][1], comparator),
                old_output = old_left_map$0,
                old_right_map = old_left_map$0,
                old_left_map = old_left_map$0;
              var
               left_diff =
                 caml_call3
                  (Core_Map[80], old_left_map, new_left_map, data_equal_left),
               right_diff =
                 caml_call3
                  (Core_Map[80],
                   old_right_map,
                   new_right_map,
                   data_equal_right),
               _b__ =
                 caml_call3
                  (Core_Sequence[62],
                   left_diff,
                   right_diff,
                   function(param, _cc_){
                    var right_key = _cc_[1], left_key = param[1];
                    return caml_call2(comparator[1], left_key, right_key);
                   });
              return caml_call3
                      (Core_Sequence[18],
                       _b__,
                       old_output,
                       function(output, diff_element){
                        if(2 === diff_element[0]){
                         var
                          right_key = diff_element[2][1],
                          left_key = diff_element[1][1],
                          _ca_ = caml_call2(comparator[1], left_key, right_key);
                         if(! caml_call2(Core[90], _ca_, 0))
                          throw caml_maybe_attach_backtrace
                                 ([0, Assert_failure, _b_], 1);
                         var key$0 = left_key;
                        }
                        else
                         var key = diff_element[1][1], key$0 = key;
                        function new_data(param){
                         var _cb_ = param[1];
                         if(847852583 === _cb_) return 0;
                         var x = 1013247643 <= _cb_ ? param[2][2] : param[2];
                         return [0, x];
                        }
                        switch(diff_element[0]){
                          case 0:
                           var
                            left_diff = diff_element[1][2],
                            right_data_opt =
                              caml_call2(Core_Map[38], new_right_map, key$0),
                            right_data_opt$0 = right_data_opt,
                            left_data_opt = new_data(left_diff);
                           break;
                          case 1:
                           var
                            right_diff = diff_element[1][2],
                            right_data_opt$1 = new_data(right_diff),
                            right_data_opt$0 = right_data_opt$1,
                            left_data_opt =
                              caml_call2(Core_Map[38], new_left_map, key$0);
                           break;
                          default:
                           var
                            right_diff$0 = diff_element[2][2],
                            left_diff$0 = diff_element[1][2],
                            right_data_opt$2 = new_data(right_diff$0),
                            left_data_opt$0 = new_data(left_diff$0),
                            right_data_opt$0 = right_data_opt$2,
                            left_data_opt = left_data_opt$0;
                        }
                        if(left_data_opt){
                         var x = left_data_opt[1];
                         if(right_data_opt$0)
                          var
                           y = right_data_opt$0[1],
                           _b$_ = caml_call2(f, key$0, [0, 737457313, [0, x, y]]);
                         else
                          var _b$_ = caml_call2(f, key$0, [0, 847852583, x]);
                         var output_data_opt = _b$_;
                        }
                        else if(right_data_opt$0)
                         var
                          y$0 = right_data_opt$0[1],
                          output_data_opt = caml_call2(f, key$0, [0, -57574468, y$0]);
                        else
                         var output_data_opt = 0;
                        if(! output_data_opt)
                         return caml_call2(Core_Map[41], output, key$0);
                        var data = output_data_opt[1];
                        return caml_call3(Core_Map[32], output, key$0, data);
                       });
             });
   }
   function generic_mapi_with_comparator(witness, cutoff, opt, lhs){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return function(comparator, f){
     var
      incremental_state = caml_call1(Incremental[4], lhs),
      empty_map = caml_call1(Core_Map[110][1], comparator),
      prev_map = [0, empty_map],
      prev_nodes = [0, empty_map],
      acc = [0, empty_map],
      result =
        caml_call3
         (Incremental[79][2][2],
          incremental_state,
          0,
          function(param){return acc[1];}),
      on_inner_change =
        witness
         ? function
          (key, opt){
           var old = acc[1];
           if(opt)
            var
             data = opt[1],
             _b8_ = caml_call3(Core_Map[32], old, key, data);
           else
            var _b8_ = caml_call2(Core_Map[41], old, key);
           acc[1] = _b8_;
           return 0;
          }
         : function
          (key, data){
           acc[1] = caml_call3(Core_Map[32], acc[1], key, data);
           return 0;
          },
      lhs_change = [];
     caml_update_dummy
      (lhs_change,
       [246,
        function(_b1_){
         return caml_call2
                 (Incremental[10],
                  lhs,
                  function(map){
                   var
                    new_nodes =
                      caml_call5
                       (Core_Map[81],
                        prev_map[1],
                        map,
                        data_equal,
                        prev_nodes[1],
                        function(nodes, param){
                         var changed = param[2], key = param[1], _b2_ = changed[1];
                         if(847852583 === _b2_){
                          var
                           match = caml_call2(Core_Map[39], nodes, key),
                           dep = match[2],
                           node = match[1],
                           nodes$0 = caml_call2(Core_Map[41], nodes, key);
                          caml_call2(Incremental[79][2][7], result, dep);
                          acc[1] = caml_call2(Core_Map[41], acc[1], key);
                          caml_call1(Incremental[79][2][5], node);
                          return nodes$0;
                         }
                         if(1013247643 <= _b2_){
                          var node$0 = caml_call2(Core_Map[39], nodes, key)[1];
                          caml_call1(Incremental[79][2][4], node$0);
                          return nodes;
                         }
                         var
                          node$1 =
                            caml_call3
                             (Incremental[79][2][2],
                              incremental_state,
                              0,
                              function(param){
                               return caml_call2(Core_Map[39], prev_map[1], key);
                              });
                         caml_call2
                          (Core_Option[41],
                           cutoff,
                           function(c){
                            var _b7_ = caml_call1(Incremental[79][2][3], node$1);
                            return caml_call2(Incremental[59], _b7_, c);
                           });
                         var
                          _b3_ = caml_call1(Core[237], lhs_change),
                          _b4_ = caml_call2(Incremental[79][1][2], 0, _b3_);
                         caml_call2(Incremental[79][2][6], node$1, _b4_);
                         var
                          _b5_ =
                            caml_call2
                             (f, key, caml_call1(Incremental[79][2][3], node$1)),
                          user_function_dep =
                            caml_call2
                             (Incremental[79][1][2],
                              [0, function(_b6_){return on_inner_change(key, _b6_);}],
                              _b5_);
                         caml_call2(Incremental[79][2][6], result, user_function_dep);
                         return caml_call3
                                 (Core_Map[32], nodes, key, [0, node$1, user_function_dep]);
                        });
                   prev_nodes[1] = new_nodes;
                   prev_map[1] = map;
                   return 0;
                  });
        }]);
     var
      _bZ_ = caml_call1(Core[237], lhs_change),
      _b0_ = caml_call2(Incremental[79][1][2], 0, _bZ_);
     caml_call2(Incremental[79][2][6], result, _b0_);
     return caml_call1(Incremental[79][2][3], result);};
   }
   function filter_mapi$0(cutoff, data_equal, map, f){
    return with_comparator$0
            (map,
             function(comparator){
              return generic_mapi_with_comparator(1, cutoff, data_equal, map)
                      (comparator, f);
             });
   }
   function mapi$0(cutoff, data_equal, map, f){
    return with_comparator$0
            (map,
             function(comparator){
              return generic_mapi_with_comparator(0, cutoff, data_equal, map)
                      (comparator, f);
             });
   }
   function map$0(cutoff, data_equal, map, f){
    return mapi$0
            (cutoff,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function filter_map$0(cutoff, data_equal, map, f){
    return filter_mapi$0
            (cutoff,
             data_equal,
             map,
             function(param, data){return caml_call1(f, data);});
   }
   function merge$0(cutoff, data_equal_left, data_equal_right, map1, map2, f){
    return filter_mapi$0
            (cutoff,
             0,
             merge
              (data_equal_left,
               data_equal_right,
               map1,
               map2,
               function(param, diff){return [0, diff];}),
             function(key, diff){return caml_call2(f, key, diff);});
   }
   function unzip_mapi
   (data_equal, left_result_equal, right_result_equal, input, f){
    var
     pair =
       with_comparator$0
        (input,
         function(comparator){
          if(data_equal)
           var sth = data_equal[1], data_equal$0 = sth;
          else
           var data_equal$0 = Core[246];
          if(left_result_equal)
           var sth$0 = left_result_equal[1], left_result_equal$0 = sth$0;
          else
           var left_result_equal$0 = Core[246];
          if(right_result_equal)
           var sth$1 = right_result_equal[1], right_result_equal$0 = sth$1;
          else
           var right_result_equal$0 = Core[246];
          var
           incremental_state = caml_call1(Incremental[4], input),
           empty_map = caml_call1(Core_Map[110][1], comparator),
           left_acc = [0, empty_map],
           left_result =
             caml_call3
              (Incremental[79][2][2],
               incremental_state,
               0,
               function(param){return left_acc[1];}),
           right_acc = [0, empty_map],
           right_result =
             caml_call3
              (Incremental[79][2][2],
               incremental_state,
               0,
               function(param){return right_acc[1];}),
           prev_map = [0, empty_map],
           input_change =
             caml_call2
              (Incremental[10],
               input,
               function(map){
                var
                 match = caml_call1(Core_Map[28], prev_map[1]),
                 match$0 = caml_call1(Core_Map[28], map);
                a:
                {
                 if(match){
                  if(! match$0){
                   var
                    left$0 =
                      caml_call2
                       (Core_Map[52],
                        map,
                        function(key, data){
                         var l = caml_call2(f, key, data)[1];
                         return l;
                        }),
                    right$0 =
                      caml_call2
                       (Core_Map[52],
                        map,
                        function(key, data){
                         var r = caml_call2(f, key, data)[2];
                         return r;
                        }),
                    right = right$0,
                    left = left$0;
                   break a;
                  }
                 }
                 else if(! match$0){
                  var
                   _bU_ =
                     caml_call5
                      (Core_Map[81],
                       prev_map[1],
                       map,
                       data_equal$0,
                       [0, left_acc[1], right_acc[1]],
                       function(param, _bV_){
                        var
                         changed = _bV_[2],
                         key = _bV_[1],
                         right = param[2],
                         left = param[1],
                         _bW_ = changed[1];
                        if(847852583 === _bW_){
                         var _bX_ = caml_call2(Core_Map[41], right, key);
                         return [0, caml_call2(Core_Map[41], left, key), _bX_];
                        }
                        if(1013247643 <= _bW_){
                         var
                          match = changed[2],
                          new$0 = match[2],
                          prev = match[1],
                          match$0 = caml_call2(f, key, prev),
                          prev_b = match$0[2],
                          prev_a = match$0[1],
                          match$1 = caml_call2(f, key, new$0),
                          new_b = match$1[2],
                          new_a = match$1[1],
                          left$0 =
                            caml_call2(left_result_equal$0, prev_a, new_a)
                             ? left
                             : caml_call3(Core_Map[32], left, key, new_a),
                          right$0 =
                            caml_call2(right_result_equal$0, prev_b, new_b)
                             ? right
                             : caml_call3(Core_Map[32], right, key, new_b);
                         return [0, left$0, right$0];
                        }
                        var
                         element = changed[2],
                         match$2 = caml_call2(f, key, element),
                         b = match$2[2],
                         a = match$2[1],
                         _bY_ = caml_call3(Core_Map[32], right, key, b);
                        return [0, caml_call3(Core_Map[32], left, key, a), _bY_];
                       }),
                   right = _bU_[2],
                   left = _bU_[1];
                  break a;
                 }
                 var right = empty_map, left = empty_map;
                }
                if(1 - caml_call2(Core[246], left_acc[1], left))
                 caml_call1(Incremental[79][2][4], left_result);
                if(1 - caml_call2(Core[246], right_acc[1], right))
                 caml_call1(Incremental[79][2][4], right_result);
                left_acc[1] = left;
                right_acc[1] = right;
                prev_map[1] = map;
                return 0;
               }),
           _bQ_ = caml_call2(Incremental[79][1][2], 0, input_change);
          caml_call2(Incremental[79][2][6], left_result, _bQ_);
          var _bR_ = caml_call2(Incremental[79][1][2], 0, input_change);
          caml_call2(Incremental[79][2][6], right_result, _bR_);
          var
           _bS_ = caml_call1(Incremental[79][2][3], right_result),
           _bT_ = [0, caml_call1(Incremental[79][2][3], left_result), _bS_];
          return caml_call2(Core_Tuple[1][8], Incremental[40], _bT_);
         }),
     _bN_ = caml_call2(Incremental[10], pair, function(_bP_){return _bP_[2];});
    return [0,
            caml_call2(Incremental[10], pair, function(_bO_){return _bO_[1];}),
            _bN_];
   }
   function unzip(left_result_equal, right_result_equal, input){
    var
     data_equal =
       caml_call3
        (Core_Option[23],
         left_result_equal,
         right_result_equal,
         function(l, r){return caml_call2(Core_Tuple[1][10], l, r);});
    return unzip_mapi
            (data_equal,
             left_result_equal,
             right_result_equal,
             input,
             function(param, data){return data;});
   }
   function unzip_mapi$0(cutoff, data_equal, input, f){
    var
     pair =
       with_comparator$0
        (input,
         function(comparator){
          if(data_equal)
           var sth = data_equal[1], data_equal$0 = sth;
          else
           var data_equal$0 = Core[246];
          var
           incremental_state = caml_call1(Incremental[4], input),
           empty_map = caml_call1(Core_Map[110][1], comparator),
           prev_map = [0, empty_map],
           prev_nodes = [0, empty_map],
           left_acc = [0, empty_map],
           left_result =
             caml_call3
              (Incremental[79][2][2],
               incremental_state,
               0,
               function(param){return left_acc[1];}),
           right_acc = [0, empty_map],
           right_result =
             caml_call3
              (Incremental[79][2][2],
               incremental_state,
               0,
               function(param){return right_acc[1];}),
           input_change = [];
          caml_update_dummy
           (input_change,
            [246,
             function(_bI_){
              return caml_call2
                      (Incremental[10],
                       input,
                       function(map){
                        var
                         new_nodes =
                           caml_call5
                            (Core_Map[81],
                             prev_map[1],
                             map,
                             data_equal$0,
                             prev_nodes[1],
                             function(nodes, param){
                              var changed = param[2], key = param[1], _bJ_ = changed[1];
                              if(847852583 === _bJ_){
                               var
                                match = caml_call2(Core_Map[39], nodes, key),
                                right_dep = match[3],
                                left_dep = match[2],
                                node = match[1],
                                nodes$0 = caml_call2(Core_Map[41], nodes, key);
                               caml_call2(Incremental[79][2][7], left_result, left_dep);
                               caml_call2(Incremental[79][2][7], right_result, right_dep);
                               left_acc[1] = caml_call2(Core_Map[41], left_acc[1], key);
                               right_acc[1] = caml_call2(Core_Map[41], right_acc[1], key);
                               caml_call1(Incremental[79][2][5], node);
                               return nodes$0;
                              }
                              if(1013247643 <= _bJ_){
                               var node$0 = caml_call2(Core_Map[39], nodes, key)[1];
                               caml_call1(Incremental[79][2][4], node$0);
                               return nodes;
                              }
                              var
                               node$1 =
                                 caml_call3
                                  (Incremental[79][2][2],
                                   incremental_state,
                                   0,
                                   function(param){
                                    return caml_call2(Core_Map[39], prev_map[1], key);
                                   });
                              caml_call2
                               (Core_Option[41],
                                cutoff,
                                function(c){
                                 var _bM_ = caml_call1(Incremental[79][2][3], node$1);
                                 return caml_call2(Incremental[59], _bM_, c);
                                });
                              var
                               _bK_ = caml_call1(Core[237], input_change),
                               _bL_ = caml_call2(Incremental[79][1][2], 0, _bK_);
                              caml_call2(Incremental[79][2][6], node$1, _bL_);
                              var
                               match$0 =
                                 caml_call2
                                  (f, key, caml_call1(Incremental[79][2][3], node$1)),
                               right_incr = match$0[2],
                               left_incr = match$0[1],
                               left_user_function_dep =
                                 caml_call2
                                  (Incremental[79][1][2],
                                   [0,
                                    function(data){
                                     left_acc[1] =
                                      caml_call3(Core_Map[32], left_acc[1], key, data);
                                     return 0;
                                    }],
                                   left_incr),
                               right_user_function_dep =
                                 caml_call2
                                  (Incremental[79][1][2],
                                   [0,
                                    function(data){
                                     right_acc[1] =
                                      caml_call3(Core_Map[32], right_acc[1], key, data);
                                     return 0;
                                    }],
                                   right_incr);
                              caml_call2
                               (Incremental[79][2][6], left_result, left_user_function_dep);
                              caml_call2
                               (Incremental[79][2][6],
                                right_result,
                                right_user_function_dep);
                              return caml_call3
                                      (Core_Map[32],
                                       nodes,
                                       key,
                                       [0, node$1, left_user_function_dep, right_user_function_dep]);
                             });
                        prev_nodes[1] = new_nodes;
                        prev_map[1] = map;
                        return 0;
                       });
             }]);
          var
           _bC_ = caml_call1(Core[237], input_change),
           _bD_ = caml_call2(Incremental[79][1][2], 0, _bC_);
          caml_call2(Incremental[79][2][6], left_result, _bD_);
          var
           _bE_ = caml_call1(Core[237], input_change),
           _bF_ = caml_call2(Incremental[79][1][2], 0, _bE_);
          caml_call2(Incremental[79][2][6], right_result, _bF_);
          var
           _bG_ = caml_call1(Incremental[79][2][3], right_result),
           _bH_ = [0, caml_call1(Incremental[79][2][3], left_result), _bG_];
          return caml_call2(Core_Tuple[1][8], Incremental[40], _bH_);
         }),
     _bz_ = caml_call2(Incremental[10], pair, function(_bB_){return _bB_[2];});
    return [0,
            caml_call2(Incremental[10], pair, function(_bA_){return _bA_[1];}),
            _bz_];
   }
   function keys(map){
    return with_comparator$0
            (map,
             function(comparator){
              function add(key, param, acc){
               return caml_call2(Core_Set[11], acc, key);
              }
              function remove(key, param, acc){
               return caml_call2(Core_Set[12], acc, key);
              }
              function data_equal(param, _by_){return 1;}
              return unordered_fold
                      ([0, data_equal],
                       0,
                       0,
                       _c_,
                       map,
                       caml_call1(Core_Set[3][1], comparator),
                       add,
                       remove);
             });
   }
   function partition_mapi(data_equal, map, f){
    return with_comparator$0
            (map,
             function(comparator){
              var empty = caml_call1(Core_Map[110][1], comparator);
              return unordered_fold
                      (data_equal,
                       [0,
                        function(key, param, data, _bv_){
                         var
                          second = _bv_[2],
                          first = _bv_[1],
                          match = caml_call2(f, key, data);
                         if(0 === match[0]){
                          var
                           data$0 = match[1],
                           _bw_ = caml_call2(Core_Map[41], second, key);
                          return [0,
                                  caml_call3(Core_Map[32], first, key, data$0),
                                  _bw_];
                         }
                         var
                          data$1 = match[1],
                          _bx_ = caml_call3(Core_Map[32], second, key, data$1);
                         return [0, caml_call2(Core_Map[41], first, key), _bx_];
                        }],
                       0,
                       _d_,
                       map,
                       [0, empty, empty],
                       function(key, data, param){
                        var
                         second = param[2],
                         first = param[1],
                         match = caml_call2(f, key, data);
                        if(0 === match[0]){
                         var data$0 = match[1];
                         return [0,
                                 caml_call3(Core_Map[31], first, key, data$0),
                                 second];
                        }
                        var data$1 = match[1];
                        return [0,
                                first,
                                caml_call3(Core_Map[31], second, key, data$1)];
                       },
                       function(key, param, _bt_){
                        var
                         second = _bt_[2],
                         first = _bt_[1],
                         _bu_ = caml_call2(Core_Map[41], second, key);
                        return [0, caml_call2(Core_Map[41], first, key), _bu_];
                       });
             });
   }
   function flatten(state, map){
    var
     _br_ = caml_call1(Core_Map[2], map),
     result = [0, caml_call1(Core_Map[110][1], _br_)],
     node =
       caml_call3
        (Incremental[79][2][2], state, 0, function(param){return result[1];});
    caml_call2
     (Core_Map[45],
      map,
      function(key, incr){
       var
        _bs_ =
          caml_call2
           (Incremental[79][1][2],
            [0,
             function(a){
              result[1] = caml_call3(Core_Map[32], result[1], key, a);
              return 0;
             }],
            incr);
       return caml_call2(Incremental[79][2][6], node, _bs_);
      });
    return caml_call1(Incremental[79][2][3], node);
   }
   function join(map_incr){
    return with_comparator$0
            (map_incr,
             function(comparator){
              var
               incremental_state = caml_call1(Incremental[4], map_incr),
               empty_map = caml_call1(Core_Map[110][1], comparator),
               result_map = [0, empty_map],
               old_map_of_incrs = [0, empty_map],
               current_dependencies = [0, empty_map],
               result =
                 caml_call3
                  (Incremental[79][2][2],
                   incremental_state,
                   0,
                   function(param){return result_map[1];});
              function add_subnode(current_dependencies, key, data_node){
               var
                new_dep =
                  caml_call2
                   (Incremental[79][1][2],
                    [0,
                     function(data){
                      result_map[1] =
                       caml_call3(Core_Map[32], result_map[1], key, data);
                      return 0;
                     }],
                    data_node);
               caml_call2(Incremental[79][2][6], result, new_dep);
               return caml_call3
                       (Core_Map[32], current_dependencies, key, new_dep);
              }
              function remove_subnode(current_dependencies, key){
               var dep = caml_call2(Core_Map[39], current_dependencies, key);
               caml_call2(Incremental[79][2][7], result, dep);
               result_map[1] = caml_call2(Core_Map[41], result_map[1], key);
               return caml_call2(Core_Map[41], current_dependencies, key);
              }
              var
               lhs_change =
                 caml_call2
                  (Incremental[10],
                   map_incr,
                   function(map_of_incrs){
                    var
                     new_dependency_map =
                       caml_call5
                        (Core_Map[81],
                         old_map_of_incrs[1],
                         map_of_incrs,
                         Core[246],
                         current_dependencies[1],
                         function(current_dependencies, param){
                          var diff = param[2], key = param[1], _bq_ = diff[1];
                          if(847852583 === _bq_)
                           return remove_subnode(current_dependencies, key);
                          if(1013247643 <= _bq_){
                           var data_node = diff[2][2];
                           return add_subnode
                                   (remove_subnode(current_dependencies, key), key, data_node);
                          }
                          var data_node$0 = diff[2];
                          return add_subnode(current_dependencies, key, data_node$0);
                         });
                    current_dependencies[1] = new_dependency_map;
                    old_map_of_incrs[1] = map_of_incrs;
                    return 0;
                   }),
               _bp_ = caml_call2(Incremental[79][1][2], 0, lhs_change);
              caml_call2(Incremental[79][2][6], result, _bp_);
              return caml_call1(Incremental[79][2][3], result);
             });
   }
   function separate(input_map, data_equal){
    var incremental_state = caml_call1(Incremental[4], input_map);
    return with_comparator$0
            (input_map,
             function(comparator){
              var
               empty = caml_call1(Core_Map[110][1], comparator),
               state = [0, empty, empty, empty],
               output_map_node =
                 caml_call3
                  (Incremental[79][2][2],
                   incremental_state,
                   0,
                   function(param){return state[3];});
              function make_node_depend_on_input_map_(node, input_map_changed){
               var
                _bo_ = caml_call1(Core_Lazy[32], input_map_changed),
                dependency = caml_call2(Incremental[79][1][2], 0, _bo_);
               return caml_call2(Incremental[79][2][6], node, dependency);
              }
              var input_map_changed = [];
              caml_update_dummy
               (input_map_changed,
                [246,
                 function(_bh_){
                  return caml_call2
                          (Incremental[10],
                           input_map,
                           function(input_map){
                            var
                             prev_input_map = state[1],
                             match =
                               caml_call5
                                (Core_Map[81],
                                 prev_input_map,
                                 input_map,
                                 data_equal,
                                 [0, state[2], state[3]],
                                 function(param, _bi_){
                                  var
                                   change = _bi_[2],
                                   key = _bi_[1],
                                   output_map = param[2],
                                   expert_nodes = param[1],
                                   _bj_ = change[1];
                                  if(847852583 === _bj_){
                                   var old_node = caml_call2(Core_Map[39], expert_nodes, key);
                                   caml_call1(Incremental[79][2][5], old_node);
                                   caml_call1(Incremental[79][2][4], output_map_node);
                                   var _bk_ = caml_call2(Core_Map[41], output_map, key);
                                   return [0,
                                           caml_call2(Core_Map[41], expert_nodes, key),
                                           _bk_];
                                  }
                                  if(1013247643 <= _bj_){
                                   var _bl_ = caml_call2(Core_Map[39], expert_nodes, key);
                                   caml_call1(Incremental[79][2][4], _bl_);
                                   return [0, expert_nodes, output_map];
                                  }
                                  var
                                   node =
                                     caml_call3
                                      (Incremental[79][2][2],
                                       incremental_state,
                                       0,
                                       function(param){
                                        return caml_call2(Core_Map[39], state[1], key);
                                       });
                                  make_node_depend_on_input_map_(node, input_map_changed);
                                  caml_call1(Incremental[79][2][4], output_map_node);
                                  var
                                   _bm_ = caml_call1(Incremental[79][2][3], node),
                                   _bn_ = caml_call3(Core_Map[31], output_map, key, _bm_);
                                  return [0,
                                          caml_call3(Core_Map[31], expert_nodes, key, node),
                                          _bn_];
                                 }),
                             output_map = match[2],
                             expert_nodes = match[1];
                            state[1] = input_map;
                            state[2] = expert_nodes;
                            state[3] = output_map;
                            return 0;
                           });
                 }]);
              make_node_depend_on_input_map_
               (output_map_node, input_map_changed);
              return caml_call1(Incremental[79][2][3], output_map_node);
             });
   }
   function subrange(opt, map_incr){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return function(range){
     return with_old2
             (map_incr,
              range,
              function(old, map, range){
               var compare = caml_call1(Core_Map[2], map)[1];
               function equal(l, r){
                var _bg_ = caml_call2(compare, l, r);
                return caml_call2(Core[90], _bg_, 0);
               }
               function maybe_bound_equal(a_002, b_003){
                if(caml_call2(Ppx_compare_lib[1], a_002, b_003)) return 1;
                if(typeof a_002 === "number"){
                 if(typeof b_003 === "number") return 1;
                 if(1 === b_003[0]) return 0;
                }
                else{
                 if(0 === a_002[0]){
                  var a_004 = a_002[1];
                  if(typeof b_003 !== "number" && 0 === b_003[0]){
                   var b_005 = b_003[1];
                   return equal(a_004, b_005);
                  }
                  return 0;
                 }
                 var a_006 = a_002[1];
                 if(typeof b_003 === "number") return 0;
                 if(0 !== b_003[0]){
                  var b_007 = b_003[1];
                  return equal(a_006, b_007);
                 }
                }
                return 0;
               }
               function range_is_empty(min, max){
                a:
                if(typeof min !== "number"){
                 if(0 === min[0]){
                  var min$0 = min[1];
                  if(typeof max === "number") break a;
                  if(0 === max[0]){
                   var
                    max$0 = max[1],
                    _bd_ = caml_call2(compare, min$0, max$0);
                   return caml_call2(Core[91], _bd_, 0);
                  }
                  var max$1 = max[1], min$1 = min$0;
                 }
                 else{
                  var _bf_ = min[1];
                  if(typeof max === "number") break a;
                  var max$1 = max[1], min$1 = _bf_;
                 }
                 var _be_ = caml_call2(compare, min$1, max$1);
                 return caml_call2(Core[88], _be_, 0);
                }
                return 0;
               }
               function range_includes(min, max, key){
                var
                 _bc_ = caml_call3(Core_Maybe_bound[17], min, key, compare);
                return _bc_
                        ? caml_call3(Core_Maybe_bound[18], max, key, compare)
                        : _bc_;
               }
               if(! range){
                var _a7_ = caml_call1(Core_Map[2], map);
                return caml_call1(Core_Map[110][1], _a7_);
               }
               var range$0 = range[1], max = range$0[2], min = range$0[1];
               function from_scratch(param){
                return caml_call3(Core_Map[94], map, min, max);
               }
               if(old){
                var _a6_ = old[1], match = _a6_[2];
                if(match){
                 var
                  old_range = match[1],
                  old_min = old_range[1],
                  old_map = _a6_[1],
                  old_max = old_range[2];
                 if
                  (!
                   range_is_empty(old_min, old_max)
                   &&
                    !
                    range_is_empty(min, old_max)
                    && ! range_is_empty(old_min, max)){
                  var old_res = _a6_[3], old_max$0 = old_range[2];
                  return caml_call1
                          (Core[260],
                           function(param){
                            function apply_diff_in_intersection(param$0, _a$_){
                             var
                              data = _a$_[2],
                              key = _a$_[1],
                              map = param$0[2],
                              outside = param$0[1],
                              _a__ = range_includes(min, max, key),
                              _ba_ = _a__ ? range_includes(old_min, old_max$0, key) : _a__;
                             if(! _ba_){
                              var outside$0 = outside - 1 | 0;
                              return 0 <= outside$0
                                      ? [0, outside$0, caml_call2(Core_Map[41], map, key)]
                                      : caml_call1(param, from_scratch(0));
                             }
                             var _bb_ = data[1];
                             if(847852583 === _bb_)
                              return [0, outside, caml_call2(Core_Map[41], map, key)];
                             var data$0 = 1013247643 <= _bb_ ? data[2][2] : data[2];
                             return [0,
                                     outside,
                                     caml_call3(Core_Map[32], map, key, data$0)];
                            }
                            var
                             outside_cutoff = caml_call1(Core_Map[29], old_res) / 4 | 0,
                             with_updated_values_in_interse =
                               caml_call5
                                 (Core_Map[81],
                                  old_map,
                                  map,
                                  data_equal,
                                  [0, outside_cutoff, old_res],
                                  apply_diff_in_intersection)
                                [2];
                            if
                             (caml_call4
                               (Core_Tuple[1][10],
                                maybe_bound_equal,
                                maybe_bound_equal,
                                old_range,
                                range$0))
                             return with_updated_values_in_interse;
                            var
                             without_keys_out_of_range =
                               caml_call3
                                (Core_Map[94], with_updated_values_in_interse, min, max);
                            function map_append_exn(lower_part, upper_part){
                             var
                              match = caml_call2(Core_Map[93], lower_part, upper_part);
                             if(typeof match === "number")
                              return caml_call1(Core[6], cst_impossible_case_BUG_in_inc);
                             var map = match[2];
                             return map;
                            }
                            if(typeof old_min === "number")
                             var
                              _a8_ = caml_call1(Core_Map[2], map),
                              lower_part = caml_call1(Core_Map[110][1], _a8_);
                            else if(0 === old_min[0])
                             var
                              old_min$0 = old_min[1],
                              lower_part =
                                caml_call3(Core_Map[94], map, min, [1, old_min$0]);
                            else
                             var
                              old_min$1 = old_min[1],
                              lower_part =
                                caml_call3(Core_Map[94], map, min, [0, old_min$1]);
                            if(typeof old_max$0 === "number")
                             var
                              _a9_ = caml_call1(Core_Map[2], map),
                              upper_part = caml_call1(Core_Map[110][1], _a9_);
                            else if(0 === old_max$0[0])
                             var
                              old_max = old_max$0[1],
                              upper_part =
                                caml_call3(Core_Map[94], map, [1, old_max], max);
                            else
                             var
                              old_max$1 = old_max$0[1],
                              upper_part =
                                caml_call3(Core_Map[94], map, [0, old_max$1], max);
                            var
                             with_new_keys_now_in_range =
                               map_append_exn
                                (lower_part,
                                 map_append_exn(without_keys_out_of_range, upper_part));
                            return with_new_keys_now_in_range;
                           });
                 }
                 return from_scratch(0);
                }
               }
               return from_scratch(0);
              });};
   }
   function rekey(data_equal, map_incr, outer_comparator, f){
    return unordered_fold
            (data_equal,
             [0,
              function(key, old_data, new_data, output){
               var
                prev_key = caml_call2(f, key, old_data),
                new_key = caml_call2(f, key, new_data),
                _a4_ =
                  caml_call2
                   (caml_call1(Core_Map[2], output)[1], prev_key, new_key);
               if(caml_call2(Core[90], _a4_, 0))
                return caml_call3(Core_Map[32], output, new_key, new_data);
               var _a5_ = caml_call2(Core_Map[41], output, prev_key);
               return caml_call3(Core_Map[31], _a5_, new_key, new_data);
              }],
             0,
             _e_,
             map_incr,
             caml_call1(Core_Map[4], outer_comparator),
             function(key, data, output){
              var _a3_ = caml_call2(f, key, data);
              return caml_call3(Core_Map[31], output, _a3_, data);
             },
             function(key, data, output){
              var _a2_ = caml_call2(f, key, data);
              return caml_call2(Core_Map[41], output, _a2_);
             });
   }
   function index_byi(data_equal, map_incr, outer_comparator, index){
    return with_comparator$0
            (map_incr,
             function(inner_comparator){
              return unordered_fold
                      (data_equal,
                       0,
                       0,
                       _f_,
                       map_incr,
                       caml_call1(Core_Map[4], outer_comparator),
                       function(inner_key, data, outer_map){
                        var match = caml_call2(index, inner_key, data);
                        if(! match) return outer_map;
                        var outer_key = match[1];
                        return caml_call3
                                (Core_Map[37],
                                 outer_map,
                                 outer_key,
                                 function(param){
                                  if(! param)
                                   return caml_call3
                                           (Core_Map[110][2], inner_comparator, inner_key, data);
                                  var inner_map = param[1];
                                  return caml_call3(Core_Map[31], inner_map, inner_key, data);
                                 });
                       },
                       function(inner_key, data, outer_map){
                        var match = caml_call2(index, inner_key, data);
                        if(! match) return outer_map;
                        var outer_key = match[1];
                        return caml_call3
                                (Core_Map[36],
                                 outer_map,
                                 outer_key,
                                 function(param){
                                  if(! param)
                                   return caml_call1(Core[6], cst_BUG_Hit_supposedly_impossi);
                                  var
                                   inner_map = param[1],
                                   inner_map$0 = caml_call2(Core_Map[41], inner_map, inner_key);
                                  return caml_call1(Core_Map[28], inner_map$0)
                                          ? 0
                                          : [0, inner_map$0];
                                 });
                       });
             });
   }
   function index_by(data_equal, map_incr, comparator, index){
    return index_byi
            (data_equal,
             map_incr,
             comparator,
             function(param, data){return caml_call1(index, data);});
   }
   function is_known(param){
    if(typeof param === "number" && param) return 0;
    return 1;
   }
   function to_option(param){
    if(typeof param === "number") return 0;
    var k = param[1];
    return [0, k];
   }
   function find_key_range_linear(from, to, map){
    var
     len = caml_call1(Core_Map[29], map),
     begin_key = caml_call2(Core_Int[84], from, len) ? 0 : 1,
     end_key = caml_call2(Core_Int[84], to, len) ? 0 : 1;
    function find_keys(fold, start_pos, advance_pos){
     return caml_call1
             (Core[260],
              function(param){
               return caml_call3
                       (fold,
                        map,
                        [0, begin_key, end_key, start_pos],
                        function(key, param$0, _a1_){
                         var
                          pos = _a1_[3],
                          end_key = _a1_[2],
                          begin_key = _a1_[1],
                          begin_key$0 =
                            caml_call2(Core_Int[86], pos, from) ? [0, key] : begin_key,
                          end_key$0 =
                            caml_call2(Core_Int[86], pos, to) ? [0, key] : end_key;
                         if(is_known(begin_key$0) && is_known(end_key$0))
                          return caml_call1(param, [0, begin_key$0, end_key$0, pos]);
                         return [0,
                                 begin_key$0,
                                 end_key$0,
                                 caml_call1(advance_pos, pos)];
                        });
              });
    }
    var
     match =
       caml_call2(Core[92], to, len - from | 0)
        ? find_keys(Core_Map[55], 0, function(pos){return pos + 1 | 0;})
        : find_keys
          (Core_Map[57], len - 1 | 0, function(pos){return pos - 1 | 0;}),
     end_key$0 = match[2],
     begin_key$0 = match[1],
     _a0_ = to_option(begin_key$0);
    return caml_call2
            (Core_Option[29],
             _a0_,
             function(begin_key){return [0, begin_key, to_option(end_key$0)];});
   }
   function find_offset(compare, key, changed_key, change){
    var _aY_ = caml_call2(compare, changed_key, key);
    if(! caml_call2(Core_Int[88], _aY_, 0)) return 0;
    if(typeof change !== "number"){
     var _aZ_ = change[1];
     if(-57574468 === _aZ_) return -1;
     if(847852583 === _aZ_) return 1;
    }
    return 0;
   }
   function rank(map, key){
    return with_comparator$0
            (map,
             function(comparator){
              var compare_key = comparator[1];
              function same_key(a, b){
               var _aX_ = caml_call2(compare_key, a, b);
               return caml_call2(Core[90], _aX_, 0);
              }
              function process(old, new_map, new_key){
               var old$0 = old;
               for(;;){
                if(! caml_call2(Core_Map[42], new_map, new_key)) return 0;
                if(old$0){
                 var
                  match = old$0[1],
                  old_rank = match[3],
                  old_key = match[2],
                  old_map = match[1];
                 if
                  (caml_call2(Core[246], new_map, old_map)
                   && same_key(old_key, new_key))
                  return old_rank;
                 if(old_rank){
                  var old_rank$0 = old_rank[1];
                  if(! caml_call2(Core[246], new_map, old_map)){
                   if(same_key(new_key, old_key))
                    return [0,
                            caml_call5
                             (Core_Map[81],
                              old_map,
                              new_map,
                              function(param, _aW_){return 1;},
                              old_rank$0,
                              function(acc, param){
                               var diff = param[2], diff_key = param[1];
                               if(typeof diff !== "number"){
                                var _aT_ = diff[1];
                                if(-57574468 === _aT_){
                                 var _aU_ = caml_call2(compare_key, diff_key, new_key);
                                 if(caml_call2(Core[92], _aU_, 0)) return acc + 1 | 0;
                                }
                                else if(847852583 === _aT_){
                                 var _aV_ = caml_call2(compare_key, diff_key, new_key);
                                 if(caml_call2(Core[92], _aV_, 0)) return acc - 1 | 0;
                                }
                               }
                               return acc;
                              })];
                   var
                    old_rank$1 =
                      process
                       ([0, [0, old_map, old_key, [0, old_rank$0]]],
                        new_map,
                        old_key),
                    old$1 = [0, [0, new_map, old_key, old_rank$1]];
                   old$0 = old$1;
                   continue;
                  }
                  var _aR_ = caml_call2(compare_key, new_key, old_key);
                  if(caml_call2(Core[92], _aR_, 0))
                   var
                    upper_bound = [1, old_key],
                    lower_bound = [1, new_key],
                    subrange =
                      caml_call3(Core_Map[94], new_map, lower_bound, upper_bound),
                    _aS_ =
                      (old_rank$0 - caml_call1(Core_Map[29], subrange) | 0) - 1
                      | 0;
                  else
                   var
                    upper_bound$0 = [1, new_key],
                    lower_bound$0 = [1, old_key],
                    subrange$0 =
                      caml_call3
                       (Core_Map[94], new_map, lower_bound$0, upper_bound$0),
                    _aS_ =
                      (old_rank$0 + caml_call1(Core_Map[29], subrange$0) | 0) + 1
                      | 0;
                  return [0, _aS_];
                 }
                }
                return caml_call2(Core_Map[100], new_map, new_key);
               }
              }
              return with_old2(map, key, process);
             });
   }
   function subrange_by_rank(data_equal, map, range){
    function find_key_range(range){
     return with_old2
             (map,
              range,
              function(old, map, param){
               var
                to = param[2],
                from = param[1],
                _aB_ = caml_call2(Core_Int[88], to, from),
                _aC_ = _aB_ || caml_call2(Core_Int[88], from, 0);
               if(_aC_){
                var
                 _aD_ =
                   [0, [1, [0, _g_, [0, caml_call1(Core[356], to), 0]]], 0],
                 _aE_ =
                   [0,
                    [1, [0, _h_, [0, caml_call1(Core[356], from), 0]]],
                    _aD_],
                 _aF_ =
                   [1,
                    [0,
                     caml_call1(Sexplib0_Sexp_conv[7], cst_Invalid_indices),
                     _aE_]];
                caml_call1(Core[253], _aF_);
               }
               if(old){
                var _aG_ = old[1], _aH_ = _aG_[3];
                if(_aH_){
                 var
                  _aI_ = _aH_[1],
                  end_key_opt$0 = _aI_[2],
                  begin_key = _aI_[1],
                  match = _aG_[2],
                  old_to = match[2],
                  old_from = match[1],
                  old_map = _aG_[1],
                  _aJ_ = caml_call1(Core_Map[2], map)[1],
                  range_offset_begin = from - old_from | 0,
                  range_offset_end = to - old_to | 0,
                  adjust_and_offset =
                    function(by$1, key$1){
                     a:
                     {
                      if
                       (caml_call2(Core[88], by$1, 0)
                        && ! caml_call2(Core_Map[42], map, key$1)){var _aQ_ = 1; break a;}
                      var _aQ_ = 0;
                     }
                     var by$2 = by$1 + _aQ_ | 0, key = key$1, by = by$2;
                     for(;;){
                      if(caml_call2(Core_Int[86], by, 0)) return [0, key];
                      if(caml_call2(Core_Int[88], by, 0))
                       var add = 1, closest_dir = -640801497;
                      else
                       var add = -1, closest_dir = -779285466;
                      var match = caml_call3(Core_Map[97], map, closest_dir, key);
                      if(! match) return 0;
                      var key$0 = match[1][1], by$0 = by + add | 0;
                      key = key$0;
                      by = by$0;
                     }
                    },
                  diff =
                    function(init, f){
                     return caml_call5
                             (Core_Map[81],
                              old_map,
                              map,
                              function(param, _aP_){return 1;},
                              init,
                              f);
                    };
                 if(end_key_opt$0)
                  var
                   end_key = end_key_opt$0[1],
                   match$0 =
                     diff
                      (_i_,
                       function(param, _aM_){
                        var
                         change = _aM_[2],
                         key = _aM_[1],
                         offset_end = param[2],
                         offset_begin = param[1],
                         _aN_ =
                           offset_end + find_offset(_aJ_, end_key, key, change) | 0;
                        return [0,
                                offset_begin + find_offset(_aJ_, begin_key, key, change) | 0,
                                _aN_];
                       }),
                   map_offset_end = match$0[2],
                   map_offset_begin = match$0[1],
                   end_key_opt$1 =
                     adjust_and_offset
                      (map_offset_end + range_offset_end | 0, end_key),
                   end_key_opt$2 = end_key_opt$1,
                   begin_key_opt =
                     adjust_and_offset
                      (map_offset_begin + range_offset_begin | 0, begin_key);
                 else
                  var
                   map_offset_begin$0 =
                     diff
                      (0,
                       function(offset_begin, param){
                        var change = param[2], key = param[1];
                        return offset_begin
                               + find_offset(_aJ_, begin_key, key, change)
                               | 0;
                       }),
                   _aA_ = find_key_range_linear(to, to, map),
                   end_key_opt =
                     caml_call2
                      (Core_Option[29], _aA_, function(_aO_){return _aO_[1];}),
                   begin_key_opt$0 =
                     adjust_and_offset
                      (map_offset_begin$0 + range_offset_begin | 0, begin_key),
                   end_key_opt$2 = end_key_opt,
                   begin_key_opt = begin_key_opt$0;
                 var _aK_ = caml_call1(Core_Map[42], map);
                 if(! caml_call2(Core_Option[43], begin_key_opt, _aK_))
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _k_], 1);
                 var _aL_ = caml_call1(Core_Map[42], map);
                 if(caml_call2(Core_Option[43], end_key_opt$2, _aL_))
                  return caml_call2
                          (Core_Option[29],
                           begin_key_opt,
                           function(begin_key){return [0, begin_key, end_key_opt$2];});
                 throw caml_maybe_attach_backtrace
                        ([0, Assert_failure, _j_], 1);
                }
               }
               return find_key_range_linear(from, to, map);
              });
    }
    function symbol(new$0, bound){
     return caml_call2
             (Core_Maybe_bound[16], bound, function(param){return new$0;});
    }
    var
     _aq_ = caml_call1(Incremental[4], map),
     return$0 = caml_call1(Incremental[9], _aq_),
     _ar_ =
       caml_call2
        (Incremental[76][3][5],
         range,
         function(param){
          return typeof param[1] === "number"
                  ? typeof param[2] === "number" ? 0 : 3
                  : typeof param[2] === "number" ? 2 : 1;
         }),
     key_range =
       caml_call2
        (Incremental[76][3][1],
         _ar_,
         function(param){
          if(3 < param >>> 0)
           throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
          switch(param){
            case 0:
             return caml_call1(return$0, _m_);
            case 1:
             var
              l =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   var _az_ = param[1];
                   if(typeof _az_ !== "number"){
                    var pattern_syntax_008 = _az_[1];
                    if(typeof param[2] !== "number") return pattern_syntax_008;
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _n_], 1);
                  }),
              lb =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   var pattern_syntax_009 = param[1];
                   if
                    (typeof pattern_syntax_009 !== "number"
                     && typeof param[2] !== "number")
                    return pattern_syntax_009;
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _o_], 1);
                  }),
              u =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   if(typeof param[1] !== "number"){
                    var match = param[2];
                    if(typeof match !== "number"){
                     var pattern_syntax_010 = match[1];
                     return pattern_syntax_010;
                    }
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _p_], 1);
                  }),
              ub =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   if(typeof param[1] !== "number"){
                    var pattern_syntax_011 = param[2];
                    if(typeof pattern_syntax_011 !== "number")
                     return pattern_syntax_011;
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _q_], 1);
                  }),
              let_syntax_016 =
                find_key_range(caml_call2(Incremental[40], l, u)),
              _as_ = caml_call2(Incremental[76][3][20], lb, ub),
              _at_ = caml_call2(Incremental[76][3][20], let_syntax_016, _as_);
             return caml_call2
                     (Incremental[76][3][5],
                      _at_,
                      function(param){
                       var
                        match = param[2],
                        ub = match[2],
                        lb = match[1],
                        key_range = param[1];
                       if(! key_range) return 0;
                       var
                        _ax_ = key_range[1],
                        match$0 = _ax_[2],
                        begin_key = _ax_[1];
                       if(! match$0) return [0, [0, symbol(begin_key, lb), 0]];
                       var end_key = match$0[1], _ay_ = symbol(end_key, ub);
                       return [0, [0, symbol(begin_key, lb), _ay_]];
                      });
            case 2:
             var
              l$0 =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   var _aw_ = param[1];
                   if(typeof _aw_ !== "number"){
                    var pattern_syntax_012 = _aw_[1];
                    if(typeof param[2] === "number") return pattern_syntax_012;
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _r_], 1);
                  }),
              lb$0 =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   var pattern_syntax_013 = param[1];
                   if
                    (typeof pattern_syntax_013 !== "number"
                     && typeof param[2] === "number")
                    return pattern_syntax_013;
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _s_], 1);
                  }),
              let_syntax_020 =
                find_key_range(caml_call2(Incremental[40], l$0, l$0)),
              _au_ = caml_call2(Incremental[76][3][20], let_syntax_020, lb$0);
             return caml_call2
                     (Incremental[76][3][5],
                      _au_,
                      function(param){
                       var lb = param[2], key_range = param[1];
                       if(! key_range) return 0;
                       var key = key_range[1][1];
                       return [0, [0, symbol(key, lb), 0]];
                      });
            default:
             var
              u$0 =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   if(typeof param[1] === "number"){
                    var match = param[2];
                    if(typeof match !== "number"){
                     var pattern_syntax_014 = match[1];
                     return pattern_syntax_014;
                    }
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _t_], 1);
                  }),
              ub$0 =
                caml_call2
                 (Incremental[76][3][5],
                  range,
                  function(param){
                   if(typeof param[1] === "number"){
                    var pattern_syntax_015 = param[2];
                    if(typeof pattern_syntax_015 !== "number")
                     return pattern_syntax_015;
                   }
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _u_], 1);
                  }),
              let_syntax_023 =
                find_key_range(caml_call2(Incremental[40], u$0, u$0)),
              _av_ = caml_call2(Incremental[76][3][20], let_syntax_023, ub$0);
             return caml_call2
                     (Incremental[76][3][5],
                      _av_,
                      function(param){
                       var ub = param[2], key_range = param[1];
                       if(! key_range) return 0;
                       var key = key_range[1][1];
                       return [0, [0, 0, symbol(key, ub)]];
                      });
          }
         });
    return subrange(data_equal, map)(key_range);
   }
   function transpose(opt, k2_comparator, m){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    return with_comparator$0
            (m,
             function(k1_comparator){
              function update(k1, old_data, new_data, acc){
               return caml_call5
                       (Core_Map[81],
                        old_data,
                        new_data,
                        data_equal,
                        acc,
                        function(acc, param){
                         var diff = param[2], k2 = param[1], _an_ = diff[1];
                         if(847852583 === _an_)
                          var value = 0;
                         else
                          var
                           x = 1013247643 <= _an_ ? diff[2][2] : diff[2],
                           value = [0, x];
                         return caml_call3
                                 (Core_Map[36],
                                  acc,
                                  k2,
                                  function(acc_inner){
                                   var
                                    _ao_ = caml_call1(Core_Map[110][1], k1_comparator),
                                    _ap_ = caml_call2(Core_Option[34], acc_inner, _ao_),
                                    acc_inner$0 =
                                      caml_call3
                                       (Core_Map[36], _ap_, k1, function(param){return value;});
                                   return caml_call1(Core_Map[28], acc_inner$0)
                                           ? 0
                                           : [0, acc_inner$0];
                                  });
                        });
              }
              function add(key, data){
               var _al_ = caml_call1(Core_Map[4], k2_comparator);
               return function(_am_){return update(key, _al_, data, _am_);};
              }
              function remove(key, data){
               var _aj_ = caml_call1(Core_Map[4], k2_comparator);
               return function(_ak_){return update(key, data, _aj_, _ak_);};
              }
              return unordered_fold
                      (0,
                       [0, update],
                       0,
                       _v_,
                       m,
                       caml_call1(Core_Map[4], k2_comparator),
                       add,
                       remove);
             });
   }
   function collapse_by(data_equal, map_incr, merge_keys, comparator){
    return unordered_fold_nested_maps
            (data_equal,
             _w_,
             [0,
              function(outer_key, inner_key, param, new_data, acc){
               var _ai_ = caml_call2(merge_keys, outer_key, inner_key);
               return caml_call3(Core_Map[32], acc, _ai_, new_data);
              }],
             map_incr,
             caml_call1(Core_Map[4], comparator),
             function(outer_key, inner_key, data, acc){
              var _ah_ = caml_call2(merge_keys, outer_key, inner_key);
              return caml_call3(Core_Map[31], acc, _ah_, data);
             },
             function(outer_key, inner_key, param, acc){
              var _ag_ = caml_call2(merge_keys, outer_key, inner_key);
              return caml_call2(Core_Map[41], acc, _ag_);
             });
   }
   function collapse(data_equal, map_incr, inner_comparator){
    return with_comparator$0
            (map_incr,
             function(outer_comparator){
              var
               inner_comparator$0 = inner_comparator[1],
               comparator =
                 caml_call2
                  (Core_Tuple[1][5], outer_comparator, inner_comparator$0);
              return collapse_by
                      (data_equal, map_incr, Core_Tuple[1][6], [0, comparator]);
             });
   }
   function expand(data_equal, map_incr, outer_comparator, inner_comparator){
    return unordered_fold
            (data_equal,
             [0,
              function(param, _af_, new_data, acc){
               var inner_key = param[2], outer_key = param[1];
               return caml_call3
                       (Core_Map[37],
                        acc,
                        outer_key,
                        function(param){
                         if(! param)
                          return caml_call3
                                  (Core_Map[5], inner_comparator, inner_key, new_data);
                         var map = param[1];
                         return caml_call3(Core_Map[32], map, inner_key, new_data);
                        });
              }],
             0,
             _x_,
             map_incr,
             caml_call1(Core_Map[4], outer_comparator),
             function(param, data, acc){
              var inner_key = param[2], outer_key = param[1];
              return caml_call3
                      (Core_Map[37],
                       acc,
                       outer_key,
                       function(param){
                        if(! param)
                         return caml_call3
                                 (Core_Map[5], inner_comparator, inner_key, data);
                        var map = param[1];
                        return caml_call3(Core_Map[31], map, inner_key, data);
                       });
             },
             function(param, _ad_, acc){
              var inner_key = param[2], outer_key = param[1];
              return caml_call3
                      (Core_Map[36],
                       acc,
                       outer_key,
                       function(param){
                        if(! param) return 0;
                        var
                         map = param[1],
                         map$0 = caml_call2(Core_Map[41], map, inner_key),
                         _ae_ = 1 - caml_call1(Core_Map[28], map$0);
                        return caml_call2(Core_Option[55], _ae_, map$0);
                       });
             });
   }
   function counti(data_equal, map_incr, f){
    return unordered_fold
            (data_equal,
             0,
             0,
             _y_,
             map_incr,
             0,
             function(key, data, count){
              return caml_call2(f, key, data) ? count + 1 | 0 : count;
             },
             function(key, data, count){
              return caml_call2(f, key, data) ? count - 1 | 0 : count;
             });
   }
   function count(data_equal, map_incr, f){
    return counti
            (data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function existsi(data_equal, map_incr, f){
    var _ac_ = counti(data_equal, map_incr, f);
    return caml_call2
            (Incremental[10],
             _ac_,
             function(count){return caml_call2(Core[93], count, 0);});
   }
   function exists(data_equal, map_incr, f){
    return existsi
            (data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   function sum(data_equal, map_incr, Group){
    return function(f){
     return unordered_fold
             (data_equal,
              0,
              0,
              _z_,
              map_incr,
              Group[1],
              function(param, v, acc){
               var _ab_ = caml_call1(f, v);
               return caml_call2(Group[2], acc, _ab_);
              },
              function(param, v, acc){
               var _aa_ = caml_call1(f, v);
               return caml_call2(Group[3], acc, _aa_);
              });};
   }
   function for_alli(data_equal, map_incr, f){
    var
     _$_ =
       counti
        (data_equal,
         map_incr,
         function(key, data){return 1 - caml_call2(f, key, data);});
    return caml_call2
            (Incremental[10],
             _$_,
             function(count){return caml_call2(Core[90], count, 0);});
   }
   function for_all(data_equal, map_incr, f){
    return for_alli
            (data_equal,
             map_incr,
             function(param, data){return caml_call1(f, data);});
   }
   var
    For_testing = [0, find_key_range_linear],
    _A_ = [0, "node_is_unnecessary"],
    _B_ = [0, "node_is_invalid"],
    _C_ = [0, "node_is_const"],
    _D_ = [0, "node_info"],
    _E_ = [0, "saved_value"],
    _F_ = [0, "entries"],
    _G_ = [0, "actual_value"],
    _H_ = [0, "key"];
   function M(K){return [0];}
   function create(opt, input_map, comparator){
    if(opt)
     var sth = opt[1], data_equal = sth;
    else
     var data_equal = Core[246];
    var self = [];
    caml_update_dummy
     (self,
      [246,
       function(param){
        var
         updater_node =
           caml_call2
            (Incremental[10],
             input_map,
             function(input_map){
              var
               _X_ = caml_obj_tag(self),
               self$0 =
                 250 === _X_
                  ? self[1]
                  : 246 === _X_ ? caml_call1(CamlinternalLazy[2], self) : self;
              caml_call5
               (Core_Map[81],
                self$0[1],
                input_map,
                data_equal,
                0,
                function(param, _Y_){
                 var
                  changed_value = _Y_[2],
                  key = _Y_[1],
                  entries = caml_call2(Core_Map[35], self$0[2], key);
                 return caml_call2
                         (Core_List[9],
                          entries,
                          function(entry){
                           var _Z_ = changed_value[1];
                           if(847852583 === _Z_)
                            var ___ = 0;
                           else
                            var
                             new_value =
                               1013247643 <= _Z_ ? changed_value[2][2] : changed_value[2],
                             ___ = [0, new_value];
                           entry[1] = ___;
                           return caml_call1(Incremental[79][2][4], entry[2]);
                          });
                });
              self$0[1] = input_map;
              return 0;
             }),
         empty_map = caml_call1(Core_Map[110][1], comparator),
         _W_ = caml_call1(Incremental[4], input_map);
        return [0,
                empty_map,
                empty_map,
                updater_node,
                caml_call2(Incremental[50][2], _W_, 0)];
       }]);
    var _V_ = caml_obj_tag(self);
    return 250 === _V_
            ? self[1]
            : 246 === _V_ ? caml_call1(CamlinternalLazy[2], self) : self;
   }
   function find(t, key){
    var match = caml_call2(Core_Map[35], t[2], key);
    if(match){
     var entry = match[1];
     return caml_call1(Incremental[79][2][3], entry[2]);
    }
    var incremental_state = caml_call1(Incremental[4], t[3]);
    return caml_call3
            (Incremental[50][3],
             incremental_state,
             t[4],
             function(param){
              var entry = [];
              caml_update_dummy
               (entry,
                [246,
                 function(param){
                  var
                   _R_ =
                     caml_call3
                      (Incremental[79][2][2],
                       incremental_state,
                       [0,
                        function(is_now_observable){
                         var
                          _S_ = caml_obj_tag(entry),
                          entry$0 =
                            250 === _S_
                             ? entry[1]
                             : 246
                               === _S_
                               ? caml_call1(CamlinternalLazy[2], entry)
                               : entry,
                          current_entries = caml_call2(Core_Map[35], t[2], key),
                          _T_ = caml_call1(Core[246], entry$0),
                          is_linked = caml_call2(Core_List[13], current_entries, _T_);
                         if(caml_call2(Core_Bool[27], is_linked, is_now_observable))
                          return 0;
                         if(is_now_observable){
                          t[2] =
                           caml_call3
                            (Core_Map[37],
                             t[2],
                             key,
                             function(param){
                              if(param){
                               var other_entries = param[1];
                               if(other_entries){
                                var other_entry = other_entries[1];
                                entry$0[1] = other_entry[1];
                                return [0, entry$0, other_entries];
                               }
                              }
                              entry$0[1] = caml_call2(Core_Map[38], t[1], key);
                              return [0, entry$0, 0];
                             });
                          return 0;
                         }
                         var
                          new_entries =
                            caml_call2
                             (Core_List[50],
                              current_entries,
                              function(x){return 1 - caml_call2(Core[246], entry$0, x);}),
                          _U_ =
                            caml_call1(Core_List[8], new_entries)
                             ? caml_call2(Core_Map[41], t[2], key)
                             : caml_call3(Core_Map[32], t[2], key, new_entries);
                         t[2] = _U_;
                         return 0;
                        }],
                       function(param){return caml_call1(Core[237], entry)[1];});
                  return [0, caml_call2(Core_Map[38], t[1], key), _R_];
                 }]);
              var
               _P_ = caml_obj_tag(entry),
               entry$0 =
                 250 === _P_
                  ? entry[1]
                  : 246
                    === _P_
                    ? caml_call1(CamlinternalLazy[2], entry)
                    : entry,
               _Q_ = caml_call2(Incremental[79][1][2], 0, t[3]);
              caml_call2(Incremental[79][2][6], entry$0[2], _Q_);
              return caml_call1(Incremental[79][2][3], entry$0[2]);
             });
   }
   function sexp_of_t(sexp_of_key, sexp_of_value, t){
    var
     info_per_key =
       caml_call3
        (Core_Map[77],
         t[1],
         t[2],
         function(key, data){
          var _I_ = data[1];
          if(737457313 === _I_)
           var
            match = data[2],
            entries = match[2],
            x = match[1],
            actual_value = [0, x],
            entries$0 = entries,
            actual_value$0 = actual_value;
          else if(847852583 <= _I_)
           var x$0 = data[2], entries$0 = 0, actual_value$0 = [0, x$0];
          else
           var y = data[2], entries$0 = y, actual_value$0 = 0;
          var
           match$0 =
             [0,
              [1,
               [0,
                _F_,
                [0,
                 caml_call2
                  (Core[421],
                   function(entry){
                    var
                     saved_value = entry[1],
                     node = entry[2],
                     node$0 = caml_call1(Incremental[79][2][3], node),
                     match = caml_call1(Incremental[67], node$0),
                     _K_ = caml_call1(Incremental[5], node$0),
                     match$0 = caml_call2(Core_Option[55], _K_, 0),
                     _L_ = 1 - caml_call1(Incremental[6], node$0),
                     match$1 = caml_call2(Core_Option[55], _L_, 0),
                     _M_ = 1 - caml_call1(Incremental[7], node$0),
                     _N_ = caml_call2(Core_Option[55], _M_, 0),
                     match$2 = 0;
                    if(_N_)
                     var
                      v = _N_[1],
                      match$3 =
                        [0,
                         [1, [0, _A_, [0, caml_call1(Core[518], v), 0]]],
                         match$2];
                    else
                     var match$3 = match$2;
                    if(match$1)
                     var
                      v$0 = match$1[1],
                      match$4 =
                        [0,
                         [1, [0, _B_, [0, caml_call1(Core[518], v$0), 0]]],
                         match$3];
                    else
                     var match$4 = match$3;
                    if(match$0)
                     var
                      v$1 = match$0[1],
                      match$5 =
                        [0,
                         [1, [0, _C_, [0, caml_call1(Core[518], v$1), 0]]],
                         match$4];
                    else
                     var match$5 = match$4;
                    if(match)
                     var
                      v$2 = match[1],
                      _O_ =
                        [0,
                         [1, [0, _D_, [0, caml_call1(Core_Info[6], v$2), 0]]],
                         match$5];
                    else
                     var _O_ = match$5;
                    return [1,
                            [0,
                             [1,
                              [0,
                               _E_,
                               [0, caml_call2(Core[454], sexp_of_value, saved_value), 0]]],
                             _O_]];
                   },
                   entries$0),
                 0]]],
              0];
          if(actual_value$0)
           var
            v = actual_value$0[1],
            _J_ =
              [0,
               [1, [0, _G_, [0, caml_call1(sexp_of_value, v), 0]]],
               match$0];
          else
           var _J_ = match$0;
          return [0,
                  [1,
                   [0,
                    [1, [0, _H_, [0, caml_call1(sexp_of_key, key), 0]]],
                    _J_]]];
         });
    return [1, caml_call1(Core_Map[73], info_per_key)];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incr_map);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incr_map);
   var
    Incr_map =
      [0,
       of_set,
       filter_mapi,
       mapi,
       filter_map,
       map,
       filter_mapi$0,
       map$0,
       filter_map$0,
       mapi$0,
       partition_mapi,
       unordered_fold,
       mapi_count,
       map_count,
       mapi_min,
       mapi_max,
       mapi_mn,
       map_max,
       min_value,
       max_value,
       mapi_bounds,
       map_bounds,
       value_bounds,
       merge,
       merge$0,
       unzip,
       unzip_mapi,
       unzip_mapi$0,
       flatten,
       join,
       separate,
       keys,
       rank,
       subrange,
       subrange_by_rank,
       rekey,
       index_byi,
       index_by,
       unordered_fold_nested_maps,
       transpose,
       collapse,
       collapse_by,
       expand,
       counti,
       count,
       for_alli,
       for_all,
       existsi,
       exists,
       sum,
       [0, create, find, M, [0, sexp_of_t]],
       For_testing,
       function(Incr){
        function flatten$0(x){return flatten(Incr[2][3], x);}
        function M(K){return [0];}
        return [0,
                of_set,
                filter_mapi,
                mapi,
                filter_map,
                map,
                filter_mapi$0,
                mapi$0,
                filter_map$0,
                map$0,
                partition_mapi,
                unordered_fold,
                mapi_count,
                map_count,
                mapi_min,
                mapi_max,
                mapi_mn,
                map_max,
                min_value,
                max_value,
                mapi_bounds,
                map_bounds,
                value_bounds,
                merge,
                unzip,
                unzip_mapi,
                unzip_mapi$0,
                merge$0,
                flatten$0,
                join,
                separate,
                keys,
                rank,
                subrange,
                subrange_by_rank,
                rekey,
                index_byi,
                index_by,
                unordered_fold_nested_maps,
                transpose,
                collapse,
                collapse_by,
                expand,
                counti,
                count,
                for_alli,
                for_all,
                existsi,
                exists,
                sum,
                [0, create, find, M, [0, sexp_of_t]],
                For_testing];
       }];
   runtime.caml_register_global(65, Incr_map, cst_Incr_map);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
