// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Incremental_step_function
//# unitInfo: Requires: Base__Field, Core, Core__List, Core__Sequence, Core__Time_ns, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_step_function = "Incremental_step_function",
    cst_incremental_step_function = "incremental_step_function",
    cst_steps = "steps";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Sequence = global_data.Core__Sequence,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Time_ns = global_data.Core__Time_ns;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_step_function);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental_step_function);
   caml_call1
    (Expect_test_collector[5][1],
     "step_function/src/incremental_step_function.ml");
   caml_call2
    (Ppx_inline_test_lib_Runtime[2], cst_incremental_step_function, cst);
   var
    symbol = Core_Time_ns[19],
    compare = Core_Time_ns[22],
    sexp_of_t = Core_Time_ns[25][4],
    _a_ = [0, cst_steps],
    _b_ = [0, "init"],
    _c_ = [0, cst_steps],
    cst_Step_function_create_exn_g =
      "[Step_function.create_exn] got unsorted times";
   function steps(r){return r[2];}
   function init(r){return r[1];}
   function sexp_of_t$0(of_a_001, param){
    var
     steps_005 = param[2],
     init_003 = param[1],
     arg_006 =
       caml_call2
        (Core_Sequence[11],
         function(param){
          var
           arg1_008 = param[2],
           arg0_007 = param[1],
           res0_009 = caml_call1(sexp_of_t, arg0_007),
           res1_010 = caml_call1(of_a_001, arg1_008);
          return [1, [0, res0_009, [0, res1_010, 0]]];
         },
         steps_005),
     bnds_002 = [0, [1, [0, _a_, [0, arg_006, 0]]], 0],
     arg_004 = caml_call1(of_a_001, init_003),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_004, 0]]], bnds_002];
    return [1, bnds_002$0];
   }
   function invariant(invariant_a, param){
    var init = param[1];
    return caml_call1(invariant_a, init);
   }
   function value(t$0, at){
    var steps$1 = t$0[2], init$1 = t$0[1], init = init$1, steps = steps$1;
    for(;;){
     var match = caml_call1(Core_Sequence[47], steps);
     if(! match) return init;
     var
      _h_ = match[1],
      steps$0 = _h_[2],
      match$0 = _h_[1],
      init$0 = match$0[2],
      t = match$0[1];
     if(caml_call2(symbol, at, t)) return init;
     init = init$0;
     steps = steps$0;
    }
   }
   function constant(init){return [0, init, Core_Sequence[46]];}
   function create_exn(init, steps){
    if
     (1
      -
       caml_call2
        (Core_List[140],
         steps,
         function(param, _f_){
          var time2 = _f_[1], time1 = param[1];
          return caml_call2(compare, time1, time2);
         })){
     var
      x_011 = caml_call2(Core_List[72], steps, function(_g_){return _g_[1];}),
      _d_ =
        [0, [1, [0, _c_, [0, caml_call2(Core[421], sexp_of_t, x_011), 0]]], 0],
      _e_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Step_function_create_exn_g),
          _d_]];
     caml_call1(Core[253], _e_);
    }
    return [0, init, caml_call1(Core_Sequence[109], steps)];
   }
   function create_from_sequence(init, steps){return [0, init, steps];}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental_step_function);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_step_function);
   var
    Incremental_step_function =
      [0,
       sexp_of_t$0,
       invariant,
       init,
       steps,
       value,
       constant,
       create_exn,
       create_from_sequence];
   runtime.caml_register_global
    (24, Incremental_step_function, cst_Incremental_step_function);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJpbmNyZW1lbnRhbF9zdGVwX2Z1bmN0aW9uLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzZXhwX29mX3QiLCJzdGVwcyIsInIiLCJpbml0Iiwic2V4cF9vZl90JDAiLCJvZl9hXzAwMSIsInN0ZXBzXzAwNSIsImluaXRfMDAzIiwiYXJnXzAwNiIsImFyZzFfMDA4IiwiYXJnMF8wMDciLCJyZXMwXzAwOSIsInJlczFfMDEwIiwiYm5kc18wMDIiLCJhcmdfMDA0IiwiYm5kc18wMDIkMCIsImludmFyaWFudCIsImludmFyaWFudF9hIiwidmFsdWUiLCJ0JDAiLCJhdCIsInN0ZXBzJDEiLCJpbml0JDEiLCJzdGVwcyQwIiwiaW5pdCQwIiwidCIsImNvbnN0YW50IiwiY3JlYXRlX2V4biIsInRpbWUyIiwidGltZTEiLCJ4XzAxMSIsImNyZWF0ZV9mcm9tX3NlcXVlbmNlIl0sInNvdXJjZXMiOlsiL1VzZXJzL3J1c3NlbGxyb3plbmJhdW0vLm9wYW0vZGl5LWhhemVsbnV0L2xpYi9pbmNyZW1lbnRhbC9pbmNyZW1lbnRhbF9zdGVwX2Z1bmN0aW9uL2luY3JlbWVudGFsX3N0ZXBfZnVuY3Rpb24ubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUtNQTs7Ozs7O0dBR04sU0FFSUMsTUFBQUMsR0FBQSxPQUFBQSxLQUFLO1lBRExDLEtBQUFELEdBQUEsT0FBQUEsS0FBSTtZQURSRSxZQUFLQztJQUFMO0tBRUlDO0tBREFDO0tBQ0FDO09BQUE7Ozs7V0FBU0M7V0FBQUM7V0FBQUMsc0JBTFBYLFdBS09VO1dBQUFFLHNCQUZSUCxVQUVRSTt5QkFBQUUsY0FBQUM7O1NBQVROO0tBRkpPLGdDQUVJTDtLQURBTSxVQUFBLFdBRENULFVBQ0RFO0tBREpRLGtDQUNJRCxlQURKRDtJQUFBLFdBQUFFO0dBSTRCO1lBRXhCQyxVQUFVQztRQUFjZDtJQUFvQixPQUFBLFdBQWxDYyxhQUFjZDs7WUFTeEJlLE1BQU1DLEtBQUdDO0lBQUssSUFQVUMsVUFPbEJGLFFBUGFHLFNBT2JILFFBUGFoQixPQUFBbUIsUUFBS3JCLFFBQUFvQjtJQUMxQjtLQUFNLFlBQUEsOEJBRG9CcEI7aUJBRWhCLE9BRldFOzs7TUFBS29COztNQUFMQztNQUdaQztLQUNKLEdBQUEsbUJBR01MLElBSkZLLElBQ29CLE9BSlJ0QjtLQUFBQSxPQUFBcUI7S0FBS3ZCLFFBQUFzQjs7R0FPdUI7WUFDL0NHLFNBQVN2QixNQUFPLFdBQVBBLHlCQUF1QztZQUVoRHdCLFdBQVl4QixNQUFNRjtJQUNwQjs7O09BQ0s7O1NBRmVBOztVQUVnQixJQUFpQjJCLGdCQUFYQztVQUNsQyxPQUFBLG9CQURrQ0EsT0FBV0Q7U0FDakI7S0FLcEI7TUFBMkJFLFFBQTNCLDBCQVJJN0IscUI7O21EQXJCaEJELFdBNkJ1QzhCOzs7Ozs7S0FIekM7O0lBSUYsV0FUYzNCLE1BU0UsK0JBVElGO0dBU3VCO1lBR3pDOEIscUJBQXNCNUIsTUFBTUYsT0FBUSxXQUFkRSxNQUFNRixPQUF1Qjs7Ozs7Ozs7T0E5QnZERztPQU1JWTtPQUxBYjtPQUNBRjtPQWFBaUI7T0FDQVE7T0FFQUM7T0FZQUk7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4hIENvcmVcblxubW9kdWxlIFRpbWVfbnMgPSBzdHJ1Y3RcbiAgaW5jbHVkZSBUaW1lX25zXG5cbiAgbGV0IHNleHBfb2ZfdCA9IFRpbWVfbnMuQWx0ZXJuYXRlX3NleHAuc2V4cF9vZl90XG5lbmRcblxudHlwZSAnYSB0ID1cbiAgeyBpbml0IDogJ2FcbiAgOyBzdGVwcyA6IChUaW1lX25zLnQgKiAnYSkgU2VxdWVuY2UudFxuICB9XG5bQEBkZXJpdmluZyBmaWVsZHMsIHNleHBfb2ZdXG5cbmxldCBpbnZhcmlhbnQgaW52YXJpYW50X2EgeyBpbml0OyBzdGVwcyA9IF8gfSA9IGludmFyaWFudF9hIGluaXRcblxubGV0IHJlYyB2YWx1ZV9pbnRlcm5hbCBpbml0IHN0ZXBzIH5hdCA9XG4gIG1hdGNoIFNlcXVlbmNlLm5leHQgc3RlcHMgd2l0aFxuICB8IE5vbmUgLT4gaW5pdFxuICB8IFNvbWUgKCh0LCBhKSwgc3RlcHMpIC0+XG4gICAgaWYgVGltZV9ucy4oIDwgKSBhdCB0IHRoZW4gaW5pdCBlbHNlIHZhbHVlX2ludGVybmFsIGEgc3RlcHMgfmF0XG47O1xuXG5sZXQgdmFsdWUgdCB+YXQgPSB2YWx1ZV9pbnRlcm5hbCB0LmluaXQgdC5zdGVwcyB+YXRcbmxldCBjb25zdGFudCBpbml0ID0geyBpbml0OyBzdGVwcyA9IFNlcXVlbmNlLmVtcHR5IH1cblxubGV0IGNyZWF0ZV9leG4gfmluaXQgfnN0ZXBzID1cbiAgaWYgbm90XG4gICAgICAgKExpc3QuaXNfc29ydGVkIHN0ZXBzIH5jb21wYXJlOihmdW4gKHRpbWUxLCBfKSAodGltZTIsIF8pIC0+XG4gICAgICAgICAgVGltZV9ucy5jb21wYXJlIHRpbWUxIHRpbWUyKSlcbiAgdGhlblxuICAgIHJhaXNlX3NcbiAgICAgIFslbWVzc2FnZVxuICAgICAgICBcIltTdGVwX2Z1bmN0aW9uLmNyZWF0ZV9leG5dIGdvdCB1bnNvcnRlZCB0aW1lc1wiXG4gICAgICAgICAgfnN0ZXBzOihzdGVwcyB8PiBMaXN0Lm1hcCB+Zjpmc3QgOiBUaW1lX25zLnQgbGlzdCldO1xuICB7IGluaXQ7IHN0ZXBzID0gc3RlcHMgfD4gU2VxdWVuY2Uub2ZfbGlzdCB9XG47O1xuXG5sZXQgY3JlYXRlX2Zyb21fc2VxdWVuY2UgfmluaXQgfnN0ZXBzID0geyBpbml0OyBzdGVwcyB9XG4iXX0=
