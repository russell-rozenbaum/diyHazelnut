// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Validate
//# unitInfo: Requires: Assert_failure, Base, Base__Error, Base__Field, Base__Int, Base__List, Base__Maybe_bound, Base__Or_error, Base__Printf, Base__Staged, Base__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Validate = "Validate",
    cst_validate = "validate",
    cst_validate_src_validate_ml = "validate/src/validate.ml",
    cst_value = "value ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Base_Maybe_bound = global_data.Base__Maybe_bound,
    Assert_failure = global_data.Assert_failure,
    Base_Printf = global_data.Base__Printf,
    Base_List = global_data.Base__List,
    Base_Int = global_data.Base__Int,
    Base_Staged = global_data.Base__Staged,
    Base_Field = global_data.Base__Field,
    Base_Or_error = global_data.Base__Or_error,
    Base = global_data.Base,
    Base_Error = global_data.Base__Error,
    Base_String = global_data.Base__String,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Validate);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_validate);
   caml_call1(Expect_test_collector[5][1], cst_validate_src_validate_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_validate, cst);
   var pass = 0;
   function fails(message, a, sexp_of_a){
    return [0,
            [0, 0, caml_call5(Base_Error[17], 0, 0, message, a, sexp_of_a)],
            0];
   }
   function fail(message){
    return [0, [0, 0, caml_call1(Base_Error[12], message)], 0];
   }
   function failf(format){return caml_call2(Base_Printf[4], fail, format);}
   function fail_s(sexp){
    return [0, [0, 0, caml_call1(Base_Error[18], sexp)], 0];
   }
   function combine(t1, t2){return caml_call2(Base[178], t1, t2);}
   var
    of_list = Base_List[138],
    cst_Exception_raised_during_va = "Exception raised during validation",
    _a_ = [0, "."],
    cst_validation_errors = "validation errors",
    _b_ = [0, 0],
    cst_snd = "snd",
    cst_fst = "fst",
    _c_ = [0, cst_validate_src_validate_ml, 154, 20],
    _d_ =
      [0,
       [11, cst_value, [2, 0, [11, " < bound ", [2, 0, 0]]]],
       "value %s < bound %s"],
    _e_ =
      [0,
       [11, cst_value, [2, 0, [11, " <= bound ", [2, 0, 0]]]],
       "value %s <= bound %s"],
    _f_ = [0, cst_validate_src_validate_ml, 159, 20],
    _g_ =
      [0,
       [11, cst_value, [2, 0, [11, " > bound ", [2, 0, 0]]]],
       "value %s > bound %s"],
    _h_ =
      [0,
       [11, cst_value, [2, 0, [11, " >= bound ", [2, 0, 0]]]],
       "value %s >= bound %s"];
   function name(name, t){
    return t
            ? caml_call2
              (Base_List[76],
               t,
               function(param){
                var error = param[2], path = param[1];
                return [0, [0, name, path], error];
               })
            : 0;
   }
   function name_list(n, l){return name(n, caml_call1(of_list, l));}
   function fail_fn(message, param){return fail(message);}
   function pass_bool(param){return pass;}
   function pass_unit(param){return pass;}
   function protect(f, v){
    try{var _E_ = caml_call1(f, v); return _E_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _D_ = [0, [0, cst$0, caml_call1(Base[106], exn)], 0];
     return fail_s
             (caml_call2(Base[84][7], cst_Exception_raised_during_va, _D_));
    }
   }
   function try_with(f){
    return protect(function(param){caml_call1(f, 0); return pass;}, 0);
   }
   function path_string(path){return caml_call2(Base_String[54], _a_, path);}
   function errors(t){
    return caml_call2
            (Base_List[76],
             t,
             function(param){
              var
               error = param[2],
               path = param[1],
               _B_ = path_string(path),
               _C_ = caml_call2(Base_Error[20], error, _B_);
              return caml_call1(Base_Error[9], _C_);
             });
   }
   function result(t){
    if(caml_call1(Base_List[8], t)) return _b_;
    var
     _A_ =
       caml_call2
        (Base_List[76],
         t,
         function(param){
          var error = param[2], path = param[1];
          return [0, path_string(path), error];
         });
    return caml_call5
            (Base_Or_error[34],
             0,
             0,
             cst_validation_errors,
             _A_,
             function(x_005){
              return caml_call2
                      (Base_List[4],
                       function(param){
                        var
                         arg1_002 = param[2],
                         arg0_001 = param[1],
                         res0_003 = caml_call1(Base[164], arg0_001),
                         res1_004 = caml_call1(Base_Error[6], arg1_002);
                        return [1, [0, res0_003, [0, res1_004, 0]]];
                       },
                       x_005);
             });
   }
   function maybe_raise(t){
    var _z_ = result(t);
    return caml_call1(Base_Or_error[31], _z_);
   }
   function valid_or_error(check, x){
    var _y_ = result(protect(check, x));
    return caml_call2(Base_Or_error[43], _y_, function(param){return x;});
   }
   function field_direct(check, fld, record, v){
    var result = protect(check, v);
    return name(caml_call1(Base_Field[2], fld), result);
   }
   function field(check, record, fld){
    var v = caml_call2(Base_Field[3], fld, record);
    return field_direct(check, fld, record, v);
   }
   function field_folder(check, record){
    return function(acc, fld){return [0, field(check, record, fld), acc];};
   }
   function field_direct_folder(check){
    return caml_call1
            (Base_Staged[1],
             function(acc, fld, record, v){
              var result = field_direct(check, fld, record, v);
              return result ? [0, result, acc] : acc;
             });
   }
   function all(checks, v){
    var checks$0 = checks, errs = 0;
    for(;;){
     if(! checks$0)
      return caml_call1(of_list, caml_call1(Base_List[38], errs));
     var checks$1 = checks$0[2], check = checks$0[1], err = protect(check, v);
     if(err){
      var errs$0 = [0, err, errs];
      checks$0 = checks$1;
      errs = errs$0;
     }
     else
      checks$0 = checks$1;
    }
   }
   function of_result(f){
    function _w_(v){
     var match = caml_call1(f, v);
     if(0 === match[0]) return pass;
     var error = match[1];
     return fail(error);
    }
    return function(_x_){return protect(_w_, _x_);};
   }
   function of_error(f){
    function _u_(v){
     var match = caml_call1(f, v);
     if(0 === match[0]) return pass;
     var error = match[1];
     return [0, [0, 0, error], 0];
    }
    return function(_v_){return protect(_u_, _v_);};
   }
   function booltest(f, if_false){
    function _s_(v){return caml_call1(f, v) ? pass : fail(if_false);}
    return function(_t_){return protect(_s_, _t_);};
   }
   function pair(fst, snd, param){
    var
     snd_value = param[2],
     fst_value = param[1],
     _r_ = [0, name(cst_snd, protect(snd, snd_value)), 0];
    return caml_call1
            (of_list, [0, name(cst_fst, protect(fst, fst_value)), _r_]);
   }
   function list_indexed(check, list){
    return caml_call1
            (of_list,
             caml_call2
              (Base_List[96],
               list,
               function(i, el){
                var _q_ = protect(check, el);
                return name(caml_call1(Base_Int[11], i + 1 | 0), _q_);
               }));
   }
   function list(extract_name, check, list){
    return caml_call1
            (of_list,
             caml_call2
              (Base_List[76],
               list,
               function(el){
                var t = protect(check, el);
                return t
                        ? protect
                          (function(t){return name(caml_call1(extract_name, el), t);},
                           t)
                        : 0;
               }));
   }
   function alist(name, f, list$0){
    return list
            (function(param){
              var key = param[1];
              return caml_call1(name, key);
             },
             function(param){var x = param[2]; return caml_call1(f, x);},
             list$0);
   }
   function first_failure(t1, t2){
    return caml_call1(Base_List[8], t1) ? t2 : t1;
   }
   function of_error_opt(param){
    if(! param) return pass;
    var error = param[1];
    return fail(error);
   }
   function bounded(name, lower, upper, compare, x){
    switch(caml_call4(Base_Maybe_bound[16], lower, upper, x, compare)){
      case 0:
       if(typeof lower === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
       if(0 === lower[0]){
        var
         incl = lower[1],
         _i_ = caml_call1(name, incl),
         _j_ = caml_call1(name, x);
        return fail(caml_call3(Base_Printf[2], _d_, _j_, _i_));
       }
       var
        excl = lower[1],
        _k_ = caml_call1(name, excl),
        _l_ = caml_call1(name, x);
       return fail(caml_call3(Base_Printf[2], _e_, _l_, _k_));
      case 1:
       return pass;
      default:
       if(typeof upper === "number")
        throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
       if(0 === upper[0]){
        var
         incl$0 = upper[1],
         _m_ = caml_call1(name, incl$0),
         _n_ = caml_call1(name, x);
        return fail(caml_call3(Base_Printf[2], _g_, _n_, _m_));
       }
       var
        excl$0 = upper[1],
        _o_ = caml_call1(name, excl$0),
        _p_ = caml_call1(name, x);
       return fail(caml_call3(Base_Printf[2], _h_, _p_, _o_));
    }
   }
   function symbol(t1, t2){return combine(t1, t2);}
   var Infix = [0, symbol];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_validate);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Validate);
   var
    Validate =
      [0,
       pass,
       fail,
       fails,
       fail_s,
       failf,
       combine,
       of_list,
       name,
       name_list,
       fail_fn,
       pass_bool,
       pass_unit,
       protect,
       try_with,
       result,
       errors,
       maybe_raise,
       valid_or_error,
       field,
       field_direct,
       field_folder,
       field_direct_folder,
       all,
       of_result,
       of_error,
       booltest,
       pair,
       list_indexed,
       list,
       first_failure,
       of_error_opt,
       alist,
       bounded,
       Infix];
   runtime.caml_register_global(35, Validate, cst_Validate);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
