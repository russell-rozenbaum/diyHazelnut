// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Sexp_hidden_in_test
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Shape, Core, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_7ce2ecb60c84f288a530286b07$1 = "7ce2ecb60c84f288a530286b076566de",
    cst_Sexp_hidden_in_test = "Sexp_hidden_in_test",
    cst_a$3 = "a",
    cst_sexp_hidden_in_test = "sexp_hidden_in_test",
    cst_sexp_hidden_in_test_src_se$13 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml",
    cst_t$3 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Expect_test_config = global_data.Expect_test_config,
    Expect_test_collector = global_data.Expect_test_collector,
    Inline_test_config = global_data.Inline_test_config,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Sexp_hidden_in_test);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_sexp_hidden_in_test);
   caml_call1(Expect_test_collector[5][1], cst_sexp_hidden_in_test_src_se$13);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_sexp_hidden_in_test, cst);
   var
    cst_a = cst_a$3,
    cst_sexp_hidden_in_test_src_se =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:7:14",
    cst_a$0 = cst_a$3,
    cst_t = cst_t$3,
    cst_sexp_hidden_in_test_src_se$0 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:7:2",
    cst_t$0 = cst_t$3,
    _a_ = [5, "sexp_hidden_in_test/src/sexp_hidden_in_test.ml.Make.t"],
    _b_ = [0, "<hidden_in_test>"],
    cst_a$1 = cst_a$3,
    cst_sexp_hidden_in_test_src_se$1 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:14:23",
    cst_a$2 = cst_a$3,
    cst_t$1 = cst_t$3,
    cst_sexp_hidden_in_test_src_se$2 =
      "sexp_hidden_in_test/src/sexp_hidden_in_test.ml:14:4",
    cst_t$2 = cst_t$3,
    cst_sexp_hidden_in_test_src_se$3 = cst_sexp_hidden_in_test_src_se$13,
    cst_sexp_hidden_in_test_src_se$4 = cst_sexp_hidden_in_test_src_se$13,
    cst_sexp_hidden_in_test_src_se$5 = cst_sexp_hidden_in_test_src_se$13,
    _c_ = [1, " <hidden_in_test> "],
    _d_ = [0, cst$1],
    _e_ = [0, "Turned on"],
    cst_sexp_hidden_in_test_src_se$6 = cst_sexp_hidden_in_test_src_se$13,
    cst_sexp_hidden_in_test_src_se$7 = cst_sexp_hidden_in_test_src_se$13,
    cst_7ce2ecb60c84f288a530286b07 = cst_7ce2ecb60c84f288a530286b07$1,
    cst_sexp_hidden_in_test_src_se$8 = cst_sexp_hidden_in_test_src_se$13,
    cst_sexp_hidden_in_test_src_se$9 = cst_sexp_hidden_in_test_src_se$13,
    cst_sexp_hidden_in_test_src_se$10 = cst_sexp_hidden_in_test_src_se$13,
    _f_ = [1, " 1024 "],
    _g_ = [0, cst$1],
    _h_ = [0, "Turned off"],
    cst_sexp_hidden_in_test_src_se$11 = cst_sexp_hidden_in_test_src_se$13,
    cst_sexp_hidden_in_test_src_se$12 = cst_sexp_hidden_in_test_src_se$13,
    cst_7ce2ecb60c84f288a530286b07$0 = cst_7ce2ecb60c84f288a530286b07$1;
   function Make(M){
    var
     _u_ = caml_call1(Bin_prot_Shape[3][1], cst_a),
     _v_ = caml_call1(Bin_prot_Shape[4][1], cst_sexp_hidden_in_test_src_se),
     _w_ = caml_call2(Bin_prot_Shape[15], _v_, _u_),
     _x_ = [0, caml_call1(Bin_prot_Shape[3][1], cst_a$0), 0],
     _y_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t), _x_, _w_], 0],
     _z_ = caml_call1(Bin_prot_Shape[4][1], cst_sexp_hidden_in_test_src_se$0),
     group = caml_call2(Bin_prot_Shape[6], _z_, _y_);
    function bin_shape_t(a){
     var _L_ = caml_call1(Bin_prot_Shape[2][1], cst_t$0);
     return caml_call1(caml_call2(Bin_prot_Shape[14], group, _L_), [0, a, 0]);
    }
    function bin_size_t(size_of_a){return size_of_a;}
    function bin_write_t(write_a){return write_a;}
    function bin_writer_t(bin_writer_a){
     return [0,
             function(v){
              var size_of_a = bin_writer_a[1];
              return caml_call1(size_of_a, v);
             },
             function(v){
              var write_a = bin_writer_a[2];
              return caml_call1(write_a, v);
             }];
    }
    function bin_read_t(of_a, buf, pos_ref, vint){
     return caml_call2(Bin_prot_Common[18], _a_, pos_ref[1]);
    }
    function bin_read_t$0(of_a){return of_a;}
    function bin_reader_t(bin_reader_a){
     return [0,
             function(buf, pos_ref){
              var of_a = bin_reader_a[1];
              return caml_call2(of_a, buf, pos_ref);
             },
             function(buf, pos_ref, vtag){
              return bin_read_t(bin_reader_a[1], buf, pos_ref, vtag);
             }];
    }
    function bin_t(bin_a){
     var _J_ = bin_reader_t(bin_a[3]), _K_ = bin_writer_t(bin_a[2]);
     return [0, bin_shape_t(bin_a[1]), _K_, _J_];
    }
    function compare(cmp_a, a_001, b_002){
     return caml_call2(cmp_a, a_001, b_002);
    }
    function t_of_sexp(of_a_003){return of_a_003;}
    function sexp_of_t(sexp_of_a, a){
     return M[1] ? _b_ : caml_call1(sexp_of_a, a);
    }
    var
     _A_ = caml_call1(Bin_prot_Shape[3][1], cst_a$1),
     _B_ = caml_call1(Bin_prot_Shape[4][1], cst_sexp_hidden_in_test_src_se$1),
     _C_ = bin_shape_t(caml_call2(Bin_prot_Shape[15], _B_, _A_)),
     _D_ = [0, caml_call1(Bin_prot_Shape[3][1], cst_a$2), 0],
     _E_ = [0, [0, caml_call1(Bin_prot_Shape[2][1], cst_t$1), _D_, _C_], 0],
     _F_ = caml_call1(Bin_prot_Shape[4][1], cst_sexp_hidden_in_test_src_se$2),
     group$0 = caml_call2(Bin_prot_Shape[6], _F_, _E_);
    function bin_shape_t$0(a){
     var _I_ = caml_call1(Bin_prot_Shape[2][1], cst_t$2);
     return caml_call1
             (caml_call2(Bin_prot_Shape[14], group$0, _I_), [0, a, 0]);
    }
    function bin_size_t$0(size_of_a, v){return caml_call1(size_of_a, v);}
    function bin_write_t$0(write_a, buf, pos, v){return caml_call3(write_a, buf, pos, v);
    }
    function bin_writer_t$0(bin_writer_a){
     return [0,
             function(v){
              var size_of_a = bin_writer_a[1];
              return caml_call1(size_of_a, v);
             },
             function(buf){
              var write_a = bin_writer_a[2];
              return function(pos, v){
               return caml_call3(write_a, buf, pos, v);};
             }];
    }
    function bin_read_t$1(of_a, buf, pos_ref, vint){return bin_read_t(of_a, buf, pos_ref, vint);
    }
    function bin_read_t$2(of_a, buf, pos_ref){return caml_call2(of_a, buf, pos_ref);
    }
    function bin_reader_t$0(bin_reader_a){
     return [0,
             function(buf, pos_ref){
              var of_a = bin_reader_a[1];
              return caml_call2(of_a, buf, pos_ref);
             },
             function(buf, pos_ref, vtag){
              var of_a = bin_reader_a[1];
              return bin_read_t(of_a, buf, pos_ref, vtag);
             }];
    }
    function bin_t$0(bin_a){
     var _G_ = bin_reader_t$0(bin_a[3]), _H_ = bin_writer_t$0(bin_a[2]);
     return [0, bin_shape_t$0(bin_a[1]), _H_, _G_];
    }
    function compare$0(cmp_a, a_006, b_007){
     return caml_call2(cmp_a, a_006, b_007);
    }
    var
     With_non_roundtripping_in_test =
       [0,
        bin_shape_t$0,
        bin_size_t$0,
        bin_write_t$0,
        bin_writer_t$0,
        bin_read_t$1,
        bin_read_t$2,
        bin_reader_t$0,
        bin_t$0,
        compare$0,
        t_of_sexp,
        sexp_of_t];
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_writer_t,
            bin_read_t,
            bin_read_t$0,
            bin_reader_t,
            bin_t,
            compare,
            ,
            sexp_of_t,
            With_non_roundtripping_in_test];
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[6],
     Inline_test_config,
     cst$0,
     0,
     cst_sexp_hidden_in_test_src_se$13,
     18,
     0,
     741,
     function(param){
      var
       Sexp_hidden_in_test_turned_off = Make([0, 0]),
       Sexp_hidden_in_test_turned_on = Make([0, 1]),
       Expect_test_collector$0 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _i_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_sexp_hidden_in_test_src_se$4),
          38,
          949,
          964,
          986],
       _j_ =
         [0,
          [0,
           _d_,
           _c_,
           [0,
            caml_call1
             (Expect_test_common_File[1][6], cst_sexp_hidden_in_test_src_se$5),
            38,
            949,
            957,
            963],
           _i_],
          0],
       _k_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_sexp_hidden_in_test_src_se$7),
          36,
          871,
          875,
          987],
       _l_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_7ce2ecb60c84f288a530286b07);
      caml_call9
       (Expect_test_collector$0[3],
        _l_,
        _k_,
        cst_sexp_hidden_in_test_src_se$6,
        _e_,
        0,
        _j_,
        0,
        Inline_test_config,
        function(param){
         var
          _s_ = Sexp_hidden_in_test_turned_on[11].call(null, Core[356], 1024);
         caml_call2(Core[248], 0, _s_);
         var
          _t_ =
            [0,
             caml_call1
              (Expect_test_common_File[1][6],
               cst_sexp_hidden_in_test_src_se$3),
             38,
             949,
             957,
             963];
         return caml_call1(Expect_test_collector$0[1], _t_);
        });
      var
       Expect_test_collector$1 =
         caml_call1(Expect_test_collector[2], Expect_test_config),
       _m_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_sexp_hidden_in_test_src_se$9),
          43,
          1078,
          1093,
          1103],
       _n_ =
         [0,
          [0,
           _g_,
           _f_,
           [0,
            caml_call1
             (Expect_test_common_File[1][6],
              cst_sexp_hidden_in_test_src_se$10),
            43,
            1078,
            1086,
            1092],
           _m_],
          0],
       _o_ =
         [0,
          caml_call1
           (Expect_test_common_File[1][6], cst_sexp_hidden_in_test_src_se$12),
          41,
          996,
          1000,
          1104],
       _p_ =
         caml_call1
          (Expect_test_common_File[4][3], cst_7ce2ecb60c84f288a530286b07$0);
      caml_call9
       (Expect_test_collector$1[3],
        _p_,
        _o_,
        cst_sexp_hidden_in_test_src_se$11,
        _h_,
        0,
        _n_,
        0,
        Inline_test_config,
        function(param){
         var
          _q_ = Sexp_hidden_in_test_turned_off[11].call(null, Core[356], 1024);
         caml_call2(Core[248], 0, _q_);
         var
          _r_ =
            [0,
             caml_call1
              (Expect_test_common_File[1][6],
               cst_sexp_hidden_in_test_src_se$8),
             43,
             1078,
             1086,
             1092];
         return caml_call1(Expect_test_collector$1[1], _r_);
        });
      return 0;
     });
   var
    am_running_test = Core[541],
    include = Make([0, am_running_test]),
    bin_shape_t = include[1],
    bin_size_t = include[2],
    bin_write_t = include[3],
    bin_writer_t = include[4],
    bin_read_t = include[5],
    bin_read_t$0 = include[6],
    bin_reader_t = include[7],
    bin_t = include[8],
    compare = include[9],
    sexp_of_t = include[11],
    With_non_roundtripping_in_test = include[12];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_sexp_hidden_in_test);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Sexp_hidden_in_test);
   var
    Sexp_hidden_in_test =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       sexp_of_t,
       [0,
        With_non_roundtripping_in_test[1],
        With_non_roundtripping_in_test[2],
        With_non_roundtripping_in_test[3],
        With_non_roundtripping_in_test[6],
        With_non_roundtripping_in_test[5],
        With_non_roundtripping_in_test[4],
        With_non_roundtripping_in_test[7],
        With_non_roundtripping_in_test[8],
        With_non_roundtripping_in_test[9],
        With_non_roundtripping_in_test[10],
        With_non_roundtripping_in_test[11]]];
   runtime.caml_register_global
    (51, Sexp_hidden_in_test, cst_Sexp_hidden_in_test);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJzZXhwX2hpZGRlbl9pbl90ZXN0LmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJncm91cCIsImJpbl9zaGFwZV90IiwiYSIsImJpbl9zaXplX3QiLCJzaXplX29mX2EiLCJiaW5fd3JpdGVfdCIsIndyaXRlX2EiLCJiaW5fd3JpdGVyX3QiLCJiaW5fd3JpdGVyX2EiLCJ2IiwiYmluX3JlYWRfdCIsIm9mX2EiLCJidWYiLCJwb3NfcmVmIiwidmludCIsImJpbl9yZWFkX3QkMCIsImJpbl9yZWFkZXJfdCIsImJpbl9yZWFkZXJfYSIsInZ0YWciLCJiaW5fdCIsImJpbl9hIiwiY29tcGFyZSIsImNtcF9hIiwiYV8wMDEiLCJiXzAwMiIsInRfb2Zfc2V4cCIsIm9mX2FfMDAzIiwic2V4cF9vZl90Iiwic2V4cF9vZl9hIiwiZ3JvdXAkMCIsImJpbl9zaGFwZV90JDAiLCJiaW5fc2l6ZV90JDAiLCJiaW5fd3JpdGVfdCQwIiwicG9zIiwiYmluX3dyaXRlcl90JDAiLCJiaW5fcmVhZF90JDEiLCJiaW5fcmVhZF90JDIiLCJiaW5fcmVhZGVyX3QkMCIsImJpbl90JDAiLCJjb21wYXJlJDAiLCJhXzAwNiIsImJfMDA3IiwiYW1fcnVubmluZ190ZXN0Il0sInNvdXJjZXMiOlsiL1VzZXJzL3J1c3NlbGxyb3plbmJhdW0vLm9wYW0vZGl5LWhhemVsbnV0L2xpYi9jb3JlX2tlcm5lbC9zZXhwX2hpZGRlbl9pbl90ZXN0L3NleHBfaGlkZGVuX2luX3Rlc3QubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNVTs7OztLQUFBLFVBQUE7S0FBUixjQUFRO0tBQVIsTUFBQTtLQUFBQSxRQUFBO0lBQVEsU0FBQUMsWUFBQUM7S0FBUixVQUFBO0tBQUEsT0FBQSxXQUFBLCtCQUFBRixpQkFBUUU7SUFBeUM7YUFBakRDLFdBQUtDLFcsT0FBQUE7YUFBTEMsWUFBS0MsUyxPQUFBQTthQUFMQyxhQUFLQztLQUFMO3NCQUFBQztjQUFBLElBQUtMLFlBQUFJO2NBQUwsT0FBQSxXQUFLSixXQUFMSzthQUFpRDtzQkFBakRBO2NBQUEsSUFBS0gsVUFBQUU7Y0FBTCxPQUFBLFdBQUtGLFNBQUxHO2FBQWlEO0lBQUE7YUFBakRDLFdBQUtDLE1BQU9DLEtBQUFDLFNBQUFDO0ssNENBQUFEOzthQUFaRSxhQUFLSixNLE9BQUFBO2FBQUxLLGFBQUtDO0tBQUw7c0JBQUFMLEtBQUFDO2NBQUEsSUFBS0YsT0FBQU07Y0FBTCxPQUFBLFdBQUtOLE1BQUxDLEtBQUFDO2FBQWlEO3NCQUFqREQsS0FBQUMsU0FBQUs7Y0FBQSxPQUFBUixXQUFLTyxpQkFBTEwsS0FBQUMsU0FBQUs7YUFBaUQ7SUFBQTthQUFqREMsTUFBQUM7S0FBQSxJQUFBLE1BQUFKLGFBQUFJLFdBQUEsTUFBQWIsYUFBQWE7S0FBQSxXQUFRbkIsWUFBUm1CO0lBQWlEO2FBQWpEQyxRQUFBQyxPQUFBQyxPQUFBQztLQUFZLE9BQUEsV0FBWkYsT0FBQUMsT0FBQUM7SUFBYzthQU9aQyxVQVBHQyxVQUFMLE9BQUtBLFNBQTRDO2FBTy9DQyxVQUxZQyxXQUFVMUI7S0FDdEIsb0JBQTRELFdBRGhEMEIsV0FBVTFCO0lBQ2lEO0lBSXhEOzs7V0FQVEQ7S0FPUyxVQUFBO0tBQWYsY0FBZTtLQUFmLE1BQUE7S0FBQTRCLFVBQUE7SUFBZSxTQUFBQyxjQUFBNUI7S0FBZixVQUFBO0tBQUEsT0FBQTtjQUFBLCtCQUFBMkIsbUJBQWUzQjtJQUEyQzthQUExRDZCLGFBUEczQixXQU9ISyxHLGtCQVBHTCxXQU9ISzthQUFBdUIsY0FQRzFCLFNBT0hNLEtBQUFxQixLQUFBeEIsR0FBQSxPQUFBLFdBUEdILFNBT0hNLEtBQUFxQixLQUFBeEI7SUFBMEQ7YUFBMUR5QixlQUFZMUI7S0FBWjtzQkFBQUM7Y0FBQSxJQVBHTCxZQU9TSTtnQ0FQVEosV0FPSEs7YUFBMEQ7c0JBQTFERztjQUFBLElBUEdOLFVBT1NFO2NBQVosZ0JBQUF5QixLQUFBeEI7ZUFBQSxPQUFBLFdBUEdILFNBT0hNLEtBQUFxQixLQUFBeEI7YUFBMEQ7SUFBQTthQUExRDBCLGFBQVl4QixNQUFVQyxLQUFBQyxTQUFBQyxNLE9BUHhCSixXQU9jQyxNQUFVQyxLQUFBQyxTQUFBQzs7YUFBdEJzQixhQVBHekIsTUFPSEMsS0FBQUMsU0FBQSxPQUFBLFdBUEdGLE1BT0hDLEtBQUFDO0lBQTBEO2FBQTFEd0IsZUFBWXBCO0tBQVo7c0JBQUFMLEtBQUFDO2NBQUEsSUFQR0YsT0FPU007Y0FBWixPQUFBLFdBUEdOLE1BT0hDLEtBQUFDO2FBQTBEO3NCQUFwQ0QsS0FBQUMsU0FBQUs7Y0FBdEIsSUFBWVAsT0FBQU07cUJBUGRQLFdBT2NDLE1BQVVDLEtBQUFDLFNBQUFLO2FBQW9DO0lBQUE7YUFBMURvQixRQUFBbEI7S0FBQSxJQUFBLE1BQUFpQixlQUFBakIsV0FBQSxNQUFBYyxlQUFBZDtLQUFBLFdBQWVVLGNBQWZWO0lBQTBEO2FBQTFEbUIsVUFBQWpCLE9BQW1Ca0IsT0FBQUM7S0FBRyxPQUFILFdBQW5CbkIsT0FBbUJrQixPQUFBQztJQUFJO0lBRHVCOzs7UUFDL0JYO1FBQWZDO1FBQUFDO1FBQUFFO1FBQUFDO1FBQUFDO1FBQUFDO1FBQUFDO1FBQUFDO1FBQUFkO1FBQUFFO0lBUko7WUFDVTFCO1lBQVJFO1lBQUFFO1lBQUFFO1lBQUFHO1lBQUFLO1lBQUFDO1lBQUFHO1lBQUFFOztZQU9FTTs7Ozs7Ozs7Ozs7OztNQXdCRTs7Ozs7T0FBQTs7VUFBQTs7Ozs7Ozs7Ozs7O1lBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQUxBOztTQUlBO1NBQ0E7OzthQUFBOzs7Ozs7O1NBQUEsT0FBQTtRQUFnQztNQUtoQzs7O09BQUE7O1VBQUE7Ozs7Ozs7Ozs7OztZQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBbEJBOztTQWlCQTtTQUNBOzs7YUFBQTs7Ozs7OztTQUFBLE9BQUE7UUFBb0I7Ozs7SUFNbEJlO3VCQUFBQTtJQTFDRXpDO0lBQVJFO0lBQUFFO0lBQUFFO0lBQUFHO0lBQUFLO0lBQUFDO0lBQUFHO0lBQUFFO0lBRUlNOzs7Ozs7Ozs7T0FGSTFCO09BQVJFO09BQUFFO09BQUFVO09BQUFMO09BQUFIO09BQUFTO09BQUFHO09BQUFFO09BRUlNOzs7Ozs7Ozs7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuISBDb3JlXG5cbm1vZHVsZSBNYWtlIChNIDogc2lnXG4gICAgdmFsIGFtX3J1bm5pbmdfdGVzdCA6IGJvb2xcbiAgZW5kKSA9XG5zdHJ1Y3RcbiAgdHlwZSAnYSB0ID0gJ2EgW0BAZGVyaXZpbmcgYmluX2lvLCBjb21wYXJlLCBzZXhwXVxuXG4gIGxldCBzZXhwX29mX3Qgc2V4cF9vZl9hIGEgPVxuICAgIGlmIE0uYW1fcnVubmluZ190ZXN0IHRoZW4gU2V4cC5BdG9tIFwiPGhpZGRlbl9pbl90ZXN0PlwiIGVsc2Ugc2V4cF9vZl9hIGFcbiAgOztcblxuICBtb2R1bGUgV2l0aF9ub25fcm91bmR0cmlwcGluZ19pbl90ZXN0X29mX3NleHAgPSBzdHJ1Y3RcbiAgICB0eXBlIG5vbnJlYyAnYSB0ID0gJ2EgdCBbQEBkZXJpdmluZyBiaW5faW8sIGNvbXBhcmUsIHNleHBdXG4gIGVuZFxuZW5kXG5cbmxldCV0ZXN0X21vZHVsZSBfID1cbiAgKG1vZHVsZSBzdHJ1Y3RcbiAgICBtb2R1bGUgVHVybmVkX29mZiA9IHN0cnVjdFxuICAgICAgbW9kdWxlIFNleHBfaGlkZGVuX2luX3Rlc3RfdHVybmVkX29mZiA9IE1ha2UgKHN0cnVjdFxuICAgICAgICAgIGxldCBhbV9ydW5uaW5nX3Rlc3QgPSBmYWxzZVxuICAgICAgICBlbmQpXG5cbiAgICAgIHR5cGUgbm9ucmVjIHQgPSBpbnQgU2V4cF9oaWRkZW5faW5fdGVzdF90dXJuZWRfb2ZmLnQgW0BAZGVyaXZpbmcgc2V4cF9vZl1cbiAgICBlbmRcblxuICAgIG1vZHVsZSBUdXJuZWRfb24gPSBzdHJ1Y3RcbiAgICAgIG1vZHVsZSBTZXhwX2hpZGRlbl9pbl90ZXN0X3R1cm5lZF9vbiA9IE1ha2UgKHN0cnVjdFxuICAgICAgICAgIGxldCBhbV9ydW5uaW5nX3Rlc3QgPSB0cnVlXG4gICAgICAgIGVuZClcblxuICAgICAgdHlwZSBub25yZWMgdCA9IGludCBTZXhwX2hpZGRlbl9pbl90ZXN0X3R1cm5lZF9vbi50IFtAQGRlcml2aW5nIHNleHBfb2ZdXG4gICAgZW5kXG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXCJUdXJuZWQgb25cIiA9XG4gICAgICBwcmludF9zIFslc2V4cCAoMTAyNCA6IFR1cm5lZF9vbi50KV07XG4gICAgICBbJWV4cGVjdCB7fCA8aGlkZGVuX2luX3Rlc3Q+IHx9XVxuICAgIDs7XG5cbiAgICBsZXQlZXhwZWN0X3Rlc3QgXCJUdXJuZWQgb2ZmXCIgPVxuICAgICAgcHJpbnRfcyAoWyVzZXhwX29mOiBUdXJuZWRfb2ZmLnRdIDEwMjQpO1xuICAgICAgWyVleHBlY3Qge3wgMTAyNCB8fV1cbiAgICA7O1xuICBlbmQpXG47O1xuXG5pbmNsdWRlIE1ha2UgKHN0cnVjdFxuICAgIGxldCBhbV9ydW5uaW5nX3Rlc3QgPSBhbV9ydW5uaW5nX3Rlc3RcbiAgZW5kKVxuIl19
