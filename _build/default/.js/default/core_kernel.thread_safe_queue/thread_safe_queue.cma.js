// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Thread_safe_queue__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Thread_safe_queue = [0];
   runtime.caml_register_global(0, Thread_safe_queue, "Thread_safe_queue__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_safe_queue__Import
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Thread_safe_queue_Import = "Thread_safe_queue__Import",
    cst_thread_safe_queue = "thread_safe_queue";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_safe_queue_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_safe_queue);
   caml_call1(Expect_test_collector[5][1], "thread_safe_queue/src/import.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_thread_safe_queue, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_thread_safe_queue);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_safe_queue_Import);
   var Thread_safe_queue_Import = [0];
   runtime.caml_register_global
    (11, Thread_safe_queue_Import, cst_Thread_safe_queue_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Thread_safe_queue
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Uopt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Thread_safe_queue = "Thread_safe_queue",
    cst$0 = "_",
    cst_back = "back",
    cst_front = "front",
    cst_length = "length",
    cst_thread_safe_queue = "thread_safe_queue",
    cst_thread_safe_queue_src_thre =
      "thread_safe_queue/src/thread_safe_queue.ml",
    cst_unused_elts = "unused_elts",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Uopt = global_data.Uopt,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant;
   global_data.Base__Field;
   var
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Thread_safe_queue);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_thread_safe_queue);
   caml_call1(Expect_test_collector[5][1], cst_thread_safe_queue_src_thre);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_thread_safe_queue, cst);
   var _a_ = [0, "next"], _b_ = [0, "value"];
   function sexp_of_t(of_a_001, param){
    var
     value_003 = param[1],
     next_005 = param[2],
     arg_006 = caml_call1(Sexplib0_Sexp_conv[23], next_005),
     bnds_002 = [0, [1, [0, _a_, [0, arg_006, 0]]], 0],
     arg_004 = caml_call2(Uopt[1], of_a_001, value_003),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_004, 0]]], bnds_002];
    return [1, bnds_002$0];
   }
   function create(param){return [0, Uopt[3], Uopt[3]];}
   function unused_elts(r){return r[4];}
   function set_unused_elts(r, v){r[4] = v; return 0;}
   function back(r){return r[3];}
   function set_back(r, v){r[3] = v; return 0;}
   function front(r){return r[2];}
   function set_front(r, v){r[2] = v; return 0;}
   function length(r){return r[1];}
   function set_length(r, v){r[1] = v; return 0;}
   var
    unused_elts$0 =
      [0,
       function(param){return 0;},
       cst_unused_elts,
       [0, set_unused_elts],
       unused_elts,
       function(r, v){return [0, r[1], r[2], r[3], v];}],
    back$0 =
      [0,
       function(param){return 0;},
       cst_back,
       [0, set_back],
       back,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    front$0 =
      [0,
       function(param){return 0;},
       cst_front,
       [0, set_front],
       front,
       function(r, v){return [0, r[1], v, r[3], r[4]];}],
    length$0 =
      [0,
       function(param){return 0;},
       cst_length,
       [0, set_length],
       length,
       function(r, v){return [0, v, r[2], r[3], r[4]];}],
    _c_ = [0, cst_unused_elts],
    _d_ = [0, cst_back],
    _e_ = [0, cst_front],
    _f_ = [0, cst_length],
    _g_ = [0, cst_thread_safe_queue_src_thre, 62, 13],
    _h_ = [0, cst_thread_safe_queue_src_thre, 55, 32],
    _i_ = [0, cst_thread_safe_queue_src_thre, 52, 13],
    _j_ = [0, cst_thread_safe_queue_src_thre, 54, 11],
    _k_ = [0, cst_thread_safe_queue_src_thre, 43, 36],
    _l_ = [0, cst$0],
    _m_ = [0, cst_thread_safe_queue_src_thre, 40, 1533, 1555],
    _n_ = [0, cst$0],
    cst_Thread_safe_queue_dequeue_ =
      "Thread_safe_queue.dequeue_exn of empty queue",
    _o_ = [0, cst_thread_safe_queue_src_thre, 102, 3230, 3248];
   function sexp_of_t$0(of_a_007, param){
    var
     length_009 = param[1],
     front_011 = param[2],
     back_013 = param[3],
     unused_elts_015 = param[4],
     arg_016 =
       caml_call2
        (Uopt[1],
         function(_r_){return sexp_of_t(of_a_007, _r_);},
         unused_elts_015),
     bnds_008 = [0, [1, [0, _c_, [0, arg_016, 0]]], 0],
     arg_014 = sexp_of_t(of_a_007, back_013),
     bnds_008$0 = [0, [1, [0, _d_, [0, arg_014, 0]]], bnds_008],
     arg_012 = sexp_of_t(of_a_007, front_011),
     bnds_008$1 = [0, [1, [0, _e_, [0, arg_012, 0]]], bnds_008$0],
     arg_010 = caml_call1(Core[356], length_009),
     bnds_008$2 = [0, [1, [0, _f_, [0, arg_010, 0]]], bnds_008$1];
    return [1, bnds_008$2];
   }
   function invariant(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _m_,
             t,
             function(x_017){
              return sexp_of_t$0(function(param){return _l_;}, x_017);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               unused_elts_fun =
                 check
                  (function(unused_elts){
                    var r = [0, unused_elts];
                    for(;;){
                     if(! caml_call1(Uopt[6], r[1])) return 0;
                     var elt = caml_call1(Uopt[7], r[1]);
                     r[1] = elt[2];
                     if(! caml_call1(Uopt[5], elt[1]))
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _g_], 1);
                    }
                   }),
               back_fun =
                 check
                  (function(back){
                    if(caml_call1(Uopt[5], back[1])) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _h_], 1);
                   }),
               front_fun =
                 check
                  (function(front){
                    var i = [0, t[1]], r = [0, front];
                    for(;;){
                     if(! caml_call2(Core[91], i[1], 0)){
                      if(caml_call2(Core[246], r[1], t[3])) return 0;
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _j_], 1);
                     }
                     i[1]--;
                     var elt = r[1];
                     r[1] = caml_call1(Uopt[7], elt[2]);
                     if(! caml_call1(Uopt[6], elt[1]))
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _i_], 1);
                    }
                   }),
               length_fun =
                 check
                  (function(length){
                    if(caml_call2(Core[88], length, 0)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _k_], 1);
                   });
              caml_call1(length_fun, length$0);
              caml_call1(front_fun, front$0);
              caml_call1(back_fun, back$0);
              return caml_call1(unused_elts_fun, unused_elts$0);
             });
   }
   function create$0(param){
    var elt = create(0);
    return [0, 0, elt, elt, Uopt[3]];
   }
   function enqueue(t, a){
    if(caml_call1(Uopt[6], t[4])){
     var elt = caml_call1(Uopt[8], t[4]);
     t[4] = elt[2];
     var new_back = elt;
    }
    else
     var new_back = create(0);
    t[1] = t[1] + 1 | 0;
    var _p_ = caml_call1(Uopt[4], a);
    t[3][1] = _p_;
    var _q_ = caml_call1(Uopt[4], new_back);
    t[3][2] = _q_;
    t[3] = new_back;
    return 0;
   }
   function dequeue_exn(t){
    if(caml_call2(Core[90], t[1], 0))
     caml_call5
      (Core[236],
       0,
       _o_,
       cst_Thread_safe_queue_dequeue_,
       t,
       function(x_018){
        return sexp_of_t$0(function(param){return _n_;}, x_018);
       });
    var elt = t[2], a = elt[1];
    t[2] = caml_call1(Uopt[8], elt[2]);
    t[1] = t[1] - 1 | 0;
    elt[1] = Uopt[3];
    elt[2] = t[4];
    t[4] = caml_call1(Uopt[4], elt);
    return caml_call1(Uopt[8], a);
   }
   function clear_internal_pool(t){t[4] = Uopt[3]; return 0;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_thread_safe_queue);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Thread_safe_queue);
   var
    Thread_safe_queue =
      [0,
       sexp_of_t$0,
       invariant,
       create$0,
       length,
       enqueue,
       dequeue_exn,
       clear_internal_pool,
       [0, [0, Uopt[1], Uopt[3], Uopt[4], Uopt[5], Uopt[6]]]];
   runtime.caml_register_global(38, Thread_safe_queue, cst_Thread_safe_queue);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
