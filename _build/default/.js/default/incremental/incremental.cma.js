// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Incremental__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Incremental = [0];
   runtime.caml_register_global(0, Incremental, "Incremental__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Before_or_after
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Before_or_afte = "Incremental__Before_or_after",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Before_or_afte);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/before_or_after.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var _a_ = [0, "After"], _b_ = [0, "Before"];
   function sexp_of_t(param){return param ? _a_ : _b_;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Before_or_afte);
   var Incremental_Before_or_after = [0, sexp_of_t];
   runtime.caml_register_global
    (13, Incremental_Before_or_after, cst_Incremental_Before_or_afte);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Import
//# unitInfo: Requires: Core, Core__Array, Core__Int, Core__String, Core__Time_ns, Core__Uniform_array, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Uopt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Import = "Incremental__Import",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Array = global_data.Core__Array,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Core_String = global_data.Core__String,
    Core_Time_ns = global_data.Core__Time_ns,
    include = global_data.Uopt,
    Core_Uniform_array = global_data.Core__Uniform_array;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/import.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    _a_ = Core_Int[99],
    symbol = _a_[1],
    symbol$0 = _a_[2],
    symbol$1 = _a_[3],
    symbol$2 = _a_[4],
    symbol$3 = _a_[5],
    symbol$4 = _a_[6],
    equal = _a_[7],
    compare = _a_[8],
    min = _a_[9],
    max = _a_[10],
    concat = Core_String[32];
   function tag(arg0_001, arg1_002, sexp_of_a){
    var
     res0_003 = caml_call1(Core[471], arg0_001),
     res1_004 = caml_call1(sexp_of_a, arg1_002);
    return [1, [0, res0_003, [0, res1_004, 0]]];
   }
   var
    Span = Core_Time_ns[1],
    Ofday = Core_Time_ns[2],
    hash_fold_t = Core_Time_ns[3],
    hash = Core_Time_ns[4],
    typerep_of_t = Core_Time_ns[5],
    typename_of_t = Core_Time_ns[6],
    bin_size_t = Core_Time_ns[7],
    bin_write_t = Core_Time_ns[8],
    bin_read_t = Core_Time_ns[9],
    bin_read_t$0 = Core_Time_ns[10],
    bin_shape_t = Core_Time_ns[11],
    bin_writer_t = Core_Time_ns[12],
    bin_reader_t = Core_Time_ns[13],
    bin_t = Core_Time_ns[14],
    symbol$5 = Core_Time_ns[15],
    symbol$6 = Core_Time_ns[16],
    symbol$7 = Core_Time_ns[17],
    symbol$8 = Core_Time_ns[18],
    symbol$9 = Core_Time_ns[19],
    symbol$10 = Core_Time_ns[20],
    equal$0 = Core_Time_ns[21],
    compare$0 = Core_Time_ns[22],
    min$0 = Core_Time_ns[23],
    max$0 = Core_Time_ns[24],
    Alternate_sexp = Core_Time_ns[25],
    quickcheck_generator = Core_Time_ns[26],
    quickcheck_observer = Core_Time_ns[27],
    quickcheck_shrinker = Core_Time_ns[28],
    gen_incl = Core_Time_ns[29],
    gen_uniform_incl = Core_Time_ns[30],
    is_earlier = Core_Time_ns[31],
    is_later = Core_Time_ns[32],
    of_date_ofday = Core_Time_ns[33],
    of_date_ofday_precise = Core_Time_ns[34],
    to_date_ofday = Core_Time_ns[35],
    to_date_ofday_precise = Core_Time_ns[36],
    to_date = Core_Time_ns[37],
    to_ofday = Core_Time_ns[38],
    reset_date_cache = Core_Time_ns[39],
    convert = Core_Time_ns[40],
    utc_offset = Core_Time_ns[41],
    to_filename_string = Core_Time_ns[42],
    of_filename_string = Core_Time_ns[43],
    to_string_abs = Core_Time_ns[44],
    to_string_abs_trimmed = Core_Time_ns[45],
    to_string_abs_parts = Core_Time_ns[46],
    to_string_trimmed = Core_Time_ns[47],
    to_sec_string = Core_Time_ns[48],
    to_sec_string_with_zone = Core_Time_ns[49],
    of_localized_string = Core_Time_ns[50],
    of_string_gen = Core_Time_ns[51],
    to_string_iso8601_basic = Core_Time_ns[52],
    occurrence = Core_Time_ns[53],
    of_string = Core_Time_ns[54],
    of_string_with_utc_offset = Core_Time_ns[55],
    to_string = Core_Time_ns[56],
    to_string_utc = Core_Time_ns[57],
    epoch = Core_Time_ns[58],
    min_value_representable = Core_Time_ns[59],
    max_value_representable = Core_Time_ns[60],
    min_value_for_1us_rounding = Core_Time_ns[61],
    max_value_for_1us_rounding = Core_Time_ns[62],
    min_value = Core_Time_ns[63],
    max_value = Core_Time_ns[64],
    now = Core_Time_ns[65],
    add = Core_Time_ns[66],
    add_saturating = Core_Time_ns[67],
    sub_saturating = Core_Time_ns[68],
    sub = Core_Time_ns[69],
    next = Core_Time_ns[70],
    prev = Core_Time_ns[71],
    diff = Core_Time_ns[72],
    abs_diff = Core_Time_ns[73],
    to_span_since_epoch = Core_Time_ns[74],
    of_span_since_epoch = Core_Time_ns[75],
    to_int63_ns_since_epoch = Core_Time_ns[76],
    of_int63_ns_since_epoch = Core_Time_ns[77],
    to_int_ns_since_epoch = Core_Time_ns[78],
    of_int_ns_since_epoch = Core_Time_ns[79],
    next_multiple = Core_Time_ns[80],
    prev_multiple = Core_Time_ns[81],
    random = Core_Time_ns[82],
    of_time = Core_Time_ns[83],
    to_time = Core_Time_ns[84],
    to_time_float_round_nearest = Core_Time_ns[85],
    to_time_float_round_nearest_mi = Core_Time_ns[86],
    of_time_float_round_nearest = Core_Time_ns[87],
    of_time_float_round_nearest_mi = Core_Time_ns[88],
    Utc = Core_Time_ns[89],
    Stable = Core_Time_ns[90],
    Hash_queue = Core_Time_ns[91],
    Hash_set = Core_Time_ns[92],
    Map = Core_Time_ns[93],
    Option = Core_Time_ns[94],
    Replace_polymorphic_compare = Core_Time_ns[95],
    Set = Core_Time_ns[96],
    Table = Core_Time_ns[97],
    Zone = Core_Time_ns[98],
    arg_type = Core_Time_ns[99],
    comparator = Core_Time_ns[100],
    get_sexp_zone = Core_Time_ns[101],
    interruptible_pause = Core_Time_ns[102],
    of_date_ofday_zoned = Core_Time_ns[103],
    of_string_abs = Core_Time_ns[104],
    of_string_fix_proto = Core_Time_ns[105],
    pause = Core_Time_ns[106],
    pause_forever = Core_Time_ns[107],
    pp = Core_Time_ns[108],
    set_sexp_zone = Core_Time_ns[109],
    sexp_of_t_abs = Core_Time_ns[111],
    t_of_sexp = Core_Time_ns[112],
    t_of_sexp_abs = Core_Time_ns[113],
    to_date_ofday_zoned = Core_Time_ns[114],
    to_ofday_zoned = Core_Time_ns[115],
    to_string_fix_proto = Core_Time_ns[116],
    validate_bound = Core_Time_ns[117],
    validate_lbound = Core_Time_ns[118],
    validate_ubound = Core_Time_ns[119],
    sexp_of_t = Core_Time_ns[25][4],
    Time_ns =
      [0,
       Span,
       Ofday,
       hash_fold_t,
       hash,
       typerep_of_t,
       typename_of_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       equal$0,
       compare$0,
       min$0,
       max$0,
       Alternate_sexp,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       gen_incl,
       gen_uniform_incl,
       is_earlier,
       is_later,
       of_date_ofday,
       of_date_ofday_precise,
       to_date_ofday,
       to_date_ofday_precise,
       to_date,
       to_ofday,
       reset_date_cache,
       convert,
       utc_offset,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed,
       to_sec_string,
       to_sec_string_with_zone,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic,
       occurrence,
       of_string,
       of_string_with_utc_offset,
       to_string,
       to_string_utc,
       epoch,
       min_value_representable,
       max_value_representable,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value,
       max_value,
       now,
       add,
       add_saturating,
       sub_saturating,
       sub,
       next,
       prev,
       diff,
       abs_diff,
       to_span_since_epoch,
       of_span_since_epoch,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       to_int_ns_since_epoch,
       of_int_ns_since_epoch,
       next_multiple,
       prev_multiple,
       random,
       of_time,
       to_time,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       Utc,
       Stable,
       Hash_queue,
       Hash_set,
       Map,
       Option,
       Replace_polymorphic_compare,
       Set,
       Table,
       Zone,
       arg_type,
       comparator,
       get_sexp_zone,
       interruptible_pause,
       of_date_ofday_zoned,
       of_string_abs,
       of_string_fix_proto,
       pause,
       pause_forever,
       pp,
       set_sexp_zone,
       sexp_of_t_abs,
       t_of_sexp,
       t_of_sexp_abs,
       to_date_ofday_zoned,
       to_ofday_zoned,
       to_string_fix_proto,
       validate_bound,
       validate_lbound,
       validate_ubound,
       sexp_of_t],
    bin_shape_t$0 = Core_Array[1],
    bin_size_t$0 = Core_Array[2],
    bin_write_t$0 = Core_Array[3],
    bin_read_t$1 = Core_Array[4],
    bin_read_t$2 = Core_Array[5],
    bin_writer_t$0 = Core_Array[6],
    bin_reader_t$0 = Core_Array[7],
    bin_t$0 = Core_Array[8],
    quickcheck_generator$0 = Core_Array[9],
    quickcheck_observer$0 = Core_Array[10],
    quickcheck_shrinker$0 = Core_Array[11],
    typerep_of_t$0 = Core_Array[12],
    typename_of_t$0 = Core_Array[13],
    compare$1 = Core_Array[14],
    t_of_sexp$0 = Core_Array[15],
    sexp_of_t$0 = Core_Array[16],
    t_sexp_grammar = Core_Array[17],
    binary_search = Core_Array[18],
    binary_search_segmented = Core_Array[19],
    mem = Core_Array[20],
    is_empty = Core_Array[21],
    iter = Core_Array[22],
    fold = Core_Array[23],
    fold_result = Core_Array[24],
    fold_until = Core_Array[25],
    exists = Core_Array[26],
    for_all = Core_Array[27],
    count = Core_Array[28],
    sum = Core_Array[29],
    find = Core_Array[30],
    find_map = Core_Array[31],
    to_list = Core_Array[32],
    to_array = Core_Array[33],
    min_elt = Core_Array[34],
    max_elt = Core_Array[35],
    invariant = Core_Array[36],
    max_length = Core_Array[37],
    create = Core_Array[38],
    create_float_uninitialized = Core_Array[39],
    init = Core_Array[40],
    make_matrix = Core_Array[41],
    copy_matrix = Core_Array[42],
    append = Core_Array[43],
    concat$0 = Core_Array[44],
    copy = Core_Array[45],
    fill = Core_Array[46],
    blit = Core_Array[47],
    blito = Core_Array[48],
    unsafe_blit = Core_Array[49],
    sub$0 = Core_Array[50],
    subo = Core_Array[51],
    of_list = Core_Array[52],
    map = Core_Array[53],
    folding_map = Core_Array[54],
    folding_mapi = Core_Array[55],
    fold_map = Core_Array[56],
    fold_mapi = Core_Array[57],
    iteri = Core_Array[58],
    mapi = Core_Array[59],
    foldi = Core_Array[60],
    fold_right = Core_Array[61],
    sort = Core_Array[62],
    stable_sort = Core_Array[63],
    is_sorted = Core_Array[64],
    is_sorted_strictly = Core_Array[65],
    merge = Core_Array[66],
    concat_map = Core_Array[67],
    concat_mapi = Core_Array[68],
    partition_tf = Core_Array[69],
    partitioni_tf = Core_Array[70],
    cartesian_product = Core_Array[71],
    transpose = Core_Array[72],
    transpose_exn = Core_Array[73],
    filter_opt = Core_Array[74],
    filter_map = Core_Array[75],
    filter_mapi = Core_Array[76],
    for_alli = Core_Array[77],
    existsi = Core_Array[78],
    counti = Core_Array[79],
    iter2_exn = Core_Array[80],
    map2_exn = Core_Array[81],
    fold2_exn = Core_Array[82],
    for_all2_exn = Core_Array[83],
    exists2_exn = Core_Array[84],
    filter = Core_Array[85],
    filteri = Core_Array[86],
    swap = Core_Array[87],
    rev_inplace = Core_Array[88],
    rev = Core_Array[89],
    of_list_rev = Core_Array[90],
    of_list_map = Core_Array[91],
    of_list_mapi = Core_Array[92],
    of_list_rev_map = Core_Array[93],
    of_list_rev_mapi = Core_Array[94],
    map_inplace = Core_Array[95],
    find_exn = Core_Array[96],
    find_map_exn = Core_Array[97],
    findi = Core_Array[98],
    findi_exn = Core_Array[99],
    find_mapi = Core_Array[100],
    find_mapi_exn = Core_Array[101],
    find_consecutive_duplicate = Core_Array[102],
    reduce = Core_Array[103],
    reduce_exn = Core_Array[104],
    permute = Core_Array[105],
    random_element = Core_Array[106],
    random_element_exn = Core_Array[107],
    zip = Core_Array[108],
    zip_exn = Core_Array[109],
    unzip = Core_Array[110],
    sorted_copy = Core_Array[111],
    last = Core_Array[112],
    equal$1 = Core_Array[113],
    to_sequence = Core_Array[114],
    to_sequence_mutable = Core_Array[115],
    Int = Core_Array[116],
    Float = Core_Array[117],
    normalize = Core_Array[118],
    slice = Core_Array[119],
    nget = Core_Array[120],
    nset = Core_Array[121],
    Permissioned = Core_Array[122];
   function realloc(t, len, a){
    var new_t = caml_call2(create, len, a);
    caml_call5(Core_Array[47], t, 0, new_t, 0, t.length - 1);
    return new_t;
   }
   var
    Array =
      [0,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_writer_t$0,
       bin_reader_t$0,
       bin_t$0,
       quickcheck_generator$0,
       quickcheck_observer$0,
       quickcheck_shrinker$0,
       typerep_of_t$0,
       typename_of_t$0,
       compare$1,
       t_of_sexp$0,
       sexp_of_t$0,
       t_sexp_grammar,
       binary_search,
       binary_search_segmented,
       mem,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       invariant,
       max_length,
       create,
       create_float_uninitialized,
       init,
       make_matrix,
       copy_matrix,
       append,
       concat$0,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit,
       sub$0,
       subo,
       of_list,
       map,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       iteri,
       mapi,
       foldi,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       merge,
       concat_map,
       concat_mapi,
       partition_tf,
       partitioni_tf,
       cartesian_product,
       transpose,
       transpose_exn,
       filter_opt,
       filter_map,
       filter_mapi,
       for_alli,
       existsi,
       counti,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       filter,
       filteri,
       swap,
       rev_inplace,
       rev,
       of_list_rev,
       of_list_map,
       of_list_mapi,
       of_list_rev_map,
       of_list_rev_mapi,
       map_inplace,
       find_exn,
       find_map_exn,
       findi,
       findi_exn,
       find_mapi,
       find_mapi_exn,
       find_consecutive_duplicate,
       reduce,
       reduce_exn,
       permute,
       random_element,
       random_element_exn,
       zip,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       equal$1,
       to_sequence,
       to_sequence_mutable,
       Int,
       Float,
       normalize,
       slice,
       nget,
       nset,
       Permissioned,
       realloc],
    sexp_of_t$1 = include[1],
    invariant$0 = include[2],
    none = include[3],
    some = include[4],
    is_none = include[5],
    is_some = include[6],
    value_exn = include[7],
    unsafe_value = include[8],
    to_option = include[9],
    of_option = include[10],
    Optional_syntax = include[11],
    Uopt =
      [0,
       sexp_of_t$1,
       invariant$0,
       none,
       some,
       is_none,
       is_some,
       value_exn,
       to_option,
       of_option,
       Optional_syntax,
       unsafe_value],
    bin_shape_t$1 = Core_Uniform_array[1],
    bin_size_t$1 = Core_Uniform_array[2],
    bin_write_t$1 = Core_Uniform_array[3],
    bin_read_t$3 = Core_Uniform_array[4],
    bin_read_t$4 = Core_Uniform_array[5],
    bin_writer_t$1 = Core_Uniform_array[6],
    bin_reader_t$1 = Core_Uniform_array[7],
    bin_t$1 = Core_Uniform_array[8],
    t_of_sexp$1 = Core_Uniform_array[9],
    sexp_of_t$2 = Core_Uniform_array[10],
    t_sexp_grammar$0 = Core_Uniform_array[11],
    compare$2 = Core_Uniform_array[12],
    invariant$1 = Core_Uniform_array[13],
    empty = Core_Uniform_array[14],
    create$0 = Core_Uniform_array[15],
    singleton = Core_Uniform_array[16],
    init$0 = Core_Uniform_array[17],
    length = Core_Uniform_array[18],
    get = Core_Uniform_array[19],
    unsafe_get = Core_Uniform_array[20],
    swap$0 = Core_Uniform_array[23],
    unsafe_set_omit_phys_equal_che = Core_Uniform_array[24],
    unsafe_set_with_caml_modify = Core_Uniform_array[25],
    set_with_caml_modify = Core_Uniform_array[26],
    map$0 = Core_Uniform_array[27],
    mapi$0 = Core_Uniform_array[28],
    iter$0 = Core_Uniform_array[29],
    iteri$0 = Core_Uniform_array[30],
    foldi$0 = Core_Uniform_array[31],
    of_array = Core_Uniform_array[32],
    to_array$0 = Core_Uniform_array[33],
    of_list$0 = Core_Uniform_array[34],
    to_list$0 = Core_Uniform_array[35],
    blit$0 = Core_Uniform_array[36],
    blito$0 = Core_Uniform_array[37],
    unsafe_blit$0 = Core_Uniform_array[38],
    sub$1 = Core_Uniform_array[39],
    subo$0 = Core_Uniform_array[40],
    copy$0 = Core_Uniform_array[41],
    unsafe_create_uninitialized = Core_Uniform_array[42],
    create_obj_array = Core_Uniform_array[43],
    unsafe_set_assuming_currently_ = Core_Uniform_array[44],
    unsafe_set_int_assuming_curren = Core_Uniform_array[45],
    unsafe_set_int = Core_Uniform_array[46],
    unsafe_clear_if_pointer = Core_Uniform_array[47],
    exists$0 = Core_Uniform_array[48],
    for_all$0 = Core_Uniform_array[49],
    map2_exn$0 = Core_Uniform_array[50],
    min_elt$0 = Core_Uniform_array[51],
    max_elt$0 = Core_Uniform_array[52];
   function realloc$0(t, len){
    var new_t = caml_call2(create$0, len, Uopt[3]);
    caml_call5(blit$0, t, 0, new_t, 0, caml_call1(length, t));
    return new_t;
   }
   var
    Uniform_array =
      [0,
       bin_shape_t$1,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_writer_t$1,
       bin_reader_t$1,
       bin_t$1,
       t_of_sexp$1,
       sexp_of_t$2,
       t_sexp_grammar$0,
       compare$2,
       invariant$1,
       empty,
       create$0,
       singleton,
       init$0,
       length,
       get,
       unsafe_get,
       swap$0,
       unsafe_set_omit_phys_equal_che,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       map$0,
       mapi$0,
       iter$0,
       iteri$0,
       foldi$0,
       of_array,
       to_array$0,
       of_list$0,
       to_list$0,
       blit$0,
       blito$0,
       unsafe_blit$0,
       sub$1,
       subo$0,
       copy$0,
       unsafe_create_uninitialized,
       create_obj_array,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_clear_if_pointer,
       exists$0,
       for_all$0,
       map2_exn$0,
       min_elt$0,
       max_elt$0,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       realloc$0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Import);
   var
    Incremental_Import =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       equal,
       compare,
       min,
       max,
       0,
       concat,
       tag,
       Time_ns,
       Array,
       Uopt,
       Uniform_array];
   runtime.caml_register_global
    (18, Incremental_Import, cst_Incremental_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Cutoff
//# unitInfo: Requires: Base__Invariant, Core, Expect_test_collector, Incremental__Import, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Cutoff = "Incremental__Cutoff",
    cst_incremental = "incremental",
    cst_src_cutoff_ml = "src/cutoff.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Cutoff);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_cutoff_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    _a_ = [0, "Always"],
    _b_ = [0, "Never"],
    _c_ = [0, "Phys_equal"],
    _d_ = [0, "Compare"],
    _e_ = [0, "Equal"],
    _f_ = [0, "F"],
    _g_ = [0, "_"],
    _h_ = [0, cst_src_cutoff_ml, 17, 409, 431];
   function sexp_of_t(of_a_001, param){
    if(typeof param === "number")
     switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;}
    switch(param[0]){
      case 0:
       var
        res0_003 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_l_){return 0;});
       return [1, [0, _d_, [0, res0_003, 0]]];
      case 1:
       var
        res0_005 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_k_){return 0;});
       return [1, [0, _e_, [0, res0_005, 0]]];
      default:
       var
        res0_007 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_j_){return 0;});
       return [1, [0, _f_, [0, res0_007, 0]]];
    }
   }
   function invariant(param, t){
    return caml_call4
            (Base_Invariant[1],
             _h_,
             t,
             function(x_009){
              return sexp_of_t(function(param){return _g_;}, x_009);
             },
             function(param){return 0;});
   }
   function create(f){return [2, f];}
   function of_compare(f){return [0, f];}
   function of_equal(f){return [1, f];}
   var poly_equal = [1, runtime.caml_equal];
   function should_cutoff(t, old_value, new_value){
    if(typeof t === "number")
     switch(t){
       case 0:
        return 1;
       case 1:
        return 0;
       default: return caml_call2(Core[246], old_value, new_value);
     }
    switch(t[0]){
      case 0:
       var f = t[1], _i_ = caml_call2(f, old_value, new_value);
       return caml_call2(Incremental_Import[3], _i_, 0);
      case 1:
       var f$0 = t[1]; return caml_call2(f$0, old_value, new_value);
      default: var f$1 = t[1]; return caml_call2(f$1, old_value, new_value);
    }
   }
   function equal(t1, t2){
    if(typeof t1 === "number")
     switch(t1){
       case 0:
        if(typeof t2 === "number" && ! t2) return 1; return 0;
       case 1:
        if(typeof t2 === "number" && 1 === t2) return 1; return 0;
       default: if(typeof t2 === "number" && 2 <= t2) return 1; return 0;
     }
    switch(t1[0]){
      case 0:
       var f1 = t1[1];
       if(typeof t2 !== "number" && 0 === t2[0]){
        var f2 = t2[1];
        return caml_call2(Core[246], f1, f2);
       }
       return 0;
      case 1:
       var f1$0 = t1[1];
       if(typeof t2 !== "number" && 1 === t2[0]){
        var f2$0 = t2[1];
        return caml_call2(Core[246], f1$0, f2$0);
       }
       return 0;
      default:
       var f1$1 = t1[1];
       if(typeof t2 !== "number" && 2 === t2[0]){
        var f2$1 = t2[1];
        return caml_call2(Core[246], f1$1, f2$1);
       }
       return 0;
    }
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Cutoff);
   var
    Incremental_Cutoff =
      [0,
       sexp_of_t,
       invariant,
       create,
       of_compare,
       of_equal,
       0,
       1,
       2,
       poly_equal,
       equal,
       should_cutoff];
   runtime.caml_register_global
    (23, Incremental_Cutoff, cst_Incremental_Cutoff);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Dot_user_info
//# unitInfo: Requires: Core, Core__Comparator, Core__Info, Core__List, Core__Map, Core__Set, Core__String, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$12 = '"',
    cst_Incremental_Dot_user_info = "Incremental__Dot_user_info",
    cst_incremental = "incremental",
    cst$10 = "{",
    cst$11 = "|",
    cst$9 = "}";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$7 = cst$9,
    cst$8 = cst$10,
    cst$5 = cst$9,
    cst$6 = cst$10,
    cst$4 = "\\",
    cst$0 = cst$12,
    cst$1 = '\\"',
    cst$2 = cst$12,
    cst$3 = cst$12,
    cst = "",
    Core_String = global_data.Core__String,
    Core_Info = global_data.Core__Info,
    Core_Set = global_data.Core__Set,
    Core_Map = global_data.Core__Map,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Comparator = global_data.Core__Comparator;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Dot_user_info);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/dot_user_info.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function compare(a_001, b_002){
    return caml_call3
            (Core[418],
             function(a_003, b_004){
              return caml_call2(Core[467], a_003, b_004);
             },
             a_001,
             b_002);
   }
   function sexp_of_t(x_005){return caml_call2(Core[421], Core[471], x_005);}
   var
    include = caml_call2(Core_Comparator[1], compare, sexp_of_t),
    comparator = include[1],
    _a_ = [0, "attributes"],
    _b_ = [0, "label"],
    _c_ = [0, "Dot"],
    _d_ = [0, "Info"],
    _e_ = [0, "new_"],
    _f_ = [0, "prior"],
    _g_ = [0, "Append"],
    _h_ = [0, cst$11],
    _i_ = [0, cst$11],
    _j_ = [0, [12, 32, [2, 0, [12, 61, [2, 0, 0]]]], " %s=%s"],
    _k_ = [0, " "],
    _l_ =
      [0,
       [11,
        "  ",
        [2,
         0,
         [11, " [shape=Mrecord label=", [2, 0, [12, 32, [2, 0, [12, 93, 0]]]]]]],
       "  %s [shape=Mrecord label=%s %s]"];
   function sexp_of_dot(param){
    var
     attributes_009 = param[2],
     label_007 = param[1],
     arg_010 = caml_call2(Core_String[140][107], Core[471], attributes_009),
     bnds_006 = [0, [1, [0, _a_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call2(Core_Set[82], [0, sexp_of_t], label_007),
     bnds_006$0 = [0, [1, [0, _b_, [0, arg_008, 0]]], bnds_006];
    return [1, bnds_006$0];
   }
   function sexp_of_t$0(param){
    switch(param[0]){
      case 0:
       var arg0_011 = param[1], res0_012 = sexp_of_dot(arg0_011);
       return [1, [0, _c_, [0, res0_012, 0]]];
      case 1:
       var arg0_013 = param[1], res0_014 = caml_call1(Core_Info[6], arg0_013);
       return [1, [0, _d_, [0, res0_014, 0]]];
      default:
       var
        new_018 = param[2],
        prior_016 = param[1],
        arg_019 = sexp_of_t$0(new_018),
        bnds_015 = [0, [1, [0, _e_, [0, arg_019, 0]]], 0],
        arg_017 = sexp_of_t$0(prior_016),
        bnds_015$0 = [0, [1, [0, _f_, [0, arg_017, 0]]], bnds_015];
       return [1, [0, _g_, bnds_015$0]];
    }
   }
   function info(info){return [1, info];}
   function append(prior, new$0){return [2, prior, new$0];}
   function dot(label, attributes){
    var label$0 = caml_call2(Core_Set[7], [0, comparator], label);
    return [0, [0, label$0, attributes]];
   }
   function to_dot(param){
    switch(param[0]){
      case 0:
       var dot = param[1]; return dot;
      case 1:
       var
        i = param[1],
        _B_ = Core_String[140][3],
        _C_ = [0, caml_call1(Core_Info[9], i), 0];
       return [0, caml_call2(Core_Set[7], [0, comparator], _C_), _B_];
      default:
       var
        new$0 = param[2],
        prior = param[1],
        prior$0 = to_dot(prior),
        new$1 = to_dot(new$0),
        label = caml_call2(Core_Set[13], prior$0[1], new$1[1]),
        attributes =
          caml_call3
           (Core_Map[78],
            prior$0[2],
            new$1[2],
            function(param, left, right){return right;});
       return [0, label, attributes];
    }
   }
   function escape_dot_string(s){
    var
     _z_ = caml_call3(Core_String[51], s, cst$2, cst$1),
     _A_ = caml_call2(Core[18], _z_, cst$0);
    return caml_call2(Core[18], cst$3, _A_);
   }
   function escape_record_label(s){
    return caml_call3
            (Core_String[73],
             0,
             s,
             function(c){
              a:
              {
               if(62 <= c){
                var _x_ = c - 63 | 0;
                if(59 < _x_ >>> 0){
                 if(63 <= _x_) break a;
                }
                else if(29 !== _x_) break a;
               }
               else if(32 !== c && 60 !== c) break a;
               var _y_ = caml_call1(Core_String[97], c);
               return caml_call2(Core[18], cst$4, _y_);
              }
              return caml_call1(Core_String[97], c);
             });
   }
   function to_string(name, param){
    var
     attributes = param[2],
     label = param[1],
     _m_ = caml_call1(Core_Set[38], label),
     _n_ =
       caml_call2
        (Core_List[72],
         _m_,
         function(cols){
          var
           _u_ = caml_call2(Core_List[72], cols, escape_record_label),
           _v_ = caml_call2(Core_String[32], _h_, _u_),
           _w_ = caml_call2(Core[18], _v_, cst$5);
          return caml_call2(Core[18], cst$6, _w_);
         }),
     s = caml_call2(Core_String[32], _i_, _n_),
     _o_ = caml_call2(Core[18], s, cst$7),
     label$0 = caml_call2(Core[18], cst$8, _o_),
     _p_ = caml_call2(Core_Map[74], 0, attributes),
     _q_ =
       caml_call2
        (Core_List[72],
         _p_,
         function(param){
          var
           v = param[2],
           k = param[1],
           _s_ = escape_dot_string(v),
           _t_ = escape_dot_string(k);
          return caml_call3(Core[257], _j_, _t_, _s_);
         }),
     attributes$0 = caml_call2(Core_String[32], _k_, _q_),
     _r_ = escape_dot_string(label$0);
    return caml_call4(Core[257], _l_, name, _r_, attributes$0);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Dot_user_info);
   var
    Incremental_Dot_user_info =
      [0,
       [0, comparator],
       sexp_of_dot,
       sexp_of_t$0,
       info,
       dot,
       to_dot,
       append,
       to_string];
   runtime.caml_register_global
    (39, Incremental_Dot_user_info, cst_Incremental_Dot_user_info);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Node_id
//# unitInfo: Requires: Assert_failure, Core__Int, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Node_id = "Incremental__Node_id",
    cst_incremental = "incremental",
    cst_src_node_id_ml = "src/node_id.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Int = global_data.Core__Int;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Node_id);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_node_id_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    incr = Core_Int[32],
    sexp_of_t = Core_Int[80],
    to_string = Core_Int[82],
    symbol = Core_Int[84],
    compare = Core_Int[91],
    hash_fold_t = Core_Int[103],
    hash = Core_Int[104],
    hashable = Core_Int[105],
    Table = Core_Int[106],
    Hash_set = Core_Int[107],
    Hash_queue = Core_Int[108],
    _a_ = [0, cst_src_node_id_ml, 5, 18];
   function invariant(t){
    if(caml_call2(symbol, t, 1)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   var r = [0, 0];
   function next(param){caml_call1(incr, r); return r[1];}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Node_id);
   var
    Incremental_Node_id =
      [0,
       sexp_of_t,
       compare,
       hash_fold_t,
       hash,
       hashable,
       [0,
        Table[1],
        Table[2],
        Table[3],
        Table[4],
        Table[5],
        Table[6],
        Table[7],
        Table[8],
        Table[9],
        Table[10],
        Table[11],
        Table[12],
        Table[13],
        Table[14],
        Table[15],
        Table[16],
        Table[17],
        Table[18],
        Table[19],
        Table[20],
        Table[21],
        Table[22],
        Table[23],
        Table[24],
        Table[25],
        Table[26],
        Table[27],
        Table[28],
        Table[29],
        Table[30],
        Table[31],
        Table[32],
        Table[33],
        Table[34],
        Table[35],
        Table[36],
        Table[37],
        Table[38],
        Table[39],
        Table[40],
        Table[41],
        Table[42],
        Table[43],
        Table[44],
        Table[45],
        Table[46],
        Table[47],
        Table[48],
        Table[49],
        Table[50],
        Table[51],
        Table[52],
        Table[53],
        Table[54],
        Table[55],
        Table[56],
        Table[57],
        Table[58],
        Table[59],
        Table[60],
        Table[61],
        Table[62],
        Table[63],
        Table[64],
        Table[65],
        Table[66],
        Table[67],
        Table[68],
        Table[69],
        Table[70],
        Table[71],
        Table[72],
        Table[73],
        Table[74],
        Table[75],
        Table[76],
        Table[77],
        Table[78],
        Table[79],
        Table[80],
        Table[81],
        Table[82],
        Table[83],
        Table[84]],
       [0,
        Hash_set[1],
        Hash_set[2],
        Hash_set[3],
        Hash_set[4],
        Hash_set[5],
        Hash_set[6],
        Hash_set[7]],
       Hash_queue,
       invariant,
       next,
       to_string];
   runtime.caml_register_global
    (14, Incremental_Node_id, cst_Incremental_Node_id);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Stabilization_num
//# unitInfo: Requires: Assert_failure, Core__Int, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Stabilization_ = "Incremental__Stabilization_num",
    cst_incremental = "incremental",
    cst_src_stabilization_num_ml = "src/stabilization_num.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Assert_failure = global_data.Assert_failure,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Int = global_data.Core__Int;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Stabilization_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_stabilization_num_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    zero = Core_Int[55],
    to_int = Core_Int[61],
    sexp_of_t = Core_Int[80],
    symbol = Core_Int[84],
    symbol$0 = Core_Int[86],
    equal = Core_Int[90],
    compare = Core_Int[91],
    _a_ = [0, cst_src_stabilization_num_ml, 5, 18];
   function invariant(t){
    if(caml_call2(symbol, t, -1)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   var none = -1;
   function is_none(t){return caml_call2(symbol$0, t, none);}
   function is_some(t){return caml_call2(symbol, t, 0);}
   function add1(t){return t + 1 | 0;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Stabilization_);
   var
    Incremental_Stabilization_num =
      [0,
       compare,
       sexp_of_t,
       equal,
       invariant,
       none,
       zero,
       is_none,
       is_some,
       add1,
       to_int];
   runtime.caml_register_global
    (14, Incremental_Stabilization_num, cst_Incremental_Stabilization_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__On_update_handler
//# unitInfo: Requires: Expect_test_collector, Incremental__Import, Incremental__Stabilization_num, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Changed = "Changed",
    cst_Incremental_On_update_hand = "Incremental__On_update_handler",
    cst_Invalidated = "Invalidated",
    cst_Necessary = "Necessary",
    cst_Unnecessary = "Unnecessary",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_Import = global_data.Incremental__Import,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_On_update_hand);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/on_update_handler.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    _f_ = [0, cst_Invalidated],
    _g_ = [0, cst_Unnecessary],
    _h_ = [0, cst_Necessary],
    _i_ = [0, cst_Changed];
   function compare(cmp_a, a_001, b_002){
    if(caml_call2(Ppx_compare_lib[1], a_001, b_002)) return 0;
    a:
    {
     if(typeof a_001 === "number"){
      if(0 === a_001){
       if(typeof b_002 === "number") return 0 === b_002 ? 0 : -1;
       if(0 === b_002[0]) break a;
      }
      else{
       if(typeof b_002 === "number") return 0 === b_002 ? 1 : 0;
       if(0 === b_002[0]) break a;
      }
      return 1;
     }
     if(0 === a_001[0]){
      var a_003 = a_001[1];
      if(typeof b_002 !== "number" && 0 === b_002[0]){
       var b_004 = b_002[1];
       return caml_call2(cmp_a, a_003, b_004);
      }
      return -1;
     }
     var a_007 = a_001[2], a_005 = a_001[1];
     if(typeof b_002 === "number") return -1;
     if(0 !== b_002[0]){
      var
       b_008 = b_002[2],
       b_006 = b_002[1],
       n = caml_call2(cmp_a, a_005, b_006);
      return 0 === n ? caml_call2(cmp_a, a_007, b_008) : n;
     }
    }
    return 1;
   }
   function sexp_of_t(of_a_009, param){
    if(typeof param === "number") return 0 === param ? _f_ : _g_;
    if(0 === param[0]){
     var arg0_010 = param[1], res0_011 = caml_call1(of_a_009, arg0_010);
     return [1, [0, _h_, [0, res0_011, 0]]];
    }
    var
     arg1_013 = param[2],
     arg0_012 = param[1],
     res0_014 = caml_call1(of_a_009, arg0_012),
     res1_015 = caml_call1(of_a_009, arg1_013);
    return [1, [0, _i_, [0, res0_014, [0, res1_015, 0]]]];
   }
   var
    Node_update = [0, compare, sexp_of_t],
    _a_ = [0, "Never_been_updated"],
    _b_ = [0, cst_Necessary],
    _c_ = [0, cst_Changed],
    _d_ = [0, cst_Invalidated],
    _e_ = [0, cst_Unnecessary],
    _j_ = [0, "created_at"],
    _k_ = [0, "previous_update_kind"],
    _l_ = [0, "f"];
   function sexp_of_t$0(of_a_017, param){
    var
     previous_update_kind_021 = param[2],
     created_at_023 = param[3],
     arg_024 = caml_call1(Incremental_Stabilization_num[2], created_at_023),
     bnds_018 = [0, [1, [0, _j_, [0, arg_024, 0]]], 0];
    switch(previous_update_kind_021){
      case 0:
       var arg_022 = _a_; break;
      case 1:
       var arg_022 = _b_; break;
      case 2:
       var arg_022 = _c_; break;
      case 3:
       var arg_022 = _d_; break;
      default: var arg_022 = _e_;
    }
    var
     bnds_018$0 = [0, [1, [0, _k_, [0, arg_022, 0]]], bnds_018],
     arg_020 = caml_call1(Sexplib0_Sexp_conv[24], function(_p_){return 0;}),
     bnds_018$1 = [0, [1, [0, _l_, [0, arg_020, 0]]], bnds_018$0];
    return [1, bnds_018$1];
   }
   function create(f, created_at){return [0, f, 0, created_at];}
   function really_run(t, node_update){
    var
     _o_ =
       typeof node_update === "number"
        ? 0 === node_update ? 3 : 4
        : 0 === node_update[0] ? 1 : 2;
    t[2] = _o_;
    return caml_call1(t[1], node_update);
   }
   function run(t, node_update, now){
    var
     _m_ = caml_call2(Incremental_Stabilization_num[1], t[3], now),
     _n_ = caml_call2(Incremental_Import[5], _m_, 0);
    if(! _n_) return _n_;
    a:
    {
     b:
     {
      switch(t[2]){
        case 0:
         if(typeof node_update === "number") break a;
         if(1 === node_update[0]) break b;
         break a;
        case 1:
         if(typeof node_update === "number" || 0 !== node_update[0]) break a;
         break;
        case 2:
         if(typeof node_update === "number" || 0 !== node_update[0]) break a;
         break;
        case 3:
         return 0;
        default:
         if(typeof node_update !== "number"){
          if(1 === node_update[0]) break b;
          break a;
         }
         if(1 !== node_update) break a;
      }
      return 0;
     }
     var a = node_update[2];
     return really_run(t, [0, a]);
    }
    return really_run(t, node_update);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_On_update_hand);
   var
    Incremental_On_update_handler = [0, Node_update, sexp_of_t$0, create, run];
   runtime.caml_register_global
    (27, Incremental_On_update_handler, cst_Incremental_On_update_hand);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Raised_exn
//# unitInfo: Requires: Base__Backtrace, Core, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Raised_exn = "Incremental__Raised_exn",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Backtrace = global_data.Base__Backtrace,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Raised_exn);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/raised_exn.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var _a_ = [0, "backtrace"], _b_ = [0, "exn"];
   function sexp_of_t(param){
    var
     backtrace_004 = param[2],
     exn_002 = param[1],
     arg_005 = caml_call1(Base_Backtrace[1], backtrace_004),
     bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
     arg_003 = caml_call1(Core[537], exn_002),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001];
    return [1, bnds_001$0];
   }
   function create(exn){return [0, exn, caml_call1(Base_Backtrace[6][4], 0)];}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Raised_exn);
   var Incremental_Raised_exn = [0, sexp_of_t, create];
   runtime.caml_register_global
    (15, Incremental_Raised_exn, cst_Incremental_Raised_exn);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Types
//# unitInfo: Requires: CamlinternalMod, Core, Expect_test_collector, Incremental__Import, Incremental__Node_id, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Types = "Incremental__Types",
    cst$0 = "_",
    cst_incremental = "incremental",
    cst_src_types_ml = "src/types.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Node_id = global_data.Incremental__Node_id,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    CamlinternalMod = global_data.CamlinternalMod;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Types);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_types_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    Adjust_heights_heap =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 22, 2], [0, [0]]),
    Alarm =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 27, 2], [0, [0]]),
    Alarm_value =
      caml_call2
       (CamlinternalMod[1], [0, cst_src_types_ml, 43, 2], [0, [0, [0, [0]]]]),
    Array_fold =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 52, 2], [0, [0]]),
    At =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 62, 2], [0, [0]]),
    At_intervals =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 73, 2], [0, [0]]),
    Bind =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 86, 2], [0, [0]]),
    Clock =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 96, 2], [0, [0]]),
    Expert =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 117, 2], [0, [0]]),
    Freeze =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 126, 2], [0, [0]]),
    If_then_else =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 138, 2], [0, [0]]),
    Internal_observer =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_src_types_ml, 165, 2],
        [0, [0, [0, [0]], [0, [0]]]]),
    Join =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 175, 2], [0, [0]]),
    Kind =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 416, 2], [0, [0]]),
    Node =
      caml_call2
       (CamlinternalMod[1],
        [0, cst_src_types_ml, 460, 6],
        [0, [0, 0, [0, [0, 0]], 0, 0, 0]]),
    Observer =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 519, 2], [0, [0]]),
    Only_in_debug =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 527, 2], [0, [0]]),
    Packed_weak_hashtbl =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 532, 2], [0, [0]]),
    Recompute_heap =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 541, 2], [0, [0]]),
    Run_on_update_handlers =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 546, 2], [0, [0]]),
    Scope =
      caml_call2
       (CamlinternalMod[1], [0, cst_src_types_ml, 553, 6], [0, [0, 0]]),
    Snapshot =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 573, 2], [0, [0]]),
    State =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 606, 2], [0, [0]]),
    Status =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 615, 2], [0, [0]]),
    Step_function_node =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 629, 2], [0, [0]]),
    Unordered_array_fold =
      caml_call2(CamlinternalMod[1], [0, cst_src_types_ml, 643, 2], [0, [0]]),
    Var =
      caml_call2
       (CamlinternalMod[1], [0, cst_src_types_ml, 659, 2], [0, [0, [0, [0]]]]);
   caml_call3
    (CamlinternalMod[2], [0, [0]], Adjust_heights_heap, Adjust_heights_heap);
   caml_call3(CamlinternalMod[2], [0, [0]], Alarm, Alarm);
   caml_call3
    (CamlinternalMod[2], [0, [0, [0, [0]]]], Alarm_value, Alarm_value);
   caml_call3(CamlinternalMod[2], [0, [0]], Array_fold, Array_fold);
   caml_call3(CamlinternalMod[2], [0, [0]], At, At);
   caml_call3(CamlinternalMod[2], [0, [0]], At_intervals, At_intervals);
   caml_call3(CamlinternalMod[2], [0, [0]], Bind, Bind);
   caml_call3(CamlinternalMod[2], [0, [0]], Clock, Clock);
   caml_call3(CamlinternalMod[2], [0, [0]], Expert, Expert);
   caml_call3(CamlinternalMod[2], [0, [0]], Freeze, Freeze);
   caml_call3(CamlinternalMod[2], [0, [0]], If_then_else, If_then_else);
   caml_call3
    (CamlinternalMod[2],
     [0, [0, [0, [0]], [0, [0]]]],
     Internal_observer,
     Internal_observer);
   caml_call3(CamlinternalMod[2], [0, [0]], Join, Join);
   caml_call3(CamlinternalMod[2], [0, [0]], Kind, Kind);
   var cst_n = "n", _a_ = [0, cst$0];
   function sexp_of_node(param, t){
    var
     _i_ = [0, cst_n, [0, caml_call1(Incremental_Node_id[11], t[1]), 0]],
     _j_ = caml_call2(Incremental_Import[12], 0, _i_);
    return caml_call1(Core[471], _j_);
   }
   function sexp_of_t(x_003){
    return sexp_of_node(function(param){return _a_;}, x_003);
   }
   function is_valid(t){
    var _h_ = t[5];
    if(typeof _h_ === "number" && ! _h_) return 0;
    return 1;
   }
   function is_necessary(t){
    var _c_ = caml_call2(Incremental_Import[4], t[9], 0);
    if(_c_)
     var _d_ = _c_;
    else{
     var _e_ = caml_call1(Incremental_Import[16][6], t[21]);
     if(_e_)
      var _d_ = _e_;
     else{
      var _f_ = t[5];
      a:
      {
       if(typeof _f_ !== "number" && 7 === _f_[0]){var _g_ = 1; break a;}
       var _g_ = 0;
      }
      var _d_ = _g_ || t[26];
     }
    }
    return _d_;
   }
   function type_equal_if_phys_same(t1, t2){
    return caml_call2(Core[247], t1, t2) ? [0, 0] : 0;
   }
   caml_call3
    (CamlinternalMod[2],
     [0, [0, 0, [0, [0, 0]], 0, 0, 0]],
     Node,
     [0,
      sexp_of_node,
      [0, sexp_of_t],
      is_valid,
      is_necessary,
      type_equal_if_phys_same]);
   caml_call3(CamlinternalMod[2], [0, [0]], Observer, Observer);
   caml_call3(CamlinternalMod[2], [0, [0]], Only_in_debug, Only_in_debug);
   caml_call3
    (CamlinternalMod[2], [0, [0]], Packed_weak_hashtbl, Packed_weak_hashtbl);
   caml_call3(CamlinternalMod[2], [0, [0]], Recompute_heap, Recompute_heap);
   caml_call3
    (CamlinternalMod[2],
     [0, [0]],
     Run_on_update_handlers,
     Run_on_update_handlers);
   var _b_ = [0, cst$0], cst_Top = "Top";
   function sexp_of_t$0(param){
    if(! param) return caml_call1(Core[471], cst_Top);
    var bind = param[1], x_004 = bind[1];
    return caml_call2(Node[1], function(param){return _b_;}, x_004);
   }
   caml_call3(CamlinternalMod[2], [0, [0, 0]], Scope, [0, sexp_of_t$0]);
   caml_call3(CamlinternalMod[2], [0, [0]], Snapshot, Snapshot);
   caml_call3(CamlinternalMod[2], [0, [0]], State, State);
   caml_call3(CamlinternalMod[2], [0, [0]], Status, Status);
   caml_call3
    (CamlinternalMod[2], [0, [0]], Step_function_node, Step_function_node);
   caml_call3
    (CamlinternalMod[2], [0, [0]], Unordered_array_fold, Unordered_array_fold);
   caml_call3(CamlinternalMod[2], [0, [0, [0, [0]]]], Var, Var);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Types);
   var
    Incremental_Types =
      [0,
       Adjust_heights_heap,
       Alarm,
       Alarm_value,
       Array_fold,
       At,
       At_intervals,
       Bind,
       Clock,
       Expert,
       Freeze,
       If_then_else,
       Internal_observer,
       Join,
       Kind,
       Node,
       Observer,
       Only_in_debug,
       Packed_weak_hashtbl,
       Recompute_heap,
       Run_on_update_handlers,
       Scope,
       Snapshot,
       State,
       Status,
       Step_function_node,
       Unordered_array_fold,
       Var];
   runtime.caml_register_global(100, Incremental_Types, cst_Incremental_Types);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Var
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Stabilization_num, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Var = "Incremental__Var",
    cst$0 = "_",
    cst_incremental = "incremental",
    cst_set_at = "set_at",
    cst_src_var_ml = "src/var.ml",
    cst_value = "value",
    cst_value_set_during_stabiliza = "value_set_during_stabilization",
    cst_watch = "watch",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Import = global_data.Incremental__Import,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_Types = global_data.Incremental__Types;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Var);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_var_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function watch(r){return r[4];}
   function set_at(r){return r[3];}
   function set_set_at(r, v){r[3] = v; return 0;}
   function value_set_during_stabilization(r){return r[2];}
   function set_value_set_during_stabiliza(r, v){r[2] = v; return 0;}
   function value(r){return r[1];}
   function set_value(r, v){r[1] = v; return 0;}
   var
    watch$0 =
      [0,
       function(param){return 0;},
       cst_watch,
       0,
       watch,
       function(r, v){return [0, r[1], r[2], r[3], v];}],
    set_at$0 =
      [0,
       function(param){return 0;},
       cst_set_at,
       [0, set_set_at],
       set_at,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    value_set_during_stabilization$0 =
      [0,
       function(param){return 0;},
       cst_value_set_during_stabiliza,
       [0, set_value_set_during_stabiliza],
       value_set_during_stabilization,
       function(r, v){return [0, r[1], v, r[3], r[4]];}],
    value$0 =
      [0,
       function(param){return 0;},
       cst_value,
       [0, set_value],
       value,
       function(r, v){return [0, v, r[2], r[3], r[4]];}],
    _a_ = [0, cst_watch],
    _b_ = [0, cst_set_at],
    _c_ = [0, cst_value_set_during_stabiliza],
    _d_ = [0, cst_value],
    _e_ = [0, cst_src_var_ml, 33, 18],
    _f_ = [0, cst_src_var_ml, 32, 23],
    _g_ = [0, cst$0],
    _h_ = [0, cst_src_var_ml, 22, 913, 935],
    _i_ = [0, cst$0],
    _j_ = [0, "T"];
   function sexp_of_var(of_a_001, param){
    var
     value_003 = param[1],
     value_set_during_stabilization = param[2],
     set_at_007 = param[3],
     watch_009 = param[4],
     arg_010 = caml_call2(Incremental_Types[15][1], of_a_001, watch_009),
     bnds_002 = [0, [1, [0, _a_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call1(Incremental_Stabilization_num[2], set_at_007),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_008, 0]]], bnds_002],
     arg_006 =
       caml_call2
        (Incremental_Import[16][1], of_a_001, value_set_during_stabilization),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call1(of_a_001, value_003),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function invariant(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _h_,
             t,
             function(x_011){
              return sexp_of_var(function(param){return _g_;}, x_011);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               watch_fun =
                 check
                  (function(watch){
                    var match = watch[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(16 === match[0]){
                     var t$0 = match[1];
                     if(caml_call2(Core[246], t, t$0)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _f_], 1);
                    }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _e_], 1);
                   }),
               set_at_fun = check(Incremental_Stabilization_num[4]),
               value_set_during_stabilization =
                 check(caml_call1(Incremental_Import[16][2], invariant_a)),
               value_fun = check(invariant_a);
              caml_call1(value_fun, value$0);
              caml_call1
               (value_set_during_stabilization,
                value_set_during_stabilization$0);
              caml_call1(set_at_fun, set_at$0);
              return caml_call1(watch_fun, watch$0);
             });
   }
   function incr_state(t){return t[4][2];}
   function sexp_of_t(param){
    var res0_015 = sexp_of_var(function(param){return _i_;}, param);
    return [1, [0, _j_, [0, res0_015, 0]]];
   }
   function latest_value(t){
    return caml_call1(Incremental_Import[16][6], t[2])
            ? caml_call1(Incremental_Import[16][11], t[2])
            : t[1];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Var);
   var
    Incremental_Var =
      [0, invariant, sexp_of_var, [0, sexp_of_t], latest_value, incr_state];
   runtime.caml_register_global(33, Incremental_Var, cst_Incremental_Var);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Unordered_array_fold
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Types, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Unordered_arra = "Incremental__Unordered_array_fold",
    cst$0 = "_",
    cst_children = "children",
    cst_fold_value = "fold_value",
    cst_full_compute_every_n_chang = "full_compute_every_n_changes",
    cst_incremental = "incremental",
    cst_init = "init",
    cst_main = "main",
    cst_num_changes_since_last_ful = "num_changes_since_last_full_compute",
    cst_src_unordered_array_fold_m = "src/unordered_array_fold.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos = "src/unordered_array_fold.ml:57:26",
    cst = "",
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Import = global_data.Incremental__Import,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Assert_failure = global_data.Assert_failure,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Unordered_arra);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_unordered_array_fold_m);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var _a_ = [0, "F_inverse"], _b_ = [0, "Update"];
   function sexp_of_t(of_a_001, of_b_002, param){
    if(0 === param[0]){
     var
      res0_004 = caml_call1(Sexplib0_Sexp_conv[24], function(_S_){return 0;});
     return [1, [0, _a_, [0, res0_004, 0]]];
    }
    var
     res0_006 = caml_call1(Sexplib0_Sexp_conv[24], function(_R_){return 0;});
    return [1, [0, _b_, [0, res0_006, 0]]];
   }
   function num_changes_since_last_full_co(r){return r[8];}
   function set_num_changes_since_last_ful(r, v){r[8] = v; return 0;}
   function fold_value(r){return r[7];}
   function set_fold_value(r, v){r[7] = v; return 0;}
   function children(r){return r[6];}
   function full_compute_every_n_changes(r){return r[5];}
   function init(r){return r[2];}
   function main(r){return r[1];}
   var
    num_changes_since_last_full_co$0 =
      [0,
       function(param){return 0;},
       cst_num_changes_since_last_ful,
       [0, set_num_changes_since_last_ful],
       num_changes_since_last_full_co,
       function(r, v){
        return [0, r[1], r[2], r[3], r[4], r[5], r[6], r[7], v];
       }],
    fold_value$0 =
      [0,
       function(param){return 0;},
       cst_fold_value,
       [0, set_fold_value],
       fold_value,
       function(r, v){
        return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8]];
       }],
    children$0 =
      [0,
       function(param){return 0;},
       cst_children,
       0,
       children,
       function(r, v){
        return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8]];
       }],
    full_compute_every_n_changes$0 =
      [0,
       function(param){return 0;},
       cst_full_compute_every_n_chang,
       0,
       full_compute_every_n_changes,
       function(r, v){
        return [0, r[1], r[2], r[3], r[4], v, r[6], r[7], r[8]];
       }],
    init$0 =
      [0,
       function(param){return 0;},
       cst_init,
       0,
       init,
       function(r, v){
        return [0, r[1], v, r[3], r[4], r[5], r[6], r[7], r[8]];
       }],
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){
        return [0, v, r[2], r[3], r[4], r[5], r[6], r[7], r[8]];
       }],
    _c_ = [0, cst_num_changes_since_last_ful],
    _d_ = [0, cst_fold_value],
    _e_ = [0, cst_children],
    _f_ = [0, cst_full_compute_every_n_chang],
    _g_ = [0, "update"],
    _h_ = [0, "f"],
    _i_ = [0, cst_init],
    _j_ = [0, cst_main],
    _k_ = [0, cst_src_unordered_array_fold_m, 64, 11],
    _l_ = [0, cst_src_unordered_array_fold_m, 63, 11],
    _m_ = [0, cst_src_unordered_array_fold_m, 53, 18],
    _n_ = [0, cst_src_unordered_array_fold_m, 68, 11],
    _o_ = [0, cst_src_unordered_array_fold_m, 43, 18],
    _p_ = [0, cst_src_unordered_array_fold_m, 42, 40],
    _q_ = [0, cst$0],
    _r_ = [0, cst$0],
    _s_ = [0, cst_src_unordered_array_fold_m, 35, 908, 930],
    _t_ = [0, cst$0],
    _u_ = [0, "child"],
    _v_ = [0, "child_index"],
    _w_ = [0, cst$0],
    _x_ = [0, cst$0],
    _y_ = [0, "unordered_array_fold"],
    cst_Unordered_array_fold_child =
      "[Unordered_array_fold.child_changed] mismatch";
   function sexp_of_t$0(of_a_009, of_acc_010, param){
    var
     children_022 = param[6],
     full_compute_every_n_changes_0 = param[5],
     init_014 = param[2],
     main_012 = param[1],
     fold_value_024 = param[7],
     num_changes_since_last_full_co = param[8],
     arg_027 = caml_call1(Core[356], num_changes_since_last_full_co),
     bnds_011 = [0, [1, [0, _c_, [0, arg_027, 0]]], 0],
     arg_025 =
       caml_call2(Incremental_Import[16][1], of_acc_010, fold_value_024),
     bnds_011$0 = [0, [1, [0, _d_, [0, arg_025, 0]]], bnds_011],
     _O_ = caml_call1(Incremental_Types[15][1], of_a_009),
     arg_023 = caml_call2(Core[288], _O_, children_022),
     bnds_011$1 = [0, [1, [0, _e_, [0, arg_023, 0]]], bnds_011$0],
     arg_021 = caml_call1(Core[356], full_compute_every_n_changes_0),
     bnds_011$2 = [0, [1, [0, _f_, [0, arg_021, 0]]], bnds_011$1],
     arg_019 = caml_call1(Sexplib0_Sexp_conv[24], function(_Q_){return 0;}),
     bnds_011$3 = [0, [1, [0, _g_, [0, arg_019, 0]]], bnds_011$2],
     arg_017 = caml_call1(Sexplib0_Sexp_conv[24], function(_P_){return 0;}),
     bnds_011$4 = [0, [1, [0, _h_, [0, arg_017, 0]]], bnds_011$3],
     arg_015 = caml_call1(of_acc_010, init_014),
     bnds_011$5 = [0, [1, [0, _i_, [0, arg_015, 0]]], bnds_011$4],
     arg_013 = caml_call2(Incremental_Types[15][1], of_acc_010, main_012),
     bnds_011$6 = [0, [1, [0, _j_, [0, arg_013, 0]]], bnds_011$5];
    return [1, bnds_011$6];
   }
   function invariant(invariant_a, invariant_acc, t1){
    return caml_call4
            (Base_Invariant[1],
             _s_,
             t1,
             function(x_028){
              return sexp_of_t$0
                      (function(param){return _r_;},
                       function(param){return _q_;},
                       x_028);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t1, f);}
              var
               num_changes_since_last_full_co =
                 check
                  (function(num_changes_since_last_full_co){
                    if
                     (!
                      caml_call2
                       (Incremental_Import[1], num_changes_since_last_full_co, 0))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _l_], 1);
                    if
                     (caml_call2
                       (Incremental_Import[2],
                        num_changes_since_last_full_co,
                        t1[5]))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _k_], 1);
                   }),
               fold_value_fun =
                 check
                  (function(fold_value){
                    caml_call2
                     (Incremental_Import[16][2], invariant_acc, fold_value);
                    var
                     got = caml_call1(Incremental_Import[16][6], fold_value),
                     expect = caml_call2(Incremental_Import[5], t1[8], t1[5]),
                     sexpifier = Core[305];
                    function comparator(a_029, b_030){
                     return caml_call2(Core[301], a_029, b_030);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos,
                             sexpifier,
                             comparator,
                             0,
                             0,
                             0,
                             expect,
                             got);
                   }),
               children_fun =
                 check
                  (function(children){
                    return caml_call2
                            (Incremental_Import[15][22],
                             children,
                             function(child){
                              caml_call2(Incremental_Import[16][2], invariant_a, child[4]);
                              var _N_ = caml_call2(Incremental_Import[5], t1[8], t1[5]);
                              if(! _N_) return _N_;
                              if(caml_call1(Incremental_Import[16][6], child[4]))
                               return 0;
                              throw caml_maybe_attach_backtrace
                                     ([0, Assert_failure, _m_], 1);
                             });
                   }),
               full_compute_every_n_changes_f =
                 check
                  (function(full_compute_every_n_changes){
                    if
                     (caml_call2
                       (Incremental_Import[4], full_compute_every_n_changes, 0))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _n_], 1);
                   }),
               init_fun = check(invariant_acc),
               main_fun =
                 check
                  (function(main){
                    var match = main[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(15 === match[0]){
                     var t2 = match[1];
                     if(caml_call2(Core[247], t1, t2)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _p_], 1);
                    }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _o_], 1);
                   });
              caml_call1(main_fun, main$0);
              caml_call1(init_fun, init$0);
              caml_call1
               (full_compute_every_n_changes_f,
                full_compute_every_n_changes$0);
              caml_call1(children_fun, children$0);
              caml_call1(fold_value_fun, fold_value$0);
              return caml_call1
                      (num_changes_since_last_full_co,
                       num_changes_since_last_full_co$0);
             });
   }
   function create
   (init, f, update$0, full_compute_every_n_changes, children, main){
    var _L_ = Incremental_Import[16][3];
    if(0 === update$0[0])
     var
      f_inverse = update$0[1],
      _M_ =
        function(fold_value, old_value, new_value){
         return caml_call2
                 (f, caml_call2(f_inverse, fold_value, old_value), new_value);
        };
    else
     var update = update$0[1], _M_ = update;
    return [0,
            main,
            init,
            f,
            _M_,
            full_compute_every_n_changes,
            children,
            _L_,
            full_compute_every_n_changes];
   }
   function compute(t){
    if(caml_call2(Incremental_Import[3], t[8], t[5])){
     t[8] = 0;
     var
      children = t[6],
      f = t[3],
      init = t[2],
      result = [0, init],
      _I_ = children.length - 2 | 0,
      _H_ = 0;
     if(_I_ >= 0){
      var i = _H_;
      for(;;){
       var _J_ = caml_call1(Incremental_Import[16][7], children[1 + i][4]);
       result[1] = caml_call2(f, result[1], _J_);
       var _K_ = i + 1 | 0;
       if(_I_ === i) break;
       i = _K_;
      }
     }
     t[7] = caml_call1(Incremental_Import[16][4], result[1]);
    }
    return caml_call1(Incremental_Import[16][7], t[7]);
   }
   function force_full_compute(t){
    t[7] = Incremental_Import[16][3];
    t[8] = t[5];
    return 0;
   }
   function child_changed(x_031, child, child_index, old_value_opt, new_value){
    var
     child_at_index =
       runtime.caml_check_bound(x_031[6], child_index)[1 + child_index];
    if(! caml_call2(Incremental_Types[15][5], child, child_at_index)){
     var
      _D_ =
        [0,
         [1,
          [0,
           _u_,
           [0,
            caml_call2
             (Incremental_Types[15][1], function(param){return _t_;}, child),
            0]]],
         0],
      _E_ =
        [0, [1, [0, _v_, [0, caml_call1(Core[356], child_index), 0]]], _D_],
      _F_ =
        [0,
         [1,
          [0,
           _y_,
           [0,
            sexp_of_t$0
             (function(param){return _x_;},
              function(param){return _w_;},
              x_031),
            0]]],
         _E_],
      _G_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Unordered_array_fold_child),
          _F_]];
     return caml_call1(Core[253], _G_);
    }
    if(caml_call2(Incremental_Import[5], x_031[8], x_031[5] - 1 | 0)){
     x_031[8] = x_031[8] + 1 | 0;
     var
      _z_ = caml_call1(Incremental_Import[16][7], old_value_opt),
      _A_ = caml_call1(Incremental_Import[16][7], x_031[7]),
      _B_ = caml_call3(x_031[4], _A_, _z_, new_value);
     x_031[7] = caml_call1(Incremental_Import[16][4], _B_);
     return 0;
    }
    var _C_ = caml_call2(Incremental_Import[5], x_031[8], x_031[5]);
    return _C_ ? force_full_compute(x_031) : _C_;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Unordered_arra);
   var
    Incremental_Unordered_array_fo =
      [0,
       invariant,
       sexp_of_t$0,
       [0, sexp_of_t],
       create,
       compute,
       child_changed,
       force_full_compute];
   runtime.caml_register_global
    (55, Incremental_Unordered_array_fo, cst_Incremental_Unordered_arra);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Alarm
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Alarm = "Incremental__Alarm",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Timing_wheel = global_data.Timing_wheel,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Alarm);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/alarm.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function sexp_of_t(x_001){
    return caml_call2(Timing_wheel[5][1], Sexplib0_Sexp_conv[23], x_001);
   }
   function invariant(param){return 0;}
   var null$0 = caml_call1(Timing_wheel[5][2], 0);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Alarm);
   var Incremental_Alarm = [0, sexp_of_t, invariant, null$0];
   runtime.caml_register_global(13, Incremental_Alarm, cst_Incremental_Alarm);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Step_function_node
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Core__Sequence, Expect_test_collector, Incremental__Alarm, Incremental__Import, Incremental__Stabilization_num, Incremental__Types, Incremental_step_function, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Step_function_ = "Incremental__Step_function_node",
    cst_alarm = "alarm",
    cst_alarm_value = "alarm_value",
    cst_incremental = "incremental",
    cst_main = "main",
    cst_src_step_function_node_ml = "src/step_function_node.ml",
    cst_value = "value",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Sequence = global_data.Core__Sequence,
    Incremental_Import = global_data.Incremental__Import,
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Alarm = global_data.Incremental__Alarm,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_step_function = global_data.Incremental_step_function,
    Incremental_Types = global_data.Incremental__Types;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Step_function_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_step_function_node_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function alarm_value(r){return r[7];}
   function set_alarm_value(r, v){r[7] = v; return 0;}
   function alarm(r){return r[6];}
   function set_alarm(r, v){r[6] = v; return 0;}
   function value(r){return r[4];}
   function set_value(r, v){r[4] = v; return 0;}
   function main(r){return r[1];}
   var
    alarm_value$0 =
      [0,
       function(param){return 0;},
       cst_alarm_value,
       [0, set_alarm_value],
       alarm_value,
       function(r, v){
        return [0, r[1], r[2], r[3], r[4], r[5], r[6], v, r[8]];
       }],
    alarm$0 =
      [0,
       function(param){return 0;},
       cst_alarm,
       [0, set_alarm],
       alarm,
       function(r, v){
        return [0, r[1], r[2], r[3], r[4], r[5], v, r[7], r[8]];
       }],
    value$0 =
      [0,
       function(param){return 0;},
       cst_value,
       [0, set_value],
       value,
       function(r, v){
        return [0, r[1], r[2], r[3], v, r[5], r[6], r[7], r[8]];
       }],
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){
        return [0, v, r[2], r[3], r[4], r[5], r[6], r[7], r[8]];
       }],
    _a_ = [0, "clock"],
    _b_ = [0, cst_alarm_value],
    _c_ = [0, cst_alarm],
    _d_ = [0, "upcoming_steps"],
    _e_ = [0, cst_value],
    _f_ = [0, "extracted_step_function_from_child_at"],
    _g_ = [0, "child"],
    _h_ = [0, cst_main],
    _i_ = [0, cst_src_step_function_node_ml, 41, 18],
    _j_ = [0, cst_src_step_function_node_ml, 40, 33],
    _k_ = [0, cst_src_step_function_node_ml, 31, 18],
    _l_ = [0, cst_src_step_function_node_ml, 30, 33],
    _m_ = [0, "_"],
    _n_ = [0, cst_src_step_function_node_ml, 22, 626, 648];
   function sexp_of_t(of_a_001, param){
    var
     main_003 = param[1],
     child_005 = param[2],
     extracted_step_function_from_c = param[3],
     value_009 = param[4],
     upcoming_steps_011 = param[5],
     alarm_017 = param[6],
     alarm_value_019 = param[7],
     clock_021 = param[8],
     arg_022 = caml_call1(Sexplib0_Sexp_conv[23], clock_021),
     bnds_002 = [0, [1, [0, _a_, [0, arg_022, 0]]], 0],
     arg_020 = caml_call1(Sexplib0_Sexp_conv[23], alarm_value_019),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_020, 0]]], bnds_002],
     arg_018 = caml_call1(Incremental_Alarm[1], alarm_017),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_018, 0]]], bnds_002$0],
     arg_012 =
       caml_call2
        (Core_Sequence[11],
         function(param){
          var
           arg1_014 = param[2],
           arg0_013 = param[1],
           res0_015 = caml_call1(Incremental_Import[14][119], arg0_013),
           res1_016 = caml_call1(of_a_001, arg1_014);
          return [1, [0, res0_015, [0, res1_016, 0]]];
         },
         upcoming_steps_011),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_012, 0]]], bnds_002$1],
     arg_010 = caml_call2(Incremental_Import[16][1], of_a_001, value_009),
     bnds_002$3 = [0, [1, [0, _e_, [0, arg_010, 0]]], bnds_002$2],
     arg_008 =
       caml_call1
        (Incremental_Stabilization_num[2], extracted_step_function_from_c),
     bnds_002$4 = [0, [1, [0, _f_, [0, arg_008, 0]]], bnds_002$3],
     _p_ = caml_call1(Incremental_step_function[1], of_a_001),
     _q_ = caml_call1(Incremental_Types[15][1], _p_),
     arg_006 = caml_call2(Incremental_Import[16][1], _q_, child_005),
     bnds_002$5 = [0, [1, [0, _g_, [0, arg_006, 0]]], bnds_002$4],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$6 = [0, [1, [0, _h_, [0, arg_004, 0]]], bnds_002$5];
    return [1, bnds_002$6];
   }
   function invariant(invariant_a, t1){
    return caml_call4
            (Base_Invariant[1],
             _n_,
             t1,
             function(x_023){
              return sexp_of_t(function(param){return _m_;}, x_023);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t1, f);}
              var
               alarm_value_fun =
                 check
                  (function(alarm_value){
                    var match = alarm_value[1];
                    if(3 !== match[0])
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _i_], 1);
                    var t2 = match[1];
                    if(caml_call2(Core[247], t1, t2)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _j_], 1);
                   }),
               alarm_fun = check(Incremental_Alarm[2]),
               value_fun =
                 check(caml_call1(Incremental_Import[16][2], invariant_a)),
               main_fun =
                 check
                  (function(main){
                    var match = main[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else
                     switch(match[0]){
                       case 5:
                        return 0;
                       case 14:
                        var t = match[1];
                        if(caml_call2(Core[246], t1, t)) return 0;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _l_], 1);
                     }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _k_], 1);
                   });
              caml_call1(main_fun, main$0);
              caml_call1(value_fun, value$0);
              caml_call1(alarm_fun, alarm$0);
              caml_call1(alarm_value_fun, alarm_value$0);
              return 0;
             });
   }
   function advance(t, to){
    var
     steps$0 = t[5],
     a1$0 = caml_call1(Incremental_Import[16][7], t[4]),
     a1 = a1$0,
     steps = steps$0;
    for(;;){
     var match = caml_call1(Core_Sequence[47], steps);
     if(match){
      var
       _o_ = match[1],
       steps2 = _o_[2],
       match$0 = _o_[1],
       a2 = match$0[2],
       step_at = match$0[1];
      if(caml_call2(Incremental_Import[14][15], to, step_at)){a1 = a2; steps = steps2; continue;}
     }
     t[4] = caml_call1(Incremental_Import[16][4], a1);
     t[5] = steps;
     return 0;
    }
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Step_function_);
   var Incremental_Step_function_node = [0, invariant, sexp_of_t, advance];
   runtime.caml_register_global
    (45, Incremental_Step_function_node, cst_Incremental_Step_function_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Array_fold
//# unitInfo: Requires: Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Array_fold = "Incremental__Array_fold",
    cst$0 = "_",
    cst_children = "children",
    cst_incremental = "incremental",
    cst_init = "init",
    cst_src_array_fold_ml = "src/array_fold.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Types = global_data.Incremental__Types,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Array_fold);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_array_fold_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function children(r){return r[3];}
   function init(r){return r[1];}
   var
    children$0 =
      [0,
       function(param){return 0;},
       cst_children,
       0,
       children,
       function(r, v){return [0, r[1], r[2], v];}],
    init$0 =
      [0,
       function(param){return 0;},
       cst_init,
       0,
       init,
       function(r, v){return [0, v, r[2], r[3]];}],
    _a_ = [0, cst_children],
    _b_ = [0, "f"],
    _c_ = [0, cst_init],
    _d_ = [0, cst$0],
    _e_ = [0, cst$0],
    _f_ = [0, cst_src_array_fold_ml, 13, 253, 275];
   function sexp_of_t(of_a_001, of_acc_002, param){
    var
     children_008 = param[3],
     init_004 = param[1],
     _k_ = caml_call1(Incremental_Types[15][1], of_a_001),
     arg_009 = caml_call2(Core[288], _k_, children_008),
     bnds_003 = [0, [1, [0, _a_, [0, arg_009, 0]]], 0],
     arg_007 = caml_call1(Sexplib0_Sexp_conv[24], function(_l_){return 0;}),
     bnds_003$0 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_003],
     arg_005 = caml_call1(of_acc_002, init_004),
     bnds_003$1 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_003$0];
    return [1, bnds_003$1];
   }
   function invariant(invariant_a, invariant_acc, t){
    return caml_call4
            (Base_Invariant[1],
             _f_,
             t,
             function(x_010){
              return sexp_of_t
                      (function(param){return _e_;},
                       function(param){return _d_;},
                       x_010);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               children_fun =
                 check
                  (function(children){
                    return caml_call2
                            (Incremental_Import[15][22],
                             children,
                             function(child){
                              return caml_call2
                                      (Incremental_Import[16][2], invariant_a, child[4]);
                             });
                   }),
               init_fun = check(invariant_acc);
              caml_call1(init_fun, init$0);
              return caml_call1(children_fun, children$0);
             });
   }
   function compute(param){
    var
     children = param[3],
     f = param[2],
     init = param[1],
     result = [0, init],
     _h_ = children.length - 2 | 0,
     _g_ = 0;
    if(_h_ >= 0){
     var i = _g_;
     for(;;){
      var _i_ = caml_call1(Incremental_Import[16][7], children[1 + i][4]);
      result[1] = caml_call2(f, result[1], _i_);
      var _j_ = i + 1 | 0;
      if(_h_ === i) break;
      i = _j_;
     }
    }
    return result[1];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Array_fold);
   var Incremental_Array_fold = [0, sexp_of_t, invariant, compute];
   runtime.caml_register_global
    (27, Incremental_Array_fold, cst_Incremental_Array_fold);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__At
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Alarm, Incremental__Before_or_after, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_At = "Incremental__At",
    cst_alarm = "alarm",
    cst_incremental = "incremental",
    cst_main = "main",
    cst_src_at_ml = "src/at.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Alarm = global_data.Incremental__Alarm,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Before_or_after = global_data.Incremental__Before_or_after,
    Incremental_Types = global_data.Incremental__Types;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_At);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_at_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function alarm(r){return r[3];}
   function set_alarm(r, v){r[3] = v; return 0;}
   function main(r){return r[1];}
   var
    alarm$0 =
      [0,
       function(param){return 0;},
       cst_alarm,
       [0, set_alarm],
       alarm,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){return [0, v, r[2], r[3], r[4]];}],
    _a_ = [0, "clock"],
    _b_ = [0, cst_alarm],
    _c_ = [0, "at"],
    _d_ = [0, cst_main],
    _e_ = [0, cst_src_at_ml, 24, 18],
    _f_ = [0, cst_src_at_ml, 23, 22],
    _g_ = [0, cst_src_at_ml, 15, 264, 286];
   function sexp_of_t(param){
    var
     at_004 = param[2],
     main_002 = param[1],
     alarm_006 = param[3],
     clock_008 = param[4],
     arg_009 = caml_call1(Sexplib0_Sexp_conv[23], clock_008),
     bnds_001 = [0, [1, [0, _a_, [0, arg_009, 0]]], 0],
     arg_007 = caml_call1(Incremental_Alarm[1], alarm_006),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_007, 0]]], bnds_001],
     arg_005 = caml_call1(Incremental_Import[14][119], at_004),
     bnds_001$1 = [0, [1, [0, _c_, [0, arg_005, 0]]], bnds_001$0],
     arg_003 =
       caml_call2
        (Incremental_Types[15][1], Incremental_Before_or_after[1], main_002),
     bnds_001$2 = [0, [1, [0, _d_, [0, arg_003, 0]]], bnds_001$1];
    return [1, bnds_001$2];
   }
   function invariant(t){
    return caml_call4
            (Base_Invariant[1],
             _g_,
             t,
             sexp_of_t,
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               alarm_fun = check(Incremental_Alarm[2]),
               main_fun =
                 check
                  (function(main){
                    var match = main[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else
                     switch(match[0]){
                       case 1:
                        var t$0 = match[1];
                        if(caml_call2(Core[246], t, t$0)) return 0;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _f_], 1);
                       case 5:
                        if(match[1]) return 0; break;
                     }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _e_], 1);
                   });
              caml_call1(main_fun, main$0);
              caml_call1(alarm_fun, alarm$0);
              return 0;
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_At);
   var Incremental_At = [0, invariant, sexp_of_t];
   runtime.caml_register_global(32, Incremental_At, cst_Incremental_At);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__At_intervals
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Alarm, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_At_intervals = "Incremental__At_intervals",
    cst_alarm = "alarm",
    cst_incremental = "incremental",
    cst_interval = "interval",
    cst_main = "main",
    cst_src_at_intervals_ml = "src/at_intervals.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Alarm = global_data.Incremental__Alarm,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Types = global_data.Incremental__Types;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_At_intervals);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_at_intervals_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function alarm(r){return r[4];}
   function set_alarm(r, v){r[4] = v; return 0;}
   function interval(r){return r[3];}
   function main(r){return r[1];}
   var
    alarm$0 =
      [0,
       function(param){return 0;},
       cst_alarm,
       [0, set_alarm],
       alarm,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5]];}],
    interval$0 =
      [0,
       function(param){return 0;},
       cst_interval,
       0,
       interval,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5]];}],
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5]];}],
    _a_ = [0, "clock"],
    _b_ = [0, cst_alarm],
    _c_ = [0, cst_interval],
    _d_ = [0, "base"],
    _e_ = [0, cst_main],
    _f_ = [0, cst_src_at_intervals_ml, 26, 40],
    _g_ = [0, cst_src_at_intervals_ml, 24, 18],
    _h_ = [0, cst_src_at_intervals_ml, 23, 32],
    _i_ = [0, cst_src_at_intervals_ml, 16, 293, 315];
   function sexp_of_t(param){
    var
     interval_006 = param[3],
     base_004 = param[2],
     main_002 = param[1],
     alarm_008 = param[4],
     clock_010 = param[5],
     arg_011 = caml_call1(Sexplib0_Sexp_conv[23], clock_010),
     bnds_001 = [0, [1, [0, _a_, [0, arg_011, 0]]], 0],
     arg_009 = caml_call1(Incremental_Alarm[1], alarm_008),
     bnds_001$0 = [0, [1, [0, _b_, [0, arg_009, 0]]], bnds_001],
     arg_007 = caml_call1(Incremental_Import[14][1][10], interval_006),
     bnds_001$1 = [0, [1, [0, _c_, [0, arg_007, 0]]], bnds_001$0],
     arg_005 = caml_call1(Incremental_Import[14][119], base_004),
     bnds_001$2 = [0, [1, [0, _d_, [0, arg_005, 0]]], bnds_001$1],
     arg_003 = caml_call2(Incremental_Types[15][1], Core[518], main_002),
     bnds_001$3 = [0, [1, [0, _e_, [0, arg_003, 0]]], bnds_001$2];
    return [1, bnds_001$3];
   }
   function invariant(t){
    return caml_call4
            (Base_Invariant[1],
             _i_,
             t,
             sexp_of_t,
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               alarm_fun = check(Incremental_Alarm[2]),
               interval_fun =
                 check
                  (function(interval){
                    if(caml_call1(Incremental_Import[14][1][34], interval))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _f_], 1);
                   }),
               main_fun =
                 check
                  (function(main){
                    var match = main[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(2 === match[0]){
                     var t$0 = match[1];
                     if(caml_call2(Core[246], t, t$0)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _h_], 1);
                    }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _g_], 1);
                   });
              caml_call1(main_fun, main$0);
              caml_call1(interval_fun, interval$0);
              caml_call1(alarm_fun, alarm$0);
              return 0;
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_At_intervals);
   var Incremental_At_intervals = [0, invariant, sexp_of_t];
   runtime.caml_register_global
    (34, Incremental_At_intervals, cst_Incremental_At_intervals);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Bind
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Bind = "Incremental__Bind",
    cst$0 = "_",
    cst_all_nodes_created_on_rhs = "all_nodes_created_on_rhs",
    cst_incremental = "incremental",
    cst_lhs_change = "lhs_change",
    cst_main = "main",
    cst_rhs_scope = "rhs_scope",
    cst_src_bind_ml = "src/bind.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Assert_failure = global_data.Assert_failure,
    Core = global_data.Core,
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Bind);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_bind_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function all_nodes_created_on_rhs(r){return r[7];}
   function set_all_nodes_created_on_rhs(r, v){r[7] = v; return 0;}
   function rhs_scope(r){return r[6];}
   function set_rhs_scope(r, v){r[6] = v; return 0;}
   function lhs_change(r){return r[4];}
   function main(r){return r[1];}
   var
    all_nodes_created_on_rhs$0 =
      [0,
       function(param){return 0;},
       cst_all_nodes_created_on_rhs,
       [0, set_all_nodes_created_on_rhs],
       all_nodes_created_on_rhs,
       function(r, v){return [0, r[1], r[2], r[3], r[4], r[5], r[6], v];}],
    rhs_scope$0 =
      [0,
       function(param){return 0;},
       cst_rhs_scope,
       [0, set_rhs_scope],
       rhs_scope,
       function(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v, r[7]];}],
    lhs_change$0 =
      [0,
       function(param){return 0;},
       cst_lhs_change,
       0,
       lhs_change,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6], r[7]];}],
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6], r[7]];}],
    _a_ = [0, cst_all_nodes_created_on_rhs],
    _b_ = [0, cst_rhs_scope],
    _c_ = [0, "rhs"],
    _d_ = [0, cst_lhs_change],
    _e_ = [0, "lhs"],
    _f_ = [0, "f"],
    _g_ = [0, cst_main],
    _h_ = [0, cst_src_bind_ml, 73, 18],
    _i_ = [0, cst_src_bind_ml, 71, 13],
    _j_ = [0, cst_src_bind_ml, 67, 24],
    _k_ = [0, cst_src_bind_ml, 66, 26],
    _l_ = [0, cst_src_bind_ml, 62, 18],
    _m_ = [0, cst_src_bind_ml, 61, 35],
    _n_ = [0, cst_src_bind_ml, 58, 11],
    _o_ = [0, cst_src_bind_ml, 53, 18],
    _p_ = [0, cst_src_bind_ml, 52, 29],
    _q_ = [0, cst$0],
    _r_ = [0, cst$0],
    _s_ = [0, cst_src_bind_ml, 45, 1438, 1460];
   function sexp_of_t(of_a_001, of_b_002, param){
    var
     main_004 = param[1],
     lhs_change_010 = param[4],
     lhs_008 = param[3],
     rhs_012 = param[5],
     rhs_scope_014 = param[6],
     all_nodes_created_on_rhs_016 = param[7],
     arg_017 =
       caml_call2
        (Incremental_Import[16][1],
         Incremental_Types[15][2][1],
         all_nodes_created_on_rhs_016),
     bnds_003 = [0, [1, [0, _a_, [0, arg_017, 0]]], 0],
     arg_015 = caml_call1(Incremental_Types[21][1], rhs_scope_014),
     bnds_003$0 = [0, [1, [0, _b_, [0, arg_015, 0]]], bnds_003],
     _v_ = caml_call1(Incremental_Types[15][1], of_b_002),
     arg_013 = caml_call2(Incremental_Import[16][1], _v_, rhs_012),
     bnds_003$1 = [0, [1, [0, _c_, [0, arg_013, 0]]], bnds_003$0],
     arg_011 = caml_call2(Incremental_Types[15][1], Core[518], lhs_change_010),
     bnds_003$2 = [0, [1, [0, _d_, [0, arg_011, 0]]], bnds_003$1],
     arg_009 = caml_call2(Incremental_Types[15][1], of_a_001, lhs_008),
     bnds_003$3 = [0, [1, [0, _e_, [0, arg_009, 0]]], bnds_003$2],
     arg_007 = caml_call1(Sexplib0_Sexp_conv[24], function(_w_){return 0;}),
     bnds_003$4 = [0, [1, [0, _f_, [0, arg_007, 0]]], bnds_003$3],
     arg_005 = caml_call2(Incremental_Types[15][1], of_b_002, main_004),
     bnds_003$5 = [0, [1, [0, _g_, [0, arg_005, 0]]], bnds_003$4];
    return [1, bnds_003$5];
   }
   function same(t1, t2){return caml_call2(Core[247], t1, t2);}
   function is_valid(t){
    var _u_ = t[1][5];
    if(typeof _u_ === "number" && ! _u_) return 0;
    return 1;
   }
   function iter_nodes_created_on_rhs(t, f){
    var r = [0, t[7]];
    for(;;){
     if(! caml_call1(Incremental_Import[16][6], r[1])) return 0;
     var match = caml_call1(Incremental_Import[16][11], r[1]);
     r[1] = match[13];
     caml_call1(f, match);
    }
   }
   function invariant(invariant_a, invariant_b, t){
    return caml_call4
            (Base_Invariant[1],
             _s_,
             t,
             function(x_018){
              return sexp_of_t
                      (function(param){return _r_;},
                       function(param){return _q_;},
                       x_018);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               all_nodes_created_on_rhs_fun =
                 check
                  (function(param){
                    return iter_nodes_created_on_rhs
                            (t,
                             function(node){
                              if(! caml_call2(Core[246], node[12], t[6]))
                               throw caml_maybe_attach_backtrace
                                      ([0, Assert_failure, _i_], 1);
                              var _t_ = caml_call1(Incremental_Types[15][4], node);
                              if(! _t_) return _t_;
                              if(caml_call2(Incremental_Import[5], t[4][14], node[14]))
                               return 0;
                              throw caml_maybe_attach_backtrace
                                     ([0, Assert_failure, _h_], 1);
                             });
                   }),
               rhs_scope_fun =
                 check
                  (function(param){
                    if(! param)
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _k_], 1);
                    var t$0 = param[1];
                    if(same(t, t$0)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _j_], 1);
                   }),
               lhs_change_fun =
                 check
                  (function(lhs_change){
                    if(! caml_call2(Core[246], lhs_change[12], t[1][12]))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _n_], 1);
                    var match = lhs_change[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(3 === match[0]){
                     var t$0 = match[1];
                     if(same(t, t$0)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _m_], 1);
                    }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _l_], 1);
                   }),
               main_fun =
                 check
                  (function(main){
                    var match = main[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(4 === match[0]){
                     var t$0 = match[1];
                     if(same(t, t$0)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _p_], 1);
                    }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _o_], 1);
                   });
              caml_call1(main_fun, main$0);
              caml_call1(lhs_change_fun, lhs_change$0);
              caml_call1(rhs_scope_fun, rhs_scope$0);
              return caml_call1
                      (all_nodes_created_on_rhs_fun, all_nodes_created_on_rhs$0);
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Bind);
   var
    Incremental_Bind =
      [0, invariant, sexp_of_t, is_valid, iter_nodes_created_on_rhs];
   runtime.caml_register_global(45, Incremental_Bind, cst_Incremental_Bind);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Expert
//# unitInfo: Requires: Assert_failure, Core, Core__Int, Expect_test_collector, Incremental__Import, Incremental__Types, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Expert = "Incremental__Expert",
    cst_incremental = "incremental",
    cst_src_expert_ml = "src/expert.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    pos$0 = "src/expert.ml:76:19",
    pos$1 = "src/expert.ml:69:22",
    pos = "src/expert.ml:60:21",
    cst = "",
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Core_Int = global_data.Core__Int,
    Core = global_data.Core,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Incremental_Types = global_data.Incremental__Types,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Expert);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_expert_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    _a_ = [0, "index"],
    _b_ = [0, "on_change"],
    _c_ = [0, "child"],
    _d_ = [0, "_"],
    _e_ = [0, "E"],
    _f_ = [0, "will_fire_all_callbacks"],
    _g_ = [0, "num_invalid_children"],
    _h_ = [0, "force_stale"],
    _i_ = [0, "num_children"],
    _j_ = [0, "children"],
    _k_ = [0, "on_observability_change"],
    _l_ = [0, "f"],
    _m_ = [0, cst_src_expert_ml, 61, 15],
    _n_ = [0, cst_src_expert_ml, 53, 2],
    _o_ = [0, cst_src_expert_ml, 104, 18],
    _p_ = [0, cst_src_expert_ml, 111, 2],
    _q_ = [0, cst_src_expert_ml, 142, 2];
   function sexp_of_edge(of_a_001, param){
    var
     child_003 = param[1],
     index_007 = param[3],
     arg_008 = caml_call2(Incremental_Import[16][1], Core[356], index_007),
     bnds_002 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
     arg_006 = caml_call1(Sexplib0_Sexp_conv[24], function(_T_){return 0;}),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_002],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, child_003),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_004, 0]]], bnds_002$0];
    return [1, bnds_002$1];
   }
   function sexp_of_packed_edge(param){
    var res0_010 = sexp_of_edge(function(param){return _d_;}, param);
    return [1, [0, _e_, [0, res0_010, 0]]];
   }
   function sexp_of_t(of_a_011, param){
    var
     children_017 = param[3],
     num_children_019 = param[4],
     force_stale_021 = param[5],
     num_invalid_children_023 = param[6],
     will_fire_all_callbacks_025 = param[7],
     arg_026 = caml_call1(Core[305], will_fire_all_callbacks_025),
     bnds_012 = [0, [1, [0, _f_, [0, arg_026, 0]]], 0],
     arg_024 = caml_call1(Core[356], num_invalid_children_023),
     bnds_012$0 = [0, [1, [0, _g_, [0, arg_024, 0]]], bnds_012],
     arg_022 = caml_call1(Core[305], force_stale_021),
     bnds_012$1 = [0, [1, [0, _h_, [0, arg_022, 0]]], bnds_012$0],
     arg_020 = caml_call1(Core[356], num_children_019),
     bnds_012$2 = [0, [1, [0, _i_, [0, arg_020, 0]]], bnds_012$1],
     _Q_ = caml_call1(Incremental_Import[16][1], sexp_of_packed_edge),
     arg_018 = caml_call2(Incremental_Import[17][10], _Q_, children_017),
     bnds_012$3 = [0, [1, [0, _j_, [0, arg_018, 0]]], bnds_012$2],
     arg_016 = caml_call1(Sexplib0_Sexp_conv[24], function(_S_){return 0;}),
     bnds_012$4 = [0, [1, [0, _k_, [0, arg_016, 0]]], bnds_012$3],
     arg_014 = caml_call1(Sexplib0_Sexp_conv[24], function(_R_){return 0;}),
     bnds_012$5 = [0, [1, [0, _l_, [0, arg_014, 0]]], bnds_012$4];
    return [1, bnds_012$5];
   }
   function invariant(invariant_a, param){
    var
     children = param[3],
     num_children = param[4],
     _O_ = caml_call1(Incremental_Import[17][18], children);
    if(caml_call2(Incremental_Import[2], num_children, _O_))
     return caml_call2
             (Incremental_Import[17][28],
              children,
              function(expect, uopt){
               if(caml_call2(Incremental_Import[5], expect, num_children)){
                var
                 _P_ = caml_call1(Incremental_Import[16][7], uopt)[3],
                 got = caml_call1(Incremental_Import[16][7], _P_),
                 sexpifier = Core[356],
                 comparator =
                   function(a_027, b_028){
                    return caml_call2(Core[352], a_027, b_028);
                   };
                return caml_call8
                        (Ppx_assert_lib_Runtime[3],
                         pos,
                         sexpifier,
                         comparator,
                         0,
                         0,
                         0,
                         expect,
                         got);
               }
               if(caml_call1(Incremental_Import[16][5], uopt)) return 0;
               throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
              });
    throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
   }
   function invariant_about_num_invalid_ch(param){
    var
     children = param[3],
     num_children = param[4],
     num_invalid_children = param[6];
    return function(is_necessary){
     if(! is_necessary){
      var
       sexpifier$0 = Core[356],
       comparator$0 =
         function(a_029, b_030){return caml_call2(Core[352], a_029, b_030);};
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$1,
               sexpifier$0,
               comparator$0,
               0,
               0,
               0,
               0,
               num_invalid_children);
     }
     var count_invalid_children = [0, 0], _L_ = num_children - 1 | 0, _K_ = 0;
     if(_L_ >= 0){
      var i = _K_;
      for(;;){
       var
        _M_ = caml_call2(Incremental_Import[17][19], children, i),
        r = caml_call1(Incremental_Import[16][7], _M_);
       if(1 - caml_call1(Incremental_Types[15][3], r[1]))
        count_invalid_children[1]++;
       var _N_ = i + 1 | 0;
       if(_L_ === i) break;
       i = _N_;
      }
     }
     var expect = count_invalid_children[1], sexpifier = Core[356];
     function comparator(a_031, b_032){
      return caml_call2(Core[352], a_031, b_032);
     }
     return caml_call8
             (Ppx_assert_lib_Runtime[3],
              pos$0,
              sexpifier,
              comparator,
              0,
              0,
              0,
              expect,
              num_invalid_children);};
   }
   function create(f, on_observability_change){
    return [0,
            f,
            on_observability_change,
            Incremental_Import[17][14],
            0,
            0,
            0,
            1];
   }
   function make_stale(t){return t[5] ? 534011858 : (t[5] = 1, 17724);}
   function incr_invalid_children(t){t[6] = t[6] + 1 | 0; return 0;}
   function decr_invalid_children(t){t[6] = t[6] - 1 | 0; return 0;}
   function add_child_edge(t, packed_edge){
    if(! caml_call1(Incremental_Import[16][5], packed_edge[3]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
    var _G_ = caml_call1(Incremental_Import[17][18], t[3]);
    if(caml_call2(Incremental_Import[1], t[4], _G_)){
     if(Incremental_Import[11]){
      var _H_ = caml_call1(Incremental_Import[17][18], t[3]);
      if(! caml_call2(Incremental_Import[3], t[4], _H_))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _o_], 1);
     }
     var
      _I_ = 2 * caml_call1(Incremental_Import[17][18], t[3]) | 0,
      new_max = caml_call2(Core_Int[93], 2, _I_);
     t[3] = caml_call2(Incremental_Import[17][53], t[3], new_max);
    }
    var new_child_index = t[4];
    packed_edge[3] = caml_call1(Incremental_Import[16][4], new_child_index);
    var _J_ = caml_call1(Incremental_Import[16][4], packed_edge);
    caml_call3(Incremental_Import[17][52], t[3], new_child_index, _J_);
    t[4] = t[4] + 1 | 0;
    t[5] = 1;
    return new_child_index;
   }
   function swap_children(t, child_index1, child_index2){
    var
     _E_ = caml_call2(Incremental_Import[17][19], t[3], child_index1),
     edge1 = caml_call1(Incremental_Import[16][7], _E_),
     _F_ = caml_call2(Incremental_Import[17][19], t[3], child_index2),
     match = caml_call1(Incremental_Import[16][7], _F_);
    edge1[3] = caml_call1(Incremental_Import[16][4], child_index2);
    match[3] = caml_call1(Incremental_Import[16][4], child_index1);
    return caml_call3
            (Incremental_Import[17][21], t[3], child_index1, child_index2);
   }
   function last_child_edge_exn(t){
    var
     last_index = t[4] - 1 | 0,
     _D_ = caml_call2(Incremental_Import[17][19], t[3], last_index);
    return caml_call1(Incremental_Import[16][7], _D_);
   }
   function remove_last_child_edge_exn(t){
    var
     last_index = t[4] - 1 | 0,
     packed_edge_opt =
       caml_call2(Incremental_Import[17][19], t[3], last_index);
    caml_call3
     (Incremental_Import[17][52], t[3], last_index, Incremental_Import[16][3]);
    t[4] = last_index;
    t[5] = 1;
    if(! caml_call1(Incremental_Import[16][6], packed_edge_opt))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
    var match = caml_call1(Incremental_Import[16][11], packed_edge_opt);
    match[3] = Incremental_Import[16][3];
    return 0;
   }
   function before_main_computation(t){
    if(caml_call2(Incremental_Import[4], t[6], 0)) return 144245463;
    t[5] = 0;
    var will_fire_all_callbacks = t[7];
    t[7] = 0;
    if(will_fire_all_callbacks){
     var _z_ = t[4] - 1 | 0, _y_ = 0;
     if(_z_ >= 0){
      var i = _y_;
      for(;;){
       var
        _A_ = caml_call2(Incremental_Import[17][19], t[3], i),
        match = caml_call1(Incremental_Import[16][7], _A_),
        _B_ = caml_call1(Incremental_Import[16][7], match[1][4]);
       caml_call1(match[2], _B_);
       var _C_ = i + 1 | 0;
       if(_z_ === i) break;
       i = _C_;
      }
     }
    }
    return 17724;
   }
   function observability_change(t, is_now_observable){
    caml_call1(t[2], is_now_observable);
    var
     _w_ = 1 - is_now_observable,
     _x_ = _w_ ? (t[7] = 1, t[6] = 0, 0) : _w_;
    return _x_;
   }
   function run_edge_callback(t, child_index){
    var _r_ = 1 - t[7];
    if(_r_){
     var
      _s_ = caml_call2(Incremental_Import[17][19], t[3], child_index),
      r = caml_call1(Incremental_Import[16][7], _s_),
      _t_ = caml_call1(Incremental_Import[16][6], r[1][4]);
     if(_t_){
      var _u_ = caml_call1(Incremental_Import[16][11], r[1][4]);
      return caml_call1(r[2], _u_);
     }
     var _v_ = _t_;
    }
    else
     var _v_ = _r_;
    return _v_;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Expert);
   var
    Incremental_Expert =
      [0,
       invariant,
       sexp_of_t,
       sexp_of_edge,
       invariant_about_num_invalid_ch,
       create,
       make_stale,
       incr_invalid_children,
       decr_invalid_children,
       add_child_edge,
       swap_children,
       last_child_edge_exn,
       remove_last_child_edge_exn,
       before_main_computation,
       observability_change,
       run_edge_callback];
   runtime.caml_register_global
    (38, Incremental_Expert, cst_Incremental_Expert);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Sexp_of
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Sexp_of = "Incremental__Sexp_of",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Sexp_of);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/sexp_of.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Sexp_of);
   var Incremental_Sexp_of = [0];
   runtime.caml_register_global
    (11, Incremental_Sexp_of, cst_Incremental_Sexp_of);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Scope
//# unitInfo: Requires: Assert_failure, Core, Expect_test_collector, Incremental__Bind, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Scope = "Incremental__Scope",
    cst_incremental = "incremental",
    cst_src_scope_ml = "src/scope.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Bind = global_data.Incremental__Bind,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Scope);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_scope_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    include = Incremental_Types[21],
    sexp_of_t = include[1],
    _a_ = [0, cst_src_scope_ml, 37, 2];
   function is_top(param){return param ? 0 : 1;}
   function invariant(param){
    if(! param) return 0;
    var bind = param[1];
    return caml_call3
            (Incremental_Bind[1],
             function(_c_){return 0;},
             function(_b_){return 0;},
             bind);
   }
   function height(param){
    if(! param) return -1;
    var bind = param[1];
    return bind[4][14];
   }
   function is_valid(param){
    if(! param) return 1;
    var bind = param[1];
    return caml_call1(Incremental_Bind[3], bind);
   }
   function is_necessary(param){
    if(! param) return 1;
    var bind = param[1];
    return caml_call1(Incremental_Types[15][4], bind[1]);
   }
   function add_node(t, node){
    if(! caml_call2(Core[246], node[12], t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    if(! t) return 0;
    var bind = t[1];
    node[13] = bind[7];
    bind[7] = caml_call1(Incremental_Import[16][4], node);
    return 0;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Scope);
   var
    Incremental_Scope =
      [0,
       sexp_of_t,
       invariant,
       0,
       is_top,
       height,
       is_valid,
       is_necessary,
       add_node];
   runtime.caml_register_global(17, Incremental_Scope, cst_Incremental_Scope);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Freeze
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Scope, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Freeze = "Incremental__Freeze",
    cst_incremental = "incremental",
    cst_main = "main",
    cst_src_freeze_ml = "src/freeze.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Scope = global_data.Incremental__Scope,
    Assert_failure = global_data.Assert_failure,
    Core = global_data.Core,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Types = global_data.Incremental__Types;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Freeze);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_freeze_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function main(r){return r[1];}
   var
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){return [0, v, r[2], r[3]];}],
    _a_ = [0, "only_freeze_when"],
    _b_ = [0, "child"],
    _c_ = [0, cst_main],
    _d_ = [0, cst_src_freeze_ml, 24, 18],
    _e_ = [0, cst_src_freeze_ml, 23, 26],
    _f_ = [0, cst_src_freeze_ml, 19, 11],
    _g_ = [0, "_"],
    _h_ = [0, cst_src_freeze_ml, 14, 239, 261];
   function sexp_of_t(of_a_001, param){
    var
     child_005 = param[2],
     main_003 = param[1],
     arg_008 = caml_call1(Sexplib0_Sexp_conv[24], function(_i_){return 0;}),
     bnds_002 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
     arg_006 = caml_call2(Incremental_Types[15][1], of_a_001, child_005),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_002],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_004, 0]]], bnds_002$0];
    return [1, bnds_002$1];
   }
   function invariant(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _h_,
             t,
             function(x_009){
              return sexp_of_t(function(param){return _g_;}, x_009);
             },
             function(param){
              function f(main){
               if(! caml_call1(Incremental_Scope[4], main[12]))
                throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
               var match = main[5];
               if(typeof match === "number"){if(0 === match) return 0;}
               else
                switch(match[0]){
                  case 5:
                   return 0;
                  case 7:
                   var t$0 = match[1];
                   if(caml_call2(Core[246], t, t$0)) return 0;
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _e_], 1);
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
              }
              var main_fun = caml_call2(Base_Invariant[2], t, f);
              caml_call1(main_fun, main$0);
              return 0;
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Freeze);
   var Incremental_Freeze = [0, invariant, sexp_of_t];
   runtime.caml_register_global
    (30, Incremental_Freeze, cst_Incremental_Freeze);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__If_then_else
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_If_then_else = "Incremental__If_then_else",
    cst_current_branch = "current_branch",
    cst_incremental = "incremental",
    cst_main = "main",
    cst_src_if_then_else_ml = "src/if_then_else.ml",
    cst_test_change = "test_change",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Assert_failure = global_data.Assert_failure,
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Types = global_data.Incremental__Types;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_If_then_else);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_if_then_else_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function current_branch(r){return r[4];}
   function set_current_branch(r, v){r[4] = v; return 0;}
   function test_change(r){return r[3];}
   function main(r){return r[1];}
   var
    current_branch$0 =
      [0,
       function(param){return 0;},
       cst_current_branch,
       [0, set_current_branch],
       current_branch,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6]];}],
    test_change$0 =
      [0,
       function(param){return 0;},
       cst_test_change,
       0,
       test_change,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6]];}],
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6]];}],
    _a_ = [0, "else_"],
    _b_ = [0, "then_"],
    _c_ = [0, cst_current_branch],
    _d_ = [0, cst_test_change],
    _e_ = [0, "test"],
    _f_ = [0, cst_main],
    _g_ = [0, cst_src_if_then_else_ml, 40, 13],
    _h_ = [0, cst_src_if_then_else_ml, 34, 18],
    _i_ = [0, cst_src_if_then_else_ml, 33, 34],
    _j_ = [0, cst_src_if_then_else_ml, 26, 32],
    _k_ = [0, "_"],
    _l_ = [0, cst_src_if_then_else_ml, 19, 382, 404];
   function sexp_of_t(of_a_001, param){
    var
     test_change_007 = param[3],
     test_005 = param[2],
     main_003 = param[1],
     current_branch_009 = param[4],
     else_013 = param[6],
     then_011 = param[5],
     arg_014 = caml_call2(Incremental_Types[15][1], of_a_001, else_013),
     bnds_002 = [0, [1, [0, _a_, [0, arg_014, 0]]], 0],
     arg_012 = caml_call2(Incremental_Types[15][1], of_a_001, then_011),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_012, 0]]], bnds_002],
     _n_ = caml_call1(Incremental_Types[15][1], of_a_001),
     arg_010 = caml_call2(Incremental_Import[16][1], _n_, current_branch_009),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_010, 0]]], bnds_002$0],
     arg_008 =
       caml_call2(Incremental_Types[15][1], Core[518], test_change_007),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_008, 0]]], bnds_002$1],
     arg_006 = caml_call2(Incremental_Types[15][1], Core[305], test_005),
     bnds_002$3 = [0, [1, [0, _e_, [0, arg_006, 0]]], bnds_002$2],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$4 = [0, [1, [0, _f_, [0, arg_004, 0]]], bnds_002$3];
    return [1, bnds_002$4];
   }
   function invariant(invariant_a, t1){
    return caml_call4
            (Base_Invariant[1],
             _l_,
             t1,
             function(x_015){
              return sexp_of_t(function(param){return _k_;}, x_015);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t1, f);}
              var
               current_branch_fun =
                 check
                  (function(current_branch){
                    var
                     _m_ = caml_call1(Incremental_Import[16][6], current_branch);
                    if(! _m_) return _m_;
                    var
                     current_branch$0 =
                       caml_call1(Incremental_Import[16][7], current_branch);
                    if
                     (!
                      caml_call2(Core[246], current_branch$0, t1[5])
                      && ! caml_call2(Core[246], current_branch$0, t1[6]))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _g_], 1);
                    return 0;
                   }),
               test_change_fun =
                 check
                  (function(test_change){
                    var match = test_change[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(8 === match[0]){
                     var t2 = match[1];
                     if(caml_call2(Core[247], t1, t2)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _i_], 1);
                    }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _h_], 1);
                   }),
               main_fun =
                 check
                  (function(main){
                    var match = main[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(9 === match[0]){
                     var t = match[1];
                     if(caml_call2(Core[246], t1, t)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _j_], 1);
                    }
                    return 0;
                   });
              caml_call1(main_fun, main$0);
              caml_call1(test_change_fun, test_change$0);
              caml_call1(current_branch_fun, current_branch$0);
              return 0;
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_If_then_else);
   var Incremental_If_then_else = [0, invariant, sexp_of_t];
   runtime.caml_register_global
    (36, Incremental_If_then_else, cst_Incremental_If_then_else);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Join
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Join = "Incremental__Join",
    cst_incremental = "incremental",
    cst_lhs_change = "lhs_change",
    cst_main = "main",
    cst_src_join_ml = "src/join.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Core = global_data.Core,
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Import = global_data.Incremental__Import;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Join);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_join_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function lhs_change(r){return r[3];}
   function main(r){return r[1];}
   var
    lhs_change$0 =
      [0,
       function(param){return 0;},
       cst_lhs_change,
       0,
       lhs_change,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){return [0, v, r[2], r[3], r[4]];}],
    _a_ = [0, "rhs"],
    _b_ = [0, cst_lhs_change],
    _c_ = [0, "lhs"],
    _d_ = [0, cst_main],
    _e_ = [0, cst_src_join_ml, 32, 18],
    _f_ = [0, cst_src_join_ml, 31, 35],
    _g_ = [0, cst_src_join_ml, 25, 18],
    _h_ = [0, cst_src_join_ml, 24, 29],
    _i_ = [0, "_"],
    _j_ = [0, cst_src_join_ml, 17, 322, 344];
   function sexp_of_t(of_a_001, param){
    var
     lhs_change_007 = param[3],
     lhs_005 = param[2],
     main_003 = param[1],
     rhs_009 = param[4],
     _k_ = caml_call1(Incremental_Types[15][1], of_a_001),
     arg_010 = caml_call2(Incremental_Import[16][1], _k_, rhs_009),
     bnds_002 = [0, [1, [0, _a_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call2(Incremental_Types[15][1], Core[518], lhs_change_007),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_008, 0]]], bnds_002],
     _l_ = caml_call1(Incremental_Types[15][1], of_a_001),
     arg_006 = caml_call2(Incremental_Types[15][1], _l_, lhs_005),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function same(t1, t2){return caml_call2(Core[247], t1, t2);}
   function invariant(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _j_,
             t,
             function(x_011){
              return sexp_of_t(function(param){return _i_;}, x_011);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               lhs_change_fun =
                 check
                  (function(lhs_change){
                    var match = lhs_change[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(10 === match[0]){
                     var t$0 = match[1];
                     if(same(t, t$0)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _f_], 1);
                    }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _e_], 1);
                   }),
               main_fun =
                 check
                  (function(main){
                    var match = main[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else if(11 === match[0]){
                     var t$0 = match[1];
                     if(same(t, t$0)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _h_], 1);
                    }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _g_], 1);
                   });
              caml_call1(main_fun, main$0);
              caml_call1(lhs_change_fun, lhs_change$0);
              return 0;
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Join);
   var Incremental_Join = [0, invariant, sexp_of_t];
   runtime.caml_register_global(32, Incremental_Join, cst_Incremental_Join);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Snapshot
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Scope, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Snapshot = "Incremental__Snapshot",
    cst_before = "before",
    cst_incremental = "incremental",
    cst_main = "main",
    cst_src_snapshot_ml = "src/snapshot.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Scope = global_data.Incremental__Scope,
    Assert_failure = global_data.Assert_failure,
    Core = global_data.Core,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Import = global_data.Incremental__Import;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Snapshot);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_snapshot_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function before(r){return r[3];}
   function main(r){return r[1];}
   var
    before$0 =
      [0,
       function(param){return 0;},
       cst_before,
       0,
       before,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5]];}],
    main$0 =
      [0,
       function(param){return 0;},
       cst_main,
       0,
       main,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5]];}],
    _a_ = [0, "clock"],
    _b_ = [0, "value_at"],
    _c_ = [0, cst_before],
    _d_ = [0, "at"],
    _e_ = [0, cst_main],
    _f_ = [0, cst_src_snapshot_ml, 26, 18],
    _g_ = [0, cst_src_snapshot_ml, 25, 28],
    _h_ = [0, cst_src_snapshot_ml, 21, 11],
    _i_ = [0, "_"],
    _j_ = [0, cst_src_snapshot_ml, 16, 286, 308];
   function sexp_of_t(of_a_001, param){
    var
     clock_011 = param[5],
     value_at_009 = param[4],
     before_007 = param[3],
     at_005 = param[2],
     main_003 = param[1],
     arg_012 = caml_call1(Sexplib0_Sexp_conv[23], clock_011),
     bnds_002 = [0, [1, [0, _a_, [0, arg_012, 0]]], 0],
     arg_010 = caml_call2(Incremental_Types[15][1], of_a_001, value_at_009),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_010, 0]]], bnds_002],
     arg_008 = caml_call1(of_a_001, before_007),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_008, 0]]], bnds_002$0],
     arg_006 = caml_call1(Incremental_Import[14][119], at_005),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_006, 0]]], bnds_002$1],
     arg_004 = caml_call2(Incremental_Types[15][1], of_a_001, main_003),
     bnds_002$3 = [0, [1, [0, _e_, [0, arg_004, 0]]], bnds_002$2];
    return [1, bnds_002$3];
   }
   function invariant(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _j_,
             t,
             function(x_013){
              return sexp_of_t(function(param){return _i_;}, x_013);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               before_fun = check(invariant_a),
               main_fun =
                 check
                  (function(main){
                    if(! caml_call1(Incremental_Scope[4], main[12]))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _h_], 1);
                    var match = main[5];
                    if(typeof match === "number"){if(0 === match) return 0;}
                    else
                     switch(match[0]){
                       case 5:
                        return 0;
                       case 13:
                        var t$0 = match[1];
                        if(caml_call2(Core[246], t, t$0)) return 0;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _g_], 1);
                     }
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _f_], 1);
                   });
              caml_call1(main_fun, main$0);
              caml_call1(before_fun, before$0);
              return 0;
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Snapshot);
   var Incremental_Snapshot = [0, invariant, sexp_of_t];
   runtime.caml_register_global
    (35, Incremental_Snapshot, cst_Incremental_Snapshot);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Kind
//# unitInfo: Requires: Core, Expect_test_collector, Incremental__Array_fold, Incremental__At, Incremental__At_intervals, Incremental__Bind, Incremental__Expert, Incremental__Freeze, Incremental__If_then_else, Incremental__Import, Incremental__Join, Incremental__Snapshot, Incremental__Step_function_node, Incremental__Types, Incremental__Unordered_array_fold, Incremental__Var, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Array_fold$0 = "Array_fold",
    cst_At$0 = "At",
    cst_At_intervals$0 = "At_intervals",
    cst_Bind_lhs_change$0 = "Bind_lhs_change",
    cst_Bind_main$0 = "Bind_main",
    cst_Const$0 = "Const",
    cst_Expert$0 = "Expert",
    cst_Freeze$0 = "Freeze",
    cst_If_test_change$0 = "If_test_change",
    cst_If_then_else$0 = "If_then_else",
    cst_Incremental_Kind = "Incremental__Kind",
    cst_Invalid$0 = "Invalid",
    cst_Join_lhs_change$0 = "Join_lhs_change",
    cst_Join_main$0 = "Join_main",
    cst_Map$0 = "Map",
    cst_Map10$0 = "Map10",
    cst_Map11$0 = "Map11",
    cst_Map12$0 = "Map12",
    cst_Map13$0 = "Map13",
    cst_Map14$0 = "Map14",
    cst_Map15$0 = "Map15",
    cst_Map2$0 = "Map2",
    cst_Map3$0 = "Map3",
    cst_Map4$0 = "Map4",
    cst_Map5$0 = "Map5",
    cst_Map6$0 = "Map6",
    cst_Map7$0 = "Map7",
    cst_Map8$0 = "Map8",
    cst_Map9$0 = "Map9",
    cst_Snapshot$0 = "Snapshot",
    cst_Step_function$0 = "Step_function",
    cst_Uninitialized$0 = "Uninitialized",
    cst_Unordered_array_fold$0 = "Unordered_array_fold",
    cst_Var$0 = "Var",
    cst$0 = "_",
    cst_incremental = "incremental",
    cst_src_kind_ml = "src/kind.ml",
    caml_check_bound = runtime.caml_check_bound;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core = global_data.Core,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Array_fold = global_data.Incremental__Array_fold,
    Incremental_At = global_data.Incremental__At,
    Incremental_At_intervals = global_data.Incremental__At_intervals,
    Incremental_Bind = global_data.Incremental__Bind,
    Incremental_Expert = global_data.Incremental__Expert,
    Incremental_Freeze = global_data.Incremental__Freeze,
    Incremental_If_then_else = global_data.Incremental__If_then_else,
    Incremental_Join = global_data.Incremental__Join,
    Incremental_Snapshot = global_data.Incremental__Snapshot,
    Incremental_Step_function_node =
      global_data.Incremental__Step_function_node,
    Incremental_Unordered_array_fo =
      global_data.Incremental__Unordered_array_fold,
    Incremental_Var = global_data.Incremental__Var,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Kind);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_kind_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    _a_ = [0, cst_Invalid$0],
    _b_ = [0, cst_Uninitialized$0],
    _c_ = [0, cst$0],
    _d_ = [0, cst_Array_fold$0],
    _e_ = [0, cst_At$0],
    _f_ = [0, cst_At_intervals$0],
    _g_ = [0, cst$0],
    _h_ = [0, cst$0],
    _i_ = [0, cst_Bind_lhs_change$0],
    _j_ = [0, cst$0],
    _k_ = [0, cst_Bind_main$0],
    _l_ = [0, cst_Const$0],
    _m_ = [0, cst_Expert$0],
    _n_ = [0, cst_Freeze$0],
    _o_ = [0, cst$0],
    _p_ = [0, cst_If_test_change$0],
    _q_ = [0, cst_If_then_else$0],
    _r_ = [0, cst$0],
    _s_ = [0, cst_Join_lhs_change$0],
    _t_ = [0, cst_Join_main$0],
    _u_ = [0, cst$0],
    _v_ = [0, cst_Map$0],
    _w_ = [0, cst_Snapshot$0],
    _x_ = [0, cst_Step_function$0],
    _y_ = [0, cst$0],
    _z_ = [0, cst_Unordered_array_fold$0],
    _A_ = [0, cst_Var$0],
    _B_ = [0, cst$0],
    _C_ = [0, cst$0],
    _D_ = [0, cst_Map2$0],
    _E_ = [0, cst$0],
    _F_ = [0, cst$0],
    _G_ = [0, cst$0],
    _H_ = [0, cst_Map3$0],
    _I_ = [0, cst$0],
    _J_ = [0, cst$0],
    _K_ = [0, cst$0],
    _L_ = [0, cst$0],
    _M_ = [0, cst_Map4$0],
    _N_ = [0, cst$0],
    _O_ = [0, cst$0],
    _P_ = [0, cst$0],
    _Q_ = [0, cst$0],
    _R_ = [0, cst$0],
    _S_ = [0, cst_Map5$0],
    _T_ = [0, cst$0],
    _U_ = [0, cst$0],
    _V_ = [0, cst$0],
    _W_ = [0, cst$0],
    _X_ = [0, cst$0],
    _Y_ = [0, cst$0],
    _Z_ = [0, cst_Map6$0],
    ___ = [0, cst$0],
    _$_ = [0, cst$0],
    _aa_ = [0, cst$0],
    _ab_ = [0, cst$0],
    _ac_ = [0, cst$0],
    _ad_ = [0, cst$0],
    _ae_ = [0, cst$0],
    _af_ = [0, cst_Map7$0],
    _ag_ = [0, cst$0],
    _ah_ = [0, cst$0],
    _ai_ = [0, cst$0],
    _aj_ = [0, cst$0],
    _ak_ = [0, cst$0],
    _al_ = [0, cst$0],
    _am_ = [0, cst$0],
    _an_ = [0, cst$0],
    _ao_ = [0, cst_Map8$0],
    _ap_ = [0, cst$0],
    _aq_ = [0, cst$0],
    _ar_ = [0, cst$0],
    _as_ = [0, cst$0],
    _at_ = [0, cst$0],
    _au_ = [0, cst$0],
    _av_ = [0, cst$0],
    _aw_ = [0, cst$0],
    _ax_ = [0, cst$0],
    _ay_ = [0, cst_Map9$0],
    _az_ = [0, cst$0],
    _aA_ = [0, cst$0],
    _aB_ = [0, cst$0],
    _aC_ = [0, cst$0],
    _aD_ = [0, cst$0],
    _aE_ = [0, cst$0],
    _aF_ = [0, cst$0],
    _aG_ = [0, cst$0],
    _aH_ = [0, cst$0],
    _aI_ = [0, cst$0],
    _aJ_ = [0, cst_Map10$0],
    _aK_ = [0, cst$0],
    _aL_ = [0, cst$0],
    _aM_ = [0, cst$0],
    _aN_ = [0, cst$0],
    _aO_ = [0, cst$0],
    _aP_ = [0, cst$0],
    _aQ_ = [0, cst$0],
    _aR_ = [0, cst$0],
    _aS_ = [0, cst$0],
    _aT_ = [0, cst$0],
    _aU_ = [0, cst$0],
    _aV_ = [0, cst_Map11$0],
    _aW_ = [0, cst$0],
    _aX_ = [0, cst$0],
    _aY_ = [0, cst$0],
    _aZ_ = [0, cst$0],
    _a0_ = [0, cst$0],
    _a1_ = [0, cst$0],
    _a2_ = [0, cst$0],
    _a3_ = [0, cst$0],
    _a4_ = [0, cst$0],
    _a5_ = [0, cst$0],
    _a6_ = [0, cst$0],
    _a7_ = [0, cst$0],
    _a8_ = [0, cst_Map12$0],
    _a9_ = [0, cst$0],
    _a__ = [0, cst$0],
    _a$_ = [0, cst$0],
    _ba_ = [0, cst$0],
    _bb_ = [0, cst$0],
    _bc_ = [0, cst$0],
    _bd_ = [0, cst$0],
    _be_ = [0, cst$0],
    _bf_ = [0, cst$0],
    _bg_ = [0, cst$0],
    _bh_ = [0, cst$0],
    _bi_ = [0, cst$0],
    _bj_ = [0, cst$0],
    _bk_ = [0, cst_Map13$0],
    _bl_ = [0, cst$0],
    _bm_ = [0, cst$0],
    _bn_ = [0, cst$0],
    _bo_ = [0, cst$0],
    _bp_ = [0, cst$0],
    _bq_ = [0, cst$0],
    _br_ = [0, cst$0],
    _bs_ = [0, cst$0],
    _bt_ = [0, cst$0],
    _bu_ = [0, cst$0],
    _bv_ = [0, cst$0],
    _bw_ = [0, cst$0],
    _bx_ = [0, cst$0],
    _by_ = [0, cst$0],
    _bz_ = [0, cst_Map14$0],
    _bA_ = [0, cst$0],
    _bB_ = [0, cst$0],
    _bC_ = [0, cst$0],
    _bD_ = [0, cst$0],
    _bE_ = [0, cst$0],
    _bF_ = [0, cst$0],
    _bG_ = [0, cst$0],
    _bH_ = [0, cst$0],
    _bI_ = [0, cst$0],
    _bJ_ = [0, cst$0],
    _bK_ = [0, cst$0],
    _bL_ = [0, cst$0],
    _bM_ = [0, cst$0],
    _bN_ = [0, cst$0],
    _bO_ = [0, cst$0],
    _bP_ = [0, cst_Map15$0],
    cst_Invalid = cst_Invalid$0,
    cst_Uninitialized = cst_Uninitialized$0,
    cst_Array_fold = cst_Array_fold$0,
    cst_At = cst_At$0,
    cst_At_intervals = cst_At_intervals$0,
    cst_Bind_lhs_change = cst_Bind_lhs_change$0,
    cst_Bind_main = cst_Bind_main$0,
    cst_Const = cst_Const$0,
    cst_Expert = cst_Expert$0,
    cst_Freeze = cst_Freeze$0,
    cst_If_test_change = cst_If_test_change$0,
    cst_If_then_else = cst_If_then_else$0,
    cst_Join_lhs_change = cst_Join_lhs_change$0,
    cst_Join_main = cst_Join_main$0,
    cst_Map = cst_Map$0,
    cst_Snapshot = cst_Snapshot$0,
    cst_Step_function = cst_Step_function$0,
    cst_Unordered_array_fold = cst_Unordered_array_fold$0,
    cst_Var = cst_Var$0,
    cst_Map2 = cst_Map2$0,
    cst_Map3 = cst_Map3$0,
    cst_Map4 = cst_Map4$0,
    cst_Map5 = cst_Map5$0,
    cst_Map6 = cst_Map6$0,
    cst_Map7 = cst_Map7$0,
    cst_Map8 = cst_Map8$0,
    cst_Map9 = cst_Map9$0,
    cst_Map10 = cst_Map10$0,
    cst_Map11 = cst_Map11$0,
    cst_Map12 = cst_Map12$0,
    cst_Map13 = cst_Map13$0,
    cst_Map14 = cst_Map14$0,
    cst_Map15 = cst_Map15$0;
   function sexp_of_t(of_a_001, param){
    if(typeof param === "number") return 0 === param ? _a_ : _b_;
    switch(param[0]){
      case 0:
       var
        arg0_002 = param[1],
        res0_003 =
          caml_call3
           (Incremental_Array_fold[1],
            function(param){return _c_;},
            of_a_001,
            arg0_002);
       return [1, [0, _d_, [0, res0_003, 0]]];
      case 1:
       var
        arg0_004 = param[1],
        res0_005 = caml_call1(Incremental_At[2], arg0_004);
       return [1, [0, _e_, [0, res0_005, 0]]];
      case 2:
       var
        arg0_006 = param[1],
        res0_007 = caml_call1(Incremental_At_intervals[2], arg0_006);
       return [1, [0, _f_, [0, res0_007, 0]]];
      case 3:
       var
        arg0_008 = param[1],
        res0_009 =
          caml_call3
           (Incremental_Bind[2],
            function(param){return _h_;},
            function(param){return _g_;},
            arg0_008);
       return [1, [0, _i_, [0, res0_009, 0]]];
      case 4:
       var
        arg0_010 = param[1],
        res0_011 =
          caml_call3
           (Incremental_Bind[2],
            function(param){return _j_;},
            of_a_001,
            arg0_010);
       return [1, [0, _k_, [0, res0_011, 0]]];
      case 5:
       var arg0_012 = param[1], res0_013 = caml_call1(of_a_001, arg0_012);
       return [1, [0, _l_, [0, res0_013, 0]]];
      case 6:
       var
        arg0_014 = param[1],
        res0_015 = caml_call2(Incremental_Expert[2], of_a_001, arg0_014);
       return [1, [0, _m_, [0, res0_015, 0]]];
      case 7:
       var
        arg0_016 = param[1],
        res0_017 = caml_call2(Incremental_Freeze[2], of_a_001, arg0_016);
       return [1, [0, _n_, [0, res0_017, 0]]];
      case 8:
       var
        arg0_018 = param[1],
        res0_019 =
          caml_call2
           (Incremental_If_then_else[2],
            function(param){return _o_;},
            arg0_018);
       return [1, [0, _p_, [0, res0_019, 0]]];
      case 9:
       var
        arg0_020 = param[1],
        res0_021 = caml_call2(Incremental_If_then_else[2], of_a_001, arg0_020);
       return [1, [0, _q_, [0, res0_021, 0]]];
      case 10:
       var
        arg0_022 = param[1],
        res0_023 =
          caml_call2
           (Incremental_Join[2], function(param){return _r_;}, arg0_022);
       return [1, [0, _s_, [0, res0_023, 0]]];
      case 11:
       var
        arg0_024 = param[1],
        res0_025 = caml_call2(Incremental_Join[2], of_a_001, arg0_024);
       return [1, [0, _t_, [0, res0_025, 0]]];
      case 12:
       var
        arg1_027 = param[2],
        res0_028 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cs_){return 0;}),
        res1_029 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _u_;}, arg1_027);
       return [1, [0, _v_, [0, res0_028, [0, res1_029, 0]]]];
      case 13:
       var
        arg0_030 = param[1],
        res0_031 = caml_call2(Incremental_Snapshot[2], of_a_001, arg0_030);
       return [1, [0, _w_, [0, res0_031, 0]]];
      case 14:
       var
        arg0_032 = param[1],
        res0_033 =
          caml_call2(Incremental_Step_function_node[2], of_a_001, arg0_032);
       return [1, [0, _x_, [0, res0_033, 0]]];
      case 15:
       var
        arg0_034 = param[1],
        res0_035 =
          caml_call3
           (Incremental_Unordered_array_fo[2],
            function(param){return _y_;},
            of_a_001,
            arg0_034);
       return [1, [0, _z_, [0, res0_035, 0]]];
      case 16:
       var
        arg0_036 = param[1],
        res0_037 = caml_call2(Incremental_Var[2], of_a_001, arg0_036);
       return [1, [0, _A_, [0, res0_037, 0]]];
      case 17:
       var
        arg2_040 = param[3],
        arg1_039 = param[2],
        res0_041 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cr_){return 0;}),
        res1_042 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _B_;}, arg1_039),
        res2_043 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _C_;}, arg2_040);
       return [1, [0, _D_, [0, res0_041, [0, res1_042, [0, res2_043, 0]]]]];
      case 18:
       var
        arg3_047 = param[4],
        arg2_046 = param[3],
        arg1_045 = param[2],
        res0_048 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cq_){return 0;}),
        res1_049 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _E_;}, arg1_045),
        res2_050 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _F_;}, arg2_046),
        res3_051 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _G_;}, arg3_047);
       return [1,
               [0,
                _H_,
                [0, res0_048, [0, res1_049, [0, res2_050, [0, res3_051, 0]]]]]];
      case 19:
       var
        arg4_056 = param[5],
        arg3_055 = param[4],
        arg2_054 = param[3],
        arg1_053 = param[2],
        res0_057 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cp_){return 0;}),
        res1_058 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _I_;}, arg1_053),
        res2_059 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _J_;}, arg2_054),
        res3_060 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _K_;}, arg3_055),
        res4_061 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _L_;}, arg4_056);
       return [1,
               [0,
                _M_,
                [0,
                 res0_057,
                 [0, res1_058, [0, res2_059, [0, res3_060, [0, res4_061, 0]]]]]]];
      case 20:
       var
        arg5_067 = param[6],
        arg4_066 = param[5],
        arg3_065 = param[4],
        arg2_064 = param[3],
        arg1_063 = param[2],
        res0_068 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_co_){return 0;}),
        res1_069 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _N_;}, arg1_063),
        res2_070 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _O_;}, arg2_064),
        res3_071 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _P_;}, arg3_065),
        res4_072 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _Q_;}, arg4_066),
        res5_073 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _R_;}, arg5_067);
       return [1,
               [0,
                _S_,
                [0,
                 res0_068,
                 [0,
                  res1_069,
                  [0,
                   res2_070,
                   [0, res3_071, [0, res4_072, [0, res5_073, 0]]]]]]]];
      case 21:
       var
        arg6_080 = param[7],
        arg5_079 = param[6],
        arg4_078 = param[5],
        arg3_077 = param[4],
        arg2_076 = param[3],
        arg1_075 = param[2],
        res0_081 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cn_){return 0;}),
        res1_082 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _T_;}, arg1_075),
        res2_083 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _U_;}, arg2_076),
        res3_084 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _V_;}, arg3_077),
        res4_085 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _W_;}, arg4_078),
        res5_086 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _X_;}, arg5_079),
        res6_087 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _Y_;}, arg6_080);
       return [1,
               [0,
                _Z_,
                [0,
                 res0_081,
                 [0,
                  res1_082,
                  [0,
                   res2_083,
                   [0,
                    res3_084,
                    [0, res4_085, [0, res5_086, [0, res6_087, 0]]]]]]]]];
      case 22:
       var
        arg7_095 = param[8],
        arg6_094 = param[7],
        arg5_093 = param[6],
        arg4_092 = param[5],
        arg3_091 = param[4],
        arg2_090 = param[3],
        arg1_089 = param[2],
        res0_096 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cm_){return 0;}),
        res1_097 =
          caml_call2
           (Incremental_Types[15][1], function(param){return ___;}, arg1_089),
        res2_098 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _$_;}, arg2_090),
        res3_099 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aa_;}, arg3_091),
        res4_100 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ab_;}, arg4_092),
        res5_101 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ac_;}, arg5_093),
        res6_102 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ad_;}, arg6_094),
        res7_103 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ae_;}, arg7_095);
       return [1,
               [0,
                _af_,
                [0,
                 res0_096,
                 [0,
                  res1_097,
                  [0,
                   res2_098,
                   [0,
                    res3_099,
                    [0,
                     res4_100,
                     [0, res5_101, [0, res6_102, [0, res7_103, 0]]]]]]]]]];
      case 23:
       var
        arg8_112 = param[9],
        arg7_111 = param[8],
        arg6_110 = param[7],
        arg5_109 = param[6],
        arg4_108 = param[5],
        arg3_107 = param[4],
        arg2_106 = param[3],
        arg1_105 = param[2],
        res0_113 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cl_){return 0;}),
        res1_114 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ag_;}, arg1_105),
        res2_115 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ah_;}, arg2_106),
        res3_116 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ai_;}, arg3_107),
        res4_117 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aj_;}, arg4_108),
        res5_118 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ak_;}, arg5_109),
        res6_119 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _al_;}, arg6_110),
        res7_120 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _am_;}, arg7_111),
        res8_121 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _an_;}, arg8_112);
       return [1,
               [0,
                _ao_,
                [0,
                 res0_113,
                 [0,
                  res1_114,
                  [0,
                   res2_115,
                   [0,
                    res3_116,
                    [0,
                     res4_117,
                     [0,
                      res5_118,
                      [0, res6_119, [0, res7_120, [0, res8_121, 0]]]]]]]]]]];
      case 24:
       var
        arg9_131 = param[10],
        arg8_130 = param[9],
        arg7_129 = param[8],
        arg6_128 = param[7],
        arg5_127 = param[6],
        arg4_126 = param[5],
        arg3_125 = param[4],
        arg2_124 = param[3],
        arg1_123 = param[2],
        res0_132 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_ck_){return 0;}),
        res1_133 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ap_;}, arg1_123),
        res2_134 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aq_;}, arg2_124),
        res3_135 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ar_;}, arg3_125),
        res4_136 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _as_;}, arg4_126),
        res5_137 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _at_;}, arg5_127),
        res6_138 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _au_;}, arg6_128),
        res7_139 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _av_;}, arg7_129),
        res8_140 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aw_;}, arg8_130),
        res9_141 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ax_;}, arg9_131);
       return [1,
               [0,
                _ay_,
                [0,
                 res0_132,
                 [0,
                  res1_133,
                  [0,
                   res2_134,
                   [0,
                    res3_135,
                    [0,
                     res4_136,
                     [0,
                      res5_137,
                      [0,
                       res6_138,
                       [0, res7_139, [0, res8_140, [0, res9_141, 0]]]]]]]]]]]];
      case 25:
       var
        arg10_152 = param[11],
        arg9_151 = param[10],
        arg8_150 = param[9],
        arg7_149 = param[8],
        arg6_148 = param[7],
        arg5_147 = param[6],
        arg4_146 = param[5],
        arg3_145 = param[4],
        arg2_144 = param[3],
        arg1_143 = param[2],
        res0_153 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cj_){return 0;}),
        res1_154 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _az_;}, arg1_143),
        res2_155 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aA_;}, arg2_144),
        res3_156 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aB_;}, arg3_145),
        res4_157 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aC_;}, arg4_146),
        res5_158 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aD_;}, arg5_147),
        res6_159 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aE_;}, arg6_148),
        res7_160 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aF_;}, arg7_149),
        res8_161 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aG_;}, arg8_150),
        res9_162 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aH_;}, arg9_151),
        res10_163 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _aI_;},
            arg10_152);
       return [1,
               [0,
                _aJ_,
                [0,
                 res0_153,
                 [0,
                  res1_154,
                  [0,
                   res2_155,
                   [0,
                    res3_156,
                    [0,
                     res4_157,
                     [0,
                      res5_158,
                      [0,
                       res6_159,
                       [0,
                        res7_160,
                        [0, res8_161, [0, res9_162, [0, res10_163, 0]]]]]]]]]]]]];
      case 26:
       var
        arg11_175 = param[12],
        arg10_174 = param[11],
        arg9_173 = param[10],
        arg8_172 = param[9],
        arg7_171 = param[8],
        arg6_170 = param[7],
        arg5_169 = param[6],
        arg4_168 = param[5],
        arg3_167 = param[4],
        arg2_166 = param[3],
        arg1_165 = param[2],
        res0_176 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_ci_){return 0;}),
        res1_177 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aK_;}, arg1_165),
        res2_178 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aL_;}, arg2_166),
        res3_179 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aM_;}, arg3_167),
        res4_180 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aN_;}, arg4_168),
        res5_181 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aO_;}, arg5_169),
        res6_182 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aP_;}, arg6_170),
        res7_183 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aQ_;}, arg7_171),
        res8_184 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aR_;}, arg8_172),
        res9_185 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aS_;}, arg9_173),
        res10_186 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _aT_;},
            arg10_174),
        res11_187 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _aU_;},
            arg11_175);
       return [1,
               [0,
                _aV_,
                [0,
                 res0_176,
                 [0,
                  res1_177,
                  [0,
                   res2_178,
                   [0,
                    res3_179,
                    [0,
                     res4_180,
                     [0,
                      res5_181,
                      [0,
                       res6_182,
                       [0,
                        res7_183,
                        [0,
                         res8_184,
                         [0, res9_185, [0, res10_186, [0, res11_187, 0]]]]]]]]]]]]]];
      case 27:
       var
        arg12_200 = param[13],
        arg11_199 = param[12],
        arg10_198 = param[11],
        arg9_197 = param[10],
        arg8_196 = param[9],
        arg7_195 = param[8],
        arg6_194 = param[7],
        arg5_193 = param[6],
        arg4_192 = param[5],
        arg3_191 = param[4],
        arg2_190 = param[3],
        arg1_189 = param[2],
        res0_201 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_ch_){return 0;}),
        res1_202 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aW_;}, arg1_189),
        res2_203 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aX_;}, arg2_190),
        res3_204 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aY_;}, arg3_191),
        res4_205 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _aZ_;}, arg4_192),
        res5_206 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _a0_;}, arg5_193),
        res6_207 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _a1_;}, arg6_194),
        res7_208 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _a2_;}, arg7_195),
        res8_209 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _a3_;}, arg8_196),
        res9_210 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _a4_;}, arg9_197),
        res10_211 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _a5_;},
            arg10_198),
        res11_212 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _a6_;},
            arg11_199),
        res12_213 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _a7_;},
            arg12_200);
       return [1,
               [0,
                _a8_,
                [0,
                 res0_201,
                 [0,
                  res1_202,
                  [0,
                   res2_203,
                   [0,
                    res3_204,
                    [0,
                     res4_205,
                     [0,
                      res5_206,
                      [0,
                       res6_207,
                       [0,
                        res7_208,
                        [0,
                         res8_209,
                         [0,
                          res9_210,
                          [0, res10_211, [0, res11_212, [0, res12_213, 0]]]]]]]]]]]]]]];
      case 28:
       var
        arg13_227 = param[14],
        arg12_226 = param[13],
        arg11_225 = param[12],
        arg10_224 = param[11],
        arg9_223 = param[10],
        arg8_222 = param[9],
        arg7_221 = param[8],
        arg6_220 = param[7],
        arg5_219 = param[6],
        arg4_218 = param[5],
        arg3_217 = param[4],
        arg2_216 = param[3],
        arg1_215 = param[2],
        res0_228 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cg_){return 0;}),
        res1_229 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _a9_;}, arg1_215),
        res2_230 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _a__;}, arg2_216),
        res3_231 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _a$_;}, arg3_217),
        res4_232 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _ba_;}, arg4_218),
        res5_233 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bb_;}, arg5_219),
        res6_234 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bc_;}, arg6_220),
        res7_235 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bd_;}, arg7_221),
        res8_236 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _be_;}, arg8_222),
        res9_237 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bf_;}, arg9_223),
        res10_238 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bg_;},
            arg10_224),
        res11_239 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bh_;},
            arg11_225),
        res12_240 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bi_;},
            arg12_226),
        res13_241 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bj_;},
            arg13_227);
       return [1,
               [0,
                _bk_,
                [0,
                 res0_228,
                 [0,
                  res1_229,
                  [0,
                   res2_230,
                   [0,
                    res3_231,
                    [0,
                     res4_232,
                     [0,
                      res5_233,
                      [0,
                       res6_234,
                       [0,
                        res7_235,
                        [0,
                         res8_236,
                         [0,
                          res9_237,
                          [0,
                           res10_238,
                           [0, res11_239, [0, res12_240, [0, res13_241, 0]]]]]]]]]]]]]]]];
      case 29:
       var
        arg14_256 = param[15],
        arg13_255 = param[14],
        arg12_254 = param[13],
        arg11_253 = param[12],
        arg10_252 = param[11],
        arg9_251 = param[10],
        arg8_250 = param[9],
        arg7_249 = param[8],
        arg6_248 = param[7],
        arg5_247 = param[6],
        arg4_246 = param[5],
        arg3_245 = param[4],
        arg2_244 = param[3],
        arg1_243 = param[2],
        res0_257 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_cf_){return 0;}),
        res1_258 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bl_;}, arg1_243),
        res2_259 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bm_;}, arg2_244),
        res3_260 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bn_;}, arg3_245),
        res4_261 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bo_;}, arg4_246),
        res5_262 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bp_;}, arg5_247),
        res6_263 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bq_;}, arg6_248),
        res7_264 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _br_;}, arg7_249),
        res8_265 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bs_;}, arg8_250),
        res9_266 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bt_;}, arg9_251),
        res10_267 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bu_;},
            arg10_252),
        res11_268 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bv_;},
            arg11_253),
        res12_269 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bw_;},
            arg12_254),
        res13_270 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bx_;},
            arg13_255),
        res14_271 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _by_;},
            arg14_256);
       return [1,
               [0,
                _bz_,
                [0,
                 res0_257,
                 [0,
                  res1_258,
                  [0,
                   res2_259,
                   [0,
                    res3_260,
                    [0,
                     res4_261,
                     [0,
                      res5_262,
                      [0,
                       res6_263,
                       [0,
                        res7_264,
                        [0,
                         res8_265,
                         [0,
                          res9_266,
                          [0,
                           res10_267,
                           [0,
                            res11_268,
                            [0, res12_269, [0, res13_270, [0, res14_271, 0]]]]]]]]]]]]]]]]];
      default:
       var
        arg15_287 = param[16],
        arg14_286 = param[15],
        arg13_285 = param[14],
        arg12_284 = param[13],
        arg11_283 = param[12],
        arg10_282 = param[11],
        arg9_281 = param[10],
        arg8_280 = param[9],
        arg7_279 = param[8],
        arg6_278 = param[7],
        arg5_277 = param[6],
        arg4_276 = param[5],
        arg3_275 = param[4],
        arg2_274 = param[3],
        arg1_273 = param[2],
        res0_288 =
          caml_call1(Sexplib0_Sexp_conv[24], function(_ce_){return 0;}),
        res1_289 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bA_;}, arg1_273),
        res2_290 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bB_;}, arg2_274),
        res3_291 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bC_;}, arg3_275),
        res4_292 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bD_;}, arg4_276),
        res5_293 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bE_;}, arg5_277),
        res6_294 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bF_;}, arg6_278),
        res7_295 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bG_;}, arg7_279),
        res8_296 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bH_;}, arg8_280),
        res9_297 =
          caml_call2
           (Incremental_Types[15][1], function(param){return _bI_;}, arg9_281),
        res10_298 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bJ_;},
            arg10_282),
        res11_299 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bK_;},
            arg11_283),
        res12_300 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bL_;},
            arg12_284),
        res13_301 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bM_;},
            arg13_285),
        res14_302 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bN_;},
            arg14_286),
        res15_303 =
          caml_call2
           (Incremental_Types[15][1],
            function(param){return _bO_;},
            arg15_287);
       return [1,
               [0,
                _bP_,
                [0,
                 res0_288,
                 [0,
                  res1_289,
                  [0,
                   res2_290,
                   [0,
                    res3_291,
                    [0,
                     res4_292,
                     [0,
                      res5_293,
                      [0,
                       res6_294,
                       [0,
                        res7_295,
                        [0,
                         res8_296,
                         [0,
                          res9_297,
                          [0,
                           res10_298,
                           [0,
                            res11_299,
                            [0,
                             res12_300,
                             [0, res13_301, [0, res14_302, [0, res15_303, 0]]]]]]]]]]]]]]]]]];
    }
   }
   function name(param){
    if(typeof param === "number")
     return 0 === param ? cst_Invalid : cst_Uninitialized;
    switch(param[0]){
      case 0:
       return cst_Array_fold;
      case 1:
       return cst_At;
      case 2:
       return cst_At_intervals;
      case 3:
       return cst_Bind_lhs_change;
      case 4:
       return cst_Bind_main;
      case 5:
       return cst_Const;
      case 6:
       return cst_Expert;
      case 7:
       return cst_Freeze;
      case 8:
       return cst_If_test_change;
      case 9:
       return cst_If_then_else;
      case 10:
       return cst_Join_lhs_change;
      case 11:
       return cst_Join_main;
      case 12:
       return cst_Map;
      case 13:
       return cst_Snapshot;
      case 14:
       return cst_Step_function;
      case 15:
       return cst_Unordered_array_fold;
      case 16:
       return cst_Var;
      case 17:
       return cst_Map2;
      case 18:
       return cst_Map3;
      case 19:
       return cst_Map4;
      case 20:
       return cst_Map5;
      case 21:
       return cst_Map6;
      case 22:
       return cst_Map7;
      case 23:
       return cst_Map8;
      case 24:
       return cst_Map9;
      case 25:
       return cst_Map10;
      case 26:
       return cst_Map11;
      case 27:
       return cst_Map12;
      case 28:
       return cst_Map13;
      case 29:
       return cst_Map14;
      default: return cst_Map15;
    }
   }
   function invariant(invariant_a, t){
    if(typeof t === "number") return 0 === t ? 0 : 0;
    switch(t[0]){
      case 0:
       var array_fold = t[1];
       return caml_call3
               (Incremental_Array_fold[2],
                function(_cd_){return 0;},
                invariant_a,
                array_fold);
      case 1:
       var at = t[1]; return caml_call1(Incremental_At[1], at);
      case 2:
       var at_intervals = t[1];
       return caml_call1(Incremental_At_intervals[1], at_intervals);
      case 3:
       var bind = t[1];
       return caml_call3
               (Incremental_Bind[1],
                function(_cc_){return 0;},
                function(_cb_){return 0;},
                bind);
      case 4:
       var bind$0 = t[1];
       return caml_call3
               (Incremental_Bind[1],
                function(_ca_){return 0;},
                invariant_a,
                bind$0);
      case 5:
       var a = t[1]; return caml_call1(invariant_a, a);
      case 6:
       var e = t[1]; return caml_call2(Incremental_Expert[1], invariant_a, e);
      case 7:
       var freeze = t[1];
       return caml_call2(Incremental_Freeze[1], invariant_a, freeze);
      case 8:
       var if_then_else = t[1];
       return caml_call2
               (Incremental_If_then_else[1],
                function(_b$_){return 0;},
                if_then_else);
      case 9:
       var if_then_else$0 = t[1];
       return caml_call2
               (Incremental_If_then_else[1], invariant_a, if_then_else$0);
      case 10:
       var join = t[1];
       return caml_call2(Incremental_Join[1], function(_b__){return 0;}, join);
      case 11:
       var join$0 = t[1];
       return caml_call2(Incremental_Join[1], invariant_a, join$0);
      case 13:
       var snapshot = t[1];
       return caml_call2(Incremental_Snapshot[1], invariant_a, snapshot);
      case 14:
       var step_function_node = t[1];
       return caml_call2
               (Incremental_Step_function_node[1],
                invariant_a,
                step_function_node);
      case 15:
       var unordered_array_fold = t[1];
       return caml_call3
               (Incremental_Unordered_array_fo[1],
                function(_b9_){return 0;},
                invariant_a,
                unordered_array_fold);
      case 16:
       var var$0 = t[1];
       return caml_call2(Incremental_Var[1], function(_b8_){return 0;}, var$0);
      default: return 0;
    }
   }
   function initial_num_children(t){
    if(typeof t === "number") return 0 === t ? 0 : 0;
    switch(t[0]){
      case 0:
       var children = t[1][3]; return children.length - 1;
      case 1:
       return 0;
      case 2:
       return 0;
      case 3:
       return 1;
      case 4:
       return 2;
      case 5:
       return 0;
      case 6:
       return 0;
      case 7:
       return 1;
      case 8:
       return 1;
      case 9:
       return 2;
      case 10:
       return 1;
      case 11:
       return 2;
      case 12:
       return 1;
      case 13:
       return 0;
      case 14:
       return 1;
      case 15:
       var children$0 = t[1][6]; return children$0.length - 1;
      case 16:
       return 0;
      case 17:
       return 2;
      case 18:
       return 3;
      case 19:
       return 4;
      case 20:
       return 5;
      case 21:
       return 6;
      case 22:
       return 7;
      case 23:
       return 8;
      case 24:
       return 9;
      case 25:
       return 10;
      case 26:
       return 11;
      case 27:
       return 12;
      case 28:
       return 13;
      case 29:
       return 14;
      default: return 15;
    }
   }
   var
    _bQ_ = [0, cst$0],
    cst_Kind_slow_get_child_got_in = "Kind.slow_get_child got invalid index",
    _bR_ = [0, cst_src_kind_ml, 602, 14347, 14361];
   function iteri_children(t, f){
    if(typeof t === "number") return 0 === t ? 0 : 0;
    switch(t[0]){
      case 0:
       var children = t[1][3], _bV_ = children.length - 2 | 0, _bU_ = 0;
       if(_bV_ >= 0){
        var i = _bU_;
        for(;;){
         caml_call2(f, i, children[1 + i]);
         var _bW_ = i + 1 | 0;
         if(_bV_ === i) break;
         i = _bW_;
        }
       }
       return 0;
      case 1:
       return 0;
      case 2:
       return 0;
      case 3:
       var bind = t[1]; return caml_call2(f, 0, bind[3]);
      case 4:
       var match = t[1], lhs_change = match[4], rhs = match[5];
       caml_call2(f, 0, lhs_change);
       var _bX_ = caml_call1(Incremental_Import[16][6], rhs);
       return _bX_
               ? caml_call2(f, 1, caml_call1(Incremental_Import[16][11], rhs))
               : _bX_;
      case 5:
       return 0;
      case 6:
       var
        match$0 = t[1],
        children$0 = match$0[3],
        num_children = match$0[4],
        _bZ_ = num_children - 1 | 0,
        _bY_ = 0;
       if(_bZ_ >= 0){
        var i$0 = _bY_;
        for(;;){
         var _b0_ = caml_call2(Incremental_Import[17][20], children$0, i$0);
         caml_call2(f, i$0, caml_call1(Incremental_Import[16][7], _b0_)[1]);
         var _b1_ = i$0 + 1 | 0;
         if(_bZ_ === i$0) break;
         i$0 = _b1_;
        }
       }
       return 0;
      case 7:
       var child = t[1][2]; return caml_call2(f, 0, child);
      case 8:
       var test = t[1][2]; return caml_call2(f, 0, test);
      case 9:
       var
        match$1 = t[1],
        test_change = match$1[3],
        current_branch = match$1[4];
       caml_call2(f, 0, test_change);
       var _b2_ = caml_call1(Incremental_Import[16][6], current_branch);
       return _b2_
               ? caml_call2
                 (f,
                  1,
                  caml_call1(Incremental_Import[16][11], current_branch))
               : _b2_;
      case 10:
       var lhs = t[1][2]; return caml_call2(f, 0, lhs);
      case 11:
       var match$2 = t[1], lhs_change$0 = match$2[3], rhs$0 = match$2[4];
       caml_call2(f, 0, lhs_change$0);
       var _b3_ = caml_call1(Incremental_Import[16][6], rhs$0);
       return _b3_
               ? caml_call2
                 (f, 1, caml_call1(Incremental_Import[16][11], rhs$0))
               : _b3_;
      case 12:
       var node0 = t[2]; return caml_call2(f, 0, node0);
      case 13:
       return 0;
      case 14:
       var
        child$0 = t[1][2],
        _b4_ = caml_call1(Incremental_Import[16][6], child$0);
       return _b4_
               ? caml_call2
                 (f, 0, caml_call1(Incremental_Import[16][11], child$0))
               : _b4_;
      case 15:
       var children$1 = t[1][6], _b6_ = children$1.length - 2 | 0, _b5_ = 0;
       if(_b6_ >= 0){
        var i$1 = _b5_;
        for(;;){
         caml_call2(f, i$1, children$1[1 + i$1]);
         var _b7_ = i$1 + 1 | 0;
         if(_b6_ === i$1) break;
         i$1 = _b7_;
        }
       }
       return 0;
      case 16:
       return 0;
      case 17:
       var node1 = t[3], node0$0 = t[2];
       caml_call2(f, 0, node0$0);
       return caml_call2(f, 1, node1);
      case 18:
       var node2 = t[4], node1$0 = t[3], node0$1 = t[2];
       caml_call2(f, 0, node0$1);
       caml_call2(f, 1, node1$0);
       return caml_call2(f, 2, node2);
      case 19:
       var node3 = t[5], node2$0 = t[4], node1$1 = t[3], node0$2 = t[2];
       caml_call2(f, 0, node0$2);
       caml_call2(f, 1, node1$1);
       caml_call2(f, 2, node2$0);
       return caml_call2(f, 3, node3);
      case 20:
       var
        node4 = t[6],
        node3$0 = t[5],
        node2$1 = t[4],
        node1$2 = t[3],
        node0$3 = t[2];
       caml_call2(f, 0, node0$3);
       caml_call2(f, 1, node1$2);
       caml_call2(f, 2, node2$1);
       caml_call2(f, 3, node3$0);
       return caml_call2(f, 4, node4);
      case 21:
       var
        node5 = t[7],
        node4$0 = t[6],
        node3$1 = t[5],
        node2$2 = t[4],
        node1$3 = t[3],
        node0$4 = t[2];
       caml_call2(f, 0, node0$4);
       caml_call2(f, 1, node1$3);
       caml_call2(f, 2, node2$2);
       caml_call2(f, 3, node3$1);
       caml_call2(f, 4, node4$0);
       return caml_call2(f, 5, node5);
      case 22:
       var
        node6 = t[8],
        node5$0 = t[7],
        node4$1 = t[6],
        node3$2 = t[5],
        node2$3 = t[4],
        node1$4 = t[3],
        node0$5 = t[2];
       caml_call2(f, 0, node0$5);
       caml_call2(f, 1, node1$4);
       caml_call2(f, 2, node2$3);
       caml_call2(f, 3, node3$2);
       caml_call2(f, 4, node4$1);
       caml_call2(f, 5, node5$0);
       return caml_call2(f, 6, node6);
      case 23:
       var
        node7 = t[9],
        node6$0 = t[8],
        node5$1 = t[7],
        node4$2 = t[6],
        node3$3 = t[5],
        node2$4 = t[4],
        node1$5 = t[3],
        node0$6 = t[2];
       caml_call2(f, 0, node0$6);
       caml_call2(f, 1, node1$5);
       caml_call2(f, 2, node2$4);
       caml_call2(f, 3, node3$3);
       caml_call2(f, 4, node4$2);
       caml_call2(f, 5, node5$1);
       caml_call2(f, 6, node6$0);
       return caml_call2(f, 7, node7);
      case 24:
       var
        node8 = t[10],
        node7$0 = t[9],
        node6$1 = t[8],
        node5$2 = t[7],
        node4$3 = t[6],
        node3$4 = t[5],
        node2$5 = t[4],
        node1$6 = t[3],
        node0$7 = t[2];
       caml_call2(f, 0, node0$7);
       caml_call2(f, 1, node1$6);
       caml_call2(f, 2, node2$5);
       caml_call2(f, 3, node3$4);
       caml_call2(f, 4, node4$3);
       caml_call2(f, 5, node5$2);
       caml_call2(f, 6, node6$1);
       caml_call2(f, 7, node7$0);
       return caml_call2(f, 8, node8);
      case 25:
       var
        node9 = t[11],
        node8$0 = t[10],
        node7$1 = t[9],
        node6$2 = t[8],
        node5$3 = t[7],
        node4$4 = t[6],
        node3$5 = t[5],
        node2$6 = t[4],
        node1$7 = t[3],
        node0$8 = t[2];
       caml_call2(f, 0, node0$8);
       caml_call2(f, 1, node1$7);
       caml_call2(f, 2, node2$6);
       caml_call2(f, 3, node3$5);
       caml_call2(f, 4, node4$4);
       caml_call2(f, 5, node5$3);
       caml_call2(f, 6, node6$2);
       caml_call2(f, 7, node7$1);
       caml_call2(f, 8, node8$0);
       return caml_call2(f, 9, node9);
      case 26:
       var
        node10 = t[12],
        node9$0 = t[11],
        node8$1 = t[10],
        node7$2 = t[9],
        node6$3 = t[8],
        node5$4 = t[7],
        node4$5 = t[6],
        node3$6 = t[5],
        node2$7 = t[4],
        node1$8 = t[3],
        node0$9 = t[2];
       caml_call2(f, 0, node0$9);
       caml_call2(f, 1, node1$8);
       caml_call2(f, 2, node2$7);
       caml_call2(f, 3, node3$6);
       caml_call2(f, 4, node4$5);
       caml_call2(f, 5, node5$4);
       caml_call2(f, 6, node6$3);
       caml_call2(f, 7, node7$2);
       caml_call2(f, 8, node8$1);
       caml_call2(f, 9, node9$0);
       return caml_call2(f, 10, node10);
      case 27:
       var
        node11 = t[13],
        node10$0 = t[12],
        node9$1 = t[11],
        node8$2 = t[10],
        node7$3 = t[9],
        node6$4 = t[8],
        node5$5 = t[7],
        node4$6 = t[6],
        node3$7 = t[5],
        node2$8 = t[4],
        node1$9 = t[3],
        node0$10 = t[2];
       caml_call2(f, 0, node0$10);
       caml_call2(f, 1, node1$9);
       caml_call2(f, 2, node2$8);
       caml_call2(f, 3, node3$7);
       caml_call2(f, 4, node4$6);
       caml_call2(f, 5, node5$5);
       caml_call2(f, 6, node6$4);
       caml_call2(f, 7, node7$3);
       caml_call2(f, 8, node8$2);
       caml_call2(f, 9, node9$1);
       caml_call2(f, 10, node10$0);
       return caml_call2(f, 11, node11);
      case 28:
       var
        node12 = t[14],
        node11$0 = t[13],
        node10$1 = t[12],
        node9$2 = t[11],
        node8$3 = t[10],
        node7$4 = t[9],
        node6$5 = t[8],
        node5$6 = t[7],
        node4$7 = t[6],
        node3$8 = t[5],
        node2$9 = t[4],
        node1$10 = t[3],
        node0$11 = t[2];
       caml_call2(f, 0, node0$11);
       caml_call2(f, 1, node1$10);
       caml_call2(f, 2, node2$9);
       caml_call2(f, 3, node3$8);
       caml_call2(f, 4, node4$7);
       caml_call2(f, 5, node5$6);
       caml_call2(f, 6, node6$5);
       caml_call2(f, 7, node7$4);
       caml_call2(f, 8, node8$3);
       caml_call2(f, 9, node9$2);
       caml_call2(f, 10, node10$1);
       caml_call2(f, 11, node11$0);
       return caml_call2(f, 12, node12);
      case 29:
       var
        node13 = t[15],
        node12$0 = t[14],
        node11$1 = t[13],
        node10$2 = t[12],
        node9$3 = t[11],
        node8$4 = t[10],
        node7$5 = t[9],
        node6$6 = t[8],
        node5$7 = t[7],
        node4$8 = t[6],
        node3$9 = t[5],
        node2$10 = t[4],
        node1$11 = t[3],
        node0$12 = t[2];
       caml_call2(f, 0, node0$12);
       caml_call2(f, 1, node1$11);
       caml_call2(f, 2, node2$10);
       caml_call2(f, 3, node3$9);
       caml_call2(f, 4, node4$8);
       caml_call2(f, 5, node5$7);
       caml_call2(f, 6, node6$6);
       caml_call2(f, 7, node7$5);
       caml_call2(f, 8, node8$4);
       caml_call2(f, 9, node9$3);
       caml_call2(f, 10, node10$2);
       caml_call2(f, 11, node11$1);
       caml_call2(f, 12, node12$0);
       return caml_call2(f, 13, node13);
      default:
       var
        node14 = t[16],
        node13$0 = t[15],
        node12$1 = t[14],
        node11$2 = t[13],
        node10$3 = t[12],
        node9$4 = t[11],
        node8$5 = t[10],
        node7$6 = t[9],
        node6$7 = t[8],
        node5$8 = t[7],
        node4$9 = t[6],
        node3$10 = t[5],
        node2$11 = t[4],
        node1$12 = t[3],
        node0$13 = t[2];
       caml_call2(f, 0, node0$13);
       caml_call2(f, 1, node1$12);
       caml_call2(f, 2, node2$11);
       caml_call2(f, 3, node3$10);
       caml_call2(f, 4, node4$9);
       caml_call2(f, 5, node5$8);
       caml_call2(f, 6, node6$7);
       caml_call2(f, 7, node7$6);
       caml_call2(f, 8, node8$5);
       caml_call2(f, 9, node9$4);
       caml_call2(f, 10, node10$3);
       caml_call2(f, 11, node11$2);
       caml_call2(f, 12, node12$1);
       caml_call2(f, 13, node13$0);
       return caml_call2(f, 14, node14);
    }
   }
   function slow_get_child(t, index){
    if(typeof t !== "number")
     switch(t[0]){
       case 0:
        var children = t[1][3];
        return caml_check_bound(children, index)[1 + index];
       case 6:
        var
         children$0 = t[1][3],
         _bS_ = caml_call2(Incremental_Import[17][19], children$0, index);
        return caml_call1(Incremental_Import[16][7], _bS_)[1];
       case 15:
        var children$1 = t[1][6];
        return caml_check_bound(children$1, index)[1 + index];
     }
    return caml_call1
            (Core[260],
             function(r){
              iteri_children
               (t,
                function(i, child){
                 var _bT_ = caml_call2(Incremental_Import[3], i, index);
                 return _bT_ ? caml_call1(r, child) : _bT_;
                });
              return caml_call5
                      (Core[236],
                       0,
                       _bR_,
                       cst_Kind_slow_get_child_got_in,
                       [0, index, t],
                       function(param){
                        var
                         arg1_306 = param[2],
                         arg0_305 = param[1],
                         res0_307 = caml_call1(Core[356], arg0_305),
                         res1_308 =
                           sexp_of_t(function(param){return _bQ_;}, arg1_306);
                        return [1, [0, res0_307, [0, res1_308, 0]]];
                       });
             });
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Kind);
   var
    Incremental_Kind =
      [0,
       invariant,
       sexp_of_t,
       name,
       initial_num_children,
       slow_get_child,
       1,
       0,
       1,
       1,
       iteri_children];
   runtime.caml_register_global(223, Incremental_Kind, cst_Incremental_Kind);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Node
//# unitInfo: Requires: Assert_failure, Base__Backtrace, Base__Field, Base__Invariant, Core, Core__Hash_set, Core__Info, Core__Int, Core__List, Core__String, Expect_test_collector, Incremental__Bind, Incremental__Cutoff, Incremental__Dot_user_info, Incremental__Expert, Incremental__Import, Incremental__Kind, Incremental__Node_id, Incremental__On_update_handler, Incremental__Scope, Incremental__Stabilization_num, Incremental__Types, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdio__Out_channel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "  ",
    cst_rankdir_BT = "  rankdir = BT\n",
    cst$1 = " -> ",
    cst_Incremental_Node = "Incremental__Node",
    cst$2 = "_",
    cst_changed_at = "changed_at",
    cst_created_in = "created_in",
    cst_cutoff = "cutoff",
    cst_digraph_G = "digraph G {\n",
    cst_height = "height",
    cst_height_in_adjust_heights_h = "height_in_adjust_heights_heap",
    cst_height_in_recompute_heap = "height_in_recompute_heap",
    cst_id = "id",
    cst_incremental = "incremental",
    cst_kind = "kind",
    cst_my_child_index_in_parent_a = "my_child_index_in_parent_at_index",
    cst_my_parent_index_in_child_a = "my_parent_index_in_child_at_index",
    cst_next_in_adjust_heights_hea = "next_in_adjust_heights_heap",
    cst_next_in_recompute_heap = "next_in_recompute_heap",
    cst_next_node_in_same_scope = "next_node_in_same_scope",
    cst_num_on_update_handlers = "num_on_update_handlers",
    cst_num_parents = "num_parents",
    cst_observers = "observers",
    cst_old_value_opt = "old_value_opt",
    cst_parent0 = "parent0",
    cst_parent1_and_beyond = "parent1_and_beyond",
    cst_prev_in_recompute_heap = "prev_in_recompute_heap",
    cst_recomputed_at = "recomputed_at",
    cst_src_node_ml = "src/node.ml",
    cst_value_opt = "value_opt",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos$4 = "src/node.ml:331:27",
    pos$3 = "src/node.ml:343:24",
    pos$2 = "src/node.ml:350:22",
    pos$1 = "src/node.ml:411:29",
    pos$0 = "src/node.ml:429:26",
    pos = "src/node.ml:293:15",
    cst = "",
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Core_Hash_set = global_data.Core__Hash_set,
    Core = global_data.Core,
    Incremental_Bind = global_data.Incremental__Bind,
    Incremental_Node_id = global_data.Incremental__Node_id,
    Core_List = global_data.Core__List,
    Core_String = global_data.Core__String,
    Incremental_Kind = global_data.Incremental__Kind,
    Incremental_Dot_user_info = global_data.Incremental__Dot_user_info,
    Incremental_Types = global_data.Incremental__Types,
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Core_Int = global_data.Core__Int,
    Base_Backtrace = global_data.Base__Backtrace,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_Cutoff = global_data.Incremental__Cutoff,
    Incremental_Scope = global_data.Incremental__Scope,
    Incremental_On_update_handler = global_data.Incremental__On_update_handler,
    Incremental_Expert = global_data.Incremental__Expert,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Core_Info = global_data.Core__Info,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Node);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_node_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function my_child_index_in_parent_at_in(r){return r[25];}
   function set_my_child_index_in_parent_a(r, v){r[25] = v; return 0;}
   function my_parent_index_in_child_at_in(r){return r[24];}
   function set_my_parent_index_in_child_a(r, v){r[24] = v; return 0;}
   function observers(r){return r[21];}
   function set_observers(r, v){r[21] = v; return 0;}
   function old_value_opt(r){return r[20];}
   function set_old_value_opt(r, v){r[20] = v; return 0;}
   function next_in_adjust_heights_heap(r){return r[19];}
   function set_next_in_adjust_heights_hea(r, v){r[19] = v; return 0;}
   function height_in_adjust_heights_heap(r){return r[18];}
   function set_height_in_adjust_heights_h(r, v){r[18] = v; return 0;}
   function next_in_recompute_heap(r){return r[17];}
   function set_next_in_recompute_heap(r, v){r[17] = v; return 0;}
   function prev_in_recompute_heap(r){return r[16];}
   function set_prev_in_recompute_heap(r, v){r[16] = v; return 0;}
   function height_in_recompute_heap(r){return r[15];}
   function set_height_in_recompute_heap(r, v){r[15] = v; return 0;}
   function height(r){return r[14];}
   function set_height(r, v){r[14] = v; return 0;}
   function next_node_in_same_scope(r){return r[13];}
   function set_next_node_in_same_scope(r, v){r[13] = v; return 0;}
   function created_in(r){return r[12];}
   function set_created_in(r, v){r[12] = v; return 0;}
   function parent0(r){return r[11];}
   function set_parent0(r, v){r[11] = v; return 0;}
   function parent1_and_beyond(r){return r[10];}
   function set_parent1_and_beyond(r, v){r[10] = v; return 0;}
   function num_parents(r){return r[9];}
   function set_num_parents(r, v){r[9] = v; return 0;}
   function num_on_update_handlers(r){return r[8];}
   function set_num_on_update_handlers(r, v){r[8] = v; return 0;}
   function changed_at(r){return r[7];}
   function set_changed_at(r, v){r[7] = v; return 0;}
   function cutoff(r){return r[6];}
   function set_cutoff(r, v){r[6] = v; return 0;}
   function kind(r){return r[5];}
   function set_kind(r, v){r[5] = v; return 0;}
   function value_opt(r){return r[4];}
   function set_value_opt(r, v){r[4] = v; return 0;}
   function recomputed_at(r){return r[3];}
   function set_recomputed_at(r, v){r[3] = v; return 0;}
   function id(r){return r[1];}
   var
    my_child_index_in_parent_at_in$0 =
      [0,
       function(param){return 0;},
       cst_my_child_index_in_parent_a,
       [0, set_my_child_index_in_parent_a],
       my_child_index_in_parent_at_in,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                v,
                r[26],
                r[27],
                r[28]];
       }],
    my_parent_index_in_child_at_in$0 =
      [0,
       function(param){return 0;},
       cst_my_parent_index_in_child_a,
       [0, set_my_parent_index_in_child_a],
       my_parent_index_in_child_at_in,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                v,
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    observers$0 =
      [0,
       function(param){return 0;},
       cst_observers,
       [0, set_observers],
       observers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                v,
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    old_value_opt$0 =
      [0,
       function(param){return 0;},
       cst_old_value_opt,
       [0, set_old_value_opt],
       old_value_opt,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                v,
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    next_in_adjust_heights_heap$0 =
      [0,
       function(param){return 0;},
       cst_next_in_adjust_heights_hea,
       [0, set_next_in_adjust_heights_hea],
       next_in_adjust_heights_heap,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                v,
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    height_in_adjust_heights_heap$0 =
      [0,
       function(param){return 0;},
       cst_height_in_adjust_heights_h,
       [0, set_height_in_adjust_heights_h],
       height_in_adjust_heights_heap,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                v,
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    next_in_recompute_heap$0 =
      [0,
       function(param){return 0;},
       cst_next_in_recompute_heap,
       [0, set_next_in_recompute_heap],
       next_in_recompute_heap,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                v,
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    prev_in_recompute_heap$0 =
      [0,
       function(param){return 0;},
       cst_prev_in_recompute_heap,
       [0, set_prev_in_recompute_heap],
       prev_in_recompute_heap,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                v,
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    height_in_recompute_heap$0 =
      [0,
       function(param){return 0;},
       cst_height_in_recompute_heap,
       [0, set_height_in_recompute_heap],
       height_in_recompute_heap,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                v,
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    height$0 =
      [0,
       function(param){return 0;},
       cst_height,
       [0, set_height],
       height,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                v,
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    next_node_in_same_scope$0 =
      [0,
       function(param){return 0;},
       cst_next_node_in_same_scope,
       [0, set_next_node_in_same_scope],
       next_node_in_same_scope,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                v,
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    created_in$0 =
      [0,
       function(param){return 0;},
       cst_created_in,
       [0, set_created_in],
       created_in,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                v,
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    parent0$0 =
      [0,
       function(param){return 0;},
       cst_parent0,
       [0, set_parent0],
       parent0,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                v,
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    parent1_and_beyond$0 =
      [0,
       function(param){return 0;},
       cst_parent1_and_beyond,
       [0, set_parent1_and_beyond],
       parent1_and_beyond,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                v,
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    num_parents$0 =
      [0,
       function(param){return 0;},
       cst_num_parents,
       [0, set_num_parents],
       num_parents,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                v,
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    num_on_update_handlers$0 =
      [0,
       function(param){return 0;},
       cst_num_on_update_handlers,
       [0, set_num_on_update_handlers],
       num_on_update_handlers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                v,
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    changed_at$0 =
      [0,
       function(param){return 0;},
       cst_changed_at,
       [0, set_changed_at],
       changed_at,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                v,
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    cutoff$0 =
      [0,
       function(param){return 0;},
       cst_cutoff,
       [0, set_cutoff],
       cutoff,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                v,
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    kind$0 =
      [0,
       function(param){return 0;},
       cst_kind,
       [0, set_kind],
       kind,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                v,
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    value_opt$0 =
      [0,
       function(param){return 0;},
       cst_value_opt,
       [0, set_value_opt],
       value_opt,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                v,
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    recomputed_at$0 =
      [0,
       function(param){return 0;},
       cst_recomputed_at,
       [0, set_recomputed_at],
       recomputed_at,
       function(r, v){
        return [0,
                r[1],
                r[2],
                v,
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    id$0 =
      [0,
       function(param){return 0;},
       cst_id,
       0,
       id,
       function(r, v){
        return [0,
                v,
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27],
                r[28]];
       }],
    _a_ = [0, "creation_backtrace"],
    _b_ = [0, "user_info"],
    _c_ = [0, "force_necessary"],
    _d_ = [0, cst_my_child_index_in_parent_a],
    _e_ = [0, cst_my_parent_index_in_child_a],
    _f_ = [0, "on_update_handlers"],
    _g_ = [0, "is_in_handle_after_stabilization"],
    _h_ = [0, cst_observers],
    _i_ = [0, cst_old_value_opt],
    _j_ = [0, cst_next_in_adjust_heights_hea],
    _k_ = [0, cst_height_in_adjust_heights_h],
    _l_ = [0, cst_next_in_recompute_heap],
    _m_ = [0, cst_prev_in_recompute_heap],
    _n_ = [0, cst_height_in_recompute_heap],
    _o_ = [0, cst_height],
    _p_ = [0, cst_next_node_in_same_scope],
    _q_ = [0, cst_created_in],
    _r_ = [0, cst_parent0],
    _s_ = [0, cst_parent1_and_beyond],
    _t_ = [0, cst_num_parents],
    _u_ = [0, cst_num_on_update_handlers],
    _v_ = [0, cst_changed_at],
    _w_ = [0, cst_cutoff],
    _x_ = [0, cst_kind],
    _y_ = [0, cst_value_opt],
    _z_ = [0, cst_recomputed_at],
    _A_ = [0, "state"],
    _B_ = [0, cst_id];
   function sexp_of_t(of_a_001, param){
    var
     state_005 = param[2],
     id_003 = param[1],
     recomputed_at_007 = param[3],
     value_opt_009 = param[4],
     kind_011 = param[5],
     cutoff_013 = param[6],
     changed_at_015 = param[7],
     num_on_update_handlers_017 = param[8],
     num_parents_019 = param[9],
     parent1_and_beyond_021 = param[10],
     parent0_023 = param[11],
     created_in_025 = param[12],
     next_node_in_same_scope_027 = param[13],
     height_029 = param[14],
     height_in_recompute_heap_031 = param[15],
     prev_in_recompute_heap_033 = param[16],
     next_in_recompute_heap_035 = param[17],
     height_in_adjust_heights_heap_ = param[18],
     next_in_adjust_heights_heap_03 = param[19],
     old_value_opt_041 = param[20],
     observers_043 = param[21],
     is_in_handle_after_stabilizati = param[22],
     on_update_handlers_047 = param[23],
     my_parent_index_in_child_at_in = param[24],
     my_child_index_in_parent_at_in = param[25],
     force_necessary_053 = param[26],
     user_info_055 = param[27],
     creation_backtrace_057 = param[28],
     arg_058 =
       caml_call2(Core[454], Base_Backtrace[1], creation_backtrace_057),
     bnds_002 = [0, [1, [0, _a_, [0, arg_058, 0]]], 0],
     arg_056 =
       caml_call2(Core[454], Incremental_Dot_user_info[3], user_info_055),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_056, 0]]], bnds_002],
     arg_054 = caml_call1(Core[305], force_necessary_053),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_054, 0]]], bnds_002$0],
     arg_052 =
       caml_call2(Core[288], Core[356], my_child_index_in_parent_at_in),
     bnds_002$2 = [0, [1, [0, _d_, [0, arg_052, 0]]], bnds_002$1],
     arg_050 =
       caml_call2(Core[288], Core[356], my_parent_index_in_child_at_in),
     bnds_002$3 = [0, [1, [0, _e_, [0, arg_050, 0]]], bnds_002$2],
     _b4_ = caml_call1(Incremental_On_update_handler[2], of_a_001),
     arg_048 = caml_call2(Core[421], _b4_, on_update_handlers_047),
     bnds_002$4 = [0, [1, [0, _f_, [0, arg_048, 0]]], bnds_002$3],
     arg_046 = caml_call1(Core[305], is_in_handle_after_stabilizati),
     bnds_002$5 = [0, [1, [0, _g_, [0, arg_046, 0]]], bnds_002$4],
     arg_044 =
       caml_call2
        (Incremental_Import[16][1], Sexplib0_Sexp_conv[23], observers_043),
     bnds_002$6 = [0, [1, [0, _h_, [0, arg_044, 0]]], bnds_002$5],
     arg_042 =
       caml_call2(Incremental_Import[16][1], of_a_001, old_value_opt_041),
     bnds_002$7 = [0, [1, [0, _i_, [0, arg_042, 0]]], bnds_002$6],
     arg_040 =
       caml_call2
        (Incremental_Import[16][1],
         Incremental_Types[15][2][1],
         next_in_adjust_heights_heap_03),
     bnds_002$8 = [0, [1, [0, _j_, [0, arg_040, 0]]], bnds_002$7],
     arg_038 = caml_call1(Core[356], height_in_adjust_heights_heap_),
     bnds_002$9 = [0, [1, [0, _k_, [0, arg_038, 0]]], bnds_002$8],
     arg_036 =
       caml_call2
        (Incremental_Import[16][1],
         Incremental_Types[15][2][1],
         next_in_recompute_heap_035),
     bnds_002$10 = [0, [1, [0, _l_, [0, arg_036, 0]]], bnds_002$9],
     arg_034 =
       caml_call2
        (Incremental_Import[16][1],
         Incremental_Types[15][2][1],
         prev_in_recompute_heap_033),
     bnds_002$11 = [0, [1, [0, _m_, [0, arg_034, 0]]], bnds_002$10],
     arg_032 = caml_call1(Core[356], height_in_recompute_heap_031),
     bnds_002$12 = [0, [1, [0, _n_, [0, arg_032, 0]]], bnds_002$11],
     arg_030 = caml_call1(Core[356], height_029),
     bnds_002$13 = [0, [1, [0, _o_, [0, arg_030, 0]]], bnds_002$12],
     arg_028 =
       caml_call2
        (Incremental_Import[16][1],
         Incremental_Types[15][2][1],
         next_node_in_same_scope_027),
     bnds_002$14 = [0, [1, [0, _p_, [0, arg_028, 0]]], bnds_002$13],
     arg_026 = caml_call1(Incremental_Scope[1], created_in_025),
     bnds_002$15 = [0, [1, [0, _q_, [0, arg_026, 0]]], bnds_002$14],
     arg_024 =
       caml_call2
        (Incremental_Import[16][1], Incremental_Types[15][2][1], parent0_023),
     bnds_002$16 = [0, [1, [0, _r_, [0, arg_024, 0]]], bnds_002$15],
     _b5_ = caml_call1(Incremental_Import[16][1], Incremental_Types[15][2][1]),
     arg_022 =
       caml_call2(Incremental_Import[17][10], _b5_, parent1_and_beyond_021),
     bnds_002$17 = [0, [1, [0, _s_, [0, arg_022, 0]]], bnds_002$16],
     arg_020 = caml_call1(Core[356], num_parents_019),
     bnds_002$18 = [0, [1, [0, _t_, [0, arg_020, 0]]], bnds_002$17],
     arg_018 = caml_call1(Core[356], num_on_update_handlers_017),
     bnds_002$19 = [0, [1, [0, _u_, [0, arg_018, 0]]], bnds_002$18],
     arg_016 = caml_call1(Incremental_Stabilization_num[2], changed_at_015),
     bnds_002$20 = [0, [1, [0, _v_, [0, arg_016, 0]]], bnds_002$19],
     arg_014 = caml_call2(Incremental_Cutoff[1], of_a_001, cutoff_013),
     bnds_002$21 = [0, [1, [0, _w_, [0, arg_014, 0]]], bnds_002$20],
     arg_012 = caml_call2(Incremental_Kind[2], of_a_001, kind_011),
     bnds_002$22 = [0, [1, [0, _x_, [0, arg_012, 0]]], bnds_002$21],
     arg_010 = caml_call2(Incremental_Import[16][1], of_a_001, value_opt_009),
     bnds_002$23 = [0, [1, [0, _y_, [0, arg_010, 0]]], bnds_002$22],
     arg_008 = caml_call1(Incremental_Stabilization_num[2], recomputed_at_007),
     bnds_002$24 = [0, [1, [0, _z_, [0, arg_008, 0]]], bnds_002$23],
     arg_006 = caml_call1(Sexplib0_Sexp_conv[23], state_005),
     bnds_002$25 = [0, [1, [0, _A_, [0, arg_006, 0]]], bnds_002$24],
     arg_004 = caml_call1(Incremental_Node_id[1], id_003),
     bnds_002$26 = [0, [1, [0, _B_, [0, arg_004, 0]]], bnds_002$25];
    return [1, bnds_002$26];
   }
   function same(t1, t2){return caml_call2(Core[247], t1, t2);}
   var is_necessary = Incremental_Types[15][4];
   function iteri_children(t, f){
    return caml_call2(Incremental_Kind[10], t[5], f);
   }
   var
    is_valid = Incremental_Types[15][3],
    type_equal_if_phys_same = Incremental_Types[15][5],
    _C_ = [0, cst_src_node_ml, 145, 21],
    _D_ = [0, cst_src_node_ml, 235, 21],
    _E_ = [0, cst_src_node_ml, 299, 8],
    _F_ = [0, cst_src_node_ml, 298, 8],
    _G_ = [0, cst_src_node_ml, 300, 6],
    _H_ = [0, cst_src_node_ml, 304, 6],
    _I_ = [0, cst_src_node_ml, 303, 6],
    _J_ = [0, cst_src_node_ml, 302, 6],
    _K_ = [0, cst_src_node_ml, 433, 13],
    _L_ = [0, cst_src_node_ml, 442, 15],
    _M_ = [0, cst_src_node_ml, 417, 15],
    _N_ = [0, cst_src_node_ml, 426, 15],
    _O_ = [0, cst_src_node_ml, 402, 37],
    _P_ = [0, cst_src_node_ml, 399, 13],
    _Q_ = [0, cst_src_node_ml, 393, 13],
    _R_ = [0, cst_src_node_ml, 392, 13],
    _S_ = [0, cst_src_node_ml, 388, 16],
    _T_ = [0, cst_src_node_ml, 384, 16],
    _U_ = [0, cst_src_node_ml, 380, 13],
    _V_ = [0, cst_src_node_ml, 379, 13],
    _W_ = [0, cst_src_node_ml, 375, 16],
    _X_ = [0, cst_src_node_ml, 371, 13],
    _Y_ = [0, cst_src_node_ml, 370, 13],
    _Z_ = [0, cst_src_node_ml, 366, 16],
    ___ = [0, cst_src_node_ml, 362, 11],
    _$_ = [0, cst_src_node_ml, 361, 11],
    _aa_ = [0, cst_src_node_ml, 358, 34],
    _ab_ = [0, cst_src_node_ml, 358, 60],
    _ac_ = [0, cst_src_node_ml, 355, 16],
    _ad_ = [0, cst_src_node_ml, 339, 11],
    _ae_ = [0, cst_src_node_ml, 338, 11],
    _af_ = [0, cst_src_node_ml, 328, 16],
    _ag_ = [0, cst_src_node_ml, 312, 50],
    _ah_ = [0, cst_src_node_ml, 296, 6],
    _ai_ = [0, cst$2],
    _aj_ = [0, cst_src_node_ml, 292, 11852, 11874],
    _ak_ = [0, cst$2],
    cst_attempt_to_get_value_of_an = "attempt to get value of an invalid node",
    _al_ = [0, cst_src_node_ml, 452, 18787, 18810],
    _am_ = [0, cst_src_node_ml, 492, 33],
    _an_ = [0, cst_src_node_ml, 485, 14],
    _ao_ = [0, cst_src_node_ml, 473, 12],
    _ap_ = [0, cst_src_node_ml, 557, 16],
    _aq_ = [0, cst_src_node_ml, 568, 16],
    _ar_ = [0, cst_src_node_ml, 564, 18],
    _as_ = [0, cst_src_node_ml, 610, 16],
    _at_ = [0, cst_src_node_ml, 608, 16],
    _au_ = [0, cst_src_node_ml, 641, 4],
    _av_ = [0, cst_src_node_ml, 639, 4],
    _aw_ = [0, cst_src_node_ml, 630, 4],
    _ax_ = [0, cst_src_node_ml, 629, 4],
    _ay_ = [0, cst$2];
   function user_info(t){
    var _b2_ = t[27];
    if(! _b2_) return 0;
    var other = _b2_[1];
    if(1 === other[0]){var i = other[1]; return [0, i];}
    var _b3_ = caml_call1(Incremental_Dot_user_info[3], other);
    return [0, caml_call1(Core_Info[18], _b3_)];
   }
   function set_user_info(t, info){
    if(info) var i = info[1], _b1_ = [0, [1, i]]; else var _b1_ = 0;
    t[27] = _b1_;
    return 0;
   }
   function append_user_info_graphviz(t, label, attrs){
    var
     new$0 = caml_call2(Incremental_Dot_user_info[5], label, attrs),
     match = t[27];
    if(match)
     var
      other = match[1],
      _b0_ = [0, caml_call2(Incremental_Dot_user_info[7], other, new$0)];
    else
     var _b0_ = [0, new$0];
    t[27] = _b0_;
    return 0;
   }
   function edge_is_stale(child, parent){
    var
     _bZ_ = caml_call2(Incremental_Stabilization_num[1], child[7], parent[3]);
    return caml_call2(Incremental_Import[4], _bZ_, 0);
   }
   function is_stale_with_respect_to_a_chi(t){
    var is_stale = [0, 0];
    iteri_children
     (t,
      function(param, child){
       var
        _bX_ = edge_is_stale(child, t),
        _bY_ = _bX_ ? (is_stale[1] = 1, 0) : _bX_;
       return _bY_;
      });
    return is_stale[1];
   }
   function is_stale(t){
    var _bQ_ = t[5];
    if(typeof _bQ_ === "number"){
     if(0 === _bQ_) return 0;
     throw caml_maybe_attach_backtrace([0, Assert_failure, _C_], 1);
    }
    switch(_bQ_[0]){
      case 1:
       return caml_call1(Incremental_Stabilization_num[7], t[3]);
      case 2:
       return caml_call1(Incremental_Stabilization_num[7], t[3]);
      case 3:
       var _bS_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
       return _bS_ ? _bS_ : is_stale_with_respect_to_a_chi(t);
      case 5:
       return caml_call1(Incremental_Stabilization_num[7], t[3]);
      case 6:
       var force_stale = _bQ_[1][5];
       if(force_stale)
        var force_stale$0 = force_stale;
       else{
        var _bT_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
        if(! _bT_) return is_stale_with_respect_to_a_chi(t);
        var force_stale$0 = _bT_;
       }
       return force_stale$0;
      case 8:
       var _bU_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
       return _bU_ ? _bU_ : is_stale_with_respect_to_a_chi(t);
      case 10:
       var _bV_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
       return _bV_ ? _bV_ : is_stale_with_respect_to_a_chi(t);
      case 13:
       return caml_call1(Incremental_Stabilization_num[7], t[3]);
      case 16:
       var
        set_at = _bQ_[1][3],
        _bW_ = caml_call2(Incremental_Stabilization_num[1], set_at, t[3]);
       return caml_call2(Incremental_Import[4], _bW_, 0);
      default:
       var _bR_ = caml_call1(Incremental_Stabilization_num[7], t[3]);
       return _bR_ ? _bR_ : is_stale_with_respect_to_a_chi(t);
    }
   }
   function needs_to_be_computed(t){
    var _bP_ = caml_call1(is_necessary, t);
    return _bP_ ? is_stale(t) : _bP_;
   }
   function is_in_recompute_heap(t){
    return caml_call2(Incremental_Import[1], t[15], 0);
   }
   function is_in_adjust_heights_heap(t){
    return caml_call2(Incremental_Import[1], t[18], 0);
   }
   function get_parent(t, index){
    var
     _bO_ =
       caml_call2(Incremental_Import[3], index, 0)
        ? t[11]
        : caml_call2(Incremental_Import[17][19], t[10], index - 1 | 0);
    return caml_call1(Incremental_Import[16][7], _bO_);
   }
   function iteri_parents(t, f){
    if(caml_call2(Incremental_Import[4], t[9], 0)){
     caml_call2(f, 0, caml_call1(Incremental_Import[16][7], t[11]));
     var _bL_ = t[9] - 1 | 0, _bK_ = 1;
     if(_bL_ >= 1){
      var index = _bK_;
      for(;;){
       var
        _bM_ = caml_call2(Incremental_Import[17][19], t[10], index - 1 | 0);
       caml_call2(f, index, caml_call1(Incremental_Import[16][7], _bM_));
       var _bN_ = index + 1 | 0;
       if(_bL_ === index) break;
       index = _bN_;
      }
     }
    }
    return;
   }
   function has_child(t, child){
    var has = [0, 0];
    iteri_children
     (t,
      function(param, child$0){
       var _bI_ = has[1], _bJ_ = _bI_ || same(child, child$0);
       has[1] = _bJ_;
       return 0;
      });
    return has[1];
   }
   function has_parent(t, parent){
    var has = [0, 0];
    iteri_parents
     (t,
      function(param, parent$0){
       var _bG_ = has[1], _bH_ = _bG_ || same(parent, parent$0);
       has[1] = _bH_;
       return 0;
      });
    return has[1];
   }
   function should_be_invalidated(t){
    var _bD_ = t[5];
    if(typeof _bD_ !== "number")
     switch(_bD_[0]){
       case 1:
        return 0;
       case 2:
        return 0;
       case 3:
        var lhs = _bD_[1][3]; return 1 - caml_call1(is_valid, lhs);
       case 4:
        var lhs_change = _bD_[1][4];
        return 1 - caml_call1(is_valid, lhs_change);
       case 6:
        return 0;
       case 8:
        var test = _bD_[1][2]; return 1 - caml_call1(is_valid, test);
       case 9:
        var test_change = _bD_[1][3];
        return 1 - caml_call1(is_valid, test_change);
       case 10:
        var lhs$0 = _bD_[1][2]; return 1 - caml_call1(is_valid, lhs$0);
       case 11:
        var lhs_change$0 = _bD_[1][3];
        return 1 - caml_call1(is_valid, lhs_change$0);
       case 5:
       case 13:
       case 16:
        return 0;
       default:
        var has = [0, 0];
        iteri_children
         (t,
          function(param, child){
           var _bE_ = has[1], _bF_ = _bE_ || 1 - caml_call1(is_valid, child);
           has[1] = _bF_;
           return 0;
          });
        return has[1];
     }
    if(0 === _bD_) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _D_], 1);
   }
   function fold_observers(t, init, f){
    var r = [0, t[21]], ac = [0, init];
    for(;;){
     if(! caml_call1(Incremental_Import[16][6], r[1])) return ac[1];
     var observer = caml_call1(Incremental_Import[16][7], r[1]);
     r[1] = observer[7];
     ac[1] = caml_call2(f, ac[1], observer);
    }
   }
   function invariant(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _aj_,
             t,
             function(x_059){
              return sexp_of_t(function(param){return _ai_;}, x_059);
             },
             function(param){
              var
               t2 = is_in_recompute_heap(t),
               t1 = needs_to_be_computed(t),
               sexpifier = Core[305];
              function comparator(a_060, b_061){
               return caml_call2(Core[301], a_060, b_061);
              }
              caml_call8
               (Ppx_assert_lib_Runtime[2],
                pos,
                sexpifier,
                comparator,
                0,
                0,
                0,
                t1,
                t2);
              if(caml_call1(is_necessary, t)){
               var _bf_ = caml_call1(Incremental_Scope[5], t[12]);
               if(! caml_call2(Incremental_Import[4], t[14], _bf_))
                throw caml_maybe_attach_backtrace
                       ([0, Assert_failure, _ah_], 1);
               iteri_children
                (t,
                 function(param, child){
                  if(! caml_call2(Incremental_Import[4], t[14], child[14]))
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _F_], 1);
                  if(has_parent(child, t)) return 0;
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _E_], 1);
                 });
               if(should_be_invalidated(t))
                throw caml_maybe_attach_backtrace([0, Assert_failure, _G_], 1);
              }
              iteri_parents
               (t,
                function(param, parent){
                 if(! has_child(parent, t))
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _J_], 1);
                 if(! caml_call1(is_necessary, parent))
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, _I_], 1);
                 if(caml_call2(Incremental_Import[5], t[14], parent[14]))
                  return 0;
                 throw caml_maybe_attach_backtrace
                        ([0, Assert_failure, _H_], 1);
                });
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               my_child_index_in_parent_at_in =
                 check
                  (function(my_child_index_in_parent_at_in){
                    var
                     got = my_child_index_in_parent_at_in.length - 1,
                     expect =
                       caml_call1(Incremental_Import[17][18], t[10]) + 1 | 0,
                     sexpifier = Core[356];
                    function comparator(a_070, b_071){
                     return caml_call2(Core[352], a_070, b_071);
                    }
                    caml_call8
                     (Ppx_assert_lib_Runtime[3],
                      pos$0,
                      sexpifier,
                      comparator,
                      0,
                      0,
                      0,
                      expect,
                      got);
                    iteri_parents
                     (t,
                      function(parent_index, param){
                       var
                        _bC_ =
                          caml_check_bound
                            (my_child_index_in_parent_at_in, parent_index)
                           [1 + parent_index],
                        t2 = caml_call2(Incremental_Kind[5], param[5], _bC_);
                       if(same(t, t2)) return 0;
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _K_], 1);
                      });
                    var
                     _bA_ = Incremental_Import[11],
                     _bB_ = _bA_ ? 1 - caml_call1(is_necessary, t) : _bA_;
                    return _bB_
                            ? caml_call2
                              (Incremental_Import[15][22],
                               my_child_index_in_parent_at_in,
                               function(x){
                                if(caml_call2(Incremental_Import[3], x, -1)) return 0;
                                throw caml_maybe_attach_backtrace
                                       ([0, Assert_failure, _L_], 1);
                               })
                            : _bB_;
                   }),
               my_parent_index_in_child_at_in =
                 check
                  (function(my_parent_index_in_child_at_in){
                    var _bx_ = t[5];
                    a:
                    {
                     if(typeof _bx_ !== "number" && 6 === _bx_[0]) break a;
                     var
                      got = my_parent_index_in_child_at_in.length - 1,
                      expect = caml_call1(Incremental_Kind[4], t[5]),
                      sexpifier = Core[356],
                      comparator =
                        function(a_068, b_069){
                         return caml_call2(Core[352], a_068, b_069);
                        };
                     caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$1,
                       sexpifier,
                       comparator,
                       0,
                       0,
                       0,
                       expect,
                       got);
                    }
                    if(caml_call1(is_necessary, t))
                     iteri_children
                      (t,
                       function(child_index, param){
                        var
                         t2 =
                           get_parent
                            (param,
                             caml_check_bound
                               (my_parent_index_in_child_at_in, child_index)
                              [1 + child_index]);
                        if(same(t, t2)) return 0;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _M_], 1);
                       });
                    var
                     _by_ = Incremental_Import[11],
                     _bz_ = _by_ ? 1 - caml_call1(is_necessary, t) : _by_;
                    return _bz_
                            ? caml_call2
                              (Incremental_Import[15][22],
                               my_parent_index_in_child_at_in,
                               function(x){
                                if(caml_call2(Incremental_Import[3], x, -1)) return 0;
                                throw caml_maybe_attach_backtrace
                                       ([0, Assert_failure, _N_], 1);
                               })
                            : _bz_;
                   }),
               observers_fun =
                 check
                  (function(param){
                    return fold_observers
                            (t,
                             0,
                             function(param, observer){
                              var state = observer[1], observing = observer[2];
                              if(! caml_call2(Core[246], t, observing))
                               throw caml_maybe_attach_backtrace
                                      ([0, Assert_failure, _P_], 1);
                              if(1 < state - 1 >>> 0)
                               throw caml_maybe_attach_backtrace
                                      ([0, Assert_failure, _O_], 1);
                              return 0;
                             });
                   }),
               old_value_opt_fun =
                 check(caml_call1(Incremental_Import[16][2], invariant_a)),
               next_in_adjust_heights_heap_fu =
                 check
                  (function(next_in_adjust_heights_heap){
                    if(is_in_adjust_heights_heap(t)){
                     var
                      _bw_ =
                        caml_call1
                         (Incremental_Import[16][6], next_in_adjust_heights_heap);
                     if(! _bw_) return _bw_;
                     var
                      next =
                        caml_call1
                         (Incremental_Import[16][7], next_in_adjust_heights_heap);
                     if(! is_in_adjust_heights_heap(next))
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _R_], 1);
                     if(caml_call2(Incremental_Import[3], t[18], next[18]))
                      return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _Q_], 1);
                    }
                    if
                     (caml_call1
                       (Incremental_Import[16][5], next_in_adjust_heights_heap))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _S_], 1);
                   }),
               height_in_adjust_heights_heap_ =
                 check
                  (function(height_in_adjust_heights_heap){
                    var
                     _bv_ =
                       caml_call2
                        (Incremental_Import[1], height_in_adjust_heights_heap, 0);
                    if(! _bv_) return _bv_;
                    if
                     (caml_call2
                       (Incremental_Import[5],
                        height_in_adjust_heights_heap,
                        t[14]))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _T_], 1);
                   }),
               next_in_recompute_heap_fun =
                 check
                  (function(next_in_recompute_heap){
                    if
                     (1 - is_in_recompute_heap(t)
                      &&
                       !
                       caml_call1
                        (Incremental_Import[16][5], next_in_recompute_heap))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _W_], 1);
                    var
                     _bu_ =
                       caml_call1
                        (Incremental_Import[16][6], next_in_recompute_heap);
                    if(! _bu_) return _bu_;
                    var
                     next =
                       caml_call1
                        (Incremental_Import[16][7], next_in_recompute_heap),
                     t2 = caml_call1(Incremental_Import[16][7], next[16]);
                    if(! same(t, t2))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _V_], 1);
                    if(caml_call2(Incremental_Import[3], t[15], next[15]))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _U_], 1);
                   }),
               prev_in_recompute_heap_fun =
                 check
                  (function(prev_in_recompute_heap){
                    if
                     (1 - is_in_recompute_heap(t)
                      &&
                       !
                       caml_call1
                        (Incremental_Import[16][5], prev_in_recompute_heap))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _Z_], 1);
                    var
                     _bt_ =
                       caml_call1
                        (Incremental_Import[16][6], prev_in_recompute_heap);
                    if(! _bt_) return _bt_;
                    var
                     prev =
                       caml_call1
                        (Incremental_Import[16][7], prev_in_recompute_heap),
                     t2 = caml_call1(Incremental_Import[16][7], prev[17]);
                    if(! same(t, t2))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _Y_], 1);
                    if(caml_call2(Incremental_Import[3], t[15], prev[15]))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _X_], 1);
                   }),
               height_in_recompute_heap_fun =
                 check
                  (function(height_in_recompute_heap){
                    if
                     (!
                      caml_call2
                       (Incremental_Import[1], height_in_recompute_heap, -1))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _$_], 1);
                    if
                     (caml_call2
                       (Incremental_Import[2], height_in_recompute_heap, t[14]))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, ___], 1);
                   }),
               height_fun =
                 check
                  (function(height){
                    if(caml_call1(is_necessary, t)){
                     if(caml_call2(Incremental_Import[1], height, 0)) return 0;
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _aa_], 1);
                    }
                    if(caml_call2(Incremental_Import[3], height, -1)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _ab_], 1);
                   }),
               next_node_in_same_scope_fun =
                 check
                  (function(next_node_in_same_scope){
                    var
                     _br_ = caml_call1(Incremental_Scope[4], t[12]),
                     _bs_ = _br_ || 1 - caml_call1(is_valid, t);
                    if(! _bs_) return _bs_;
                    if
                     (caml_call1
                       (Incremental_Import[16][5], next_node_in_same_scope))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _ac_], 1);
                   }),
               created_in_fun = check(Incremental_Scope[2]),
               parent0_fun =
                 check
                  (function(parent0){
                    var
                     t2 = caml_call1(Incremental_Import[16][6], parent0),
                     t1 = caml_call2(Incremental_Import[4], t[9], 0),
                     sexpifier = Core[305];
                    function comparator(a_066, b_067){
                     return caml_call2(Core[301], a_066, b_067);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[2],
                             pos$2,
                             sexpifier,
                             comparator,
                             0,
                             0,
                             0,
                             t1,
                             t2);
                   }),
               parent1_and_beyond_fun =
                 check
                  (function(parent1_and_beyond){
                    var
                     _bo_ =
                       caml_call1(Incremental_Import[17][18], parent1_and_beyond),
                     _bn_ = 1;
                    if(_bo_ >= 1){
                     var parent_index = _bn_;
                     for(;;){
                      var
                       _bp_ =
                         caml_call2
                          (Incremental_Import[17][19],
                           parent1_and_beyond,
                           parent_index - 1 | 0),
                       t2 = caml_call1(Incremental_Import[16][6], _bp_),
                       t1 = caml_call2(Incremental_Import[5], parent_index, t[9]),
                       sexpifier = Core[305],
                       comparator =
                         function(a_064, b_065){
                          return caml_call2(Core[301], a_064, b_065);
                         };
                      caml_call8
                       (Ppx_assert_lib_Runtime[2],
                        pos$3,
                        sexpifier,
                        comparator,
                        0,
                        0,
                        0,
                        t1,
                        t2);
                      var _bq_ = parent_index + 1 | 0;
                      if(_bo_ === parent_index) break;
                      parent_index = _bq_;
                     }
                    }
                    return 0;
                   }),
               num_parents_fun =
                 check
                  (function(num_parents){
                    if(! caml_call2(Incremental_Import[1], num_parents, 0))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _ae_], 1);
                    var
                     _bm_ = 1 + caml_call1(Incremental_Import[17][18], t[10]) | 0;
                    if(caml_call2(Incremental_Import[2], num_parents, _bm_))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _ad_], 1);
                   }),
               _bg_ =
                 fold_observers
                  (t,
                   0,
                   function(n, param){
                    var on_update_handlers = param[3];
                    return n + caml_call1(Core_List[7], on_update_handlers) | 0;
                   }),
               expect = caml_call1(Core_List[7], t[23]) + _bg_ | 0,
               num_on_update_handlers_fun =
                 check
                  (function(eta){
                    var sexpifier = Core[356];
                    function comparator(a_062, b_063){
                     return caml_call2(Core[352], a_062, b_063);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos$4,
                             sexpifier,
                             comparator,
                             0,
                             0,
                             0,
                             expect,
                             eta);
                   }),
               changed_at_fun =
                 check
                  (function(changed_at){
                    caml_call1(Incremental_Stabilization_num[4], changed_at);
                    var
                     _bk_ = caml_call1(Incremental_Stabilization_num[8], t[3]);
                    if(! _bk_) return _bk_;
                    var
                     _bl_ =
                       caml_call2
                        (Incremental_Stabilization_num[1], changed_at, t[3]);
                    if(caml_call2(Incremental_Import[2], _bl_, 0)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _af_], 1);
                   }),
               cutoff_fun =
                 check(caml_call1(Incremental_Cutoff[2], invariant_a)),
               kind_fun =
                 check
                  (function(kind){
                    caml_call2(Incremental_Kind[1], invariant_a, kind);
                    if(typeof kind !== "number" && 6 === kind[0]){
                     var e = kind[1], _bj_ = caml_call1(is_necessary, t);
                     return caml_call2(Incremental_Expert[4], e, _bj_);
                    }
                    return 0;
                   }),
               value_opt_fun =
                 check
                  (function(value_opt){
                    var
                     _bh_ = caml_call1(is_valid, t),
                     _bi_ = _bh_ ? 1 - is_stale(t) : _bh_;
                    if
                     (_bi_ && ! caml_call1(Incremental_Import[16][6], value_opt))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _ag_], 1);
                    return caml_call2
                            (Incremental_Import[16][2], invariant_a, value_opt);
                   }),
               recomputed_at_fun = check(Incremental_Stabilization_num[4]),
               id_fun = check(Incremental_Node_id[9]);
              caml_call1(id_fun, id$0);
              caml_call1(recomputed_at_fun, recomputed_at$0);
              caml_call1(value_opt_fun, value_opt$0);
              caml_call1(kind_fun, kind$0);
              caml_call1(cutoff_fun, cutoff$0);
              caml_call1(changed_at_fun, changed_at$0);
              caml_call1(num_on_update_handlers_fun, num_on_update_handlers$0);
              caml_call1(num_parents_fun, num_parents$0);
              caml_call1(parent1_and_beyond_fun, parent1_and_beyond$0);
              caml_call1(parent0_fun, parent0$0);
              caml_call1(created_in_fun, created_in$0);
              caml_call1
               (next_node_in_same_scope_fun, next_node_in_same_scope$0);
              caml_call1(height_fun, height$0);
              caml_call1
               (height_in_recompute_heap_fun, height_in_recompute_heap$0);
              caml_call1(prev_in_recompute_heap_fun, prev_in_recompute_heap$0);
              caml_call1(next_in_recompute_heap_fun, next_in_recompute_heap$0);
              caml_call1
               (height_in_adjust_heights_heap_,
                height_in_adjust_heights_heap$0);
              caml_call1
               (next_in_adjust_heights_heap_fu, next_in_adjust_heights_heap$0);
              caml_call1(old_value_opt_fun, old_value_opt$0);
              caml_call1(observers_fun, observers$0);
              caml_call1
               (my_parent_index_in_child_at_in,
                my_parent_index_in_child_at_in$0);
              caml_call1
               (my_child_index_in_parent_at_in,
                my_child_index_in_parent_at_in$0);
              return 0;
             });
   }
   function unsafe_value(t){
    return caml_call1(Incremental_Import[16][11], t[4]);
   }
   function value_exn(t){
    return caml_call1(Incremental_Import[16][6], t[4])
            ? caml_call1(Incremental_Import[16][11], t[4])
            : caml_call5
              (Core[236],
               0,
               _al_,
               cst_attempt_to_get_value_of_an,
               t,
               function(x_072){
                return sexp_of_t(function(param){return _ak_;}, x_072);
               });
   }
   function get_cutoff(t){return t[6];}
   function set_cutoff$0(t, cutoff){t[6] = cutoff; return 0;}
   function is_const(t){
    var _be_ = t[5];
    if(typeof _be_ !== "number" && 5 === _be_[0]) return 1;
    return 0;
   }
   function on_update(t, on_update_handler){
    t[23] = [0, on_update_handler, t[23]];
    t[8] = t[8] + 1 | 0;
    return 0;
   }
   function run_on_update_handlers(t, node_update, now){
    var r = [0, t[23]];
    for(;;){
     if(caml_call1(Core_List[8], r[1])) break;
     var match$0 = r[1];
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ao_], 1);
     var rest$0 = match$0[2], on_update_handler$0 = match$0[1];
     r[1] = rest$0;
     caml_call3
      (Incremental_On_update_handler[4],
       on_update_handler$0,
       node_update,
       now);
    }
    var r$0 = [0, t[21]];
    for(;;){
     if(! caml_call1(Incremental_Import[16][6], r$0[1])) return 0;
     var observer = caml_call1(Incremental_Import[16][7], r$0[1]);
     r$0[1] = observer[7];
     var r$1 = [0, observer[3]];
     for(;;){
      if(caml_call1(Core_List[8], r$1[1])) break;
      var match = r$1[1];
      if(! match)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _an_], 1);
      var rest = match[2], on_update_handler = match[1];
      r$1[1] = rest;
      var _bd_ = observer[1];
      a:
      if(_bd_){
       switch(_bd_ - 1 | 0){
         case 0:
          caml_call3
           (Incremental_On_update_handler[4],
            on_update_handler,
            node_update,
            now);
          break;
         case 1: break;
         default: break a;
       }
       continue;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _am_], 1);
     }
    }
   }
   function set_kind$0(t, kind){
    t[5] = kind;
    var _bc_ = caml_call1(Incremental_Kind[4], kind);
    t[24] = caml_call2(Incremental_Import[15][38], _bc_, -1);
    return 0;
   }
   function create(state, created_in, kind){
    var
     _aZ_ = state[18] ? [0, caml_call2(Base_Backtrace[2], 0, 0)] : 0,
     _a0_ = caml_call1(Incremental_Kind[4], kind),
     _a1_ = caml_call2(Incremental_Import[15][38], _a0_, -1),
     _a2_ = Incremental_Import[16][3],
     _a3_ = Incremental_Import[16][3],
     _a4_ = Incremental_Import[16][3],
     _a5_ = Incremental_Import[16][3],
     _a6_ = Incremental_Import[16][3],
     _a7_ = Incremental_Import[16][3],
     _a8_ = Incremental_Import[16][3],
     _a9_ = Incremental_Import[17][14],
     _a__ = Incremental_Stabilization_num[5],
     _a$_ = Incremental_Cutoff[8],
     _ba_ = Incremental_Import[16][3],
     _bb_ = Incremental_Stabilization_num[5],
     t =
       [0,
        caml_call1(Incremental_Node_id[10], 0),
        state,
        _bb_,
        _ba_,
        kind,
        _a$_,
        _a__,
        0,
        0,
        _a9_,
        _a8_,
        created_in,
        _a7_,
        -1,
        -1,
        _a6_,
        _a5_,
        -1,
        _a4_,
        _a3_,
        _a2_,
        0,
        0,
        _a1_,
        [0, -1],
        0,
        0,
        _aZ_];
    caml_call2(Incremental_Scope[8], created_in, t);
    return t;
   }
   function max_num_parents(t){
    return 1 + caml_call1(Incremental_Import[17][18], t[10]) | 0;
   }
   function set_parent(child, parent, parent_index){
    if(! caml_call2(Incremental_Import[3], parent_index, 0))
     return caml_call3
             (Incremental_Import[17][52],
              child[10],
              parent_index - 1 | 0,
              parent);
    child[11] = parent;
    return;
   }
   function link(child, child_index, parent, parent_index){
    set_parent
     (child, caml_call1(Incremental_Import[16][4], parent), parent_index);
    caml_check_bound(child[25], parent_index)[1 + parent_index] = child_index;
    caml_check_bound(parent[24], child_index)[1 + child_index] = parent_index;
    return;
   }
   function add_parent(child, parent, child_index){
    var _aX_ = max_num_parents(child);
    if(caml_call2(Incremental_Import[3], child[9], _aX_)){
     var new_max_num_parents = 2 * max_num_parents(child) | 0;
     child[10] =
      caml_call2
       (Incremental_Import[17][53], child[10], new_max_num_parents - 1 | 0);
     child[25] =
      caml_call3
       (Incremental_Import[15][123], child[25], new_max_num_parents, -1);
    }
    if(Incremental_Import[11]){
     var _aY_ = max_num_parents(child);
     if(! caml_call2(Incremental_Import[5], child[9], _aY_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ap_], 1);
    }
    var max_num_children = parent[24].length - 1;
    if(caml_call2(Incremental_Import[1], child_index, max_num_children)){
     if
      (Incremental_Import[11]
       && ! caml_call2(Incremental_Import[3], child_index, max_num_children))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ar_], 1);
     var
      new_max_num_children =
        caml_call2(Core_Int[93], 2, 2 * max_num_children | 0);
     parent[24] =
      caml_call3
       (Incremental_Import[15][123], parent[24], new_max_num_children, -1);
    }
    if
     (Incremental_Import[11]
      &&
       !
       caml_call2(Incremental_Import[5], child_index, parent[24].length - 1))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aq_], 1);
    link(child, child_index, parent, child[9]);
    child[9] = child[9] + 1 | 0;
    return 0;
   }
   function remove_parent(child, parent, child_index){
    if
     (Incremental_Import[11]
      && ! caml_call2(Incremental_Import[1], child[9], 1))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _at_], 1);
    var
     parent_index = caml_check_bound(parent[24], child_index)[1 + child_index];
    if(Incremental_Import[11]){
     var t2 = get_parent(child, parent_index);
     if(! same(parent, t2))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _as_], 1);
    }
    var last_parent_index = child[9] - 1 | 0;
    if(caml_call2(Incremental_Import[5], parent_index, last_parent_index)){
     var
      _aW_ =
        caml_call2
         (Incremental_Import[17][19], child[10], last_parent_index - 1 | 0),
      match = caml_call1(Incremental_Import[16][7], _aW_);
     link
      (child,
       caml_check_bound(child[25], last_parent_index)[1 + last_parent_index],
       match,
       parent_index);
    }
    set_parent(child, Incremental_Import[16][3], last_parent_index);
    if(Incremental_Import[11]){
     caml_check_bound(child[25], last_parent_index)[1 + last_parent_index] = -1;
     caml_check_bound(parent[24], child_index)[1 + child_index] = -1;
    }
    child[9] = child[9] - 1 | 0;
    return 0;
   }
   function swap_children_except_in_kind
   (parent, child1, child_index1, child2, child_index2){
    if(Incremental_Import[11]){
     var t2 = caml_call2(Incremental_Kind[5], parent[5], child_index1);
     if(! same(child1, t2))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ax_], 1);
     var t2$0 = caml_call2(Incremental_Kind[5], parent[5], child_index2);
     if(! same(child2, t2$0))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aw_], 1);
    }
    var
     index_of_parent_in_child1 =
       caml_check_bound(parent[24], child_index1)[1 + child_index1],
     index_of_parent_in_child2 =
       caml_check_bound(parent[24], child_index2)[1 + child_index2];
    if(Incremental_Import[11]){
     var
      _aU_ =
        caml_check_bound(child1[25], index_of_parent_in_child1)
         [1 + index_of_parent_in_child1];
     if(! caml_call2(Incremental_Import[3], _aU_, child_index1))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _av_], 1);
     var
      _aV_ =
        caml_check_bound(child2[25], index_of_parent_in_child2)
         [1 + index_of_parent_in_child2];
     if(! caml_call2(Incremental_Import[3], _aV_, child_index2))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _au_], 1);
    }
    caml_check_bound(child1[25], index_of_parent_in_child1)
     [1 + index_of_parent_in_child1]
    = child_index2;
    caml_check_bound(child2[25], index_of_parent_in_child2)
     [1 + index_of_parent_in_child2]
    = child_index1;
    caml_check_bound(parent[24], child_index1)[1 + child_index1] = index_of_parent_in_child2;
    caml_check_bound(parent[24], child_index2)[1 + child_index2] = index_of_parent_in_child1;
    return 0;
   }
   function sexp_of_t$0(x_073){
    return sexp_of_t(function(param){return _ay_;}, x_073);
   }
   function invariant$0(param){
    return invariant(function(_aT_){return 0;}, param);
   }
   function iter_descendants_internal(ts, f){
    var seen = caml_call3(Incremental_Node_id[7][3], 0, 0, 0);
    function iter_descendants(t){
     var _aS_ = 1 - caml_call2(Core_Hash_set[20], seen, t[1]);
     return _aS_
             ? (caml_call2
                (Core_Hash_set[22], seen, t[1]),
               caml_call1(f, t),
               iteri_children
                (t, function(param, t){return iter_descendants(t);}))
             : _aS_;
    }
    caml_call2(Core_List[9], ts, iter_descendants);
    return seen;
   }
   function iter_descendants(ts, f){
    iter_descendants_internal(ts, f);
    return 0;
   }
   var
    to_dot = Incremental_Dot_user_info[6],
    append = Incremental_Dot_user_info[7],
    to_string = Incremental_Dot_user_info[8],
    _az_ = [0, [11, "height=", [4, 0, 0, 0, 0]], "height=%d"],
    _aA_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    cst_n = "n###",
    _aB_ = [0, [11, cst_digraph_G, 0], cst_digraph_G],
    _aC_ = [0, [11, cst_rankdir_BT, 0], cst_rankdir_BT],
    _aD_ =
      [0,
       [11, cst$0, [2, 0, [11, cst$1, [2, 0, [12, 10, 0]]]]],
       "  %s -> %s\n"],
    _aE_ =
      [0,
       [11, cst$0, [2, 0, [11, cst$1, [2, 0, [11, " [style=dashed]\n", 0]]]]],
       "  %s -> %s [style=dashed]\n"],
    _aF_ = [0, [11, "}\n", [10, 0]], "}\n%!"],
    cst_n$0 = "n";
   function append_user_info_graphviz$0(param){
    return function(_aQ_, _aR_){
     return append_user_info_graphviz(param, _aQ_, _aR_);};
   }
   function save_dot(out, ts){
    var
     node_name =
       Core[541]
        ? function(param){return cst_n;}
        : function
         (node){
          var _aP_ = caml_call1(Incremental_Node_id[11], node[1]);
          return caml_call2(Core[18], cst_n$0, _aP_);
         };
    caml_call2(Core[238], out, _aB_);
    caml_call2(Core[238], out, _aC_);
    var
     bind_edges = [0, 0],
     seen =
       iter_descendants_internal
        (ts,
         function(t){
          var
           name = node_name(t),
           _aK_ = Core_String[140][3],
           _aL_ = [0, caml_call2(Core[257], _az_, t[14]), 0],
           _aM_ = [0, name, [0, caml_call1(Incremental_Kind[3], t[5]), _aL_]],
           default$0 = caml_call2(Incremental_Dot_user_info[5], _aM_, _aK_),
           match = t[27];
          if(match)
           var
            user_info = match[1],
            info = caml_call2(append, default$0, user_info);
          else
           var info = default$0;
          var _aN_ = caml_call2(to_string, name, caml_call1(to_dot, info));
          caml_call3(Core[238], out, _aA_, _aN_);
          iteri_children
           (t,
            function(param, from){
             var _aO_ = node_name(from);
             return caml_call4(Core[238], out, _aD_, _aO_, name);
            });
          var match$0 = t[5];
          if(typeof match$0 !== "number" && 3 === match$0[0]){
           var bind = match$0[1];
           return caml_call2
                   (Incremental_Bind[4],
                    bind,
                    function(to){
                     bind_edges[1] = [0, [0, t, to], bind_edges[1]];
                     return 0;
                    });
          }
          return 0;
         });
    caml_call2
     (Core_List[9],
      bind_edges[1],
      function(param){
       var
        to = param[2],
        from = param[1],
        _aH_ = caml_call2(Core_Hash_set[20], seen, to[1]);
       if(! _aH_) return _aH_;
       var _aI_ = node_name(to), _aJ_ = node_name(from);
       return caml_call4(Core[238], out, _aE_, _aJ_, _aI_);
      });
    return caml_call2(Core[238], out, _aF_);
   }
   function save_dot_to_file(file, ts){
    return caml_call6
            (Stdio_Out_channel[6],
             0,
             0,
             0,
             0,
             file,
             function(out){return save_dot(out, ts);});
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Node);
   var
    Incremental_Node =
      [0,
       [0,
        sexp_of_t$0,
        invariant$0,
        function(M){
         function fold(t, init, f){
          var ac = [0, init], r = [0, t];
          for(;;){
           if(! caml_call1(Incremental_Import[16][6], r[1])) return ac[1];
           var packed_node = caml_call1(Incremental_Import[16][11], r[1]);
           r[1] = caml_call1(M[1], packed_node);
           ac[1] = caml_call2(f, ac[1], packed_node);
          }
         }
         function iter(t, f){
          return fold(t, 0, function(param, n){return caml_call1(f, n);});
         }
         function invariant(t){return iter(t, invariant$0);}
         function length(t){
          return fold(t, 0, function(n, param){return n + 1 | 0;});
         }
         function sexp_of_t(t){
          var
           _aG_ = fold(t, 0, function(ac, n){return [0, n, ac];}),
           x_074 = caml_call1(Core_List[34], _aG_);
          return caml_call2(Core[421], Incremental_Types[15][2][1], x_074);
         }
         return [0, sexp_of_t, invariant, length, iter];
        },
        iter_descendants,
        save_dot,
        save_dot_to_file,
        append_user_info_graphviz$0],
       sexp_of_t,
       type_equal_if_phys_same,
       invariant,
       create,
       set_kind$0,
       same,
       iteri_children,
       get_parent,
       add_parent,
       remove_parent,
       swap_children_except_in_kind,
       is_const,
       is_in_recompute_heap,
       is_necessary,
       is_valid,
       should_be_invalidated,
       edge_is_stale,
       is_stale,
       needs_to_be_computed,
       value_exn,
       unsafe_value,
       get_cutoff,
       set_cutoff$0,
       on_update,
       run_on_update_handlers,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       has_child,
       has_parent];
   runtime.caml_register_global(159, Incremental_Node, cst_Incremental_Node);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Recompute_heap
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Node, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Recompute_heap = "Incremental__Recompute_heap",
    cst$0 = "_",
    cst_height_lower_bound = "height_lower_bound",
    cst_incremental = "incremental",
    cst_length = "length",
    cst_nodes_by_height = "nodes_by_height",
    cst_src_recompute_heap_ml = "src/recompute_heap.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos = "src/recompute_heap.ml:38:22",
    cst = "",
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Core = global_data.Core,
    Incremental_Node = global_data.Incremental__Node,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Recompute_heap);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_recompute_heap_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function next(param){return param[17];}
   var As_recompute_list = caml_call1(Incremental_Node[1][3], [0, next]);
   function nodes_by_height(r){return r[3];}
   function set_nodes_by_height(r, v){r[3] = v; return 0;}
   function height_lower_bound(r){return r[2];}
   function set_height_lower_bound(r, v){r[2] = v; return 0;}
   function length(r){return r[1];}
   function set_length(r, v){r[1] = v; return 0;}
   var
    nodes_by_height$0 =
      [0,
       function(param){return 0;},
       cst_nodes_by_height,
       [0, set_nodes_by_height],
       nodes_by_height,
       function(r, v){return [0, r[1], r[2], v];}],
    height_lower_bound$0 =
      [0,
       function(param){return 0;},
       cst_height_lower_bound,
       [0, set_height_lower_bound],
       height_lower_bound,
       function(r, v){return [0, r[1], v, r[3]];}],
    length$0 =
      [0,
       function(param){return 0;},
       cst_length,
       [0, set_length],
       length,
       function(r, v){return [0, v, r[2], r[3]];}],
    _a_ = [0, cst_nodes_by_height],
    _b_ = [0, cst_height_lower_bound],
    _c_ = [0, cst_length],
    _d_ = [0, cst_src_recompute_heap_ml, 51, 15],
    _e_ = [0, cst_src_recompute_heap_ml, 50, 15],
    _f_ = [0, cst_src_recompute_heap_ml, 44, 13],
    _g_ = [0, cst_src_recompute_heap_ml, 42, 11],
    _h_ = [0, cst_src_recompute_heap_ml, 41, 11],
    _i_ = [0, cst_src_recompute_heap_ml, 30, 873, 895],
    _j_ = [0, cst_src_recompute_heap_ml, 62, 6],
    _k_ = [0, cst_src_recompute_heap_ml, 99, 16],
    _l_ = [0, cst$0],
    cst_incorrect_attempt_to_add_n =
      "incorrect attempt to add node to recompute heap",
    _m_ = [0, cst_src_recompute_heap_ml, 125, 4218, 4230],
    _n_ = [0, cst_src_recompute_heap_ml, 129, 16],
    _o_ = [0, cst$0],
    cst_incorrect_remove_of_node_f =
      "incorrect [remove] of node from recompute heap",
    _p_ = [0, cst_src_recompute_heap_ml, 140, 4695, 4707],
    _q_ = [0, cst_src_recompute_heap_ml, 155, 4],
    _r_ = [0, cst_src_recompute_heap_ml, 154, 4],
    _s_ = [0, cst_src_recompute_heap_ml, 153, 4],
    _t_ = [0, cst_src_recompute_heap_ml, 172, 16],
    cst_Recompute_heap_remove_min_ =
      "Recompute_heap.remove_min unexpectedly reached end of heap",
    _u_ = [0, cst_src_recompute_heap_ml, 180, 5927, 5941],
    _v_ = [0, cst_src_recompute_heap_ml, 192, 16];
   function sexp_of_t(param){
    var
     length_003 = param[1],
     height_lower_bound_005 = param[2],
     nodes_by_height_007 = param[3],
     max_nonempty_index = [0, -1];
    caml_call2
     (Incremental_Import[17][28],
      nodes_by_height_007,
      function(i, l){
       var
        ___ = caml_call1(Incremental_Import[16][6], l),
        _$_ = ___ ? (max_nonempty_index[1] = i, 0) : ___;
       return _$_;
      });
    var
     x_001 =
       caml_call3
        (Incremental_Import[17][37],
         nodes_by_height_007,
         0,
         max_nonempty_index[1] + 1 | 0),
     arg_008 =
       caml_call2(Incremental_Import[17][10], As_recompute_list[1], x_001),
     bnds_002 = [0, [1, [0, _a_, [0, arg_008, 0]]], 0],
     arg_006 = caml_call1(Core[356], height_lower_bound_005),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_006, 0]]], bnds_002],
     arg_004 = caml_call1(Core[356], length_003),
     bnds_002$1 = [0, [1, [0, _c_, [0, arg_004, 0]]], bnds_002$0];
    return [1, bnds_002$1];
   }
   function max_height_allowed(t){
    return caml_call1(Incremental_Import[17][18], t[3]) - 1 | 0;
   }
   function invariant(t){
    return caml_call4
            (Base_Invariant[1],
             _i_,
             t,
             sexp_of_t,
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               nodes_by_height_fun =
                 check
                  (function(nodes_by_height){
                    return caml_call2
                            (Incremental_Import[17][28],
                             nodes_by_height,
                             function(height, node){
                              return caml_call2
                                      (As_recompute_list[4],
                                       node,
                                       function(node){
                                        if(! caml_call2(Incremental_Import[3], node[15], height))
                                         throw caml_maybe_attach_backtrace
                                                ([0, Assert_failure, _e_], 1);
                                        if(caml_call1(Incremental_Node[20], node)) return 0;
                                        throw caml_maybe_attach_backtrace
                                               ([0, Assert_failure, _d_], 1);
                                       });
                             });
                   }),
               height_lower_bound_fun =
                 check
                  (function(height_lower_bound){
                    if
                     (! caml_call2(Incremental_Import[1], height_lower_bound, 0))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _h_], 1);
                    var _V_ = caml_call1(Incremental_Import[17][18], t[3]);
                    if
                     (!
                      caml_call2(Incremental_Import[2], height_lower_bound, _V_))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _g_], 1);
                    var _X_ = height_lower_bound - 1 | 0, _W_ = 0;
                    if(_X_ >= 0){
                     var height = _W_;
                     for(;;){
                      var
                       _Y_ = caml_call2(Incremental_Import[17][19], t[3], height);
                      if(! caml_call1(Incremental_Import[16][5], _Y_))
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _f_], 1);
                      var _Z_ = height + 1 | 0;
                      if(_X_ === height) break;
                      height = _Z_;
                     }
                    }
                    return 0;
                   }),
               length_fun =
                 check
                  (function(length){
                    var actual_length = [0, 0];
                    caml_call2
                     (Incremental_Import[17][27],
                      t[3],
                      function(node){
                       var _U_ = caml_call1(As_recompute_list[3], node);
                       actual_length[1] = actual_length[1] + _U_ | 0;
                       return 0;
                      });
                    var t2 = actual_length[1], sexpifier = Core[356];
                    function comparator(a_009, b_010){
                     return caml_call2(Core[352], a_009, b_010);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[2],
                             pos,
                             sexpifier,
                             comparator,
                             0,
                             0,
                             0,
                             length,
                             t2);
                   });
              caml_call1(length_fun, length$0);
              caml_call1(height_lower_bound_fun, height_lower_bound$0);
              return caml_call1(nodes_by_height_fun, nodes_by_height$0);
             });
   }
   function create_nodes_by_height(max_height_allowed){
    return caml_call2
            (Incremental_Import[17][15],
             max_height_allowed + 1 | 0,
             Incremental_Import[16][3]);
   }
   function set_max_height_allowed(t, max_height_allowed){
    if(Incremental_Import[11]){
     var
      _M_ = max_height_allowed + 1 | 0,
      _N_ = caml_call1(Incremental_Import[17][18], t[3]) - 1 | 0;
     if(_N_ >= _M_){
      var i = _M_;
      for(;;){
       var _S_ = caml_call2(Incremental_Import[17][19], t[3], i);
       if(! caml_call1(Incremental_Import[16][5], _S_))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
       var _T_ = i + 1 | 0;
       if(_N_ === i) break;
       i = _T_;
      }
     }
    }
    var
     src = t[3],
     dst = create_nodes_by_height(max_height_allowed),
     _O_ = caml_call1(Incremental_Import[17][18], dst),
     _P_ = caml_call1(Incremental_Import[17][18], src),
     _Q_ = caml_call2(Incremental_Import[9], _P_, _O_);
    caml_call5(Incremental_Import[17][34], src, 0, dst, 0, _Q_);
    t[3] = dst;
    var _R_ = caml_call1(Incremental_Import[17][18], dst);
    t[2] = caml_call2(Incremental_Import[9], t[2], _R_);
    return 0;
   }
   function create(max_height_allowed){
    return [0,
            0,
            max_height_allowed + 1 | 0,
            create_nodes_by_height(max_height_allowed)];
   }
   function set_prev(next, prev){
    if(caml_call1(Incremental_Import[16][6], next))
     caml_call1(Incremental_Import[16][11], next)[16] = prev;
    return;
   }
   function link(t, node){
    var height = node[14];
    if(Incremental_Import[11]){
     var _K_ = max_height_allowed(t);
     if(! caml_call2(Incremental_Import[2], height, _K_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
    }
    node[15] = height;
    var next = caml_call2(Incremental_Import[17][19], t[3], height);
    node[17] = next;
    set_prev(next, caml_call1(Incremental_Import[16][4], node));
    var _L_ = caml_call1(Incremental_Import[16][4], node);
    return caml_call3(Incremental_Import[17][51], t[3], height, _L_);
   }
   function unlink(t, node){
    var
     prev = node[16],
     next = node[17],
     _I_ = caml_call2(Incremental_Import[17][19], t[3], node[15]),
     _J_ = caml_call1(Incremental_Import[16][4], node);
    if(caml_call2(Core[247], _J_, _I_))
     caml_call3(Incremental_Import[17][51], t[3], node[15], next);
    set_prev(next, prev);
    if(caml_call1(Incremental_Import[16][6], prev))
     caml_call1(Incremental_Import[16][11], prev)[17] = next;
    node[16] = Incremental_Import[16][3];
    return;
   }
   function add(t, node){
    var _E_ = Incremental_Import[11];
    if(_E_)
     var
      _F_ = caml_call1(Incremental_Node[14], node),
      _G_ = _F_ || 1 - caml_call1(Incremental_Node[20], node);
    else
     var _G_ = _E_;
    if(_G_)
     caml_call5
      (Core[236],
       0,
       _m_,
       cst_incorrect_attempt_to_add_n,
       node,
       function(x_011){
        return caml_call2
                (Incremental_Node[2], function(param){return _l_;}, x_011);
       });
    if(Incremental_Import[11]){
     var _H_ = max_height_allowed(t);
     if(! caml_call2(Incremental_Import[2], node[14], _H_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
    }
    var height = node[14];
    if(caml_call2(Incremental_Import[5], height, t[2])) t[2] = height;
    link(t, node);
    t[1] = t[1] + 1 | 0;
    return 0;
   }
   function remove(t, node){
    var _B_ = Incremental_Import[11];
    if(_B_)
     var
      _C_ = 1 - caml_call1(Incremental_Node[14], node),
      _D_ = _C_ || caml_call1(Incremental_Node[20], node);
    else
     var _D_ = _B_;
    if(_D_)
     caml_call5
      (Core[236],
       0,
       _p_,
       cst_incorrect_remove_of_node_f,
       node,
       function(x_012){
        return caml_call2
                (Incremental_Node[2], function(param){return _o_;}, x_012);
       });
    unlink(t, node);
    node[17] = Incremental_Import[16][3];
    node[15] = -1;
    t[1] = t[1] - 1 | 0;
    return 0;
   }
   function increase_height(t, node){
    if(Incremental_Import[11]){
     if(! caml_call2(Incremental_Import[4], node[14], node[15]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
     var _A_ = max_height_allowed(t);
     if(! caml_call2(Incremental_Import[2], node[14], _A_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
     if(! caml_call1(Incremental_Node[14], node))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
    }
    unlink(t, node);
    return link(t, node);
   }
   function min_height(t){
    if(caml_call2(Incremental_Import[3], t[1], 0))
     t[2] = caml_call1(Incremental_Import[17][18], t[3]);
    else{
     var nodes_by_height = t[3];
     for(;;){
      var _z_ = caml_call2(Incremental_Import[17][19], nodes_by_height, t[2]);
      if(! caml_call1(Incremental_Import[16][5], _z_)) break;
      t[2] = t[2] + 1 | 0;
     }
    }
    return t[2];
   }
   function remove_min(t){
    if(Incremental_Import[11] && caml_call2(Incremental_Import[3], t[1], 0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
    var
     nodes_by_height = t[3],
     node = [0, caml_call2(Incremental_Import[17][19], nodes_by_height, t[2])];
    for(;;){
     if(! caml_call1(Incremental_Import[16][5], node[1])) break;
     t[2] = t[2] + 1 | 0;
     var _w_ = Incremental_Import[11];
     if(_w_)
      var
       _x_ = caml_call1(Incremental_Import[17][18], t[3]),
       _y_ = caml_call2(Incremental_Import[1], t[2], _x_);
     else
      var _y_ = _w_;
     if(_y_)
      caml_call5
       (Core[236], 0, _u_, cst_Recompute_heap_remove_min_, t, sexp_of_t);
     node[1] = caml_call2(Incremental_Import[17][19], nodes_by_height, t[2]);
    }
    var node$0 = caml_call1(Incremental_Import[16][11], node[1]);
    node$0[15] = -1;
    t[1] = t[1] - 1 | 0;
    var next = node$0[17];
    caml_call3(Incremental_Import[17][52], t[3], t[2], next);
    set_prev(next, Incremental_Import[16][3]);
    if
     (Incremental_Import[11]
      && ! caml_call1(Incremental_Import[16][5], node$0[16]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _v_], 1);
    node$0[17] = Incremental_Import[16][3];
    return node$0;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Recompute_heap);
   var
    Incremental_Recompute_heap =
      [0,
       sexp_of_t,
       invariant,
       create,
       length,
       max_height_allowed,
       set_max_height_allowed,
       min_height,
       add,
       remove,
       remove_min,
       increase_height];
   runtime.caml_register_global
    (48, Incremental_Recompute_heap, cst_Incremental_Recompute_heap);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Adjust_heights_heap
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Expect_test_collector, Incremental__Import, Incremental__Node, Incremental__Recompute_heap, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Adjust_heights = "Incremental__Adjust_heights_heap",
    cst$0 = "_",
    cst_height_lower_bound = "height_lower_bound",
    cst_incremental = "incremental",
    cst_length = "length",
    cst_max_height_seen = "max_height_seen",
    cst_nodes_by_height = "nodes_by_height",
    cst_src_adjust_heights_heap_ml = "src/adjust_heights_heap.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Import = global_data.Incremental__Import,
    Assert_failure = global_data.Assert_failure,
    Incremental_Node = global_data.Incremental__Node,
    Incremental_Recompute_heap = global_data.Incremental__Recompute_heap,
    Core = global_data.Core,
    Base_Invariant = global_data.Base__Invariant;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Adjust_heights);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_adjust_heights_heap_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function next(param){return param[19];}
   var
    As_adjust_heights_list = caml_call1(Incremental_Node[1][3], [0, next]),
    _a_ = [0, cst_src_adjust_heights_heap_ml, 27, 12],
    _b_ = [0, cst_src_adjust_heights_heap_ml, 24, 10],
    _c_ = [0, cst_src_adjust_heights_heap_ml, 23, 10],
    _d_ = [0, cst_src_adjust_heights_heap_ml, 19, 538, 562];
   function sexp_of_t(t){
    var max_nonempty_index = [0, -1];
    caml_call2
     (Incremental_Import[17][28],
      t,
      function(i, l){
       var
        _ae_ = caml_call1(Incremental_Import[16][6], l),
        _af_ = _ae_ ? (max_nonempty_index[1] = i, 0) : _ae_;
       return _af_;
      });
    var
     x_001 =
       caml_call3
        (Incremental_Import[17][37], t, 0, max_nonempty_index[1] + 1 | 0);
    return caml_call2
            (Incremental_Import[17][10], As_adjust_heights_list[1], x_001);
   }
   function invariant(t){
    return caml_call4
            (Base_Invariant[1],
             _d_,
             t,
             sexp_of_t,
             function(param){
              return caml_call2
                      (Incremental_Import[17][28],
                       t,
                       function(height, nodes){
                        caml_call1(As_adjust_heights_list[2], nodes);
                        return caml_call2
                                (As_adjust_heights_list[4],
                                 nodes,
                                 function(node){
                                  if(! caml_call2(Incremental_Import[3], node[18], height))
                                   throw caml_maybe_attach_backtrace
                                          ([0, Assert_failure, _c_], 1);
                                  if(! caml_call2(Incremental_Import[4], node[14], node[18]))
                                   throw caml_maybe_attach_backtrace
                                          ([0, Assert_failure, _b_], 1);
                                  var _ad_ = caml_call1(Incremental_Node[14], node);
                                  if(! _ad_) return _ad_;
                                  if(caml_call2(Incremental_Import[3], node[15], node[18]))
                                   return 0;
                                  throw caml_maybe_attach_backtrace
                                         ([0, Assert_failure, _a_], 1);
                                 });
                       });
             });
   }
   function create(max_height_allowed){
    return caml_call2
            (Incremental_Import[17][15],
             max_height_allowed + 1 | 0,
             Incremental_Import[16][3]);
   }
   function nodes_by_height(r){return r[4];}
   function set_nodes_by_height(r, v){r[4] = v; return 0;}
   function max_height_seen(r){return r[3];}
   function set_max_height_seen(r, v){r[3] = v; return 0;}
   function height_lower_bound(r){return r[2];}
   function set_height_lower_bound(r, v){r[2] = v; return 0;}
   function length(r){return r[1];}
   function set_length(r, v){r[1] = v; return 0;}
   var
    nodes_by_height$0 =
      [0,
       function(param){return 0;},
       cst_nodes_by_height,
       [0, set_nodes_by_height],
       nodes_by_height,
       function(r, v){return [0, r[1], r[2], r[3], v];}],
    max_height_seen$0 =
      [0,
       function(param){return 0;},
       cst_max_height_seen,
       [0, set_max_height_seen],
       max_height_seen,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    height_lower_bound$0 =
      [0,
       function(param){return 0;},
       cst_height_lower_bound,
       [0, set_height_lower_bound],
       height_lower_bound,
       function(r, v){return [0, r[1], v, r[3], r[4]];}],
    length$0 =
      [0,
       function(param){return 0;},
       cst_length,
       [0, set_length],
       length,
       function(r, v){return [0, v, r[2], r[3], r[4]];}],
    _e_ = [0, cst_nodes_by_height],
    _f_ = [0, cst_max_height_seen],
    _g_ = [0, cst_height_lower_bound],
    _h_ = [0, cst_length],
    _i_ = [0, cst_src_adjust_heights_heap_ml, 70, 11],
    _j_ = [0, cst_src_adjust_heights_heap_ml, 69, 11],
    _k_ = [0, cst_src_adjust_heights_heap_ml, 65, 13],
    _l_ = [0, cst_src_adjust_heights_heap_ml, 63, 11],
    _m_ = [0, cst_src_adjust_heights_heap_ml, 62, 11],
    _n_ = [0, cst_src_adjust_heights_heap_ml, 59, 11],
    _o_ = [0, cst_src_adjust_heights_heap_ml, 54, 1648, 1670],
    _p_ = [0, cst_max_height_seen],
    cst_cannot_set_max_height_allo =
      "cannot set_max_height_allowed less than the max height already seen",
    _q_ = [0, cst_src_adjust_heights_heap_ml, 86, 2771, 2783],
    _r_ = [0, cst_src_adjust_heights_heap_ml, 90, 16],
    _s_ = [0, cst_src_adjust_heights_heap_ml, 102, 18],
    _t_ = [0, cst_src_adjust_heights_heap_ml, 100, 18],
    cst_Adjust_heights_heap_remove =
      "Adjust_heights_heap.remove_min of empty heap",
    _u_ = [0, cst_src_adjust_heights_heap_ml, 112, 3903, 3923],
    _v_ = [0, "Height"],
    _w_ = [0, "Max"],
    cst_node_with_too_large_height = "node with too large height",
    _x_ = [0, cst_src_adjust_heights_heap_ml, 134, 4662, 4676],
    _y_ = [0, cst$0],
    _z_ = [0, "child"],
    _A_ = [0, cst$0],
    _B_ = [0, "parent"],
    cst_adding_edge_made_graph_cyc = "adding edge made graph cyclic",
    _C_ = [0, cst_src_adjust_heights_heap_ml, 147, 5103, 5115],
    _D_ = [0, cst_src_adjust_heights_heap_ml, 143, 16],
    _E_ = [0, cst_src_adjust_heights_heap_ml, 142, 16],
    _F_ = [0, cst_src_adjust_heights_heap_ml, 207, 16],
    _G_ = [0, cst_src_adjust_heights_heap_ml, 206, 16],
    _H_ = [0, cst_src_adjust_heights_heap_ml, 167, 16],
    _I_ = [0, cst_src_adjust_heights_heap_ml, 166, 16];
   function sexp_of_t$0(param){
    var
     length_003 = param[1],
     height_lower_bound_005 = param[2],
     max_height_seen_007 = param[3],
     nodes_by_height_009 = param[4],
     arg_010 = sexp_of_t(nodes_by_height_009),
     bnds_002 = [0, [1, [0, _e_, [0, arg_010, 0]]], 0],
     arg_008 = caml_call1(Core[356], max_height_seen_007),
     bnds_002$0 = [0, [1, [0, _f_, [0, arg_008, 0]]], bnds_002],
     arg_006 = caml_call1(Core[356], height_lower_bound_005),
     bnds_002$1 = [0, [1, [0, _g_, [0, arg_006, 0]]], bnds_002$0],
     arg_004 = caml_call1(Core[356], length_003),
     bnds_002$2 = [0, [1, [0, _h_, [0, arg_004, 0]]], bnds_002$1];
    return [1, bnds_002$2];
   }
   function is_empty(t){return caml_call2(Incremental_Import[3], t[1], 0);}
   function max_height_allowed(t){
    return caml_call1(Incremental_Import[17][18], t[4]) - 1 | 0;
   }
   function invariant$0(t){
    return caml_call4
            (Base_Invariant[1],
             _o_,
             t,
             sexp_of_t$0,
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               nodes_by_height_fun = check(invariant),
               max_height_seen_fun =
                 check
                  (function(max_height_seen){
                    if(! caml_call2(Incremental_Import[1], max_height_seen, 0))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _j_], 1);
                    var _ac_ = max_height_allowed(t);
                    if(caml_call2(Incremental_Import[2], max_height_seen, _ac_))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _i_], 1);
                   }),
               height_lower_bound_fun =
                 check
                  (function(height_lower_bound){
                    if
                     (! caml_call2(Incremental_Import[1], height_lower_bound, 0))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _m_], 1);
                    var _Z_ = caml_call1(Incremental_Import[17][18], t[4]);
                    if
                     (!
                      caml_call2(Incremental_Import[2], height_lower_bound, _Z_))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _l_], 1);
                    var _$_ = height_lower_bound - 1 | 0, ___ = 0;
                    if(_$_ >= 0){
                     var height = ___;
                     for(;;){
                      var
                       _aa_ = caml_call2(Incremental_Import[17][19], t[4], height);
                      if(! caml_call1(Incremental_Import[16][5], _aa_))
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _k_], 1);
                      var _ab_ = height + 1 | 0;
                      if(_$_ === height) break;
                      height = _ab_;
                     }
                    }
                    return 0;
                   }),
               length_fun =
                 check
                  (function(length){
                    var t$0 = t[4], r = [0, 0];
                    caml_call2
                     (Incremental_Import[17][27],
                      t$0,
                      function(node){
                       var _Y_ = caml_call1(As_adjust_heights_list[3], node);
                       r[1] = r[1] + _Y_ | 0;
                       return 0;
                      });
                    if(caml_call2(Incremental_Import[3], length, r[1]))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _n_], 1);
                   });
              caml_call1(length_fun, length$0);
              caml_call1(height_lower_bound_fun, height_lower_bound$0);
              caml_call1(max_height_seen_fun, max_height_seen$0);
              return caml_call1(nodes_by_height_fun, nodes_by_height$0);
             });
   }
   function create$0(max_height_allowed){
    return [0, 0, max_height_allowed + 1 | 0, 0, create(max_height_allowed)];
   }
   function set_max_height_allowed(t, max_height_allowed){
    if(caml_call2(Incremental_Import[5], max_height_allowed, t[3]))
     caml_call5
      (Core[236],
       0,
       _q_,
       cst_cannot_set_max_height_allo,
       [0, max_height_allowed, [0, -794774856, t[3]]],
       function(param){
        var
         arg1_013 = param[2],
         arg0_012 = param[1],
         res0_014 = caml_call1(Core[356], arg0_012),
         v_011 = arg1_013[2],
         res1_015 = [1, [0, _p_, [0, caml_call1(Core[356], v_011), 0]]];
        return [1, [0, res0_014, [0, res1_015, 0]]];
       });
    if(Incremental_Import[11] && ! is_empty(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
    t[4] = create(max_height_allowed);
    return 0;
   }
   function set_height(t, node, height){
    if(caml_call2(Incremental_Import[4], height, t[3])){
     t[3] = height;
     var _W_ = max_height_allowed(t);
     if(caml_call2(Incremental_Import[4], height, _W_)){
      var
       _X_ = [0, [0, 920681479, height], [0, 3850884, max_height_allowed(t)]];
      caml_call5
       (Core[236],
        0,
        _x_,
        cst_node_with_too_large_height,
        _X_,
        function(param){
         var
          arg1_019 = param[2],
          arg0_018 = param[1],
          v_016 = arg0_018[2],
          res0_020 = [1, [0, _v_, [0, caml_call1(Core[356], v_016), 0]]],
          v_017 = arg1_019[2],
          res1_021 = [1, [0, _w_, [0, caml_call1(Core[356], v_017), 0]]];
         return [1, [0, res0_020, [0, res1_021, 0]]];
        });
     }
    }
    node[14] = height;
    return 0;
   }
   function ensure_height_requirement
   (t, original_child, original_parent, child, parent){
    if(Incremental_Import[11] && ! caml_call1(Incremental_Node[15], child))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _E_], 1);
    if(Incremental_Import[11] && ! caml_call1(Incremental_Node[15], parent))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _D_], 1);
    if(caml_call2(Incremental_Node[7], parent, original_child))
     caml_call5
      (Core[236],
       0,
       _C_,
       cst_adding_edge_made_graph_cyc,
       [0, [0, -977688164, original_child], [0, -310508246, original_parent]],
       function(param){
        var
         arg1_025 = param[2],
         arg0_024 = param[1],
         v_022 = arg0_024[2],
         res0_026 =
           [1,
            [0,
             _z_,
             [0,
              caml_call2
               (Incremental_Node[2], function(param){return _y_;}, v_022),
              0]]],
         v_023 = arg1_025[2],
         res1_027 =
           [1,
            [0,
             _B_,
             [0,
              caml_call2
               (Incremental_Node[2], function(param){return _A_;}, v_023),
              0]]];
        return [1, [0, res0_026, [0, res1_027, 0]]];
       });
    var _V_ = caml_call2(Incremental_Import[1], child[14], parent[14]);
    if(! _V_) return _V_;
    if(caml_call2(Incremental_Import[3], parent[18], -1)){
     var height = parent[14];
     if
      (Incremental_Import[11]
       && ! caml_call2(Incremental_Import[1], height, t[2]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _t_], 1);
     if(Incremental_Import[11]){
      var _T_ = max_height_allowed(t);
      if(! caml_call2(Incremental_Import[2], height, _T_))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _s_], 1);
     }
     parent[18] = height;
     t[1] = t[1] + 1 | 0;
     parent[19] = caml_call2(Incremental_Import[17][19], t[4], height);
     var _U_ = caml_call1(Incremental_Import[16][4], parent);
     caml_call3(Incremental_Import[17][51], t[4], height, _U_);
    }
    return set_height(t, parent, child[14] + 1 | 0);
   }
   function adjust_heights(t, recompute_heap, original_child, original_parent){
    if(Incremental_Import[11] && ! is_empty(t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _I_], 1);
    if
     (Incremental_Import[11]
      &&
       !
       caml_call2
        (Incremental_Import[1], original_child[14], original_parent[14]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
    t[2] = original_parent[14];
    ensure_height_requirement
     (t, original_child, original_parent, original_child, original_parent);
    for(;;){
     if(! caml_call2(Incremental_Import[4], t[1], 0)){
      if(Incremental_Import[11] && ! is_empty(t))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _G_], 1);
      var _S_ = Incremental_Import[11];
      if(! _S_) return _S_;
      if
       (caml_call2
         (Incremental_Import[5], original_child[14], original_parent[14]))
       return 0;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
     }
     var _J_ = Incremental_Import[11], _K_ = _J_ ? is_empty(t) : _J_;
     if(_K_)
      caml_call5
       (Core[236], 0, _u_, cst_Adjust_heights_heap_remove, t, sexp_of_t$0);
     var r = [0, t[2]];
     for(;;){
      var _L_ = caml_call2(Incremental_Import[17][19], t[4], r[1]);
      if(! caml_call1(Incremental_Import[16][5], _L_)) break;
      r[1]++;
     }
     var height = r[1];
     t[2] = height;
     var
      _M_ = caml_call2(Incremental_Import[17][20], t[4], height),
      child = caml_call1(Incremental_Import[16][11], _M_);
     child[18] = -1;
     t[1] = t[1] - 1 | 0;
     caml_call3(Incremental_Import[17][51], t[4], height, child[19]);
     child[19] = Incremental_Import[16][3];
     if(caml_call1(Incremental_Node[14], child))
      caml_call2(Incremental_Recompute_heap[11], recompute_heap, child);
     if(caml_call2(Incremental_Import[4], child[9], 0)){
      var parent = caml_call1(Incremental_Import[16][7], child[11]);
      ensure_height_requirement
       (t, original_child, original_parent, child, parent);
      var _O_ = child[9] - 1 | 0, _N_ = 1;
      if(_O_ >= 1){
       var parent_index = _N_;
       for(;;){
        var
         _Q_ =
           caml_call2
            (Incremental_Import[17][19], child[10], parent_index - 1 | 0);
        ensure_height_requirement
         (t,
          original_child,
          original_parent,
          child,
          caml_call1(Incremental_Import[16][7], _Q_));
        var _R_ = parent_index + 1 | 0;
        if(_O_ === parent_index) break;
        parent_index = _R_;
       }
      }
     }
     var _P_ = child[5];
     a:
     if(typeof _P_ !== "number" && 3 === _P_[0]){
      var
       all_nodes_created_on_rhs = _P_[1][7],
       r$0 = [0, all_nodes_created_on_rhs];
      for(;;){
       if(! caml_call1(Incremental_Import[16][6], r$0[1])) break;
       var node_on_rhs = caml_call1(Incremental_Import[16][11], r$0[1]);
       r$0[1] = node_on_rhs[13];
       if(caml_call1(Incremental_Node[15], node_on_rhs))
        ensure_height_requirement
         (t, original_child, original_parent, child, node_on_rhs);
      }
      break a;
     }
    }
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Adjust_heights);
   var
    Incremental_Adjust_heights_hea =
      [0,
       sexp_of_t$0,
       invariant$0,
       create$0,
       length,
       max_height_allowed,
       set_max_height_allowed,
       max_height_seen,
       set_height,
       adjust_heights];
   runtime.caml_register_global
    (62, Incremental_Adjust_heights_hea, cst_Incremental_Adjust_heights);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Alarm_value
//# unitInfo: Requires: Base__Field, Base__Invariant, Expect_test_collector, Incremental__At, Incremental__At_intervals, Incremental__Import, Incremental__Snapshot, Incremental__Step_function_node, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Alarm_value = "Incremental__Alarm_value",
    cst$0 = "_",
    cst_action = "action",
    cst_incremental = "incremental",
    cst_src_alarm_value_ml = "src/alarm_value.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Import = global_data.Incremental__Import,
    Base_Invariant = global_data.Base__Invariant,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   global_data.Base__Field;
   var
    Incremental_At = global_data.Incremental__At,
    Incremental_At_intervals = global_data.Incremental__At_intervals,
    Incremental_Snapshot = global_data.Incremental__Snapshot,
    Incremental_Step_function_node =
      global_data.Incremental__Step_function_node,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Alarm_value);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_alarm_value_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function invariant(param){
    switch(param[0]){
      case 0:
       var at = param[1]; return caml_call1(Incremental_At[1], at);
      case 1:
       var at_intervals = param[1];
       return caml_call1(Incremental_At_intervals[1], at_intervals);
      case 2:
       var snapshot = param[1];
       return caml_call2
               (Incremental_Snapshot[1], function(_k_){return 0;}, snapshot);
      default:
       var step_function_node = param[1];
       return caml_call2
               (Incremental_Step_function_node[1],
                function(_j_){return 0;},
                step_function_node);
    }
   }
   function action(r){return r[1];}
   var
    action$0 =
      [0,
       function(param){return 0;},
       cst_action,
       0,
       action,
       function(r, v){return [0, v, r[2]];}],
    _a_ = [0, "At"],
    _b_ = [0, "At_intervals"],
    _c_ = [0, cst$0],
    _d_ = [0, "Snapshot"],
    _e_ = [0, cst$0],
    _f_ = [0, "Step_function"],
    _g_ = [0, "next_fired"],
    _h_ = [0, cst_action],
    _i_ = [0, cst_src_alarm_value_ml, 30, 820, 842];
   function sexp_of_t(param){
    var
     action_010 = param[1],
     next_fired_012 = param[2],
     arg_013 = caml_call1(Sexplib0_Sexp_conv[23], next_fired_012),
     bnds_009 = [0, [1, [0, _g_, [0, arg_013, 0]]], 0];
    switch(action_010[0]){
      case 0:
       var
        arg0_001 = action_010[1],
        res0_002 = caml_call1(Incremental_At[2], arg0_001),
        arg_011 = [1, [0, _a_, [0, res0_002, 0]]];
       break;
      case 1:
       var
        arg0_003 = action_010[1],
        res0_004 = caml_call1(Incremental_At_intervals[2], arg0_003),
        arg_011 = [1, [0, _b_, [0, res0_004, 0]]];
       break;
      case 2:
       var
        arg0_005 = action_010[1],
        res0_006 =
          caml_call2
           (Incremental_Snapshot[2], function(param){return _c_;}, arg0_005),
        arg_011 = [1, [0, _d_, [0, res0_006, 0]]];
       break;
      default:
       var
        arg0_007 = action_010[1],
        res0_008 =
          caml_call2
           (Incremental_Step_function_node[2],
            function(param){return _e_;},
            arg0_007),
        arg_011 = [1, [0, _f_, [0, res0_008, 0]]];
    }
    var bnds_009$0 = [0, [1, [0, _h_, [0, arg_011, 0]]], bnds_009];
    return [1, bnds_009$0];
   }
   function invariant$0(t){
    return caml_call4
            (Base_Invariant[1],
             _i_,
             t,
             sexp_of_t,
             function(param){
              var action_fun = caml_call2(Base_Invariant[2], t, invariant);
              caml_call1(action_fun, action$0);
              return 0;
             });
   }
   function create(action){return [0, action, Incremental_Import[16][3]];}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Alarm_value);
   var Incremental_Alarm_value = [0, [0], invariant$0, sexp_of_t, create];
   runtime.caml_register_global
    (31, Incremental_Alarm_value, cst_Incremental_Alarm_value);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Config_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Config_intf = "Incremental__Config_intf",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Config_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/config_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Config_intf);
   var Incremental_Config_intf = [0];
   runtime.caml_register_global
    (11, Incremental_Config_intf, cst_Incremental_Config_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Config
//# unitInfo: Requires: Expect_test_collector, Incremental__Config_intf, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Config = "Incremental__Config",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Config);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/config.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function Default(symbol){return [0, 1];}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Config);
   var Incremental_Config = [0, Default];
   runtime.caml_register_global
    (11, Incremental_Config, cst_Incremental_Config);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Internal_observer
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Core, Core__List, Expect_test_collector, Incremental__Import, Incremental__Node, Incremental__On_update_handler, Incremental__Types, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Internal_obser = "Incremental__Internal_observer",
    cst$0 = "_",
    cst_incremental = "incremental",
    cst_next_in_all = "next_in_all",
    cst_next_in_observing = "next_in_observing",
    cst_observing = "observing",
    cst_on_update_handlers = "on_update_handlers",
    cst_prev_in_all = "prev_in_all",
    cst_prev_in_observing = "prev_in_observing",
    cst_src_internal_observer_ml = "src/internal_observer.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Import = global_data.Incremental__Import,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Assert_failure = global_data.Assert_failure,
    Base_Invariant = global_data.Base__Invariant,
    Incremental_Node = global_data.Incremental__Node,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Incremental_On_update_handler = global_data.Incremental__On_update_handler;
   global_data.Base__Field;
   var
    Incremental_Types = global_data.Incremental__Types,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Internal_obser);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_internal_observer_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var _a_ = [0, cst$0];
   function sexp_of_t(param){
    var x_001 = param[2];
    return caml_call2
            (Incremental_Types[15][1], function(param){return _a_;}, x_001);
   }
   function next_in_all(param){return param[5];}
   function set_prev_in_all(param, t2){param[4] = t2; return 0;}
   function next_in_observing(r){return r[7];}
   function set_next_in_observing(r, v){r[7] = v; return 0;}
   function prev_in_observing(r){return r[6];}
   function set_prev_in_observing(r, v){r[6] = v; return 0;}
   function next_in_all$0(r){return r[5];}
   function set_next_in_all(r, v){r[5] = v; return 0;}
   function prev_in_all(r){return r[4];}
   function set_prev_in_all$0(r, v){r[4] = v; return 0;}
   function on_update_handlers(r){return r[3];}
   function set_on_update_handlers(r, v){r[3] = v; return 0;}
   function observing(r){return r[2];}
   var
    next_in_observing$0 =
      [0,
       function(param){return 0;},
       cst_next_in_observing,
       [0, set_next_in_observing],
       next_in_observing,
       function(r, v){return [0, r[1], r[2], r[3], r[4], r[5], r[6], v];}],
    prev_in_observing$0 =
      [0,
       function(param){return 0;},
       cst_prev_in_observing,
       [0, set_prev_in_observing],
       prev_in_observing,
       function(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v, r[7]];}],
    next_in_all$1 =
      [0,
       function(param){return 0;},
       cst_next_in_all,
       [0, set_next_in_all],
       next_in_all$0,
       function(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6], r[7]];}],
    prev_in_all$0 =
      [0,
       function(param){return 0;},
       cst_prev_in_all,
       [0, set_prev_in_all$0],
       prev_in_all,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6], r[7]];}],
    on_update_handlers$0 =
      [0,
       function(param){return 0;},
       cst_on_update_handlers,
       [0, set_on_update_handlers],
       on_update_handlers,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6], r[7]];}],
    observing$0 =
      [0,
       function(param){return 0;},
       cst_observing,
       0,
       observing,
       function(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6], r[7]];}],
    _b_ = [0, "Created"],
    _c_ = [0, "In_use"],
    _d_ = [0, "Disallowed"],
    _e_ = [0, "Unlinked"],
    _f_ = [0, cst_next_in_observing],
    _g_ = [0, cst_prev_in_observing],
    _h_ = [0, cst_next_in_all],
    _i_ = [0, cst_prev_in_all],
    _j_ = [0, cst_on_update_handlers],
    _k_ = [0, cst_observing],
    _l_ = [0, "state"],
    _m_ = [0, cst_src_internal_observer_ml, 112, 13],
    _n_ = [0, cst_src_internal_observer_ml, 109, 36],
    _o_ = [0, cst_src_internal_observer_ml, 100, 13],
    _p_ = [0, cst_src_internal_observer_ml, 97, 36],
    _q_ = [0, cst_src_internal_observer_ml, 89, 13],
    _r_ = [0, cst_src_internal_observer_ml, 86, 36],
    _s_ = [0, cst_src_internal_observer_ml, 78, 13],
    _t_ = [0, cst_src_internal_observer_ml, 75, 36],
    _u_ = [0, cst_src_internal_observer_ml, 70, 25],
    _v_ = [0, cst$0],
    _w_ = [0, cst_src_internal_observer_ml, 61, 1687, 1709],
    _x_ = [0, cst$0],
    cst_attempt_to_get_value_of_an = "attempt to get value of an invalid node",
    _y_ = [0, cst_src_internal_observer_ml, 137, 4254, 4276],
    _z_ = [0, cst$0],
    cst_Observer_value_exn_called_ =
      "Observer.value_exn called after disallow_future_use",
    _A_ = [0, cst_src_internal_observer_ml, 129, 4056, 4068],
    _B_ = [0, cst$0],
    cst_Observer_value_exn_called_$0 =
      "Observer.value_exn called without stabilizing",
    _C_ = [0, cst_src_internal_observer_ml, 123, 3909, 3921],
    _D_ = [0, cst$0],
    cst_on_update_disallowed = "on_update disallowed",
    _E_ = [0, cst_src_internal_observer_ml, 144, 4466, 4486],
    _F_ = [0, cst_src_internal_observer_ml, 148, 32],
    _G_ = [0, cst$0];
   function sexp_of_internal_observer(of_a_002, param){
    var
     state_004 = param[1],
     observing_006 = param[2],
     on_update_handlers_008 = param[3],
     prev_in_all_010 = param[4],
     next_in_all_012 = param[5],
     prev_in_observing_014 = param[6],
     next_in_observing_016 = param[7],
     arg_017 =
       caml_call2
        (Incremental_Import[16][1],
         Sexplib0_Sexp_conv[23],
         next_in_observing_016),
     bnds_003 = [0, [1, [0, _f_, [0, arg_017, 0]]], 0],
     arg_015 =
       caml_call2
        (Incremental_Import[16][1],
         Sexplib0_Sexp_conv[23],
         prev_in_observing_014),
     bnds_003$0 = [0, [1, [0, _g_, [0, arg_015, 0]]], bnds_003],
     arg_013 =
       caml_call2(Incremental_Import[16][1], sexp_of_t, next_in_all_012),
     bnds_003$1 = [0, [1, [0, _h_, [0, arg_013, 0]]], bnds_003$0],
     arg_011 =
       caml_call2(Incremental_Import[16][1], sexp_of_t, prev_in_all_010),
     bnds_003$2 = [0, [1, [0, _i_, [0, arg_011, 0]]], bnds_003$1],
     _V_ = caml_call1(Incremental_On_update_handler[2], of_a_002),
     arg_009 = caml_call2(Core[421], _V_, on_update_handlers_008),
     bnds_003$3 = [0, [1, [0, _j_, [0, arg_009, 0]]], bnds_003$2],
     arg_007 = caml_call2(Incremental_Node[2], of_a_002, observing_006),
     bnds_003$4 = [0, [1, [0, _k_, [0, arg_007, 0]]], bnds_003$3];
    switch(state_004){
      case 0:
       var arg_005 = _b_; break;
      case 1:
       var arg_005 = _c_; break;
      case 2:
       var arg_005 = _d_; break;
      default: var arg_005 = _e_;
    }
    var bnds_003$5 = [0, [1, [0, _l_, [0, arg_005, 0]]], bnds_003$4];
    return [1, bnds_003$5];
   }
   function incr_state(t){return t[2][2];}
   function use_is_allowed(t){return 2 <= t[1] ? 0 : 1;}
   function same(t1, t2){return caml_call2(Core[247], t1, t2);}
   function invariant(invariant_a, t1){
    return caml_call4
            (Base_Invariant[1],
             _w_,
             t1,
             function(x_020){
              return sexp_of_internal_observer
                      (function(param){return _v_;}, x_020);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t1, f);}
              var
               next_in_observing_fun =
                 check
                  (function(next_in_observing){
                    if
                     (1 < t1[1] - 1 >>> 0
                      &&
                       !
                       caml_call1(Incremental_Import[16][5], next_in_observing))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _n_], 1);
                    var
                     _T_ =
                       caml_call1(Incremental_Import[16][6], next_in_observing);
                    if(! _T_) return _T_;
                    var
                     r = caml_call1(Incremental_Import[16][7], next_in_observing),
                     _U_ = caml_call1(Incremental_Import[16][7], r[6]);
                    if(caml_call2(Core[246], t1, _U_)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _m_], 1);
                   }),
               prev_in_observing_fun =
                 check
                  (function(prev_in_observing){
                    if
                     (1 < t1[1] - 1 >>> 0
                      &&
                       !
                       caml_call1(Incremental_Import[16][5], prev_in_observing))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _p_], 1);
                    var
                     _R_ =
                       caml_call1(Incremental_Import[16][6], prev_in_observing);
                    if(! _R_) return _R_;
                    var
                     r = caml_call1(Incremental_Import[16][7], prev_in_observing),
                     _S_ = caml_call1(Incremental_Import[16][7], r[7]);
                    if(caml_call2(Core[246], t1, _S_)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _o_], 1);
                   }),
               next_in_all_fun =
                 check
                  (function(next_in_all){
                    if
                     (1 < t1[1] - 1 >>> 0
                      && ! caml_call1(Incremental_Import[16][5], next_in_all))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _r_], 1);
                    var
                     _Q_ = caml_call1(Incremental_Import[16][6], next_in_all);
                    if(! _Q_) return _Q_;
                    var
                     _P_ = caml_call1(Incremental_Import[16][7], next_in_all)[4];
                    if(same(t1, caml_call1(Incremental_Import[16][7], _P_)))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _q_], 1);
                   }),
               prev_in_all_fun =
                 check
                  (function(prev_in_all){
                    if
                     (1 < t1[1] - 1 >>> 0
                      && ! caml_call1(Incremental_Import[16][5], prev_in_all))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _t_], 1);
                    var
                     _N_ = caml_call1(Incremental_Import[16][6], prev_in_all);
                    if(! _N_) return _N_;
                    var
                     _O_ = caml_call1(Incremental_Import[16][7], prev_in_all)[5];
                    if(same(t1, caml_call1(Incremental_Import[16][7], _O_)))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _s_], 1);
                   }),
               on_update_handlers_fun =
                 check
                  (function(on_update_handlers){
                    if(3 > t1[1]) return 0;
                    if(caml_call1(Core_List[8], on_update_handlers)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _u_], 1);
                   }),
               observing_fun =
                 check(caml_call1(Incremental_Node[4], invariant_a));
              caml_call1(observing_fun, observing$0);
              caml_call1(on_update_handlers_fun, on_update_handlers$0);
              caml_call1(prev_in_all_fun, prev_in_all$0);
              caml_call1(next_in_all_fun, next_in_all$1);
              caml_call1(prev_in_observing_fun, prev_in_observing$0);
              return caml_call1(next_in_observing_fun, next_in_observing$0);
             });
   }
   function value_exn(t){
    var _M_ = t[1];
    if(1 !== _M_)
     return _M_
             ? caml_call5
               (Core[236],
                0,
                _A_,
                cst_Observer_value_exn_called_,
                t,
                function(x_022){
                 return sexp_of_internal_observer
                         (function(param){return _z_;}, x_022);
                })
             : caml_call5
               (Core[236],
                0,
                _C_,
                cst_Observer_value_exn_called_$0,
                t,
                function(x_021){
                 return sexp_of_internal_observer
                         (function(param){return _B_;}, x_021);
                });
    var uopt = t[2][4];
    if(caml_call1(Incremental_Import[16][5], uopt))
     caml_call5
      (Core[236],
       0,
       _y_,
       cst_attempt_to_get_value_of_an,
       t,
       function(x_023){
        return sexp_of_internal_observer(function(param){return _x_;}, x_023);
       });
    return caml_call1(Incremental_Import[16][11], uopt);
   }
   function on_update_exn(t, on_update_handler){
    if(2 <= t[1])
     return caml_call5
             (Core[236],
              0,
              _E_,
              cst_on_update_disallowed,
              t,
              function(x_024){
               return sexp_of_internal_observer
                       (function(param){return _D_;}, x_024);
              });
    t[3] = [0, on_update_handler, t[3]];
    var _L_ = t[1];
    if(1 === _L_){
     var observing = t[2];
     observing[8] = observing[8] + 1 | 0;
     return 0;
    }
    if(_L_) throw caml_maybe_attach_backtrace([0, Assert_failure, _F_], 1);
    return 0;
   }
   function unlink(t){
    var prev = t[6], next = t[7];
    t[6] = Incremental_Import[16][3];
    t[7] = Incremental_Import[16][3];
    if(caml_call1(Incremental_Import[16][6], next))
     caml_call1(Incremental_Import[16][11], next)[6] = prev;
    if(caml_call1(Incremental_Import[16][6], prev))
     caml_call1(Incremental_Import[16][11], prev)[7] = next;
    var
     observing = t[2],
     _I_ = caml_call1(Incremental_Import[16][7], observing[21]);
    if(caml_call2(Core[246], t, _I_)) observing[21] = next;
    var _J_ = caml_call1(Core_List[7], t[3]);
    observing[8] = observing[8] - _J_ | 0;
    t[3] = 0;
    var prev$0 = t[4], next$0 = t[5];
    t[4] = Incremental_Import[16][3];
    t[5] = Incremental_Import[16][3];
    if(caml_call1(Incremental_Import[16][6], next$0))
     set_prev_in_all(caml_call1(Incremental_Import[16][11], next$0), prev$0);
    var _K_ = caml_call1(Incremental_Import[16][6], prev$0);
    return _K_
            ? (caml_call1(Incremental_Import[16][11], prev$0)[5] = next$0, 0)
            : _K_;
   }
   function sexp_of_t$0(x_025){
    return sexp_of_internal_observer(function(param){return _G_;}, x_025);
   }
   function invariant$0(param){
    return invariant(function(_H_){return 0;}, param);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Internal_obser);
   var
    Incremental_Internal_observer =
      [0,
       invariant,
       sexp_of_internal_observer,
       same,
       observing,
       use_is_allowed,
       value_exn,
       on_update_exn,
       unlink,
       incr_state,
       [0, sexp_of_t$0, invariant$0, next_in_all, set_prev_in_all]];
   runtime.caml_register_global
    (66, Incremental_Internal_observer, cst_Incremental_Internal_obser);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Observer
//# unitInfo: Requires: Core, Expect_test_collector, Incremental__Internal_observer, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Observer = "Incremental__Observer",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_Internal_observer = global_data.Incremental__Internal_observer,
    Core = global_data.Core,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Observer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/observer.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function sexp_of_t(of_a_001, x_002){
    var _a_ = caml_call1(Incremental_Internal_observer[2], of_a_001);
    return caml_call2(Core[501], _a_, x_002);
   }
   function invariant(invariant_a, t){
    return caml_call2(Incremental_Internal_observer[1], invariant_a, t[1]);
   }
   function observing(t){
    return caml_call1(Incremental_Internal_observer[4], t[1]);
   }
   function use_is_allowed(t){
    return caml_call1(Incremental_Internal_observer[5], t[1]);
   }
   function value_exn(t){
    return caml_call1(Incremental_Internal_observer[6], t[1]);
   }
   function incr_state(t){
    return caml_call1(Incremental_Internal_observer[9], t[1]);
   }
   function on_update_exn(t, on_update_handler){
    return caml_call2
            (Incremental_Internal_observer[7], t[1], on_update_handler);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Observer);
   var
    Incremental_Observer =
      [0,
       invariant,
       sexp_of_t,
       observing,
       use_is_allowed,
       value_exn,
       on_update_exn,
       incr_state];
   runtime.caml_register_global
    (13, Incremental_Observer, cst_Incremental_Observer);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__State
//# unitInfo: Requires: Assert_failure, Base__Backtrace, Base__Field, Base__Invariant, Core, Core__Error, Core__Fn, Core__Gc, Core__Hashtbl, Core__Int, Core__Lazy, Core__List, Core__Option, Core__Or_error, Core__Percent, Core__Sequence, Core__Stack, Core__Tuple, Expect_test_collector, Incremental__Adjust_heights_heap, Incremental__Alarm, Incremental__Alarm_value, Incremental__Array_fold, Incremental__Cutoff, Incremental__Expert, Incremental__Import, Incremental__Internal_observer, Incremental__Kind, Incremental__Node, Incremental__Observer, Incremental__On_update_handler, Incremental__Raised_exn, Incremental__Recompute_heap, Incremental__Scope, Incremental__Stabilization_num, Incremental__Step_function_node, Incremental__Unordered_array_fold, Incremental__Var, Incremental_step_function, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Thread_safe_queue, Timing_wheel, Weak_hashtbl
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_during_stabilization$0 = " during stabilization",
    cst_Incremental_State = "Incremental__State",
    cst_T = "T",
    cst$0 = "_",
    cst_adjust_heights_heap = "adjust_heights_heap",
    cst_all_observers = "all_observers",
    cst_bind_lhs_change_should_inv = "bind_lhs_change_should_invalidate_rhs",
    cst_can_only_call$2 = "can only call ",
    cst_cannot = "cannot ",
    cst_current_kind = "current.kind",
    cst_current_scope = "current_scope",
    cst_currently_running_node = "currently_running_node",
    cst_disallowed_observers = "disallowed_observers",
    cst_expert_nodes_created_by_cu = "expert_nodes_created_by_current_node",
    cst_finalized_observers = "finalized_observers",
    cst_fired_alarm_values = "fired_alarm_values",
    cst_handle_after_stabilization = "handle_after_stabilization",
    cst_handle_fired = "handle_fired",
    cst_incremental = "incremental",
    cst_keep_node_creation_backtra = "keep_node_creation_backtrace",
    cst_max_num_parents$0 = "max_num_parents",
    cst_new_observers = "new_observers",
    cst_node_kind = "node.kind",
    cst_now = "now",
    cst_num_active_observers = "num_active_observers",
    cst_num_nodes_became_necessary = "num_nodes_became_necessary",
    cst_num_nodes_became_unnecessa = "num_nodes_became_unnecessary",
    cst_num_nodes_changed = "num_nodes_changed",
    cst_num_nodes_created = "num_nodes_created",
    cst_num_nodes_invalidated = "num_nodes_invalidated",
    cst_num_nodes_recomputed = "num_nodes_recomputed",
    cst_num_nodes_recomputed_direc =
      "num_nodes_recomputed_directly_because_min_height",
    cst_num_nodes_recomputed_direc$0 =
      "num_nodes_recomputed_directly_because_one_child",
    cst_num_var_sets = "num_var_sets",
    cst_only_in_debug = "only_in_debug",
    cst_percentage_of_nodes_by_num$0 = "percentage_of_nodes_by_num_parents",
    cst_propagate_invalidity = "propagate_invalidity",
    cst_recompute_heap = "recompute_heap",
    cst_run_on_update_handlers = "run_on_update_handlers",
    cst_set_during_stabilization = "set_during_stabilization",
    cst_src_state_ml = "src/state.ml",
    cst_stabilization_num = "stabilization_num",
    cst_status = "status",
    cst_timing_wheel = "timing_wheel",
    cst_weak_hashtbls = "weak_hashtbls",
    caml_check_bound = runtime.caml_check_bound,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) == 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   function caml_call12(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11){
    return (f.l >= 0 ? f.l : f.l = f.length) == 12
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11]);
   }
   function caml_call13
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12){
    return (f.l >= 0 ? f.l : f.l = f.length) == 13
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) == 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   function caml_call15
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14){
    return (f.l >= 0 ? f.l : f.l = f.length) == 15
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14]);
   }
   function caml_call27
   (f,
    a0,
    a1,
    a2,
    a3,
    a4,
    a5,
    a6,
    a7,
    a8,
    a9,
    a10,
    a11,
    a12,
    a13,
    a14,
    a15,
    a16,
    a17,
    a18,
    a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26){
    return (f.l >= 0 ? f.l : f.l = f.length) == 27
            ? f
              (a0,
               a1,
               a2,
               a3,
               a4,
               a5,
               a6,
               a7,
               a8,
               a9,
               a10,
               a11,
               a12,
               a13,
               a14,
               a15,
               a16,
               a17,
               a18,
               a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26)
            : runtime.caml_call_gen
              (f,
               [a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
                a10,
                a11,
                a12,
                a13,
                a14,
                a15,
                a16,
                a17,
                a18,
                a19,
                a20,
                a21,
                a22,
                a23,
                a24,
                a25,
                a26]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    names =
      [0, cst_currently_running_node, [0, cst_expert_nodes_created_by_cu, 0]],
    names$0 =
      caml_list_of_js_array
       ([cst_status,
         cst_bind_lhs_change_should_inv,
         cst_stabilization_num,
         cst_current_scope,
         cst_recompute_heap,
         cst_adjust_heights_heap,
         cst_propagate_invalidity,
         cst_num_active_observers,
         cst_all_observers,
         cst_finalized_observers,
         cst_new_observers,
         cst_disallowed_observers,
         cst_set_during_stabilization,
         cst_handle_after_stabilization,
         cst_run_on_update_handlers,
         cst_only_in_debug,
         cst_weak_hashtbls,
         cst_keep_node_creation_backtra,
         cst_num_nodes_became_necessary,
         cst_num_nodes_became_unnecessa,
         cst_num_nodes_changed,
         cst_num_nodes_created,
         cst_num_nodes_invalidated,
         cst_num_nodes_recomputed,
         cst_num_nodes_recomputed_direc$0,
         cst_num_nodes_recomputed_direc,
         cst_num_var_sets]),
    names$1 =
      [0,
       cst_timing_wheel,
       [0, cst_now, [0, cst_handle_fired, [0, cst_fired_alarm_values, 0]]]],
    error_source_095 = "src/state.ml.Stats.t",
    Incremental_Node = global_data.Incremental__Node,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Expert = global_data.Incremental__Expert,
    Incremental_Unordered_array_fo =
      global_data.Incremental__Unordered_array_fold,
    Assert_failure = global_data.Assert_failure,
    Incremental_Recompute_heap = global_data.Incremental__Recompute_heap,
    Incremental_Scope = global_data.Incremental__Scope,
    Core_Stack = global_data.Core__Stack,
    Core = global_data.Core,
    Incremental_Array_fold = global_data.Incremental__Array_fold,
    Incremental_Kind = global_data.Incremental__Kind,
    Incremental_Stabilization_num = global_data.Incremental__Stabilization_num,
    Incremental_step_function = global_data.Incremental_step_function,
    Incremental_Step_function_node =
      global_data.Incremental__Step_function_node,
    Core_Sequence = global_data.Core__Sequence,
    Incremental_Cutoff = global_data.Incremental__Cutoff,
    Core_List = global_data.Core__List,
    Core_Option = global_data.Core__Option,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Weak_hashtbl = global_data.Weak_hashtbl,
    Thread_safe_queue = global_data.Thread_safe_queue,
    Incremental_Adjust_heights_hea =
      global_data.Incremental__Adjust_heights_heap,
    Timing_wheel = global_data.Timing_wheel,
    Incremental_Alarm = global_data.Incremental__Alarm,
    Incremental_Alarm_value = global_data.Incremental__Alarm_value,
    Core_Or_error = global_data.Core__Or_error,
    Core_Fn = global_data.Core__Fn,
    Core_Int = global_data.Core__Int,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Core_Lazy = global_data.Core__Lazy,
    Core_Gc = global_data.Core__Gc,
    Core_Tuple = global_data.Core__Tuple,
    Incremental_Raised_exn = global_data.Incremental__Raised_exn,
    Incremental_Var = global_data.Incremental__Var,
    Incremental_Observer = global_data.Incremental__Observer,
    Incremental_On_update_handler = global_data.Incremental__On_update_handler,
    Core_Error = global_data.Core__Error,
    Incremental_Internal_observer = global_data.Incremental__Internal_observer,
    Base_Backtrace = global_data.Base__Backtrace,
    Base_Invariant = global_data.Base__Invariant,
    Core_Percent = global_data.Core__Percent,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_Field = global_data.Base__Field,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_State);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_state_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    _a_ = [0, "Stabilizing"],
    _b_ = [0, "Running_on_update_handlers"],
    _c_ = [0, "Not_stabilizing"],
    _d_ = [0, "Stabilize_previously_raised"],
    _e_ = [0, cst$0],
    _f_ = [0, cst$0],
    _g_ = [0, cst_T],
    _h_ = [0, cst_src_state_ml, 25, 715, 739];
   function sexp_of_status(param){
    if(typeof param === "number")
     switch(param){case 0: return _a_;case 1: return _b_;default: return _c_;}
    var
     arg0_001 = param[1],
     res0_002 = caml_call1(Incremental_Raised_exn[1], arg0_001);
    return [1, [0, _d_, [0, res0_002, 0]]];
   }
   function sexp_of_t(param){
    var
     arg1_004 = param[2],
     arg0_003 = param[1],
     res0_005 =
       caml_call2(Incremental_Node[2], function(param){return _e_;}, arg0_003),
     res1_006 =
       caml_call2
        (Incremental_On_update_handler[1][2],
         function(param){return _f_;},
         arg1_004);
    return [1, [0, _g_, [0, res0_005, [0, res1_006, 0]]]];
   }
   function invariant(t){
    var node = t[1];
    return caml_call4
            (Base_Invariant[1],
             _h_,
             t,
             sexp_of_t,
             function(param){
              return caml_call2
                      (Incremental_Node[4], function(_kW_){return 0;}, node);
             });
   }
   var Run_on_update_handlers = [0, sexp_of_t, invariant];
   function expert_nodes_created_by_curren(r){return r[2];}
   function set_expert_nodes_created_by_cu(r, v){r[2] = v; return 0;}
   function currently_running_node(r){return r[1];}
   function set_currently_running_node(r, v){r[1] = v; return 0;}
   var
    expert_nodes_created_by_curren$0 =
      [0,
       function(param){return 0;},
       cst_expert_nodes_created_by_cu,
       [0, set_expert_nodes_created_by_cu],
       expert_nodes_created_by_curren,
       function(r, v){return [0, r[1], v];}],
    currently_running_node$0 =
      [0,
       function(param){return 0;},
       cst_currently_running_node,
       [0, set_currently_running_node],
       currently_running_node,
       function(r, v){return [0, v, r[2]];}];
   function make_creator
   (currently_running_node_fun, expert_nodes_created_by_curren, compile_acc){
    var
     match =
       caml_call2
        (currently_running_node_fun, currently_running_node$0, compile_acc),
     compile_acc$0 = match[2],
     currently_running_node_gen = match[1],
     match$0 =
       caml_call2
        (expert_nodes_created_by_curren,
         expert_nodes_created_by_curren$0,
         compile_acc$0),
     compile_acc$1 = match$0[2],
     expert_nodes_created_by_curren$1 = match$0[1];
    return [0,
            function(acc){
             var
              currently_running_node =
                caml_call1(currently_running_node_gen, acc),
              expert_nodes_created_by_curren =
                caml_call1(expert_nodes_created_by_curren$1, acc);
             return [0,
                     currently_running_node,
                     expert_nodes_created_by_curren];
            },
            compile_acc$1];
   }
   function create(currently_running_node, expert_nodes_created_by_curren){return [0, currently_running_node, expert_nodes_created_by_curren];
   }
   function map(currently_running_node_fun, expert_nodes_created_by_curren){
    var
     _kV_ =
       caml_call1
        (expert_nodes_created_by_curren, expert_nodes_created_by_curren$0);
    return [0,
            caml_call1(currently_running_node_fun, currently_running_node$0),
            _kV_];
   }
   function iter(currently_running_node_fun, expert_nodes_created_by_curren){
    caml_call1(currently_running_node_fun, currently_running_node$0);
    return caml_call1
            (expert_nodes_created_by_curren, expert_nodes_created_by_curren$0);
   }
   function fold
   (init, currently_running_node_fun, expert_nodes_created_by_curren){
    return caml_call2
            (expert_nodes_created_by_curren,
             caml_call2
              (currently_running_node_fun, init, currently_running_node$0),
             expert_nodes_created_by_curren$0);
   }
   function map_poly(record){
    var
     _kU_ = [0, caml_call1(record[1], expert_nodes_created_by_curren$0), 0];
    return [0, caml_call1(record[1], currently_running_node$0), _kU_];
   }
   function for_all
   (currently_running_node_fun, expert_nodes_created_by_curren){
    var
     _kT_ = caml_call1(currently_running_node_fun, currently_running_node$0);
    return _kT_
            ? caml_call1
              (expert_nodes_created_by_curren,
               expert_nodes_created_by_curren$0)
            : _kT_;
   }
   function exists(currently_running_node_fun, expert_nodes_created_by_curren){
    var
     _kS_ = caml_call1(currently_running_node_fun, currently_running_node$0);
    return _kS_
            ? _kS_
            : caml_call1
              (expert_nodes_created_by_curren,
               expert_nodes_created_by_curren$0);
   }
   function to_list
   (currently_running_node_fun, expert_nodes_created_by_curren){
    var
     _kR_ =
       [0,
        caml_call1
         (expert_nodes_created_by_curren, expert_nodes_created_by_curren$0),
        0];
    return [0,
            caml_call1(currently_running_node_fun, currently_running_node$0),
            _kR_];
   }
   function iter$0
   (record, currently_running_node_fun, expert_nodes_created_by_curren){
    caml_call3
     (currently_running_node_fun, currently_running_node$0, record, record[1]);
    return caml_call3
            (expert_nodes_created_by_curren,
             expert_nodes_created_by_curren$0,
             record,
             record[2]);
   }
   function fold$0
   (record, init, currently_running_node_fun, expert_nodes_created_by_curren){
    var _kQ_ = record[2];
    return caml_call4
            (expert_nodes_created_by_curren,
             caml_call4
              (currently_running_node_fun,
               init,
               currently_running_node$0,
               record,
               record[1]),
             expert_nodes_created_by_curren$0,
             record,
             _kQ_);
   }
   function for_all$0
   (record, currently_running_node_fun, expert_nodes_created_by_curren){
    var
     _kP_ =
       caml_call3
        (currently_running_node_fun,
         currently_running_node$0,
         record,
         record[1]);
    return _kP_
            ? caml_call3
              (expert_nodes_created_by_curren,
               expert_nodes_created_by_curren$0,
               record,
               record[2])
            : _kP_;
   }
   function exists$0
   (record, currently_running_node_fun, expert_nodes_created_by_curren){
    var
     _kO_ =
       caml_call3
        (currently_running_node_fun,
         currently_running_node$0,
         record,
         record[1]);
    return _kO_
            ? _kO_
            : caml_call3
              (expert_nodes_created_by_curren,
               expert_nodes_created_by_curren$0,
               record,
               record[2]);
   }
   function to_list$0
   (record, currently_running_node_fun, expert_nodes_created_by_curren){
    var
     _kN_ =
       [0,
        caml_call3
         (expert_nodes_created_by_curren,
          expert_nodes_created_by_curren$0,
          record,
          record[2]),
        0];
    return [0,
            caml_call3
             (currently_running_node_fun,
              currently_running_node$0,
              record,
              record[1]),
            _kN_];
   }
   function map$0
   (record, currently_running_node_fun, expert_nodes_created_by_curren){
    var
     _kM_ =
       caml_call3
        (expert_nodes_created_by_curren,
         expert_nodes_created_by_curren$0,
         record,
         record[2]);
    return [0,
            caml_call3
             (currently_running_node_fun,
              currently_running_node$0,
              record,
              record[1]),
            _kM_];
   }
   function set_all_mutable_fields
   (record, currently_running_node, expert_nodes_created_by_curren){
    var record$0 = caml_call1(Base_Field[1][1], record);
    record$0[1] = currently_running_node;
    record$0[2] = expert_nodes_created_by_curren;
    return 0;
   }
   var
    Direct =
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields],
    Fields =
      [0,
       names,
       expert_nodes_created_by_curren$0,
       currently_running_node$0,
       make_creator,
       create,
       map,
       iter,
       fold,
       map_poly,
       for_all,
       exists,
       to_list,
       Direct],
    _i_ = [0, cst_expert_nodes_created_by_cu],
    _j_ = [0, cst_currently_running_node],
    _k_ = [0, cst_src_state_ml, 38, 1149, 1173];
   function sexp_of_t$0(param){
    var
     currently_running_node_008 = param[1],
     expert_nodes_created_by_curren = param[2],
     arg_011 =
       caml_call2
        (Core[421], Incremental_Node[1][1], expert_nodes_created_by_curren),
     bnds_007 = [0, [1, [0, _i_, [0, arg_011, 0]]], 0],
     arg_009 =
       caml_call2
        (Core[454], Incremental_Node[1][1], currently_running_node_008),
     bnds_007$0 = [0, [1, [0, _j_, [0, arg_009, 0]]], bnds_007];
    return [1, bnds_007$0];
   }
   function invariant$0(t){
    return caml_call4
            (Base_Invariant[1],
             _k_,
             t,
             sexp_of_t$0,
             function(param){
              return caml_call2
                      (Fields[7],
                       function(_kL_){return 0;},
                       function(_kK_){return 0;});
             });
   }
   function create$0(param){return [0, 0, 0];}
   var
    Only_in_debug =
      [0,
       expert_nodes_created_by_curren,
       set_expert_nodes_created_by_cu,
       currently_running_node,
       set_currently_running_node,
       Fields,
       sexp_of_t$0,
       invariant$0,
       create$0],
    _l_ = [0, cst$0],
    _m_ = [0, cst$0],
    _n_ = [0, cst_T];
   function sexp_of_t$1(param){
    var
     arg0_012 = param[1],
     res0_013 =
       caml_call3
        (Weak_hashtbl[1],
         function(param){return _m_;},
         function(param){return _l_;},
         arg0_012);
    return [1, [0, _n_, [0, res0_013, 0]]];
   }
   var Packed_weak_hashtbl = [0, sexp_of_t$1];
   function num_var_sets(r){return r[27];}
   function set_num_var_sets(r, v){r[27] = v; return 0;}
   function num_nodes_recomputed_directly_(r){return r[26];}
   function set_num_nodes_recomputed_direc(r, v){r[26] = v; return 0;}
   function num_nodes_recomputed_directly_$0(r){return r[25];}
   function set_num_nodes_recomputed_direc$0(r, v){r[25] = v; return 0;}
   function num_nodes_recomputed(r){return r[24];}
   function set_num_nodes_recomputed(r, v){r[24] = v; return 0;}
   function num_nodes_invalidated(r){return r[23];}
   function set_num_nodes_invalidated(r, v){r[23] = v; return 0;}
   function num_nodes_created(r){return r[22];}
   function set_num_nodes_created(r, v){r[22] = v; return 0;}
   function num_nodes_changed(r){return r[21];}
   function set_num_nodes_changed(r, v){r[21] = v; return 0;}
   function num_nodes_became_unnecessary(r){return r[20];}
   function set_num_nodes_became_unnecessa(r, v){r[20] = v; return 0;}
   function num_nodes_became_necessary(r){return r[19];}
   function set_num_nodes_became_necessary(r, v){r[19] = v; return 0;}
   function keep_node_creation_backtrace(r){return r[18];}
   function set_keep_node_creation_backtra(r, v){r[18] = v; return 0;}
   function weak_hashtbls(r){return r[17];}
   function only_in_debug(r){return r[16];}
   function set_only_in_debug(r, v){r[16] = v; return 0;}
   function run_on_update_handlers(r){return r[15];}
   function handle_after_stabilization(r){return r[14];}
   function set_during_stabilization(r){return r[13];}
   function disallowed_observers(r){return r[12];}
   function new_observers(r){return r[11];}
   function finalized_observers(r){return r[10];}
   function all_observers(r){return r[9];}
   function set_all_observers(r, v){r[9] = v; return 0;}
   function num_active_observers(r){return r[8];}
   function set_num_active_observers(r, v){r[8] = v; return 0;}
   function propagate_invalidity(r){return r[7];}
   function adjust_heights_heap(r){return r[6];}
   function recompute_heap(r){return r[5];}
   function current_scope(r){return r[4];}
   function set_current_scope(r, v){r[4] = v; return 0;}
   function stabilization_num(r){return r[3];}
   function set_stabilization_num(r, v){r[3] = v; return 0;}
   function bind_lhs_change_should_invalid(r){return r[2];}
   function status(r){return r[1];}
   function set_status(r, v){r[1] = v; return 0;}
   var
    num_var_sets$0 =
      [0,
       function(param){return 0;},
       cst_num_var_sets,
       [0, set_num_var_sets],
       num_var_sets,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                v];
       }],
    num_nodes_recomputed_directly_$1 =
      [0,
       function(param){return 0;},
       cst_num_nodes_recomputed_direc,
       [0, set_num_nodes_recomputed_direc],
       num_nodes_recomputed_directly_,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                v,
                r[27]];
       }],
    num_nodes_recomputed_directly_$2 =
      [0,
       function(param){return 0;},
       cst_num_nodes_recomputed_direc$0,
       [0, set_num_nodes_recomputed_direc$0],
       num_nodes_recomputed_directly_$0,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                v,
                r[26],
                r[27]];
       }],
    num_nodes_recomputed$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_recomputed,
       [0, set_num_nodes_recomputed],
       num_nodes_recomputed,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                v,
                r[25],
                r[26],
                r[27]];
       }],
    num_nodes_invalidated$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_invalidated,
       [0, set_num_nodes_invalidated],
       num_nodes_invalidated,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                v,
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    num_nodes_created$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_created,
       [0, set_num_nodes_created],
       num_nodes_created,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                v,
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    num_nodes_changed$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_changed,
       [0, set_num_nodes_changed],
       num_nodes_changed,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                v,
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    num_nodes_became_unnecessary$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_became_unnecessa,
       [0, set_num_nodes_became_unnecessa],
       num_nodes_became_unnecessary,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                v,
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    num_nodes_became_necessary$0 =
      [0,
       function(param){return 0;},
       cst_num_nodes_became_necessary,
       [0, set_num_nodes_became_necessary],
       num_nodes_became_necessary,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                v,
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    keep_node_creation_backtrace$0 =
      [0,
       function(param){return 0;},
       cst_keep_node_creation_backtra,
       [0, set_keep_node_creation_backtra],
       keep_node_creation_backtrace,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                v,
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    weak_hashtbls$0 =
      [0,
       function(param){return 0;},
       cst_weak_hashtbls,
       0,
       weak_hashtbls,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                v,
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    only_in_debug$0 =
      [0,
       function(param){return 0;},
       cst_only_in_debug,
       [0, set_only_in_debug],
       only_in_debug,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                v,
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    run_on_update_handlers$0 =
      [0,
       function(param){return 0;},
       cst_run_on_update_handlers,
       0,
       run_on_update_handlers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                v,
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    handle_after_stabilization$0 =
      [0,
       function(param){return 0;},
       cst_handle_after_stabilization,
       0,
       handle_after_stabilization,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                v,
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    set_during_stabilization$0 =
      [0,
       function(param){return 0;},
       cst_set_during_stabilization,
       0,
       set_during_stabilization,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                v,
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    disallowed_observers$0 =
      [0,
       function(param){return 0;},
       cst_disallowed_observers,
       0,
       disallowed_observers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                v,
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    new_observers$0 =
      [0,
       function(param){return 0;},
       cst_new_observers,
       0,
       new_observers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                v,
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    finalized_observers$0 =
      [0,
       function(param){return 0;},
       cst_finalized_observers,
       0,
       finalized_observers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                v,
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    all_observers$0 =
      [0,
       function(param){return 0;},
       cst_all_observers,
       [0, set_all_observers],
       all_observers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                v,
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    num_active_observers$0 =
      [0,
       function(param){return 0;},
       cst_num_active_observers,
       [0, set_num_active_observers],
       num_active_observers,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                v,
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    propagate_invalidity$0 =
      [0,
       function(param){return 0;},
       cst_propagate_invalidity,
       0,
       propagate_invalidity,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                v,
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    adjust_heights_heap$0 =
      [0,
       function(param){return 0;},
       cst_adjust_heights_heap,
       0,
       adjust_heights_heap,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                v,
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    recompute_heap$0 =
      [0,
       function(param){return 0;},
       cst_recompute_heap,
       0,
       recompute_heap,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                v,
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    current_scope$0 =
      [0,
       function(param){return 0;},
       cst_current_scope,
       [0, set_current_scope],
       current_scope,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                v,
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    stabilization_num$0 =
      [0,
       function(param){return 0;},
       cst_stabilization_num,
       [0, set_stabilization_num],
       stabilization_num,
       function(r, v){
        return [0,
                r[1],
                r[2],
                v,
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    bind_lhs_change_should_invalid$0 =
      [0,
       function(param){return 0;},
       cst_bind_lhs_change_should_inv,
       0,
       bind_lhs_change_should_invalid,
       function(r, v){
        return [0,
                r[1],
                v,
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }],
    status$0 =
      [0,
       function(param){return 0;},
       cst_status,
       [0, set_status],
       status,
       function(r, v){
        return [0,
                v,
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11],
                r[12],
                r[13],
                r[14],
                r[15],
                r[16],
                r[17],
                r[18],
                r[19],
                r[20],
                r[21],
                r[22],
                r[23],
                r[24],
                r[25],
                r[26],
                r[27]];
       }];
   function make_creator$0
   (status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun,
    compile_acc){
    var
     match = caml_call2(status_fun, status$0, compile_acc),
     compile_acc$0 = match[2],
     status_gen = match[1],
     match$0 =
       caml_call2
        (bind_lhs_change_should_invalid,
         bind_lhs_change_should_invalid$0,
         compile_acc$0),
     compile_acc$1 = match$0[2],
     bind_lhs_change_should_invalid$1 = match$0[1],
     match$1 =
       caml_call2(stabilization_num_fun, stabilization_num$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     stabilization_num_gen = match$1[1],
     match$2 = caml_call2(current_scope_fun, current_scope$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     current_scope_gen = match$2[1],
     match$3 = caml_call2(recompute_heap_fun, recompute_heap$0, compile_acc$3),
     compile_acc$4 = match$3[2],
     recompute_heap_gen = match$3[1],
     match$4 =
       caml_call2
        (adjust_heights_heap_fun, adjust_heights_heap$0, compile_acc$4),
     compile_acc$5 = match$4[2],
     adjust_heights_heap_gen = match$4[1],
     match$5 =
       caml_call2
        (propagate_invalidity_fun, propagate_invalidity$0, compile_acc$5),
     compile_acc$6 = match$5[2],
     propagate_invalidity_gen = match$5[1],
     match$6 =
       caml_call2
        (num_active_observers_fun, num_active_observers$0, compile_acc$6),
     compile_acc$7 = match$6[2],
     num_active_observers_gen = match$6[1],
     match$7 = caml_call2(all_observers_fun, all_observers$0, compile_acc$7),
     compile_acc$8 = match$7[2],
     all_observers_gen = match$7[1],
     match$8 =
       caml_call2
        (finalized_observers_fun, finalized_observers$0, compile_acc$8),
     compile_acc$9 = match$8[2],
     finalized_observers_gen = match$8[1],
     match$9 = caml_call2(new_observers_fun, new_observers$0, compile_acc$9),
     compile_acc$10 = match$9[2],
     new_observers_gen = match$9[1],
     match$10 =
       caml_call2
        (disallowed_observers_fun, disallowed_observers$0, compile_acc$10),
     compile_acc$11 = match$10[2],
     disallowed_observers_gen = match$10[1],
     match$11 =
       caml_call2
        (set_during_stabilization_fun,
         set_during_stabilization$0,
         compile_acc$11),
     compile_acc$12 = match$11[2],
     set_during_stabilization_gen = match$11[1],
     match$12 =
       caml_call2
        (handle_after_stabilization_fun,
         handle_after_stabilization$0,
         compile_acc$12),
     compile_acc$13 = match$12[2],
     handle_after_stabilization_gen = match$12[1],
     match$13 =
       caml_call2
        (run_on_update_handlers_fun, run_on_update_handlers$0, compile_acc$13),
     compile_acc$14 = match$13[2],
     run_on_update_handlers_gen = match$13[1],
     match$14 = caml_call2(only_in_debug_fun, only_in_debug$0, compile_acc$14),
     compile_acc$15 = match$14[2],
     only_in_debug_gen = match$14[1],
     match$15 = caml_call2(weak_hashtbls_fun, weak_hashtbls$0, compile_acc$15),
     compile_acc$16 = match$15[2],
     weak_hashtbls_gen = match$15[1],
     match$16 =
       caml_call2
        (keep_node_creation_backtrace_f,
         keep_node_creation_backtrace$0,
         compile_acc$16),
     compile_acc$17 = match$16[2],
     keep_node_creation_backtrace_g = match$16[1],
     match$17 =
       caml_call2
        (num_nodes_became_necessary_fun,
         num_nodes_became_necessary$0,
         compile_acc$17),
     compile_acc$18 = match$17[2],
     num_nodes_became_necessary_gen = match$17[1],
     match$18 =
       caml_call2
        (num_nodes_became_unnecessary_f,
         num_nodes_became_unnecessary$0,
         compile_acc$18),
     compile_acc$19 = match$18[2],
     num_nodes_became_unnecessary_g = match$18[1],
     match$19 =
       caml_call2(num_nodes_changed_fun, num_nodes_changed$0, compile_acc$19),
     compile_acc$20 = match$19[2],
     num_nodes_changed_gen = match$19[1],
     match$20 =
       caml_call2(num_nodes_created_fun, num_nodes_created$0, compile_acc$20),
     compile_acc$21 = match$20[2],
     num_nodes_created_gen = match$20[1],
     match$21 =
       caml_call2
        (num_nodes_invalidated_fun, num_nodes_invalidated$0, compile_acc$21),
     compile_acc$22 = match$21[2],
     num_nodes_invalidated_gen = match$21[1],
     match$22 =
       caml_call2
        (num_nodes_recomputed_fun, num_nodes_recomputed$0, compile_acc$22),
     compile_acc$23 = match$22[2],
     num_nodes_recomputed_gen = match$22[1],
     match$23 =
       caml_call2
        (num_nodes_recomputed_directly_$0,
         num_nodes_recomputed_directly_$2,
         compile_acc$23),
     compile_acc$24 = match$23[2],
     num_nodes_recomputed_directly_$3 = match$23[1],
     match$24 =
       caml_call2
        (num_nodes_recomputed_directly_,
         num_nodes_recomputed_directly_$1,
         compile_acc$24),
     compile_acc$25 = match$24[2],
     num_nodes_recomputed_directly_$4 = match$24[1],
     match$25 = caml_call2(num_var_sets_fun, num_var_sets$0, compile_acc$25),
     compile_acc$26 = match$25[2],
     num_var_sets_gen = match$25[1];
    return [0,
            function(acc){
             var
              status = caml_call1(status_gen, acc),
              bind_lhs_change_should_invalid =
                caml_call1(bind_lhs_change_should_invalid$1, acc),
              stabilization_num = caml_call1(stabilization_num_gen, acc),
              current_scope = caml_call1(current_scope_gen, acc),
              recompute_heap = caml_call1(recompute_heap_gen, acc),
              adjust_heights_heap = caml_call1(adjust_heights_heap_gen, acc),
              propagate_invalidity = caml_call1(propagate_invalidity_gen, acc),
              num_active_observers = caml_call1(num_active_observers_gen, acc),
              all_observers = caml_call1(all_observers_gen, acc),
              finalized_observers = caml_call1(finalized_observers_gen, acc),
              new_observers = caml_call1(new_observers_gen, acc),
              disallowed_observers = caml_call1(disallowed_observers_gen, acc),
              set_during_stabilization =
                caml_call1(set_during_stabilization_gen, acc),
              handle_after_stabilization =
                caml_call1(handle_after_stabilization_gen, acc),
              run_on_update_handlers =
                caml_call1(run_on_update_handlers_gen, acc),
              only_in_debug = caml_call1(only_in_debug_gen, acc),
              weak_hashtbls = caml_call1(weak_hashtbls_gen, acc),
              keep_node_creation_backtrace =
                caml_call1(keep_node_creation_backtrace_g, acc),
              num_nodes_became_necessary =
                caml_call1(num_nodes_became_necessary_gen, acc),
              num_nodes_became_unnecessary =
                caml_call1(num_nodes_became_unnecessary_g, acc),
              num_nodes_changed = caml_call1(num_nodes_changed_gen, acc),
              num_nodes_created = caml_call1(num_nodes_created_gen, acc),
              num_nodes_invalidated =
                caml_call1(num_nodes_invalidated_gen, acc),
              num_nodes_recomputed = caml_call1(num_nodes_recomputed_gen, acc),
              num_nodes_recomputed_directly_ =
                caml_call1(num_nodes_recomputed_directly_$3, acc),
              num_nodes_recomputed_directly_$0 =
                caml_call1(num_nodes_recomputed_directly_$4, acc),
              num_var_sets = caml_call1(num_var_sets_gen, acc);
             return [0,
                     status,
                     bind_lhs_change_should_invalid,
                     stabilization_num,
                     current_scope,
                     recompute_heap,
                     adjust_heights_heap,
                     propagate_invalidity,
                     num_active_observers,
                     all_observers,
                     finalized_observers,
                     new_observers,
                     disallowed_observers,
                     set_during_stabilization,
                     handle_after_stabilization,
                     run_on_update_handlers,
                     only_in_debug,
                     weak_hashtbls,
                     keep_node_creation_backtrace,
                     num_nodes_became_necessary,
                     num_nodes_became_unnecessary,
                     num_nodes_changed,
                     num_nodes_created,
                     num_nodes_invalidated,
                     num_nodes_recomputed,
                     num_nodes_recomputed_directly_,
                     num_nodes_recomputed_directly_$0,
                     num_var_sets];
            },
            compile_acc$26];
   }
   function create$1
   (status,
    bind_lhs_change_should_invalid,
    stabilization_num,
    current_scope,
    recompute_heap,
    adjust_heights_heap,
    propagate_invalidity,
    num_active_observers,
    all_observers,
    finalized_observers,
    new_observers,
    disallowed_observers,
    set_during_stabilization,
    handle_after_stabilization,
    run_on_update_handlers,
    only_in_debug,
    weak_hashtbls,
    keep_node_creation_backtrace,
    num_nodes_became_necessary,
    num_nodes_became_unnecessary,
    num_nodes_changed,
    num_nodes_created,
    num_nodes_invalidated,
    num_nodes_recomputed,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets){
    return [0,
            status,
            bind_lhs_change_should_invalid,
            stabilization_num,
            current_scope,
            recompute_heap,
            adjust_heights_heap,
            propagate_invalidity,
            num_active_observers,
            all_observers,
            finalized_observers,
            new_observers,
            disallowed_observers,
            set_during_stabilization,
            handle_after_stabilization,
            run_on_update_handlers,
            only_in_debug,
            weak_hashtbls,
            keep_node_creation_backtrace,
            num_nodes_became_necessary,
            num_nodes_became_unnecessary,
            num_nodes_changed,
            num_nodes_created,
            num_nodes_invalidated,
            num_nodes_recomputed,
            num_nodes_recomputed_directly_$0,
            num_nodes_recomputed_directly_,
            num_var_sets];
   }
   function map$1
   (status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _kk_ = caml_call1(num_var_sets_fun, num_var_sets$0),
     _kl_ =
       caml_call1
        (num_nodes_recomputed_directly_, num_nodes_recomputed_directly_$1),
     _km_ =
       caml_call1
        (num_nodes_recomputed_directly_$0, num_nodes_recomputed_directly_$2),
     _kn_ = caml_call1(num_nodes_recomputed_fun, num_nodes_recomputed$0),
     _ko_ = caml_call1(num_nodes_invalidated_fun, num_nodes_invalidated$0),
     _kp_ = caml_call1(num_nodes_created_fun, num_nodes_created$0),
     _kq_ = caml_call1(num_nodes_changed_fun, num_nodes_changed$0),
     _kr_ =
       caml_call1
        (num_nodes_became_unnecessary_f, num_nodes_became_unnecessary$0),
     _ks_ =
       caml_call1
        (num_nodes_became_necessary_fun, num_nodes_became_necessary$0),
     _kt_ =
       caml_call1
        (keep_node_creation_backtrace_f, keep_node_creation_backtrace$0),
     _ku_ = caml_call1(weak_hashtbls_fun, weak_hashtbls$0),
     _kv_ = caml_call1(only_in_debug_fun, only_in_debug$0),
     _kw_ = caml_call1(run_on_update_handlers_fun, run_on_update_handlers$0),
     _kx_ =
       caml_call1
        (handle_after_stabilization_fun, handle_after_stabilization$0),
     _ky_ =
       caml_call1(set_during_stabilization_fun, set_during_stabilization$0),
     _kz_ = caml_call1(disallowed_observers_fun, disallowed_observers$0),
     _kA_ = caml_call1(new_observers_fun, new_observers$0),
     _kB_ = caml_call1(finalized_observers_fun, finalized_observers$0),
     _kC_ = caml_call1(all_observers_fun, all_observers$0),
     _kD_ = caml_call1(num_active_observers_fun, num_active_observers$0),
     _kE_ = caml_call1(propagate_invalidity_fun, propagate_invalidity$0),
     _kF_ = caml_call1(adjust_heights_heap_fun, adjust_heights_heap$0),
     _kG_ = caml_call1(recompute_heap_fun, recompute_heap$0),
     _kH_ = caml_call1(current_scope_fun, current_scope$0),
     _kI_ = caml_call1(stabilization_num_fun, stabilization_num$0),
     _kJ_ =
       caml_call1
        (bind_lhs_change_should_invalid, bind_lhs_change_should_invalid$0);
    return [0,
            caml_call1(status_fun, status$0),
            _kJ_,
            _kI_,
            _kH_,
            _kG_,
            _kF_,
            _kE_,
            _kD_,
            _kC_,
            _kB_,
            _kA_,
            _kz_,
            _ky_,
            _kx_,
            _kw_,
            _kv_,
            _ku_,
            _kt_,
            _ks_,
            _kr_,
            _kq_,
            _kp_,
            _ko_,
            _kn_,
            _km_,
            _kl_,
            _kk_];
   }
   function iter$1
   (status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    caml_call1(status_fun, status$0);
    caml_call1
     (bind_lhs_change_should_invalid, bind_lhs_change_should_invalid$0);
    caml_call1(stabilization_num_fun, stabilization_num$0);
    caml_call1(current_scope_fun, current_scope$0);
    caml_call1(recompute_heap_fun, recompute_heap$0);
    caml_call1(adjust_heights_heap_fun, adjust_heights_heap$0);
    caml_call1(propagate_invalidity_fun, propagate_invalidity$0);
    caml_call1(num_active_observers_fun, num_active_observers$0);
    caml_call1(all_observers_fun, all_observers$0);
    caml_call1(finalized_observers_fun, finalized_observers$0);
    caml_call1(new_observers_fun, new_observers$0);
    caml_call1(disallowed_observers_fun, disallowed_observers$0);
    caml_call1(set_during_stabilization_fun, set_during_stabilization$0);
    caml_call1(handle_after_stabilization_fun, handle_after_stabilization$0);
    caml_call1(run_on_update_handlers_fun, run_on_update_handlers$0);
    caml_call1(only_in_debug_fun, only_in_debug$0);
    caml_call1(weak_hashtbls_fun, weak_hashtbls$0);
    caml_call1(keep_node_creation_backtrace_f, keep_node_creation_backtrace$0);
    caml_call1(num_nodes_became_necessary_fun, num_nodes_became_necessary$0);
    caml_call1(num_nodes_became_unnecessary_f, num_nodes_became_unnecessary$0);
    caml_call1(num_nodes_changed_fun, num_nodes_changed$0);
    caml_call1(num_nodes_created_fun, num_nodes_created$0);
    caml_call1(num_nodes_invalidated_fun, num_nodes_invalidated$0);
    caml_call1(num_nodes_recomputed_fun, num_nodes_recomputed$0);
    caml_call1
     (num_nodes_recomputed_directly_$0, num_nodes_recomputed_directly_$2);
    caml_call1
     (num_nodes_recomputed_directly_, num_nodes_recomputed_directly_$1);
    return caml_call1(num_var_sets_fun, num_var_sets$0);
   }
   function fold$1
   (init,
    status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    return caml_call2
            (num_var_sets_fun,
             caml_call2
              (num_nodes_recomputed_directly_,
               caml_call2
                (num_nodes_recomputed_directly_$0,
                 caml_call2
                  (num_nodes_recomputed_fun,
                   caml_call2
                    (num_nodes_invalidated_fun,
                     caml_call2
                      (num_nodes_created_fun,
                       caml_call2
                        (num_nodes_changed_fun,
                         caml_call2
                          (num_nodes_became_unnecessary_f,
                           caml_call2
                            (num_nodes_became_necessary_fun,
                             caml_call2
                              (keep_node_creation_backtrace_f,
                               caml_call2
                                (weak_hashtbls_fun,
                                 caml_call2
                                  (only_in_debug_fun,
                                   caml_call2
                                    (run_on_update_handlers_fun,
                                     caml_call2
                                      (handle_after_stabilization_fun,
                                       caml_call2
                                        (set_during_stabilization_fun,
                                         caml_call2
                                          (disallowed_observers_fun,
                                           caml_call2
                                            (new_observers_fun,
                                             caml_call2
                                              (finalized_observers_fun,
                                               caml_call2
                                                (all_observers_fun,
                                                 caml_call2
                                                  (num_active_observers_fun,
                                                   caml_call2
                                                    (propagate_invalidity_fun,
                                                     caml_call2
                                                      (adjust_heights_heap_fun,
                                                       caml_call2
                                                        (recompute_heap_fun,
                                                         caml_call2
                                                          (current_scope_fun,
                                                           caml_call2
                                                            (stabilization_num_fun,
                                                             caml_call2
                                                              (bind_lhs_change_should_invalid,
                                                               caml_call2(status_fun, init, status$0),
                                                               bind_lhs_change_should_invalid$0),
                                                             stabilization_num$0),
                                                           current_scope$0),
                                                         recompute_heap$0),
                                                       adjust_heights_heap$0),
                                                     propagate_invalidity$0),
                                                   num_active_observers$0),
                                                 all_observers$0),
                                               finalized_observers$0),
                                             new_observers$0),
                                           disallowed_observers$0),
                                         set_during_stabilization$0),
                                       handle_after_stabilization$0),
                                     run_on_update_handlers$0),
                                   only_in_debug$0),
                                 weak_hashtbls$0),
                               keep_node_creation_backtrace$0),
                             num_nodes_became_necessary$0),
                           num_nodes_became_unnecessary$0),
                         num_nodes_changed$0),
                       num_nodes_created$0),
                     num_nodes_invalidated$0),
                   num_nodes_recomputed$0),
                 num_nodes_recomputed_directly_$2),
               num_nodes_recomputed_directly_$1),
             num_var_sets$0);
   }
   function map_poly$0(record){
    var
     _jW_ = [0, caml_call1(record[1], num_var_sets$0), 0],
     _jX_ = [0, caml_call1(record[1], num_nodes_recomputed_directly_$1), _jW_],
     _jY_ = [0, caml_call1(record[1], num_nodes_recomputed_directly_$2), _jX_],
     _jZ_ = [0, caml_call1(record[1], num_nodes_recomputed$0), _jY_],
     _j0_ = [0, caml_call1(record[1], num_nodes_invalidated$0), _jZ_],
     _j1_ = [0, caml_call1(record[1], num_nodes_created$0), _j0_],
     _j2_ = [0, caml_call1(record[1], num_nodes_changed$0), _j1_],
     _j3_ = [0, caml_call1(record[1], num_nodes_became_unnecessary$0), _j2_],
     _j4_ = [0, caml_call1(record[1], num_nodes_became_necessary$0), _j3_],
     _j5_ = [0, caml_call1(record[1], keep_node_creation_backtrace$0), _j4_],
     _j6_ = [0, caml_call1(record[1], weak_hashtbls$0), _j5_],
     _j7_ = [0, caml_call1(record[1], only_in_debug$0), _j6_],
     _j8_ = [0, caml_call1(record[1], run_on_update_handlers$0), _j7_],
     _j9_ = [0, caml_call1(record[1], handle_after_stabilization$0), _j8_],
     _j__ = [0, caml_call1(record[1], set_during_stabilization$0), _j9_],
     _j$_ = [0, caml_call1(record[1], disallowed_observers$0), _j__],
     _ka_ = [0, caml_call1(record[1], new_observers$0), _j$_],
     _kb_ = [0, caml_call1(record[1], finalized_observers$0), _ka_],
     _kc_ = [0, caml_call1(record[1], all_observers$0), _kb_],
     _kd_ = [0, caml_call1(record[1], num_active_observers$0), _kc_],
     _ke_ = [0, caml_call1(record[1], propagate_invalidity$0), _kd_],
     _kf_ = [0, caml_call1(record[1], adjust_heights_heap$0), _ke_],
     _kg_ = [0, caml_call1(record[1], recompute_heap$0), _kf_],
     _kh_ = [0, caml_call1(record[1], current_scope$0), _kg_],
     _ki_ = [0, caml_call1(record[1], stabilization_num$0), _kh_],
     _kj_ = [0, caml_call1(record[1], bind_lhs_change_should_invalid$0), _ki_];
    return [0, caml_call1(record[1], status$0), _kj_];
   }
   function for_all$1
   (status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _jw_ = caml_call1(status_fun, status$0),
     _jx_ =
       _jw_
        ? caml_call1
          (bind_lhs_change_should_invalid, bind_lhs_change_should_invalid$0)
        : _jw_,
     _jy_ =
       _jx_ ? caml_call1(stabilization_num_fun, stabilization_num$0) : _jx_,
     _jz_ = _jy_ ? caml_call1(current_scope_fun, current_scope$0) : _jy_,
     _jA_ = _jz_ ? caml_call1(recompute_heap_fun, recompute_heap$0) : _jz_,
     _jB_ =
       _jA_
        ? caml_call1(adjust_heights_heap_fun, adjust_heights_heap$0)
        : _jA_,
     _jC_ =
       _jB_
        ? caml_call1(propagate_invalidity_fun, propagate_invalidity$0)
        : _jB_,
     _jD_ =
       _jC_
        ? caml_call1(num_active_observers_fun, num_active_observers$0)
        : _jC_,
     _jE_ = _jD_ ? caml_call1(all_observers_fun, all_observers$0) : _jD_,
     _jF_ =
       _jE_
        ? caml_call1(finalized_observers_fun, finalized_observers$0)
        : _jE_,
     _jG_ = _jF_ ? caml_call1(new_observers_fun, new_observers$0) : _jF_,
     _jH_ =
       _jG_
        ? caml_call1(disallowed_observers_fun, disallowed_observers$0)
        : _jG_,
     _jI_ =
       _jH_
        ? caml_call1(set_during_stabilization_fun, set_during_stabilization$0)
        : _jH_,
     _jJ_ =
       _jI_
        ? caml_call1
          (handle_after_stabilization_fun, handle_after_stabilization$0)
        : _jI_,
     _jK_ =
       _jJ_
        ? caml_call1(run_on_update_handlers_fun, run_on_update_handlers$0)
        : _jJ_,
     _jL_ = _jK_ ? caml_call1(only_in_debug_fun, only_in_debug$0) : _jK_,
     _jM_ = _jL_ ? caml_call1(weak_hashtbls_fun, weak_hashtbls$0) : _jL_,
     _jN_ =
       _jM_
        ? caml_call1
          (keep_node_creation_backtrace_f, keep_node_creation_backtrace$0)
        : _jM_,
     _jO_ =
       _jN_
        ? caml_call1
          (num_nodes_became_necessary_fun, num_nodes_became_necessary$0)
        : _jN_,
     _jP_ =
       _jO_
        ? caml_call1
          (num_nodes_became_unnecessary_f, num_nodes_became_unnecessary$0)
        : _jO_,
     _jQ_ =
       _jP_ ? caml_call1(num_nodes_changed_fun, num_nodes_changed$0) : _jP_,
     _jR_ =
       _jQ_ ? caml_call1(num_nodes_created_fun, num_nodes_created$0) : _jQ_,
     _jS_ =
       _jR_
        ? caml_call1(num_nodes_invalidated_fun, num_nodes_invalidated$0)
        : _jR_,
     _jT_ =
       _jS_
        ? caml_call1(num_nodes_recomputed_fun, num_nodes_recomputed$0)
        : _jS_,
     _jU_ =
       _jT_
        ? caml_call1
          (num_nodes_recomputed_directly_$0, num_nodes_recomputed_directly_$2)
        : _jT_,
     _jV_ =
       _jU_
        ? caml_call1
          (num_nodes_recomputed_directly_, num_nodes_recomputed_directly_$1)
        : _jU_;
    return _jV_ ? caml_call1(num_var_sets_fun, num_var_sets$0) : _jV_;
   }
   function exists$1
   (status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _jv_ = caml_call1(status_fun, status$0),
     _i8_ =
       _jv_
       ||
        caml_call1
         (bind_lhs_change_should_invalid, bind_lhs_change_should_invalid$0),
     _i9_ = _i8_ || caml_call1(stabilization_num_fun, stabilization_num$0),
     _i__ = _i9_ || caml_call1(current_scope_fun, current_scope$0),
     _i$_ = _i__ || caml_call1(recompute_heap_fun, recompute_heap$0),
     _ja_ = _i$_ || caml_call1(adjust_heights_heap_fun, adjust_heights_heap$0),
     _jb_ =
       _ja_ || caml_call1(propagate_invalidity_fun, propagate_invalidity$0),
     _jc_ =
       _jb_ || caml_call1(num_active_observers_fun, num_active_observers$0),
     _jd_ = _jc_ || caml_call1(all_observers_fun, all_observers$0),
     _je_ = _jd_ || caml_call1(finalized_observers_fun, finalized_observers$0),
     _jf_ = _je_ || caml_call1(new_observers_fun, new_observers$0),
     _jg_ =
       _jf_ || caml_call1(disallowed_observers_fun, disallowed_observers$0),
     _jh_ =
       _jg_
       || caml_call1(set_during_stabilization_fun, set_during_stabilization$0),
     _ji_ =
       _jh_
       ||
        caml_call1
         (handle_after_stabilization_fun, handle_after_stabilization$0),
     _jj_ =
       _ji_
       || caml_call1(run_on_update_handlers_fun, run_on_update_handlers$0),
     _jk_ = _jj_ || caml_call1(only_in_debug_fun, only_in_debug$0),
     _jl_ = _jk_ || caml_call1(weak_hashtbls_fun, weak_hashtbls$0),
     _jm_ =
       _jl_
       ||
        caml_call1
         (keep_node_creation_backtrace_f, keep_node_creation_backtrace$0),
     _jn_ =
       _jm_
       ||
        caml_call1
         (num_nodes_became_necessary_fun, num_nodes_became_necessary$0),
     _jo_ =
       _jn_
       ||
        caml_call1
         (num_nodes_became_unnecessary_f, num_nodes_became_unnecessary$0),
     _jp_ = _jo_ || caml_call1(num_nodes_changed_fun, num_nodes_changed$0),
     _jq_ = _jp_ || caml_call1(num_nodes_created_fun, num_nodes_created$0),
     _jr_ =
       _jq_ || caml_call1(num_nodes_invalidated_fun, num_nodes_invalidated$0),
     _js_ =
       _jr_ || caml_call1(num_nodes_recomputed_fun, num_nodes_recomputed$0),
     _jt_ =
       _js_
       ||
        caml_call1
         (num_nodes_recomputed_directly_$0, num_nodes_recomputed_directly_$2),
     _ju_ =
       _jt_
       ||
        caml_call1
         (num_nodes_recomputed_directly_, num_nodes_recomputed_directly_$1);
    return _ju_ ? _ju_ : caml_call1(num_var_sets_fun, num_var_sets$0);
   }
   function to_list$1
   (status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _iI_ = [0, caml_call1(num_var_sets_fun, num_var_sets$0), 0],
     _iJ_ =
       [0,
        caml_call1
         (num_nodes_recomputed_directly_, num_nodes_recomputed_directly_$1),
        _iI_],
     _iK_ =
       [0,
        caml_call1
         (num_nodes_recomputed_directly_$0, num_nodes_recomputed_directly_$2),
        _iJ_],
     _iL_ =
       [0, caml_call1(num_nodes_recomputed_fun, num_nodes_recomputed$0), _iK_],
     _iM_ =
       [0,
        caml_call1(num_nodes_invalidated_fun, num_nodes_invalidated$0),
        _iL_],
     _iN_ = [0, caml_call1(num_nodes_created_fun, num_nodes_created$0), _iM_],
     _iO_ = [0, caml_call1(num_nodes_changed_fun, num_nodes_changed$0), _iN_],
     _iP_ =
       [0,
        caml_call1
         (num_nodes_became_unnecessary_f, num_nodes_became_unnecessary$0),
        _iO_],
     _iQ_ =
       [0,
        caml_call1
         (num_nodes_became_necessary_fun, num_nodes_became_necessary$0),
        _iP_],
     _iR_ =
       [0,
        caml_call1
         (keep_node_creation_backtrace_f, keep_node_creation_backtrace$0),
        _iQ_],
     _iS_ = [0, caml_call1(weak_hashtbls_fun, weak_hashtbls$0), _iR_],
     _iT_ = [0, caml_call1(only_in_debug_fun, only_in_debug$0), _iS_],
     _iU_ =
       [0,
        caml_call1(run_on_update_handlers_fun, run_on_update_handlers$0),
        _iT_],
     _iV_ =
       [0,
        caml_call1
         (handle_after_stabilization_fun, handle_after_stabilization$0),
        _iU_],
     _iW_ =
       [0,
        caml_call1(set_during_stabilization_fun, set_during_stabilization$0),
        _iV_],
     _iX_ =
       [0, caml_call1(disallowed_observers_fun, disallowed_observers$0), _iW_],
     _iY_ = [0, caml_call1(new_observers_fun, new_observers$0), _iX_],
     _iZ_ =
       [0, caml_call1(finalized_observers_fun, finalized_observers$0), _iY_],
     _i0_ = [0, caml_call1(all_observers_fun, all_observers$0), _iZ_],
     _i1_ =
       [0, caml_call1(num_active_observers_fun, num_active_observers$0), _i0_],
     _i2_ =
       [0, caml_call1(propagate_invalidity_fun, propagate_invalidity$0), _i1_],
     _i3_ =
       [0, caml_call1(adjust_heights_heap_fun, adjust_heights_heap$0), _i2_],
     _i4_ = [0, caml_call1(recompute_heap_fun, recompute_heap$0), _i3_],
     _i5_ = [0, caml_call1(current_scope_fun, current_scope$0), _i4_],
     _i6_ = [0, caml_call1(stabilization_num_fun, stabilization_num$0), _i5_],
     _i7_ =
       [0,
        caml_call1
         (bind_lhs_change_should_invalid, bind_lhs_change_should_invalid$0),
        _i6_];
    return [0, caml_call1(status_fun, status$0), _i7_];
   }
   function iter$2
   (record,
    status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    caml_call3(status_fun, status$0, record, record[1]);
    caml_call3
     (bind_lhs_change_should_invalid,
      bind_lhs_change_should_invalid$0,
      record,
      record[2]);
    caml_call3(stabilization_num_fun, stabilization_num$0, record, record[3]);
    caml_call3(current_scope_fun, current_scope$0, record, record[4]);
    caml_call3(recompute_heap_fun, recompute_heap$0, record, record[5]);
    caml_call3
     (adjust_heights_heap_fun, adjust_heights_heap$0, record, record[6]);
    caml_call3
     (propagate_invalidity_fun, propagate_invalidity$0, record, record[7]);
    caml_call3
     (num_active_observers_fun, num_active_observers$0, record, record[8]);
    caml_call3(all_observers_fun, all_observers$0, record, record[9]);
    caml_call3
     (finalized_observers_fun, finalized_observers$0, record, record[10]);
    caml_call3(new_observers_fun, new_observers$0, record, record[11]);
    caml_call3
     (disallowed_observers_fun, disallowed_observers$0, record, record[12]);
    caml_call3
     (set_during_stabilization_fun,
      set_during_stabilization$0,
      record,
      record[13]);
    caml_call3
     (handle_after_stabilization_fun,
      handle_after_stabilization$0,
      record,
      record[14]);
    caml_call3
     (run_on_update_handlers_fun,
      run_on_update_handlers$0,
      record,
      record[15]);
    caml_call3(only_in_debug_fun, only_in_debug$0, record, record[16]);
    caml_call3(weak_hashtbls_fun, weak_hashtbls$0, record, record[17]);
    caml_call3
     (keep_node_creation_backtrace_f,
      keep_node_creation_backtrace$0,
      record,
      record[18]);
    caml_call3
     (num_nodes_became_necessary_fun,
      num_nodes_became_necessary$0,
      record,
      record[19]);
    caml_call3
     (num_nodes_became_unnecessary_f,
      num_nodes_became_unnecessary$0,
      record,
      record[20]);
    caml_call3(num_nodes_changed_fun, num_nodes_changed$0, record, record[21]);
    caml_call3(num_nodes_created_fun, num_nodes_created$0, record, record[22]);
    caml_call3
     (num_nodes_invalidated_fun, num_nodes_invalidated$0, record, record[23]);
    caml_call3
     (num_nodes_recomputed_fun, num_nodes_recomputed$0, record, record[24]);
    caml_call3
     (num_nodes_recomputed_directly_$0,
      num_nodes_recomputed_directly_$2,
      record,
      record[25]);
    caml_call3
     (num_nodes_recomputed_directly_,
      num_nodes_recomputed_directly_$1,
      record,
      record[26]);
    return caml_call3(num_var_sets_fun, num_var_sets$0, record, record[27]);
   }
   function fold$2
   (record,
    init,
    status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _ii_ = record[27],
     _ij_ = record[26],
     _ik_ = record[25],
     _il_ = record[24],
     _im_ = record[23],
     _in_ = record[22],
     _io_ = record[21],
     _ip_ = record[20],
     _iq_ = record[19],
     _ir_ = record[18],
     _is_ = record[17],
     _it_ = record[16],
     _iu_ = record[15],
     _iv_ = record[14],
     _iw_ = record[13],
     _ix_ = record[12],
     _iy_ = record[11],
     _iz_ = record[10],
     _iA_ = record[9],
     _iB_ = record[8],
     _iC_ = record[7],
     _iD_ = record[6],
     _iE_ = record[5],
     _iF_ = record[4],
     _iG_ = record[3],
     _iH_ = record[2];
    return caml_call4
            (num_var_sets_fun,
             caml_call4
              (num_nodes_recomputed_directly_,
               caml_call4
                (num_nodes_recomputed_directly_$0,
                 caml_call4
                  (num_nodes_recomputed_fun,
                   caml_call4
                    (num_nodes_invalidated_fun,
                     caml_call4
                      (num_nodes_created_fun,
                       caml_call4
                        (num_nodes_changed_fun,
                         caml_call4
                          (num_nodes_became_unnecessary_f,
                           caml_call4
                            (num_nodes_became_necessary_fun,
                             caml_call4
                              (keep_node_creation_backtrace_f,
                               caml_call4
                                (weak_hashtbls_fun,
                                 caml_call4
                                  (only_in_debug_fun,
                                   caml_call4
                                    (run_on_update_handlers_fun,
                                     caml_call4
                                      (handle_after_stabilization_fun,
                                       caml_call4
                                        (set_during_stabilization_fun,
                                         caml_call4
                                          (disallowed_observers_fun,
                                           caml_call4
                                            (new_observers_fun,
                                             caml_call4
                                              (finalized_observers_fun,
                                               caml_call4
                                                (all_observers_fun,
                                                 caml_call4
                                                  (num_active_observers_fun,
                                                   caml_call4
                                                    (propagate_invalidity_fun,
                                                     caml_call4
                                                      (adjust_heights_heap_fun,
                                                       caml_call4
                                                        (recompute_heap_fun,
                                                         caml_call4
                                                          (current_scope_fun,
                                                           caml_call4
                                                            (stabilization_num_fun,
                                                             caml_call4
                                                              (bind_lhs_change_should_invalid,
                                                               caml_call4(status_fun, init, status$0, record, record[1]),
                                                               bind_lhs_change_should_invalid$0,
                                                               record,
                                                               _iH_),
                                                             stabilization_num$0,
                                                             record,
                                                             _iG_),
                                                           current_scope$0,
                                                           record,
                                                           _iF_),
                                                         recompute_heap$0,
                                                         record,
                                                         _iE_),
                                                       adjust_heights_heap$0,
                                                       record,
                                                       _iD_),
                                                     propagate_invalidity$0,
                                                     record,
                                                     _iC_),
                                                   num_active_observers$0,
                                                   record,
                                                   _iB_),
                                                 all_observers$0,
                                                 record,
                                                 _iA_),
                                               finalized_observers$0,
                                               record,
                                               _iz_),
                                             new_observers$0,
                                             record,
                                             _iy_),
                                           disallowed_observers$0,
                                           record,
                                           _ix_),
                                         set_during_stabilization$0,
                                         record,
                                         _iw_),
                                       handle_after_stabilization$0,
                                       record,
                                       _iv_),
                                     run_on_update_handlers$0,
                                     record,
                                     _iu_),
                                   only_in_debug$0,
                                   record,
                                   _it_),
                                 weak_hashtbls$0,
                                 record,
                                 _is_),
                               keep_node_creation_backtrace$0,
                               record,
                               _ir_),
                             num_nodes_became_necessary$0,
                             record,
                             _iq_),
                           num_nodes_became_unnecessary$0,
                           record,
                           _ip_),
                         num_nodes_changed$0,
                         record,
                         _io_),
                       num_nodes_created$0,
                       record,
                       _in_),
                     num_nodes_invalidated$0,
                     record,
                     _im_),
                   num_nodes_recomputed$0,
                   record,
                   _il_),
                 num_nodes_recomputed_directly_$2,
                 record,
                 _ik_),
               num_nodes_recomputed_directly_$1,
               record,
               _ij_),
             num_var_sets$0,
             record,
             _ii_);
   }
   function for_all$2
   (record,
    status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _hU_ = caml_call3(status_fun, status$0, record, record[1]),
     _hV_ =
       _hU_
        ? caml_call3
          (bind_lhs_change_should_invalid,
           bind_lhs_change_should_invalid$0,
           record,
           record[2])
        : _hU_,
     _hW_ =
       _hV_
        ? caml_call3
          (stabilization_num_fun, stabilization_num$0, record, record[3])
        : _hV_,
     _hX_ =
       _hW_
        ? caml_call3(current_scope_fun, current_scope$0, record, record[4])
        : _hW_,
     _hY_ =
       _hX_
        ? caml_call3(recompute_heap_fun, recompute_heap$0, record, record[5])
        : _hX_,
     _hZ_ =
       _hY_
        ? caml_call3
          (adjust_heights_heap_fun, adjust_heights_heap$0, record, record[6])
        : _hY_,
     _h0_ =
       _hZ_
        ? caml_call3
          (propagate_invalidity_fun,
           propagate_invalidity$0,
           record,
           record[7])
        : _hZ_,
     _h1_ =
       _h0_
        ? caml_call3
          (num_active_observers_fun,
           num_active_observers$0,
           record,
           record[8])
        : _h0_,
     _h2_ =
       _h1_
        ? caml_call3(all_observers_fun, all_observers$0, record, record[9])
        : _h1_,
     _h3_ =
       _h2_
        ? caml_call3
          (finalized_observers_fun, finalized_observers$0, record, record[10])
        : _h2_,
     _h4_ =
       _h3_
        ? caml_call3(new_observers_fun, new_observers$0, record, record[11])
        : _h3_,
     _h5_ =
       _h4_
        ? caml_call3
          (disallowed_observers_fun,
           disallowed_observers$0,
           record,
           record[12])
        : _h4_,
     _h6_ =
       _h5_
        ? caml_call3
          (set_during_stabilization_fun,
           set_during_stabilization$0,
           record,
           record[13])
        : _h5_,
     _h7_ =
       _h6_
        ? caml_call3
          (handle_after_stabilization_fun,
           handle_after_stabilization$0,
           record,
           record[14])
        : _h6_,
     _h8_ =
       _h7_
        ? caml_call3
          (run_on_update_handlers_fun,
           run_on_update_handlers$0,
           record,
           record[15])
        : _h7_,
     _h9_ =
       _h8_
        ? caml_call3(only_in_debug_fun, only_in_debug$0, record, record[16])
        : _h8_,
     _h__ =
       _h9_
        ? caml_call3(weak_hashtbls_fun, weak_hashtbls$0, record, record[17])
        : _h9_,
     _h$_ =
       _h__
        ? caml_call3
          (keep_node_creation_backtrace_f,
           keep_node_creation_backtrace$0,
           record,
           record[18])
        : _h__,
     _ia_ =
       _h$_
        ? caml_call3
          (num_nodes_became_necessary_fun,
           num_nodes_became_necessary$0,
           record,
           record[19])
        : _h$_,
     _ib_ =
       _ia_
        ? caml_call3
          (num_nodes_became_unnecessary_f,
           num_nodes_became_unnecessary$0,
           record,
           record[20])
        : _ia_,
     _ic_ =
       _ib_
        ? caml_call3
          (num_nodes_changed_fun, num_nodes_changed$0, record, record[21])
        : _ib_,
     _id_ =
       _ic_
        ? caml_call3
          (num_nodes_created_fun, num_nodes_created$0, record, record[22])
        : _ic_,
     _ie_ =
       _id_
        ? caml_call3
          (num_nodes_invalidated_fun,
           num_nodes_invalidated$0,
           record,
           record[23])
        : _id_,
     _if_ =
       _ie_
        ? caml_call3
          (num_nodes_recomputed_fun,
           num_nodes_recomputed$0,
           record,
           record[24])
        : _ie_,
     _ig_ =
       _if_
        ? caml_call3
          (num_nodes_recomputed_directly_$0,
           num_nodes_recomputed_directly_$2,
           record,
           record[25])
        : _if_,
     _ih_ =
       _ig_
        ? caml_call3
          (num_nodes_recomputed_directly_,
           num_nodes_recomputed_directly_$1,
           record,
           record[26])
        : _ig_;
    return _ih_
            ? caml_call3(num_var_sets_fun, num_var_sets$0, record, record[27])
            : _ih_;
   }
   function exists$2
   (record,
    status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _hT_ = caml_call3(status_fun, status$0, record, record[1]),
     _hu_ =
       _hT_
       ||
        caml_call3
         (bind_lhs_change_should_invalid,
          bind_lhs_change_should_invalid$0,
          record,
          record[2]),
     _hv_ =
       _hu_
       ||
        caml_call3
         (stabilization_num_fun, stabilization_num$0, record, record[3]),
     _hw_ =
       _hv_
       || caml_call3(current_scope_fun, current_scope$0, record, record[4]),
     _hx_ =
       _hw_
       || caml_call3(recompute_heap_fun, recompute_heap$0, record, record[5]),
     _hy_ =
       _hx_
       ||
        caml_call3
         (adjust_heights_heap_fun, adjust_heights_heap$0, record, record[6]),
     _hz_ =
       _hy_
       ||
        caml_call3
         (propagate_invalidity_fun, propagate_invalidity$0, record, record[7]),
     _hA_ =
       _hz_
       ||
        caml_call3
         (num_active_observers_fun, num_active_observers$0, record, record[8]),
     _hB_ =
       _hA_
       || caml_call3(all_observers_fun, all_observers$0, record, record[9]),
     _hC_ =
       _hB_
       ||
        caml_call3
         (finalized_observers_fun, finalized_observers$0, record, record[10]),
     _hD_ =
       _hC_
       || caml_call3(new_observers_fun, new_observers$0, record, record[11]),
     _hE_ =
       _hD_
       ||
        caml_call3
         (disallowed_observers_fun,
          disallowed_observers$0,
          record,
          record[12]),
     _hF_ =
       _hE_
       ||
        caml_call3
         (set_during_stabilization_fun,
          set_during_stabilization$0,
          record,
          record[13]),
     _hG_ =
       _hF_
       ||
        caml_call3
         (handle_after_stabilization_fun,
          handle_after_stabilization$0,
          record,
          record[14]),
     _hH_ =
       _hG_
       ||
        caml_call3
         (run_on_update_handlers_fun,
          run_on_update_handlers$0,
          record,
          record[15]),
     _hI_ =
       _hH_
       || caml_call3(only_in_debug_fun, only_in_debug$0, record, record[16]),
     _hJ_ =
       _hI_
       || caml_call3(weak_hashtbls_fun, weak_hashtbls$0, record, record[17]),
     _hK_ =
       _hJ_
       ||
        caml_call3
         (keep_node_creation_backtrace_f,
          keep_node_creation_backtrace$0,
          record,
          record[18]),
     _hL_ =
       _hK_
       ||
        caml_call3
         (num_nodes_became_necessary_fun,
          num_nodes_became_necessary$0,
          record,
          record[19]),
     _hM_ =
       _hL_
       ||
        caml_call3
         (num_nodes_became_unnecessary_f,
          num_nodes_became_unnecessary$0,
          record,
          record[20]),
     _hN_ =
       _hM_
       ||
        caml_call3
         (num_nodes_changed_fun, num_nodes_changed$0, record, record[21]),
     _hO_ =
       _hN_
       ||
        caml_call3
         (num_nodes_created_fun, num_nodes_created$0, record, record[22]),
     _hP_ =
       _hO_
       ||
        caml_call3
         (num_nodes_invalidated_fun,
          num_nodes_invalidated$0,
          record,
          record[23]),
     _hQ_ =
       _hP_
       ||
        caml_call3
         (num_nodes_recomputed_fun,
          num_nodes_recomputed$0,
          record,
          record[24]),
     _hR_ =
       _hQ_
       ||
        caml_call3
         (num_nodes_recomputed_directly_$0,
          num_nodes_recomputed_directly_$2,
          record,
          record[25]),
     _hS_ =
       _hR_
       ||
        caml_call3
         (num_nodes_recomputed_directly_,
          num_nodes_recomputed_directly_$1,
          record,
          record[26]);
    return _hS_
            ? _hS_
            : caml_call3(num_var_sets_fun, num_var_sets$0, record, record[27]);
   }
   function to_list$2
   (record,
    status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _g6_ =
       [0,
        caml_call3(num_var_sets_fun, num_var_sets$0, record, record[27]),
        0],
     _g7_ =
       [0,
        caml_call3
         (num_nodes_recomputed_directly_,
          num_nodes_recomputed_directly_$1,
          record,
          record[26]),
        _g6_],
     _g8_ =
       [0,
        caml_call3
         (num_nodes_recomputed_directly_$0,
          num_nodes_recomputed_directly_$2,
          record,
          record[25]),
        _g7_],
     _g9_ =
       [0,
        caml_call3
         (num_nodes_recomputed_fun,
          num_nodes_recomputed$0,
          record,
          record[24]),
        _g8_],
     _g__ =
       [0,
        caml_call3
         (num_nodes_invalidated_fun,
          num_nodes_invalidated$0,
          record,
          record[23]),
        _g9_],
     _g$_ =
       [0,
        caml_call3
         (num_nodes_created_fun, num_nodes_created$0, record, record[22]),
        _g__],
     _ha_ =
       [0,
        caml_call3
         (num_nodes_changed_fun, num_nodes_changed$0, record, record[21]),
        _g$_],
     _hb_ =
       [0,
        caml_call3
         (num_nodes_became_unnecessary_f,
          num_nodes_became_unnecessary$0,
          record,
          record[20]),
        _ha_],
     _hc_ =
       [0,
        caml_call3
         (num_nodes_became_necessary_fun,
          num_nodes_became_necessary$0,
          record,
          record[19]),
        _hb_],
     _hd_ =
       [0,
        caml_call3
         (keep_node_creation_backtrace_f,
          keep_node_creation_backtrace$0,
          record,
          record[18]),
        _hc_],
     _he_ =
       [0,
        caml_call3(weak_hashtbls_fun, weak_hashtbls$0, record, record[17]),
        _hd_],
     _hf_ =
       [0,
        caml_call3(only_in_debug_fun, only_in_debug$0, record, record[16]),
        _he_],
     _hg_ =
       [0,
        caml_call3
         (run_on_update_handlers_fun,
          run_on_update_handlers$0,
          record,
          record[15]),
        _hf_],
     _hh_ =
       [0,
        caml_call3
         (handle_after_stabilization_fun,
          handle_after_stabilization$0,
          record,
          record[14]),
        _hg_],
     _hi_ =
       [0,
        caml_call3
         (set_during_stabilization_fun,
          set_during_stabilization$0,
          record,
          record[13]),
        _hh_],
     _hj_ =
       [0,
        caml_call3
         (disallowed_observers_fun,
          disallowed_observers$0,
          record,
          record[12]),
        _hi_],
     _hk_ =
       [0,
        caml_call3(new_observers_fun, new_observers$0, record, record[11]),
        _hj_],
     _hl_ =
       [0,
        caml_call3
         (finalized_observers_fun, finalized_observers$0, record, record[10]),
        _hk_],
     _hm_ =
       [0,
        caml_call3(all_observers_fun, all_observers$0, record, record[9]),
        _hl_],
     _hn_ =
       [0,
        caml_call3
         (num_active_observers_fun, num_active_observers$0, record, record[8]),
        _hm_],
     _ho_ =
       [0,
        caml_call3
         (propagate_invalidity_fun, propagate_invalidity$0, record, record[7]),
        _hn_],
     _hp_ =
       [0,
        caml_call3
         (adjust_heights_heap_fun, adjust_heights_heap$0, record, record[6]),
        _ho_],
     _hq_ =
       [0,
        caml_call3(recompute_heap_fun, recompute_heap$0, record, record[5]),
        _hp_],
     _hr_ =
       [0,
        caml_call3(current_scope_fun, current_scope$0, record, record[4]),
        _hq_],
     _hs_ =
       [0,
        caml_call3
         (stabilization_num_fun, stabilization_num$0, record, record[3]),
        _hr_],
     _ht_ =
       [0,
        caml_call3
         (bind_lhs_change_should_invalid,
          bind_lhs_change_should_invalid$0,
          record,
          record[2]),
        _hs_];
    return [0, caml_call3(status_fun, status$0, record, record[1]), _ht_];
   }
   function map$2
   (record,
    status_fun,
    bind_lhs_change_should_invalid,
    stabilization_num_fun,
    current_scope_fun,
    recompute_heap_fun,
    adjust_heights_heap_fun,
    propagate_invalidity_fun,
    num_active_observers_fun,
    all_observers_fun,
    finalized_observers_fun,
    new_observers_fun,
    disallowed_observers_fun,
    set_during_stabilization_fun,
    handle_after_stabilization_fun,
    run_on_update_handlers_fun,
    only_in_debug_fun,
    weak_hashtbls_fun,
    keep_node_creation_backtrace_f,
    num_nodes_became_necessary_fun,
    num_nodes_became_unnecessary_f,
    num_nodes_changed_fun,
    num_nodes_created_fun,
    num_nodes_invalidated_fun,
    num_nodes_recomputed_fun,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets_fun){
    var
     _gG_ = caml_call3(num_var_sets_fun, num_var_sets$0, record, record[27]),
     _gH_ =
       caml_call3
        (num_nodes_recomputed_directly_,
         num_nodes_recomputed_directly_$1,
         record,
         record[26]),
     _gI_ =
       caml_call3
        (num_nodes_recomputed_directly_$0,
         num_nodes_recomputed_directly_$2,
         record,
         record[25]),
     _gJ_ =
       caml_call3
        (num_nodes_recomputed_fun, num_nodes_recomputed$0, record, record[24]),
     _gK_ =
       caml_call3
        (num_nodes_invalidated_fun,
         num_nodes_invalidated$0,
         record,
         record[23]),
     _gL_ =
       caml_call3
        (num_nodes_created_fun, num_nodes_created$0, record, record[22]),
     _gM_ =
       caml_call3
        (num_nodes_changed_fun, num_nodes_changed$0, record, record[21]),
     _gN_ =
       caml_call3
        (num_nodes_became_unnecessary_f,
         num_nodes_became_unnecessary$0,
         record,
         record[20]),
     _gO_ =
       caml_call3
        (num_nodes_became_necessary_fun,
         num_nodes_became_necessary$0,
         record,
         record[19]),
     _gP_ =
       caml_call3
        (keep_node_creation_backtrace_f,
         keep_node_creation_backtrace$0,
         record,
         record[18]),
     _gQ_ = caml_call3(weak_hashtbls_fun, weak_hashtbls$0, record, record[17]),
     _gR_ = caml_call3(only_in_debug_fun, only_in_debug$0, record, record[16]),
     _gS_ =
       caml_call3
        (run_on_update_handlers_fun,
         run_on_update_handlers$0,
         record,
         record[15]),
     _gT_ =
       caml_call3
        (handle_after_stabilization_fun,
         handle_after_stabilization$0,
         record,
         record[14]),
     _gU_ =
       caml_call3
        (set_during_stabilization_fun,
         set_during_stabilization$0,
         record,
         record[13]),
     _gV_ =
       caml_call3
        (disallowed_observers_fun, disallowed_observers$0, record, record[12]),
     _gW_ = caml_call3(new_observers_fun, new_observers$0, record, record[11]),
     _gX_ =
       caml_call3
        (finalized_observers_fun, finalized_observers$0, record, record[10]),
     _gY_ = caml_call3(all_observers_fun, all_observers$0, record, record[9]),
     _gZ_ =
       caml_call3
        (num_active_observers_fun, num_active_observers$0, record, record[8]),
     _g0_ =
       caml_call3
        (propagate_invalidity_fun, propagate_invalidity$0, record, record[7]),
     _g1_ =
       caml_call3
        (adjust_heights_heap_fun, adjust_heights_heap$0, record, record[6]),
     _g2_ =
       caml_call3(recompute_heap_fun, recompute_heap$0, record, record[5]),
     _g3_ = caml_call3(current_scope_fun, current_scope$0, record, record[4]),
     _g4_ =
       caml_call3
        (stabilization_num_fun, stabilization_num$0, record, record[3]),
     _g5_ =
       caml_call3
        (bind_lhs_change_should_invalid,
         bind_lhs_change_should_invalid$0,
         record,
         record[2]);
    return [0,
            caml_call3(status_fun, status$0, record, record[1]),
            _g5_,
            _g4_,
            _g3_,
            _g2_,
            _g1_,
            _g0_,
            _gZ_,
            _gY_,
            _gX_,
            _gW_,
            _gV_,
            _gU_,
            _gT_,
            _gS_,
            _gR_,
            _gQ_,
            _gP_,
            _gO_,
            _gN_,
            _gM_,
            _gL_,
            _gK_,
            _gJ_,
            _gI_,
            _gH_,
            _gG_];
   }
   function set_all_mutable_fields$0
   (record,
    status,
    stabilization_num,
    current_scope,
    num_active_observers,
    all_observers,
    only_in_debug,
    keep_node_creation_backtrace,
    num_nodes_became_necessary,
    num_nodes_became_unnecessary,
    num_nodes_changed,
    num_nodes_created,
    num_nodes_invalidated,
    num_nodes_recomputed,
    num_nodes_recomputed_directly_$0,
    num_nodes_recomputed_directly_,
    num_var_sets){
    var record$0 = caml_call1(Base_Field[1][1], record);
    record$0[1] = status;
    record$0[3] = stabilization_num;
    record$0[4] = current_scope;
    record$0[8] = num_active_observers;
    record$0[9] = all_observers;
    record$0[16] = only_in_debug;
    record$0[18] = keep_node_creation_backtrace;
    record$0[19] = num_nodes_became_necessary;
    record$0[20] = num_nodes_became_unnecessary;
    record$0[21] = num_nodes_changed;
    record$0[22] = num_nodes_created;
    record$0[23] = num_nodes_invalidated;
    record$0[24] = num_nodes_recomputed;
    record$0[25] = num_nodes_recomputed_directly_$0;
    record$0[26] = num_nodes_recomputed_directly_;
    record$0[27] = num_var_sets;
    return 0;
   }
   var
    Direct$0 =
      [0,
       iter$2,
       fold$2,
       for_all$2,
       exists$2,
       to_list$2,
       map$2,
       set_all_mutable_fields$0],
    Fields$0 =
      [0,
       names$0,
       num_var_sets$0,
       num_nodes_recomputed_directly_$1,
       num_nodes_recomputed_directly_$2,
       num_nodes_recomputed$0,
       num_nodes_invalidated$0,
       num_nodes_created$0,
       num_nodes_changed$0,
       num_nodes_became_unnecessary$0,
       num_nodes_became_necessary$0,
       keep_node_creation_backtrace$0,
       weak_hashtbls$0,
       only_in_debug$0,
       run_on_update_handlers$0,
       handle_after_stabilization$0,
       set_during_stabilization$0,
       disallowed_observers$0,
       new_observers$0,
       finalized_observers$0,
       all_observers$0,
       num_active_observers$0,
       propagate_invalidity$0,
       adjust_heights_heap$0,
       recompute_heap$0,
       current_scope$0,
       stabilization_num$0,
       bind_lhs_change_should_invalid$0,
       status$0,
       make_creator$0,
       create$1,
       map$1,
       iter$1,
       fold$1,
       map_poly$0,
       for_all$1,
       exists$1,
       to_list$1,
       Direct$0],
    _o_ = [0, cst_num_var_sets],
    _p_ = [0, cst_num_nodes_recomputed_direc],
    _q_ = [0, cst_num_nodes_recomputed_direc$0],
    _r_ = [0, cst_num_nodes_recomputed],
    _s_ = [0, cst_num_nodes_invalidated],
    _t_ = [0, cst_num_nodes_created],
    _u_ = [0, cst_num_nodes_changed],
    _v_ = [0, cst_num_nodes_became_unnecessa],
    _w_ = [0, cst_num_nodes_became_necessary],
    _x_ = [0, cst_keep_node_creation_backtra],
    _y_ = [0, cst_weak_hashtbls],
    _z_ = [0, cst_only_in_debug],
    _A_ = [0, cst_run_on_update_handlers],
    _B_ = [0, cst_handle_after_stabilization],
    _C_ = [0, cst_set_during_stabilization],
    _D_ = [0, cst_disallowed_observers],
    _E_ = [0, cst_new_observers],
    _F_ = [0, cst_finalized_observers],
    _G_ = [0, cst_all_observers],
    _H_ = [0, cst_num_active_observers],
    _I_ = [0, cst_propagate_invalidity],
    _J_ = [0, cst_adjust_heights_heap],
    _K_ = [0, cst_recompute_heap],
    _L_ = [0, cst_current_scope],
    _M_ = [0, cst_stabilization_num],
    _N_ = [0, cst_bind_lhs_change_should_inv],
    _O_ = [0, cst_status];
   function sexp_of_t$2(param){
    var
     status_015 = param[1],
     bind_lhs_change_should_invalid = param[2],
     stabilization_num_019 = param[3],
     current_scope_021 = param[4],
     propagate_invalidity_027 = param[7],
     adjust_heights_heap_025 = param[6],
     recompute_heap_023 = param[5],
     num_active_observers_029 = param[8],
     all_observers_031 = param[9],
     run_on_update_handlers_043 = param[15],
     handle_after_stabilization_041 = param[14],
     set_during_stabilization_039 = param[13],
     disallowed_observers_037 = param[12],
     new_observers_035 = param[11],
     finalized_observers_033 = param[10],
     only_in_debug_045 = param[16],
     weak_hashtbls_047 = param[17],
     keep_node_creation_backtrace_0 = param[18],
     num_nodes_became_necessary_051 = param[19],
     num_nodes_became_unnecessary_0 = param[20],
     num_nodes_changed_055 = param[21],
     num_nodes_created_057 = param[22],
     num_nodes_invalidated_059 = param[23],
     num_nodes_recomputed_061 = param[24],
     num_nodes_recomputed_directly_ = param[25],
     num_nodes_recomputed_directly_$0 = param[26],
     num_var_sets_067 = param[27],
     arg_068 = caml_call1(Core[356], num_var_sets_067),
     bnds_014 = [0, [1, [0, _o_, [0, arg_068, 0]]], 0],
     arg_066 = caml_call1(Core[356], num_nodes_recomputed_directly_$0),
     bnds_014$0 = [0, [1, [0, _p_, [0, arg_066, 0]]], bnds_014],
     arg_064 = caml_call1(Core[356], num_nodes_recomputed_directly_),
     bnds_014$1 = [0, [1, [0, _q_, [0, arg_064, 0]]], bnds_014$0],
     arg_062 = caml_call1(Core[356], num_nodes_recomputed_061),
     bnds_014$2 = [0, [1, [0, _r_, [0, arg_062, 0]]], bnds_014$1],
     arg_060 = caml_call1(Core[356], num_nodes_invalidated_059),
     bnds_014$3 = [0, [1, [0, _s_, [0, arg_060, 0]]], bnds_014$2],
     arg_058 = caml_call1(Core[356], num_nodes_created_057),
     bnds_014$4 = [0, [1, [0, _t_, [0, arg_058, 0]]], bnds_014$3],
     arg_056 = caml_call1(Core[356], num_nodes_changed_055),
     bnds_014$5 = [0, [1, [0, _u_, [0, arg_056, 0]]], bnds_014$4],
     arg_054 = caml_call1(Core[356], num_nodes_became_unnecessary_0),
     bnds_014$6 = [0, [1, [0, _v_, [0, arg_054, 0]]], bnds_014$5],
     arg_052 = caml_call1(Core[356], num_nodes_became_necessary_051),
     bnds_014$7 = [0, [1, [0, _w_, [0, arg_052, 0]]], bnds_014$6],
     arg_050 = caml_call1(Core[305], keep_node_creation_backtrace_0),
     bnds_014$8 = [0, [1, [0, _x_, [0, arg_050, 0]]], bnds_014$7],
     arg_048 =
       caml_call2
        (Thread_safe_queue[1], Packed_weak_hashtbl[1], weak_hashtbls_047),
     bnds_014$9 = [0, [1, [0, _y_, [0, arg_048, 0]]], bnds_014$8],
     arg_046 = caml_call1(Only_in_debug[6], only_in_debug_045),
     bnds_014$10 = [0, [1, [0, _z_, [0, arg_046, 0]]], bnds_014$9],
     arg_044 =
       caml_call2
        (Core_Stack[2], Run_on_update_handlers[1], run_on_update_handlers_043),
     bnds_014$11 = [0, [1, [0, _A_, [0, arg_044, 0]]], bnds_014$10],
     arg_042 =
       caml_call2
        (Core_Stack[2],
         Incremental_Node[1][1],
         handle_after_stabilization_041),
     bnds_014$12 = [0, [1, [0, _B_, [0, arg_042, 0]]], bnds_014$11],
     arg_040 =
       caml_call2
        (Core_Stack[2], Incremental_Var[3][1], set_during_stabilization_039),
     bnds_014$13 = [0, [1, [0, _C_, [0, arg_040, 0]]], bnds_014$12],
     arg_038 =
       caml_call2
        (Core_Stack[2],
         Incremental_Internal_observer[10][1],
         disallowed_observers_037),
     bnds_014$14 = [0, [1, [0, _D_, [0, arg_038, 0]]], bnds_014$13],
     arg_036 =
       caml_call2
        (Core_Stack[2],
         Incremental_Internal_observer[10][1],
         new_observers_035),
     bnds_014$15 = [0, [1, [0, _E_, [0, arg_036, 0]]], bnds_014$14],
     arg_034 =
       caml_call2
        (Thread_safe_queue[1],
         Incremental_Internal_observer[10][1],
         finalized_observers_033),
     bnds_014$16 = [0, [1, [0, _F_, [0, arg_034, 0]]], bnds_014$15],
     arg_032 =
       caml_call2
        (Incremental_Import[16][1],
         Incremental_Internal_observer[10][1],
         all_observers_031),
     bnds_014$17 = [0, [1, [0, _G_, [0, arg_032, 0]]], bnds_014$16],
     arg_030 = caml_call1(Core[356], num_active_observers_029),
     bnds_014$18 = [0, [1, [0, _H_, [0, arg_030, 0]]], bnds_014$17],
     arg_028 =
       caml_call2
        (Core_Stack[2], Incremental_Node[1][1], propagate_invalidity_027),
     bnds_014$19 = [0, [1, [0, _I_, [0, arg_028, 0]]], bnds_014$18],
     arg_026 =
       caml_call1(Incremental_Adjust_heights_hea[1], adjust_heights_heap_025),
     bnds_014$20 = [0, [1, [0, _J_, [0, arg_026, 0]]], bnds_014$19],
     arg_024 = caml_call1(Incremental_Recompute_heap[1], recompute_heap_023),
     bnds_014$21 = [0, [1, [0, _K_, [0, arg_024, 0]]], bnds_014$20],
     arg_022 = caml_call1(Incremental_Scope[1], current_scope_021),
     bnds_014$22 = [0, [1, [0, _L_, [0, arg_022, 0]]], bnds_014$21],
     arg_020 =
       caml_call1(Incremental_Stabilization_num[2], stabilization_num_019),
     bnds_014$23 = [0, [1, [0, _M_, [0, arg_020, 0]]], bnds_014$22],
     arg_018 = caml_call1(Core[305], bind_lhs_change_should_invalid),
     bnds_014$24 = [0, [1, [0, _N_, [0, arg_018, 0]]], bnds_014$23],
     arg_016 = sexp_of_status(status_015),
     bnds_014$25 = [0, [1, [0, _O_, [0, arg_016, 0]]], bnds_014$24];
    return [1, bnds_014$25];
   }
   function fired_alarm_values(r){return r[4];}
   function set_fired_alarm_values(r, v){r[4] = v; return 0;}
   function handle_fired(r){return r[3];}
   function now(r){return r[2];}
   function timing_wheel(r){return r[1];}
   var
    fired_alarm_values$0 =
      [0,
       function(param){return 0;},
       cst_fired_alarm_values,
       [0, set_fired_alarm_values],
       fired_alarm_values,
       function(r, v){return [0, r[1], r[2], r[3], v];}],
    handle_fired$0 =
      [0,
       function(param){return 0;},
       cst_handle_fired,
       0,
       handle_fired,
       function(r, v){return [0, r[1], r[2], v, r[4]];}],
    now$0 =
      [0,
       function(param){return 0;},
       cst_now,
       0,
       now,
       function(r, v){return [0, r[1], v, r[3], r[4]];}],
    timing_wheel$0 =
      [0,
       function(param){return 0;},
       cst_timing_wheel,
       0,
       timing_wheel,
       function(r, v){return [0, v, r[2], r[3], r[4]];}];
   function make_creator$1
   (timing_wheel_fun,
    now_fun,
    handle_fired_fun,
    fired_alarm_values_fun,
    compile_acc){
    var
     match = caml_call2(timing_wheel_fun, timing_wheel$0, compile_acc),
     compile_acc$0 = match[2],
     timing_wheel_gen = match[1],
     match$0 = caml_call2(now_fun, now$0, compile_acc$0),
     compile_acc$1 = match$0[2],
     now_gen = match$0[1],
     match$1 = caml_call2(handle_fired_fun, handle_fired$0, compile_acc$1),
     compile_acc$2 = match$1[2],
     handle_fired_gen = match$1[1],
     match$2 =
       caml_call2(fired_alarm_values_fun, fired_alarm_values$0, compile_acc$2),
     compile_acc$3 = match$2[2],
     fired_alarm_values_gen = match$2[1];
    return [0,
            function(acc){
             var
              timing_wheel = caml_call1(timing_wheel_gen, acc),
              now = caml_call1(now_gen, acc),
              handle_fired = caml_call1(handle_fired_gen, acc),
              fired_alarm_values = caml_call1(fired_alarm_values_gen, acc);
             return [0, timing_wheel, now, handle_fired, fired_alarm_values];
            },
            compile_acc$3];
   }
   function create$2(timing_wheel, now, handle_fired, fired_alarm_values){return [0, timing_wheel, now, handle_fired, fired_alarm_values];
   }
   function map$3
   (timing_wheel_fun, now_fun, handle_fired_fun, fired_alarm_values_fun){
    var
     _gD_ = caml_call1(fired_alarm_values_fun, fired_alarm_values$0),
     _gE_ = caml_call1(handle_fired_fun, handle_fired$0),
     _gF_ = caml_call1(now_fun, now$0);
    return [0, caml_call1(timing_wheel_fun, timing_wheel$0), _gF_, _gE_, _gD_];
   }
   function iter$3
   (timing_wheel_fun, now_fun, handle_fired_fun, fired_alarm_values_fun){
    caml_call1(timing_wheel_fun, timing_wheel$0);
    caml_call1(now_fun, now$0);
    caml_call1(handle_fired_fun, handle_fired$0);
    return caml_call1(fired_alarm_values_fun, fired_alarm_values$0);
   }
   function fold$3
   (init, timing_wheel_fun, now_fun, handle_fired_fun, fired_alarm_values_fun){
    return caml_call2
            (fired_alarm_values_fun,
             caml_call2
              (handle_fired_fun,
               caml_call2
                (now_fun,
                 caml_call2(timing_wheel_fun, init, timing_wheel$0),
                 now$0),
               handle_fired$0),
             fired_alarm_values$0);
   }
   function map_poly$1(record){
    var
     _gA_ = [0, caml_call1(record[1], fired_alarm_values$0), 0],
     _gB_ = [0, caml_call1(record[1], handle_fired$0), _gA_],
     _gC_ = [0, caml_call1(record[1], now$0), _gB_];
    return [0, caml_call1(record[1], timing_wheel$0), _gC_];
   }
   function for_all$3
   (timing_wheel_fun, now_fun, handle_fired_fun, fired_alarm_values_fun){
    var
     _gx_ = caml_call1(timing_wheel_fun, timing_wheel$0),
     _gy_ = _gx_ ? caml_call1(now_fun, now$0) : _gx_,
     _gz_ = _gy_ ? caml_call1(handle_fired_fun, handle_fired$0) : _gy_;
    return _gz_
            ? caml_call1(fired_alarm_values_fun, fired_alarm_values$0)
            : _gz_;
   }
   function exists$3
   (timing_wheel_fun, now_fun, handle_fired_fun, fired_alarm_values_fun){
    var
     _gw_ = caml_call1(timing_wheel_fun, timing_wheel$0),
     _gu_ = _gw_ || caml_call1(now_fun, now$0),
     _gv_ = _gu_ || caml_call1(handle_fired_fun, handle_fired$0);
    return _gv_
            ? _gv_
            : caml_call1(fired_alarm_values_fun, fired_alarm_values$0);
   }
   function to_list$3
   (timing_wheel_fun, now_fun, handle_fired_fun, fired_alarm_values_fun){
    var
     _gr_ = [0, caml_call1(fired_alarm_values_fun, fired_alarm_values$0), 0],
     _gs_ = [0, caml_call1(handle_fired_fun, handle_fired$0), _gr_],
     _gt_ = [0, caml_call1(now_fun, now$0), _gs_];
    return [0, caml_call1(timing_wheel_fun, timing_wheel$0), _gt_];
   }
   function iter$4
   (record,
    timing_wheel_fun,
    now_fun,
    handle_fired_fun,
    fired_alarm_values_fun){
    caml_call3(timing_wheel_fun, timing_wheel$0, record, record[1]);
    caml_call3(now_fun, now$0, record, record[2]);
    caml_call3(handle_fired_fun, handle_fired$0, record, record[3]);
    return caml_call3
            (fired_alarm_values_fun, fired_alarm_values$0, record, record[4]);
   }
   function fold$4
   (record,
    init,
    timing_wheel_fun,
    now_fun,
    handle_fired_fun,
    fired_alarm_values_fun){
    var _go_ = record[4], _gp_ = record[3], _gq_ = record[2];
    return caml_call4
            (fired_alarm_values_fun,
             caml_call4
              (handle_fired_fun,
               caml_call4
                (now_fun,
                 caml_call4
                  (timing_wheel_fun, init, timing_wheel$0, record, record[1]),
                 now$0,
                 record,
                 _gq_),
               handle_fired$0,
               record,
               _gp_),
             fired_alarm_values$0,
             record,
             _go_);
   }
   function for_all$4
   (record,
    timing_wheel_fun,
    now_fun,
    handle_fired_fun,
    fired_alarm_values_fun){
    var
     _gl_ = caml_call3(timing_wheel_fun, timing_wheel$0, record, record[1]),
     _gm_ = _gl_ ? caml_call3(now_fun, now$0, record, record[2]) : _gl_,
     _gn_ =
       _gm_
        ? caml_call3(handle_fired_fun, handle_fired$0, record, record[3])
        : _gm_;
    return _gn_
            ? caml_call3
              (fired_alarm_values_fun,
               fired_alarm_values$0,
               record,
               record[4])
            : _gn_;
   }
   function exists$4
   (record,
    timing_wheel_fun,
    now_fun,
    handle_fired_fun,
    fired_alarm_values_fun){
    var
     _gk_ = caml_call3(timing_wheel_fun, timing_wheel$0, record, record[1]),
     _gi_ = _gk_ || caml_call3(now_fun, now$0, record, record[2]),
     _gj_ =
       _gi_ || caml_call3(handle_fired_fun, handle_fired$0, record, record[3]);
    return _gj_
            ? _gj_
            : caml_call3
              (fired_alarm_values_fun,
               fired_alarm_values$0,
               record,
               record[4]);
   }
   function to_list$4
   (record,
    timing_wheel_fun,
    now_fun,
    handle_fired_fun,
    fired_alarm_values_fun){
    var
     _gf_ =
       [0,
        caml_call3
         (fired_alarm_values_fun, fired_alarm_values$0, record, record[4]),
        0],
     _gg_ =
       [0,
        caml_call3(handle_fired_fun, handle_fired$0, record, record[3]),
        _gf_],
     _gh_ = [0, caml_call3(now_fun, now$0, record, record[2]), _gg_];
    return [0,
            caml_call3(timing_wheel_fun, timing_wheel$0, record, record[1]),
            _gh_];
   }
   function map$4
   (record,
    timing_wheel_fun,
    now_fun,
    handle_fired_fun,
    fired_alarm_values_fun){
    var
     _gc_ =
       caml_call3
        (fired_alarm_values_fun, fired_alarm_values$0, record, record[4]),
     _gd_ = caml_call3(handle_fired_fun, handle_fired$0, record, record[3]),
     _ge_ = caml_call3(now_fun, now$0, record, record[2]);
    return [0,
            caml_call3(timing_wheel_fun, timing_wheel$0, record, record[1]),
            _ge_,
            _gd_,
            _gc_];
   }
   function set_all_mutable_fields$1(record, fired_alarm_values){
    var record$0 = caml_call1(Base_Field[1][1], record);
    record$0[4] = fired_alarm_values;
    return 0;
   }
   var
    Direct$1 =
      [0,
       iter$4,
       fold$4,
       for_all$4,
       exists$4,
       to_list$4,
       map$4,
       set_all_mutable_fields$1],
    Fields$1 =
      [0,
       names$1,
       fired_alarm_values$0,
       handle_fired$0,
       now$0,
       timing_wheel$0,
       make_creator$1,
       create$2,
       map$3,
       iter$3,
       fold$3,
       map_poly$1,
       for_all$3,
       exists$3,
       to_list$3,
       Direct$1],
    _P_ = [0, cst_fired_alarm_values],
    _Q_ = [0, cst_handle_fired],
    _R_ = [0, cst_now],
    _S_ = [0, cst_timing_wheel],
    _T_ = [0, cst_src_state_ml, 159, 44],
    _U_ = [0, cst_src_state_ml, 156, 13],
    _V_ = [0, cst_src_state_ml, 151, 7499, 7523];
   function sexp_of_t$3(param){
    var
     now_072 = param[2],
     timing_wheel_070 = param[1],
     fired_alarm_values_076 = param[4],
     arg_077 =
       caml_call2
        (Incremental_Import[16][1],
         Incremental_Alarm_value[3],
         fired_alarm_values_076),
     bnds_069 = [0, [1, [0, _P_, [0, arg_077, 0]]], 0],
     arg_075 = caml_call1(Sexplib0_Sexp_conv[24], function(_gb_){return 0;}),
     bnds_069$0 = [0, [1, [0, _Q_, [0, arg_075, 0]]], bnds_069],
     arg_073 =
       caml_call2(Incremental_Var[2], Incremental_Import[14][119], now_072),
     bnds_069$1 = [0, [1, [0, _R_, [0, arg_073, 0]]], bnds_069$0],
     arg_071 =
       caml_call2
        (Timing_wheel[2], Incremental_Alarm_value[3], timing_wheel_070),
     bnds_069$2 = [0, [1, [0, _S_, [0, arg_071, 0]]], bnds_069$1];
    return [1, bnds_069$2];
   }
   function invariant$1(t){
    return caml_call4
            (Base_Invariant[1],
             _V_,
             t,
             sexp_of_t$3,
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               _f8_ =
                 check
                  (function(fired_alarm_values){
                    if
                     (caml_call1(Incremental_Import[16][5], fired_alarm_values))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _T_], 1);
                   }),
               _f9_ =
                 check
                  (function(now){
                    var _ga_ = caml_call1(Timing_wheel[11], t[1]);
                    if(caml_call2(Incremental_Import[14][21], now[1], _ga_))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _U_], 1);
                   }),
               _f__ =
                 check
                  (caml_call1(Timing_wheel[6], Incremental_Alarm_value[2]));
              return caml_call4
                      (Fields$1[9], _f__, _f9_, function(_f$_){return 0;}, _f8_);
             });
   }
   function incr_state(t){return caml_call1(Incremental_Var[5], t[2]);}
   var
    Clock =
      [0,
       fired_alarm_values,
       set_fired_alarm_values,
       handle_fired,
       now,
       timing_wheel,
       Fields$1,
       sexp_of_t$3,
       invariant$1,
       incr_state],
    _W_ = [0, cst_src_state_ml, 193, 2],
    cst_percentage_of_nodes_by_num = cst_percentage_of_nodes_by_num$0,
    cst_max_num_parents = cst_max_num_parents$0,
    _X_ = [0, cst_percentage_of_nodes_by_num$0],
    _Y_ = [0, cst_max_num_parents$0];
   function now$1(clock){return clock[2][1];}
   function timing_wheel_length(clock){
    return caml_call1(Timing_wheel[14], clock[1]);
   }
   function num_stabilizes(t){
    return caml_call1(Incremental_Stabilization_num[10], t[3]);
   }
   function max_height_allowed(t){
    return caml_call1(Incremental_Adjust_heights_hea[5], t[6]);
   }
   function max_height_seen(t){
    return caml_call1(Incremental_Adjust_heights_hea[7], t[6]);
   }
   function iter_observers(t, f){
    var r = [0, t[9]];
    for(;;){
     if(! caml_call1(Incremental_Import[16][6], r[1])) return 0;
     var observer = caml_call1(Incremental_Import[16][11], r[1]);
     r[1] = caml_call1(Incremental_Internal_observer[10][3], observer);
     caml_call1(f, observer);
    }
   }
   function directly_observed(t){
    var r = [0, 0];
    iter_observers(t, function(param){r[1] = [0, param[2], r[1]]; return 0;});
    return r[1];
   }
   function save_dot(t, out){
    var _f7_ = directly_observed(t);
    return caml_call2(Incremental_Node[1][5], out, _f7_);
   }
   function save_dot_to_file(t, file){
    var _f6_ = directly_observed(t);
    return caml_call2(Incremental_Node[1][6], file, _f6_);
   }
   function iter_observer_descendants(t, f){
    var _f5_ = directly_observed(t);
    return caml_call2(Incremental_Node[1][4], _f5_, f);
   }
   function t_of_sexp(sexp_079){
    if(0 === sexp_079[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_095, sexp_079);
    var
     field_sexps_080 = sexp_079[1],
     max_num_parents_081 = [0, 0],
     percentage_of_nodes_by_num_par = [0, 0],
     duplicates_085 = [0, 0],
     extra_086 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_080;
       for(;;){
        if(! param) break;
        var sexp_079$0 = param[1];
        if(1 !== sexp_079$0[0]) break b;
        var _f0_ = sexp_079$0[1];
        if(! _f0_) break c;
        var _f1_ = _f0_[1];
        if(0 !== _f1_[0]) break e;
        var field_sexps_089 = _f0_[2], field_name_087 = _f1_[1];
        if(field_sexps_089 && field_sexps_089[2]) break d;
        var tail_099 = param[2];
        let field_sexps_089$0 = field_sexps_089;
        var
         field_sexp_088 =
           function(param){
            if(! field_sexps_089$0)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[10], error_source_095, sexp_079);
            if(field_sexps_089$0[2])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _W_], 1);
            var x_100 = field_sexps_089$0[1];
            return x_100;
           };
        if(field_name_087 !== cst_max_num_parents$0)
         if(field_name_087 !== cst_percentage_of_nodes_by_num$0){
          if(Sexplib0_Sexp_conv[26][1])
           extra_086[1] = [0, field_name_087, extra_086[1]];
         }
         else if(percentage_of_nodes_by_num_par[1])
          duplicates_085[1] = [0, field_name_087, duplicates_085[1]];
         else{
          var
           field_sexp_088$0 = field_sexp_088(0),
           fvalue_096 =
             caml_call2
              (Core[422],
               function(sexp_094){
                if(1 === sexp_094[0]){
                 var _f3_ = sexp_094[1];
                 if(_f3_){
                  var _f4_ = _f3_[2];
                  if(_f4_ && ! _f4_[2]){
                   var
                    arg1_091 = _f4_[1],
                    arg0_090 = _f3_[1],
                    res0_092 = caml_call1(Core[357], arg0_090),
                    res1_093 = caml_call1(Core_Percent[7], arg1_091);
                   return [0, res0_092, res1_093];
                  }
                 }
                }
                return caml_call3
                        (Sexplib0_Sexp_conv_error[2], error_source_095, 2, sexp_094);
               },
               field_sexp_088$0);
          percentage_of_nodes_by_num_par[1] = [0, fvalue_096];
         }
        else if(max_num_parents_081[1])
         duplicates_085[1] = [0, field_name_087, duplicates_085[1]];
        else{
         var
          field_sexp_088$1 = field_sexp_088(0),
          fvalue_097 = caml_call1(Core[357], field_sexp_088$1);
         max_num_parents_081[1] = [0, fvalue_097];
        }
        param = tail_099;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_095, sexp_079$0);
    }
    if(duplicates_085[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_095,
              duplicates_085[1],
              sexp_079);
    if(extra_086[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_095,
              extra_086[1],
              sexp_079);
    var
     _f2_ = max_num_parents_081[1],
     match = percentage_of_nodes_by_num_par[1];
    if(_f2_ && match){
     var
      percentage_of_nodes_by_num_par$0 = match[1],
      max_num_parents_082 = _f2_[1];
     return [0, max_num_parents_082, percentage_of_nodes_by_num_par$0];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[15],
             error_source_095,
             sexp_079,
             [0,
              [0, 0 === max_num_parents_081[1] ? 1 : 0, cst_max_num_parents],
              [0,
               [0,
                0 === percentage_of_nodes_by_num_par[1] ? 1 : 0,
                cst_percentage_of_nodes_by_num],
               0]]);
   }
   function sexp_of_t$4(param){
    var
     percentage_of_nodes_by_num_par = param[2],
     max_num_parents_102 = param[1],
     arg_105 =
       caml_call2
        (Core[421],
         function(param){
          var
           arg1_107 = param[2],
           arg0_106 = param[1],
           res0_108 = caml_call1(Core[356], arg0_106),
           res1_109 = caml_call1(Core_Percent[8], arg1_107);
          return [1, [0, res0_108, [0, res1_109, 0]]];
         },
         percentage_of_nodes_by_num_par),
     bnds_101 = [0, [1, [0, _X_, [0, arg_105, 0]]], 0],
     arg_103 = caml_call1(Core[356], max_num_parents_102),
     bnds_101$0 = [0, [1, [0, _Y_, [0, arg_103, 0]]], bnds_101];
    return [1, bnds_101$0];
   }
   var
    Stats = [0, t_of_sexp, sexp_of_t$4],
    cst_cannot_call_am_stabilizing =
      "cannot call am_stabilizing -- stabilize previously raised",
    _Z_ = [0, cst_src_state_ml, 227, 10256, 10268],
    ___ = [0, cst$0],
    cst_member_of_all_observers_wi =
      "member of all_observers with unexpected state",
    _$_ = [0, cst_src_state_ml, 244, 10839, 10858],
    _aa_ = [0, cst_src_state_ml, 252, 8],
    _ab_ = [0, cst_src_state_ml, 251, 39],
    _ac_ = [0, cst_src_state_ml, 301, 15],
    _ad_ = [0, cst_src_state_ml, 305, 20],
    _ae_ = [0, cst_src_state_ml, 299, 48],
    _af_ = [0, cst_src_state_ml, 295, 49],
    _ag_ = [0, cst_src_state_ml, 287, 41],
    _ah_ = [0, cst_src_state_ml, 272, 46],
    _ai_ = [0, cst_src_state_ml, 270, 13],
    _aj_ = [0, cst_src_state_ml, 266, 13],
    _ak_ = [0, cst_src_state_ml, 262, 39],
    _al_ = [0, cst_src_state_ml, 254, 6],
    _am_ = [0, cst_src_state_ml, 237, 10540, 10564],
    _an_ =
      [0,
       [11, cst_cannot, [2, 0, [11, cst_during_stabilization$0, 0]]],
       "cannot %s during stabilization"],
    _ao_ = [0, cst_src_state_ml, 346, 15414, 15426],
    _ap_ =
      [0,
       [11, cst_cannot, [2, 0, [11, " during on-update handlers", 0]]],
       "cannot %s during on-update handlers"],
    _aq_ = [0, cst_src_state_ml, 332, 14948, 14962],
    _ar_ =
      [0,
       [11, cst_cannot, [2, 0, [11, " -- stabilize previously raised", 0]]],
       "cannot %s -- stabilize previously raised"],
    _as_ = [0, cst_src_state_ml, 339, 15182, 15194],
    cst_set_max_height_allowed = "set_max_height_allowed",
    _at_ = [0, cst_src_state_ml, 396, 16],
    _au_ = [0, cst_src_state_ml, 470, 18],
    _av_ = [0, cst_src_state_ml, 437, 18],
    _aw_ = [0, cst_src_state_ml, 533, 20],
    _ax_ = [0, cst_src_state_ml, 522, 22],
    _az_ = [0, cst_src_state_ml, 550, 16],
    _aA_ = [0, cst$0],
    cst_Trying_to_make_a_node_nece =
      "Trying to make a node necessary whose defining bind is not necessary",
    _aB_ = [0, cst_src_state_ml, 568, 26058, 26070],
    _aC_ = [0, cst_src_state_ml, 584, 18],
    _aD_ = [0, cst_src_state_ml, 589, 16],
    _aE_ = [0, cst_src_state_ml, 590, 16],
    _aF_ = [0, cst_src_state_ml, 621, 16],
    _aG_ = [0, cst_src_state_ml, 603, 16],
    cst_attempt_to_run_within_an_i = "attempt to run within an invalid scope",
    _aH_ = [0, cst_src_state_ml, 644, 29003, 29026],
    _aI_ = [0, cst_src_state_ml, 678, 16],
    _aJ_ = [0, cst_src_state_ml, 766, 4],
    _aK_ = [0, cst_src_state_ml, 815, 21],
    _aL_ = [0, cst_src_state_ml, 696, 18],
    _aM_ = [0, cst_src_state_ml, 739, 18],
    _aN_ = [0, cst_src_state_ml, 784, 18],
    _aO_ = [0, cst_src_state_ml, 1074, 54],
    _aP_ = [0, cst_src_state_ml, 1070, 29],
    _aQ_ = [0, cst_src_state_ml, 1129, 24],
    _aR_ = [0, cst_src_state_ml, 1128, 24],
    _aS_ = [0, cst_src_state_ml, 1072, 20],
    _aT_ = [0, cst_src_state_ml, 1073, 30],
    _aU_ = [0, cst_src_state_ml, 1065, 20],
    _aV_ = [0, cst_src_state_ml, 1032, 22],
    _aW_ = [0, cst$0],
    cst_node_unexpectedly_does_not =
      "node unexpectedly does not need to be computed",
    _aX_ = [0, cst_src_state_ml, 1139, 47947, 47959],
    _aY_ = [0, cst_src_state_ml, 1152, 6],
    _aZ_ = [0, cst_src_state_ml, 1219, 29],
    _a0_ = [0, cst_src_state_ml, 1244, 20],
    _a1_ = [0, cst$0],
    cst_Observer_value_exn_called_ =
      "Observer.value_exn called during stabilization",
    _a2_ = [0, cst_src_state_ml, 1261, 52394, 52406],
    cst_Observer_value_exn_called_$0 =
      "Observer.value_exn called after stabilize previously raised",
    _a3_ = [0, cst_src_state_ml, 1255, 52225, 52237],
    _a4_ = [0, cst_src_state_ml, 1292, 18],
    cst_cannot_set_var_stabilizati =
      "cannot set var -- stabilization previously raised",
    _a5_ = [0, cst_src_state_ml, 1304, 53749, 53761],
    cst_stabilize = "stabilize",
    _a6_ = [0, "Done"],
    _a7_ = [0, "Keep_going"];
   function stats(t){
    var max_num_parents = [0, -1], num_necessary_nodes = [0, 0];
    iter_observer_descendants
     (t,
      function(param){
       num_necessary_nodes[1]++;
       max_num_parents[1] =
        caml_call2(Core_Int[93], max_num_parents[1], param[9]);
       return 0;
      });
    var
     max_num_parents$0 = max_num_parents[1],
     num_nodes_by_num_parents =
       caml_call2(Incremental_Import[15][38], max_num_parents$0 + 1 | 0, 0);
    iter_observer_descendants
     (t,
      function(param){
       var num_parents = param[9];
       num_nodes_by_num_parents[1 + num_parents] =
        caml_check_bound(num_nodes_by_num_parents, num_parents)
         [1 + num_parents]
        + 1
        | 0;
       return 0;
      });
    var
     _fZ_ =
       caml_call3
        (Incremental_Import[15][60],
         num_nodes_by_num_parents,
         0,
         function(i, ac, num_nodes){
          return caml_call2(Incremental_Import[3], num_nodes, 0)
                  ? ac
                  : [0,
                    [0,
                     i,
                     caml_call1
                      (Core_Percent[71], num_nodes / num_necessary_nodes[1])],
                    ac];
         }),
     percentage_of_nodes_by_num_par = caml_call1(Core_List[34], _fZ_);
    return [0, max_num_parents$0, percentage_of_nodes_by_num_par];
   }
   function am_stabilizing(t){
    var match = t[1];
    if(typeof match === "number") return 2 <= match ? 0 : 1;
    var raised_exn = match[1];
    return caml_call5
            (Core[236],
             0,
             _Z_,
             cst_cannot_call_am_stabilizing,
             raised_exn,
             Incremental_Raised_exn[1]);
   }
   function invariant$2(t){
    return typeof t[1] === "number"
            ? caml_call4
              (Base_Invariant[1],
               _am_,
               t,
               sexp_of_t$2,
               function(param){
                function check(f){return caml_call2(Base_Invariant[2], t, f);}
                iter_observers
                 (t,
                  function(internal_observer){
                   if(1 < internal_observer[1] - 1 >>> 0)
                    caml_call5
                     (Core[236],
                      0,
                      _$_,
                      cst_member_of_all_observers_wi,
                      internal_observer,
                      function(x_110){
                       return caml_call2
                               (Incremental_Internal_observer[2],
                                function(param){return ___;},
                                x_110);
                      });
                   return caml_call2
                           (Incremental_Internal_observer[1],
                            function(_fY_){return 0;},
                            internal_observer);
                  });
                iter_observer_descendants
                 (t,
                  function(node){
                   caml_call2
                    (Incremental_Node[4], function(_fX_){return 0;}, node);
                   if
                    (1 - am_stabilizing(t)
                     && ! caml_call1(Incremental_Import[16][5], node[20]))
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _ab_], 1);
                   var
                    _fW_ = caml_call1(Incremental_Adjust_heights_hea[7], t[6]);
                   if(caml_call2(Incremental_Import[2], node[14], _fW_))
                    return 0;
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _aa_], 1);
                  });
                var
                 _fr_ = caml_call1(Incremental_Recompute_heap[5], t[5]),
                 _fs_ = caml_call1(Incremental_Adjust_heights_hea[5], t[6]);
                if(! caml_call2(Incremental_Import[3], _fs_, _fr_))
                 throw caml_maybe_attach_backtrace
                        ([0, Assert_failure, _al_], 1);
                var
                 _ft_ = check(Only_in_debug[7]),
                 _fu_ =
                   check(caml_call1(Core_Stack[4], Run_on_update_handlers[2])),
                 _fv_ =
                   check(caml_call1(Core_Stack[4], Incremental_Node[1][2])),
                 _fw_ =
                   check
                    (function(set_during_stabilization){
                      var _fV_ = t[1];
                      if(typeof _fV_ !== "number")
                       throw caml_maybe_attach_backtrace
                              ([0, Assert_failure, _ae_], 1);
                      if(! _fV_)
                       return caml_call2
                               (Core_Stack[4],
                                function(param){
                                 if(caml_call1(Incremental_Import[16][6], param[2]))
                                  return 0;
                                 throw caml_maybe_attach_backtrace
                                        ([0, Assert_failure, _ad_], 1);
                                },
                                set_during_stabilization);
                      if(caml_call1(Core_Stack[7], set_during_stabilization))
                       return 0;
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _ac_], 1);
                     }),
                 _fx_ =
                   check
                    (caml_call1
                      (Core_Stack[4],
                       function(packed){
                        caml_call1(Incremental_Internal_observer[10][2], packed);
                        if(2 === packed[1]) return 0;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _af_], 1);
                       })),
                 _fy_ =
                   check
                    (caml_call1
                      (Core_Stack[4],
                       function(packed){
                        caml_call1(Incremental_Internal_observer[10][2], packed);
                        if(1 < packed[1] - 1 >>> 0) return 0;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _ag_], 1);
                       })),
                 _fz_ =
                   check
                    (function(num_active_observers){
                      if
                       (caml_call2(Incremental_Import[1], num_active_observers, 0))
                       return 0;
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _ah_], 1);
                     }),
                 _fA_ =
                   check
                    (function(propagate_invalidity){
                      if(caml_call1(Core_Stack[7], propagate_invalidity))
                       return 0;
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _ai_], 1);
                     }),
                 _fB_ =
                   check
                    (function(adjust_heights_heap){
                      var
                       _fU_ =
                         caml_call1
                          (Incremental_Adjust_heights_hea[4], adjust_heights_heap);
                      if(caml_call2(Incremental_Import[3], _fU_, 0))
                       return caml_call1
                               (Incremental_Adjust_heights_hea[2], adjust_heights_heap);
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _aj_], 1);
                     }),
                 _fC_ = check(Incremental_Recompute_heap[2]),
                 _fD_ =
                   check
                    (function(current_scope){
                      if
                       (caml_call2(Core[246], current_scope, Incremental_Scope[3]))
                       return 0;
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _ak_], 1);
                     }),
                 _fE_ = check(Incremental_Stabilization_num[4]);
                return caml_call27
                        (Fields$0[32],
                         function(_fT_){return 0;},
                         function(_fS_){return 0;},
                         _fE_,
                         _fD_,
                         _fC_,
                         _fB_,
                         _fA_,
                         _fz_,
                         function(_fR_){return 0;},
                         function(_fQ_){return 0;},
                         _fy_,
                         _fx_,
                         _fw_,
                         _fv_,
                         _fu_,
                         _ft_,
                         function(_fP_){return 0;},
                         function(_fO_){return 0;},
                         function(_fN_){return 0;},
                         function(_fM_){return 0;},
                         function(_fL_){return 0;},
                         function(_fK_){return 0;},
                         function(_fJ_){return 0;},
                         function(_fI_){return 0;},
                         function(_fH_){return 0;},
                         function(_fG_){return 0;},
                         function(_fF_){return 0;});
               })
            : 0;
   }
   function ensure_not_stabilizing(t, name, allow_in_update_handler){
    var match = t[1];
    if(typeof match === "number")
     switch(match){
       case 0:
        var
         backtrace = caml_call2(Base_Backtrace[2], 0, 0),
         _fl_ = Base_Backtrace[1],
         _fm_ = caml_call2(Core[257], _an_, name);
        return caml_call5(Core[236], 0, _ao_, _fm_, backtrace, _fl_);
       case 1:
        var _fn_ = 1 - allow_in_update_handler;
        if(! _fn_) return _fn_;
        var
         backtrace$0 = caml_call2(Base_Backtrace[2], 0, 0),
         _fo_ = Base_Backtrace[1],
         _fp_ = caml_call2(Core[257], _ap_, name);
        return caml_call5(Core[236], 0, _aq_, _fp_, backtrace$0, _fo_);
       default: return 0;
     }
    var
     raised_exn = match[1],
     backtrace$1 = caml_call2(Base_Backtrace[2], 0, 0),
     _fq_ = caml_call2(Core[257], _ar_, name);
    return caml_call5
            (Core[236],
             0,
             _as_,
             _fq_,
             [0, raised_exn, backtrace$1],
             function(param){
              var
               arg1_112 = param[2],
               arg0_111 = param[1],
               res0_113 = caml_call1(Incremental_Raised_exn[1], arg0_111),
               res1_114 = caml_call1(Base_Backtrace[1], arg1_112);
              return [1, [0, res0_113, [0, res1_114, 0]]];
             });
   }
   function set_height(node, height){
    var t = node[2];
    return caml_call3(Incremental_Adjust_heights_hea[8], t[6], node, height);
   }
   function set_max_height_allowed(t, height){
    ensure_not_stabilizing(t, cst_set_max_height_allowed, 1);
    caml_call2(Incremental_Adjust_heights_hea[6], t[6], height);
    return caml_call2(Incremental_Recompute_heap[6], t[5], height);
   }
   function handle_after_stabilization$1(node){
    var _fk_ = 1 - node[22];
    if(! _fk_) return _fk_;
    var t = node[2];
    node[22] = 1;
    return caml_call2(Core_Stack[25], t[14], node);
   }
   function remove_children(parent){
    return caml_call2
            (Incremental_Node[8],
             parent,
             function(child_index, param){
              return remove_child(param, parent, child_index);
             });
   }
   function remove_child(child, parent, child_index){
    caml_call3(Incremental_Node[11], child, parent, child_index);
    return check_if_unnecessary(child);
   }
   function check_if_unnecessary(node){
    var _fj_ = 1 - caml_call1(Incremental_Node[15], node);
    return _fj_ ? became_unnecessary(node) : _fj_;
   }
   function became_unnecessary(node){
    var t = node[2];
    t[20] = t[20] + 1 | 0;
    if(caml_call2(Incremental_Import[4], node[8], 0))
     handle_after_stabilization$1(node);
    node[14] = -1;
    remove_children(node);
    var match = node[5];
    a:
    if(typeof match !== "number")
     switch(match[0]){
       case 6:
        var p = match[1]; caml_call2(Incremental_Expert[14], p, 0); break a;
       case 15:
        var u = match[1];
        caml_call1(Incremental_Unordered_array_fo[7], u);
        break a;
     }
    if(Incremental_Import[11] && caml_call1(Incremental_Node[20], node))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _at_], 1);
    var _fi_ = caml_call1(Incremental_Node[14], node);
    return _fi_ ? caml_call2(Incremental_Recompute_heap[9], t[5], node) : _fi_;
   }
   function remove_alarm(clock, alarm){
    var _fh_ = caml_call2(Timing_wheel[27], clock[1], alarm);
    return _fh_ ? caml_call2(Timing_wheel[28], clock[1], alarm) : _fh_;
   }
   function invalidate_node(node){
    var _fa_ = caml_call1(Incremental_Node[16], node);
    if(_fa_){
     var t = node[2];
     if(caml_call2(Incremental_Import[4], node[8], 0))
      handle_after_stabilization$1(node);
     node[4] = Incremental_Import[16][3];
     if
      (Incremental_Import[11]
       && ! caml_call1(Incremental_Import[16][5], node[20]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _av_], 1);
     node[7] = t[3];
     node[3] = t[3];
     t[23] = t[23] + 1 | 0;
     if(caml_call1(Incremental_Node[15], node)){
      remove_children(node);
      node[14] = caml_call1(Incremental_Scope[5], node[12]) + 1 | 0;
     }
     var match = node[5];
     a:
     if(typeof match !== "number")
      switch(match[0]){
        case 1:
         var at = match[1]; remove_alarm(at[4], at[3]); break a;
        case 2:
         var at_intervals = match[1];
         remove_alarm(at_intervals[5], at_intervals[4]);
         break a;
        case 4:
         var bind = match[1];
         invalidate_nodes_created_on_rh(bind[7]);
         break a;
        case 14:
         var match$0 = match[1], alarm = match$0[6], clock = match$0[8];
         remove_alarm(clock, alarm);
         break a;
      }
     caml_call2(Incremental_Node[6], node, 0);
     var _fc_ = node[9] - 1 | 0, _fb_ = 0;
     if(_fc_ >= 0){
      var index = _fb_;
      for(;;){
       var _ff_ = caml_call2(Incremental_Node[9], node, index);
       caml_call2(Core_Stack[25], t[7], _ff_);
       var _fg_ = index + 1 | 0;
       if(_fc_ === index) break;
       index = _fg_;
      }
     }
     if(Incremental_Import[11] && caml_call1(Incremental_Node[20], node))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _au_], 1);
     var _fd_ = caml_call1(Incremental_Node[14], node);
     if(_fd_) return caml_call2(Incremental_Recompute_heap[9], t[5], node);
     var _fe_ = _fd_;
    }
    else
     var _fe_ = _fa_;
    return _fe_;
   }
   function invalidate_nodes_created_on_rh(node){
    var r = [0, node];
    for(;;){
     if(! caml_call1(Incremental_Import[16][6], r[1])) return 0;
     var match = caml_call1(Incremental_Import[16][11], r[1]);
     r[1] = match[13];
     match[13] = Incremental_Import[16][3];
     invalidate_node(match);
    }
   }
   function rescope_nodes_created_on_rhs(t, first_node_on_rhs, new_scope){
    var r = [0, first_node_on_rhs];
    for(;;){
     if(! caml_call1(Incremental_Import[16][6], r[1])) return 0;
     var match = caml_call1(Incremental_Import[16][11], r[1]);
     r[1] = match[13];
     match[13] = Incremental_Import[16][3];
     match[12] = new_scope;
     caml_call2(Incremental_Scope[8], new_scope, match);
    }
   }
   function propagate_invalidity$1(t){
    for(;;){
     if(caml_call1(Core_Stack[7], t[7])) return 0;
     var node = caml_call1(Core_Stack[27], t[7]);
     if(caml_call1(Incremental_Node[16], node))
      if(caml_call1(Incremental_Node[17], node))
       invalidate_node(node);
      else{
       if(Incremental_Import[11] && ! caml_call1(Incremental_Node[20], node))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ax_], 1);
       var kind = node[5];
       a:
       {
        if(typeof kind !== "number" && 6 === kind[0]){
         var expert = kind[1];
         caml_call1(Incremental_Expert[7], expert);
         break a;
        }
        if(Incremental_Import[11]){
         if(typeof kind !== "number")
          switch(kind[0]){case 4:case 9:case 11: break a;}
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aw_], 1);
        }
       }
       if(1 - caml_call1(Incremental_Node[14], node))
        caml_call2(Incremental_Recompute_heap[8], t[5], node);
      }
    }
   }
   function add_parent_without_adjusting_h(child, parent, child_index){
    if(Incremental_Import[11] && ! caml_call1(Incremental_Node[15], parent))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _az_], 1);
    var t = child[2], was_necessary = caml_call1(Incremental_Node[15], child);
    caml_call3(Incremental_Node[10], child, parent, child_index);
    if(1 - caml_call1(Incremental_Node[16], child))
     caml_call2(Core_Stack[25], t[7], parent);
    if(1 - was_necessary) _ay_(child);
    var match = parent[5];
    if(typeof match !== "number" && 6 === match[0]){
     var e = match[1];
     return caml_call2(Incremental_Expert[15], e, child_index);
    }
    return 0;
   }
   function _ay_(node){
    var
     _e9_ = caml_call1(Incremental_Node[16], node),
     _e__ = _e9_ ? 1 - caml_call1(Incremental_Scope[7], node[12]) : _e9_;
    if(_e__)
     caml_call5
      (Core[236],
       0,
       _aB_,
       cst_Trying_to_make_a_node_nece,
       node,
       function(x_115){
        return caml_call2
                (Incremental_Node[2], function(param){return _aA_;}, x_115);
       });
    var t = node[2];
    t[19] = t[19] + 1 | 0;
    if(caml_call2(Incremental_Import[4], node[8], 0))
     handle_after_stabilization$1(node);
    set_height(node, caml_call1(Incremental_Scope[5], node[12]) + 1 | 0);
    caml_call2
     (Incremental_Node[8],
      node,
      function(child_index, child){
       add_parent_without_adjusting_h(child, node, child_index);
       if
        (Incremental_Import[11]
         && ! caml_call2(Incremental_Import[1], child[14], 0))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _aC_], 1);
       var _e$_ = caml_call2(Incremental_Import[1], child[14], node[14]);
       return _e$_ ? set_height(node, child[14] + 1 | 0) : _e$_;
      });
    if(Incremental_Import[11] && caml_call1(Incremental_Node[14], node))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aD_], 1);
    if(Incremental_Import[11] && ! caml_call1(Incremental_Node[15], node))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aE_], 1);
    if(caml_call1(Incremental_Node[19], node))
     caml_call2(Incremental_Recompute_heap[8], t[5], node);
    var match = node[5];
    if(typeof match !== "number" && 6 === match[0]){
     var p = match[1];
     return caml_call2(Incremental_Expert[14], p, 1);
    }
    return;
   }
   function became_necessary(node){
    _ay_(node);
    return propagate_invalidity$1(node[2]);
   }
   function add_parent(child, parent, child_index){
    if(Incremental_Import[11] && ! caml_call1(Incremental_Node[15], parent))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aG_], 1);
    var t = parent[2];
    add_parent_without_adjusting_h(child, parent, child_index);
    if(caml_call2(Incremental_Import[1], child[14], parent[14]))
     caml_call4(Incremental_Adjust_heights_hea[9], t[6], t[5], child, parent);
    propagate_invalidity$1(t);
    if(Incremental_Import[11] && ! caml_call1(Incremental_Node[15], parent))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aF_], 1);
    var _e6_ = 1 - caml_call1(Incremental_Node[14], parent);
    if(_e6_)
     var
      _e7_ = caml_call1(Incremental_Stabilization_num[7], parent[3]),
      _e8_ = _e7_ || caml_call2(Incremental_Node[18], child, parent);
    else
     var _e8_ = _e6_;
    return _e8_
            ? caml_call2(Incremental_Recompute_heap[8], t[5], parent)
            : _e8_;
   }
   function run_with_scope(t, scope, f){
    var saved = t[4];
    t[4] = scope;
    try{var v = caml_call1(f, 0); t[4] = saved; return v;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     t[4] = saved;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function within_scope(t, scope, f){
    if(1 - caml_call1(Incremental_Scope[6], scope))
     caml_call5
      (Core[236], 0, _aH_, cst_attempt_to_run_within_an_i, t, sexp_of_t$2);
    return run_with_scope(t, scope, f);
   }
   function change_child(parent, old_child, new_child, child_index){
    if(caml_call1(Incremental_Import[16][5], old_child))
     return add_parent(new_child, parent, child_index);
    var
     old_child$0 = caml_call1(Incremental_Import[16][11], old_child),
     _e5_ = 1 - caml_call2(Core[246], old_child$0, new_child);
    return _e5_
            ? (caml_call3
               (Incremental_Node[11], old_child$0, parent, child_index),
              old_child$0[26] = 1,
              add_parent(new_child, parent, child_index),
              old_child$0[26] = 0,
              check_if_unnecessary(old_child$0))
            : _e5_;
   }
   function add_alarm(clock, at, alarm_value){
    if(Incremental_Import[11]){
     var _e4_ = now$1(clock);
     if(! caml_call2(Incremental_Import[14][18], at, _e4_))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aI_], 1);
    }
    return caml_call3(Timing_wheel[25], clock[1], at, alarm_value);
   }
   function recompute(node){
    var t = node[2];
    if(Incremental_Import[11]){t[16][1] = [0, node]; t[16][2] = 0;}
    t[24] = t[24] + 1 | 0;
    node[3] = t[3];
    var match = node[5];
    if(typeof match === "number"){
     if(0 === match)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aJ_], 1);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aK_], 1);
    }
    switch(match[0]){
      case 0:
       var array_fold = match[1];
       return maybe_change_value
               (node, caml_call1(Incremental_Array_fold[3], array_fold));
      case 1:
       var match$0 = match[1], at = match$0[2], clock = match$0[4];
       if(Incremental_Import[11]){
        var _dk_ = now$1(clock);
        if(! caml_call2(Incremental_Import[14][18], at, _dk_))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aL_], 1);
       }
       return maybe_change_value(node, 0);
      case 2:
       return maybe_change_value(node, 0);
      case 3:
       var
        bind = match[1],
        main = bind[1],
        f = bind[2],
        lhs = bind[3],
        old_rhs = bind[5],
        rhs_scope = bind[6],
        old_all_nodes_created_on_rhs = bind[7];
       bind[7] = Incremental_Import[16][3];
       var
        rhs =
          run_with_scope
           (t,
            rhs_scope,
            function(param){
             return caml_call1(f, caml_call1(Incremental_Node[21], lhs));
            });
       bind[5] = caml_call1(Incremental_Import[16][4], rhs);
       node[7] = t[3];
       change_child(main, old_rhs, rhs, Incremental_Kind[6]);
       if(caml_call1(Incremental_Import[16][6], old_rhs)){
        if(t[2])
         invalidate_nodes_created_on_rh(old_all_nodes_created_on_rhs);
        else
         rescope_nodes_created_on_rhs
          (t, old_all_nodes_created_on_rhs, main[12]);
        propagate_invalidity$1(t);
       }
       if(Incremental_Import[11] && ! caml_call1(Incremental_Node[16], node))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _aM_], 1);
       return maybe_change_value(node, 0);
      case 4:
       var rhs$0 = match[1][5];
       return copy_child(node, caml_call1(Incremental_Import[16][7], rhs$0));
      case 5:
       var a = match[1]; return maybe_change_value(node, a);
      case 6:
       var expert = match[1];
       return 144245463 <= caml_call1(Incremental_Expert[13], expert)
               ? (invalidate_node(node), propagate_invalidity$1(t))
               : maybe_change_value(node, caml_call1(expert[1], 0));
      case 7:
       var
        match$1 = match[1],
        only_freeze_when = match$1[3],
        child = match$1[2],
        value = caml_call1(Incremental_Node[21], child);
       if(caml_call1(only_freeze_when, value)){
        remove_children(node);
        caml_call2(Incremental_Node[6], node, [5, value]);
        if(caml_call1(Incremental_Node[15], node))
         set_height(node, 0);
        else
         became_unnecessary(node);
       }
       return maybe_change_value(node, value);
      case 8:
       var
        if_then_else = match[1],
        test = if_then_else[2],
        main$0 = if_then_else[1],
        current_branch = if_then_else[4],
        else$0 = if_then_else[6],
        then = if_then_else[5],
        desired_branch =
          caml_call1(Incremental_Node[21], test) ? then : else$0;
       if_then_else[4] = caml_call1(Incremental_Import[16][4], desired_branch);
       node[7] = t[3];
       change_child
        (main$0, current_branch, desired_branch, Incremental_Kind[8]);
       return maybe_change_value(node, 0);
      case 9:
       var current_branch$0 = match[1][4];
       return copy_child
               (node, caml_call1(Incremental_Import[16][7], current_branch$0));
      case 10:
       var
        join = match[1],
        lhs$0 = join[2],
        main$1 = join[1],
        old_rhs$0 = join[4],
        rhs$1 = caml_call1(Incremental_Node[21], lhs$0);
       join[4] = caml_call1(Incremental_Import[16][4], rhs$1);
       node[7] = t[3];
       change_child(main$1, old_rhs$0, rhs$1, Incremental_Kind[9]);
       return maybe_change_value(node, 0);
      case 11:
       var rhs$2 = match[1][4];
       return copy_child(node, caml_call1(Incremental_Import[16][7], rhs$2));
      case 12:
       var n1 = match[2], f$0 = match[1];
       return maybe_change_value
               (node, caml_call1(f$0, caml_call1(Incremental_Node[21], n1)));
      case 13:
       var
        match$2 = match[1],
        clock$0 = match$2[5],
        before = match$2[3],
        at$0 = match$2[2];
       if(Incremental_Import[11]){
        var _dl_ = now$1(clock$0);
        if(! caml_call2(Incremental_Import[14][18], at$0, _dl_))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aN_], 1);
       }
       return maybe_change_value(node, before);
      case 14:
       var
        step_function_node = match[1],
        child$0 = step_function_node[2],
        clock$1 = step_function_node[8];
       if(caml_call1(Incremental_Import[16][6], child$0)){
        var
         child$1 = caml_call1(Incremental_Import[16][7], child$0),
         _dm_ =
           caml_call2
            (Incremental_Stabilization_num[1],
             child$1[7],
             step_function_node[3]);
        if(caml_call2(Incremental_Import[4], _dm_, 0)){
         step_function_node[3] = child$1[7];
         remove_alarm(clock$1, step_function_node[6]);
         var
          step_function = caml_call1(Incremental_Node[21], child$1),
          _dn_ = caml_call1(Incremental_step_function[3], step_function);
         step_function_node[4] = caml_call1(Incremental_Import[16][4], _dn_);
         step_function_node[5] =
          caml_call1(Incremental_step_function[4], step_function);
         if(caml_call1(Incremental_Node[13], child$1)){
          remove_children(node);
          step_function_node[2] = Incremental_Import[16][3];
          set_height(node, caml_call1(Incremental_Scope[5], node[12]) + 1 | 0);
         }
        }
       }
       var _do_ = now$1(clock$1);
       caml_call2(Incremental_Step_function_node[3], step_function_node, _do_);
       var
        step_function_value =
          caml_call1(Incremental_Import[16][7], step_function_node[4]),
        match$3 = caml_call1(Core_Sequence[63], step_function_node[5]);
       if(match$3){
        var at$1 = match$3[1][1];
        step_function_node[6] =
         add_alarm(clock$1, at$1, step_function_node[7]);
       }
       else if(caml_call1(Incremental_Import[16][5], child$0))
        caml_call2(Incremental_Node[6], node, [5, step_function_value]);
       return maybe_change_value(node, step_function_value);
      case 15:
       var u = match[1];
       return maybe_change_value
               (node, caml_call1(Incremental_Unordered_array_fo[5], u));
      case 16:
       var var$0 = match[1]; return maybe_change_value(node, var$0[1]);
      case 17:
       var
        n2 = match[3],
        n1$0 = match[2],
        f$1 = match[1],
        _dp_ = caml_call1(Incremental_Node[21], n2);
       return maybe_change_value
               (node,
                caml_call2(f$1, caml_call1(Incremental_Node[21], n1$0), _dp_));
      case 18:
       var
        n3 = match[4],
        n2$0 = match[3],
        n1$1 = match[2],
        f$2 = match[1],
        _dq_ = caml_call1(Incremental_Node[21], n3),
        _dr_ = caml_call1(Incremental_Node[21], n2$0);
       return maybe_change_value
               (node,
                caml_call3
                 (f$2, caml_call1(Incremental_Node[21], n1$1), _dr_, _dq_));
      case 19:
       var
        n4 = match[5],
        n3$0 = match[4],
        n2$1 = match[3],
        n1$2 = match[2],
        f$3 = match[1],
        _ds_ = caml_call1(Incremental_Node[21], n4),
        _dt_ = caml_call1(Incremental_Node[21], n3$0),
        _du_ = caml_call1(Incremental_Node[21], n2$1);
       return maybe_change_value
               (node,
                caml_call4
                 (f$3,
                  caml_call1(Incremental_Node[21], n1$2),
                  _du_,
                  _dt_,
                  _ds_));
      case 20:
       var
        n5 = match[6],
        n4$0 = match[5],
        n3$1 = match[4],
        n2$2 = match[3],
        n1$3 = match[2],
        f$4 = match[1],
        _dv_ = caml_call1(Incremental_Node[21], n5),
        _dw_ = caml_call1(Incremental_Node[21], n4$0),
        _dx_ = caml_call1(Incremental_Node[21], n3$1),
        _dy_ = caml_call1(Incremental_Node[21], n2$2);
       return maybe_change_value
               (node,
                caml_call5
                 (f$4,
                  caml_call1(Incremental_Node[21], n1$3),
                  _dy_,
                  _dx_,
                  _dw_,
                  _dv_));
      case 21:
       var
        n6 = match[7],
        n5$0 = match[6],
        n4$1 = match[5],
        n3$2 = match[4],
        n2$3 = match[3],
        n1$4 = match[2],
        f$5 = match[1],
        _dz_ = caml_call1(Incremental_Node[21], n6),
        _dA_ = caml_call1(Incremental_Node[21], n5$0),
        _dB_ = caml_call1(Incremental_Node[21], n4$1),
        _dC_ = caml_call1(Incremental_Node[21], n3$2),
        _dD_ = caml_call1(Incremental_Node[21], n2$3);
       return maybe_change_value
               (node,
                caml_call6
                 (f$5,
                  caml_call1(Incremental_Node[21], n1$4),
                  _dD_,
                  _dC_,
                  _dB_,
                  _dA_,
                  _dz_));
      case 22:
       var
        n7 = match[8],
        n6$0 = match[7],
        n5$1 = match[6],
        n4$2 = match[5],
        n3$3 = match[4],
        n2$4 = match[3],
        n1$5 = match[2],
        f$6 = match[1],
        _dE_ = caml_call1(Incremental_Node[21], n7),
        _dF_ = caml_call1(Incremental_Node[21], n6$0),
        _dG_ = caml_call1(Incremental_Node[21], n5$1),
        _dH_ = caml_call1(Incremental_Node[21], n4$2),
        _dI_ = caml_call1(Incremental_Node[21], n3$3),
        _dJ_ = caml_call1(Incremental_Node[21], n2$4);
       return maybe_change_value
               (node,
                caml_call7
                 (f$6,
                  caml_call1(Incremental_Node[21], n1$5),
                  _dJ_,
                  _dI_,
                  _dH_,
                  _dG_,
                  _dF_,
                  _dE_));
      case 23:
       var
        n8 = match[9],
        n7$0 = match[8],
        n6$1 = match[7],
        n5$2 = match[6],
        n4$3 = match[5],
        n3$4 = match[4],
        n2$5 = match[3],
        n1$6 = match[2],
        f$7 = match[1],
        _dK_ = caml_call1(Incremental_Node[21], n8),
        _dL_ = caml_call1(Incremental_Node[21], n7$0),
        _dM_ = caml_call1(Incremental_Node[21], n6$1),
        _dN_ = caml_call1(Incremental_Node[21], n5$2),
        _dO_ = caml_call1(Incremental_Node[21], n4$3),
        _dP_ = caml_call1(Incremental_Node[21], n3$4),
        _dQ_ = caml_call1(Incremental_Node[21], n2$5);
       return maybe_change_value
               (node,
                caml_call8
                 (f$7,
                  caml_call1(Incremental_Node[21], n1$6),
                  _dQ_,
                  _dP_,
                  _dO_,
                  _dN_,
                  _dM_,
                  _dL_,
                  _dK_));
      case 24:
       var
        n9 = match[10],
        n8$0 = match[9],
        n7$1 = match[8],
        n6$2 = match[7],
        n5$3 = match[6],
        n4$4 = match[5],
        n3$5 = match[4],
        n2$6 = match[3],
        n1$7 = match[2],
        f$8 = match[1],
        _dR_ = caml_call1(Incremental_Node[21], n9),
        _dS_ = caml_call1(Incremental_Node[21], n8$0),
        _dT_ = caml_call1(Incremental_Node[21], n7$1),
        _dU_ = caml_call1(Incremental_Node[21], n6$2),
        _dV_ = caml_call1(Incremental_Node[21], n5$3),
        _dW_ = caml_call1(Incremental_Node[21], n4$4),
        _dX_ = caml_call1(Incremental_Node[21], n3$5),
        _dY_ = caml_call1(Incremental_Node[21], n2$6);
       return maybe_change_value
               (node,
                caml_call9
                 (f$8,
                  caml_call1(Incremental_Node[21], n1$7),
                  _dY_,
                  _dX_,
                  _dW_,
                  _dV_,
                  _dU_,
                  _dT_,
                  _dS_,
                  _dR_));
      case 25:
       var
        n10 = match[11],
        n9$0 = match[10],
        n8$1 = match[9],
        n7$2 = match[8],
        n6$3 = match[7],
        n5$4 = match[6],
        n4$5 = match[5],
        n3$6 = match[4],
        n2$7 = match[3],
        n1$8 = match[2],
        f$9 = match[1],
        _dZ_ = caml_call1(Incremental_Node[21], n10),
        _d0_ = caml_call1(Incremental_Node[21], n9$0),
        _d1_ = caml_call1(Incremental_Node[21], n8$1),
        _d2_ = caml_call1(Incremental_Node[21], n7$2),
        _d3_ = caml_call1(Incremental_Node[21], n6$3),
        _d4_ = caml_call1(Incremental_Node[21], n5$4),
        _d5_ = caml_call1(Incremental_Node[21], n4$5),
        _d6_ = caml_call1(Incremental_Node[21], n3$6),
        _d7_ = caml_call1(Incremental_Node[21], n2$7);
       return maybe_change_value
               (node,
                caml_call10
                 (f$9,
                  caml_call1(Incremental_Node[21], n1$8),
                  _d7_,
                  _d6_,
                  _d5_,
                  _d4_,
                  _d3_,
                  _d2_,
                  _d1_,
                  _d0_,
                  _dZ_));
      case 26:
       var
        n11 = match[12],
        n10$0 = match[11],
        n9$1 = match[10],
        n8$2 = match[9],
        n7$3 = match[8],
        n6$4 = match[7],
        n5$5 = match[6],
        n4$6 = match[5],
        n3$7 = match[4],
        n2$8 = match[3],
        n1$9 = match[2],
        f$10 = match[1],
        _d8_ = caml_call1(Incremental_Node[21], n11),
        _d9_ = caml_call1(Incremental_Node[21], n10$0),
        _d__ = caml_call1(Incremental_Node[21], n9$1),
        _d$_ = caml_call1(Incremental_Node[21], n8$2),
        _ea_ = caml_call1(Incremental_Node[21], n7$3),
        _eb_ = caml_call1(Incremental_Node[21], n6$4),
        _ec_ = caml_call1(Incremental_Node[21], n5$5),
        _ed_ = caml_call1(Incremental_Node[21], n4$6),
        _ee_ = caml_call1(Incremental_Node[21], n3$7),
        _ef_ = caml_call1(Incremental_Node[21], n2$8);
       return maybe_change_value
               (node,
                caml_call11
                 (f$10,
                  caml_call1(Incremental_Node[21], n1$9),
                  _ef_,
                  _ee_,
                  _ed_,
                  _ec_,
                  _eb_,
                  _ea_,
                  _d$_,
                  _d__,
                  _d9_,
                  _d8_));
      case 27:
       var
        n12 = match[13],
        n11$0 = match[12],
        n10$1 = match[11],
        n9$2 = match[10],
        n8$3 = match[9],
        n7$4 = match[8],
        n6$5 = match[7],
        n5$6 = match[6],
        n4$7 = match[5],
        n3$8 = match[4],
        n2$9 = match[3],
        n1$10 = match[2],
        f$11 = match[1],
        _eg_ = caml_call1(Incremental_Node[21], n12),
        _eh_ = caml_call1(Incremental_Node[21], n11$0),
        _ei_ = caml_call1(Incremental_Node[21], n10$1),
        _ej_ = caml_call1(Incremental_Node[21], n9$2),
        _ek_ = caml_call1(Incremental_Node[21], n8$3),
        _el_ = caml_call1(Incremental_Node[21], n7$4),
        _em_ = caml_call1(Incremental_Node[21], n6$5),
        _en_ = caml_call1(Incremental_Node[21], n5$6),
        _eo_ = caml_call1(Incremental_Node[21], n4$7),
        _ep_ = caml_call1(Incremental_Node[21], n3$8),
        _eq_ = caml_call1(Incremental_Node[21], n2$9);
       return maybe_change_value
               (node,
                caml_call12
                 (f$11,
                  caml_call1(Incremental_Node[21], n1$10),
                  _eq_,
                  _ep_,
                  _eo_,
                  _en_,
                  _em_,
                  _el_,
                  _ek_,
                  _ej_,
                  _ei_,
                  _eh_,
                  _eg_));
      case 28:
       var
        n13 = match[14],
        n12$0 = match[13],
        n11$1 = match[12],
        n10$2 = match[11],
        n9$3 = match[10],
        n8$4 = match[9],
        n7$5 = match[8],
        n6$6 = match[7],
        n5$7 = match[6],
        n4$8 = match[5],
        n3$9 = match[4],
        n2$10 = match[3],
        n1$11 = match[2],
        f$12 = match[1],
        _er_ = caml_call1(Incremental_Node[21], n13),
        _es_ = caml_call1(Incremental_Node[21], n12$0),
        _et_ = caml_call1(Incremental_Node[21], n11$1),
        _eu_ = caml_call1(Incremental_Node[21], n10$2),
        _ev_ = caml_call1(Incremental_Node[21], n9$3),
        _ew_ = caml_call1(Incremental_Node[21], n8$4),
        _ex_ = caml_call1(Incremental_Node[21], n7$5),
        _ey_ = caml_call1(Incremental_Node[21], n6$6),
        _ez_ = caml_call1(Incremental_Node[21], n5$7),
        _eA_ = caml_call1(Incremental_Node[21], n4$8),
        _eB_ = caml_call1(Incremental_Node[21], n3$9),
        _eC_ = caml_call1(Incremental_Node[21], n2$10);
       return maybe_change_value
               (node,
                caml_call13
                 (f$12,
                  caml_call1(Incremental_Node[21], n1$11),
                  _eC_,
                  _eB_,
                  _eA_,
                  _ez_,
                  _ey_,
                  _ex_,
                  _ew_,
                  _ev_,
                  _eu_,
                  _et_,
                  _es_,
                  _er_));
      case 29:
       var
        n14 = match[15],
        n13$0 = match[14],
        n12$1 = match[13],
        n11$2 = match[12],
        n10$3 = match[11],
        n9$4 = match[10],
        n8$5 = match[9],
        n7$6 = match[8],
        n6$7 = match[7],
        n5$8 = match[6],
        n4$9 = match[5],
        n3$10 = match[4],
        n2$11 = match[3],
        n1$12 = match[2],
        f$13 = match[1],
        _eD_ = caml_call1(Incremental_Node[21], n14),
        _eE_ = caml_call1(Incremental_Node[21], n13$0),
        _eF_ = caml_call1(Incremental_Node[21], n12$1),
        _eG_ = caml_call1(Incremental_Node[21], n11$2),
        _eH_ = caml_call1(Incremental_Node[21], n10$3),
        _eI_ = caml_call1(Incremental_Node[21], n9$4),
        _eJ_ = caml_call1(Incremental_Node[21], n8$5),
        _eK_ = caml_call1(Incremental_Node[21], n7$6),
        _eL_ = caml_call1(Incremental_Node[21], n6$7),
        _eM_ = caml_call1(Incremental_Node[21], n5$8),
        _eN_ = caml_call1(Incremental_Node[21], n4$9),
        _eO_ = caml_call1(Incremental_Node[21], n3$10),
        _eP_ = caml_call1(Incremental_Node[21], n2$11);
       return maybe_change_value
               (node,
                caml_call14
                 (f$13,
                  caml_call1(Incremental_Node[21], n1$12),
                  _eP_,
                  _eO_,
                  _eN_,
                  _eM_,
                  _eL_,
                  _eK_,
                  _eJ_,
                  _eI_,
                  _eH_,
                  _eG_,
                  _eF_,
                  _eE_,
                  _eD_));
      default:
       var
        n15 = match[16],
        n14$0 = match[15],
        n13$1 = match[14],
        n12$2 = match[13],
        n11$3 = match[12],
        n10$4 = match[11],
        n9$5 = match[10],
        n8$6 = match[9],
        n7$7 = match[8],
        n6$8 = match[7],
        n5$9 = match[6],
        n4$10 = match[5],
        n3$11 = match[4],
        n2$12 = match[3],
        n1$13 = match[2],
        f$14 = match[1],
        _eQ_ = caml_call1(Incremental_Node[21], n15),
        _eR_ = caml_call1(Incremental_Node[21], n14$0),
        _eS_ = caml_call1(Incremental_Node[21], n13$1),
        _eT_ = caml_call1(Incremental_Node[21], n12$2),
        _eU_ = caml_call1(Incremental_Node[21], n11$3),
        _eV_ = caml_call1(Incremental_Node[21], n10$4),
        _eW_ = caml_call1(Incremental_Node[21], n9$5),
        _eX_ = caml_call1(Incremental_Node[21], n8$6),
        _eY_ = caml_call1(Incremental_Node[21], n7$7),
        _eZ_ = caml_call1(Incremental_Node[21], n6$8),
        _e0_ = caml_call1(Incremental_Node[21], n5$9),
        _e1_ = caml_call1(Incremental_Node[21], n4$10),
        _e2_ = caml_call1(Incremental_Node[21], n3$11),
        _e3_ = caml_call1(Incremental_Node[21], n2$12);
       return maybe_change_value
               (node,
                caml_call15
                 (f$14,
                  caml_call1(Incremental_Node[21], n1$13),
                  _e3_,
                  _e2_,
                  _e1_,
                  _e0_,
                  _eZ_,
                  _eY_,
                  _eX_,
                  _eW_,
                  _eV_,
                  _eU_,
                  _eT_,
                  _eS_,
                  _eR_,
                  _eQ_));
    }
   }
   function copy_child(parent, child){
    return caml_call1(Incremental_Node[16], child)
            ? maybe_change_value
              (parent, caml_call1(Incremental_Node[21], child))
            : (invalidate_node(parent), propagate_invalidity$1(parent[2]));
   }
   function maybe_change_value(node, new_value){
    var
     t = node[2],
     old_value_opt = node[4],
     _c5_ = caml_call1(Incremental_Import[16][5], old_value_opt);
    if(_c5_)
     var _c6_ = _c5_;
    else
     var
      _dj_ = caml_call1(Incremental_Import[16][11], old_value_opt),
      _c6_ = 1 - caml_call3(Incremental_Cutoff[11], node[6], _dj_, new_value);
    if(_c6_){
     node[4] = caml_call1(Incremental_Import[16][4], new_value);
     node[7] = t[3];
     t[21] = t[21] + 1 | 0;
     if(caml_call2(Incremental_Import[4], node[8], 0)){
      node[20] = old_value_opt;
      handle_after_stabilization$1(node);
     }
     if(caml_call2(Incremental_Import[1], node[9], 1)){
      var _c8_ = node[9] - 1 | 0, _c7_ = 1;
      if(_c8_ >= 1){
       var parent_index = _c7_;
       for(;;){
        var
         _dg_ =
           caml_call2
            (Incremental_Import[17][19], node[10], parent_index - 1 | 0),
         parent$0 = caml_call1(Incremental_Import[16][7], _dg_),
         match$1 = parent$0[5];
        a:
        if(typeof match$1 !== "number")
         switch(match$1[0]){
           case 6:
            var
             expert = match$1[1],
             child_index$0 =
               caml_check_bound(node[25], parent_index)[1 + parent_index];
            caml_call2(Incremental_Expert[15], expert, child_index$0);
            break a;
           case 15:
            var
             u$0 = match$1[1],
             _di_ = caml_check_bound(node[25], parent_index)[1 + parent_index];
            caml_call5
             (Incremental_Unordered_array_fo[6],
              u$0,
              node,
              _di_,
              old_value_opt,
              new_value);
            break a;
         }
        if
         (Incremental_Import[11]
          && ! caml_call1(Incremental_Node[20], parent$0))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aV_], 1);
        if(1 - caml_call1(Incremental_Node[14], parent$0))
         caml_call2(Incremental_Recompute_heap[8], t[5], parent$0);
        var _dh_ = parent_index + 1 | 0;
        if(_c8_ === parent_index) break;
        parent_index = _dh_;
       }
      }
      var
       parent = caml_call1(Incremental_Import[16][7], node[11]),
       match = parent[5];
      a:
      if(typeof match !== "number")
       switch(match[0]){
         case 6:
          var p = match[1], child_index = caml_check_bound(node[25], 0)[1];
          caml_call2(Incremental_Expert[15], p, child_index);
          break a;
         case 15:
          var u = match[1], _df_ = caml_check_bound(node[25], 0)[1];
          caml_call5
           (Incremental_Unordered_array_fo[6],
            u,
            node,
            _df_,
            old_value_opt,
            new_value);
          break a;
       }
      if(Incremental_Import[11] && ! caml_call1(Incremental_Node[20], parent))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aU_], 1);
      a:
      if(1 - caml_call1(Incremental_Node[14], parent)){
       var match$0 = parent[5];
       b:
       {
        if(typeof match$0 !== "number"){
         switch(match$0[0]){
           case 1:
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aS_], 1);
           case 2:
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aT_], 1);
           case 3:
            var
             _c$_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], _c$_);
            break;
           case 4:
            var
             b = match$0[1],
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], b[4][14]);
            break;
           case 7:
            var
             _da_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], _da_);
            break;
           case 8:
            var
             _db_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], _db_);
            break;
           case 9:
            var
             i = match$0[1],
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], i[3][14]);
            break;
           case 10:
            var
             _dc_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], _dc_);
            break;
           case 11:
            var
             j = match$0[1],
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], j[3][14]);
            break;
           case 12:
            var
             _dd_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], _dd_);
            break;
           case 14:
            var
             _de_ = caml_call1(Incremental_Scope[5], parent[12]),
             can_recompute_now =
               caml_call2(Incremental_Import[4], node[14], _de_);
            break;
           case 5:
           case 13:
           case 16:
            break b;
           default: var can_recompute_now = 0;
         }
         if(can_recompute_now){
          t[25] = t[25] + 1 | 0;
          recompute(parent);
         }
         else{
          var _c__ = caml_call1(Incremental_Recompute_heap[7], t[5]);
          if(caml_call2(Incremental_Import[2], parent[14], _c__)){t[26] = t[26] + 1 | 0; recompute(parent);}
          else{
           if
            (Incremental_Import[11]
             && ! caml_call1(Incremental_Node[20], parent))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aR_], 1);
           if
            (Incremental_Import[11]
             && caml_call1(Incremental_Node[14], parent))
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aQ_], 1);
           caml_call2(Incremental_Recompute_heap[8], t[5], parent);
          }
         }
         break a;
        }
        if(1 === match$0)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aP_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aO_], 1);
      }
     }
    }
    var _c9_ = Incremental_Import[11];
    return _c9_ ? invariant$2(t) : _c9_;
   }
   function recompute_first_node_that_is_n(r){
    var
     node = caml_call1(Incremental_Recompute_heap[10], r),
     _c3_ = Incremental_Import[11],
     _c4_ = _c3_ ? 1 - caml_call1(Incremental_Node[20], node) : _c3_;
    if(_c4_)
     caml_call5
      (Core[236],
       0,
       _aX_,
       cst_node_unexpectedly_does_not,
       node,
       function(x_116){
        return caml_call2
                (Incremental_Node[2], function(param){return _aW_;}, x_116);
       });
    return recompute(node);
   }
   function unlink_disallowed_observers(t){
    for(;;){
     var _c1_ = caml_call1(Core_Stack[6], t[12]);
     if(! caml_call2(Incremental_Import[4], _c1_, 0)) return 0;
     var internal_observer = caml_call1(Core_Stack[27], t[12]);
     if(Incremental_Import[11]){
      var _c2_ = 2 === internal_observer[1] ? 1 : 0;
      if(! _c2_)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aY_], 1);
     }
     internal_observer[1] = 3;
     var all_observers = caml_call1(Incremental_Import[16][7], t[9]);
     if
      (caml_call2
        (Incremental_Internal_observer[3], internal_observer, all_observers))
      t[9] = internal_observer[5];
     caml_call1(Incremental_Internal_observer[8], internal_observer);
     check_if_unnecessary(internal_observer[2]);
    }
   }
   function disallow_future_use(internal_observer){
    var
     t = caml_call1(Incremental_Internal_observer[9], internal_observer),
     _c0_ = internal_observer[1];
    return 1 === _c0_
            ? (t
               [8]
              = t[8] - 1 | 0,
              internal_observer[1] = 2,
              caml_call2(Core_Stack[25], t[12], internal_observer))
            : _c0_
              ? 0
              : (t
                 [8]
                = t[8] - 1 | 0,
                internal_observer[1] = 3,
                internal_observer[3] = 0,
                0);
   }
   function disallow_finalized_observers(t){
    for(;;){
     var _cZ_ = caml_call1(Thread_safe_queue[4], t[10]);
     if(! caml_call2(Incremental_Import[4], _cZ_, 0)) return 0;
     var internal_observer = caml_call1(Thread_safe_queue[6], t[10]);
     if(caml_call1(Core_List[8], internal_observer[3]))
      disallow_future_use(internal_observer);
    }
   }
   function observer_finalizer(t){
    return caml_call1
            (Core[258],
             function(observer){
              var internal_observer = observer[1];
              return caml_call2
                      (Thread_safe_queue[5], t[10], internal_observer);
             });
   }
   function create_observer(opt, observing){
    if(opt)
     var sth = opt[1], should_finalize = sth;
    else
     var should_finalize = 1;
    var
     t = observing[2],
     internal_observer =
       [0,
        0,
        observing,
        0,
        Incremental_Import[16][3],
        Incremental_Import[16][3],
        Incremental_Import[16][3],
        Incremental_Import[16][3]];
    caml_call2(Core_Stack[25], t[11], internal_observer);
    var observer = [0, internal_observer];
    if(should_finalize){
     var _cX_ = observer_finalizer(t), _cY_ = caml_call1(Core[259], _cX_);
     caml_call2(Core_Gc[10][2], observer, _cY_);
    }
    t[8] = t[8] + 1 | 0;
    return observer;
   }
   function add_new_observers(t){
    for(;;){
     var _cR_ = caml_call1(Core_Stack[6], t[11]);
     if(! caml_call2(Incremental_Import[4], _cR_, 0)) return 0;
     var
      internal_observer = caml_call1(Core_Stack[27], t[11]),
      _cS_ = internal_observer[1];
     if(_cS_){
      if(3 > _cS_)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aZ_], 1);
     }
     else{
      internal_observer[1] = 1;
      var old_all_observers = t[9];
      if(caml_call1(Incremental_Import[16][6], old_all_observers)){
       internal_observer[5] = old_all_observers;
       var
        _cT_ = caml_call1(Incremental_Import[16][4], internal_observer),
        _cU_ = caml_call1(Incremental_Import[16][11], old_all_observers);
       caml_call2(Incremental_Internal_observer[10][4], _cU_, _cT_);
      }
      t[9] = caml_call1(Incremental_Import[16][4], internal_observer);
      var
       observing = internal_observer[2],
       was_necessary = caml_call1(Incremental_Node[15], observing),
       _cV_ = caml_call1(Core_List[7], internal_observer[3]);
      observing[8] = observing[8] + _cV_ | 0;
      var old_observers = observing[21];
      if(caml_call1(Incremental_Import[16][6], old_observers)){
       internal_observer[7] = old_observers;
       var _cW_ = caml_call1(Incremental_Import[16][4], internal_observer);
       caml_call1(Incremental_Import[16][11], old_observers)[6] = _cW_;
      }
      observing[21] = caml_call1(Incremental_Import[16][4], internal_observer);
      handle_after_stabilization$1(observing);
      if
       (Incremental_Import[11]
        && ! caml_call1(Incremental_Node[15], observing))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _a0_], 1);
      if(1 - was_necessary) became_necessary(observing);
     }
    }
   }
   function observer_value_exn(observer){
    var t = caml_call1(Incremental_Observer[7], observer), match = t[1];
    if(typeof match === "number")
     return match
             ? caml_call1(Incremental_Observer[5], observer)
             : caml_call5
               (Core[236],
                0,
                _a2_,
                cst_Observer_value_exn_called_,
                observer,
                function(x_117){
                 return caml_call2
                         (Incremental_Observer[2],
                          function(param){return _a1_;},
                          x_117);
                });
    var raised_exn = match[1];
    return caml_call5
            (Core[236],
             0,
             _a3_,
             cst_Observer_value_exn_called_$0,
             raised_exn,
             Incremental_Raised_exn[1]);
   }
   function observer_value(observer){
    try{var _cQ_ = [0, observer_value_exn(observer)]; return _cQ_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return [1, caml_call2(Core_Error[25], 0, exn)];
    }
   }
   function node_on_update(node, f){
    var
     t = node[2],
     _cP_ = caml_call2(Incremental_On_update_handler[3], f, t[3]);
    caml_call2(Incremental_Node[25], node, _cP_);
    return handle_after_stabilization$1(node);
   }
   function observer_on_update_exn(observer, f){
    var
     t = caml_call1(Incremental_Observer[7], observer),
     _cO_ = caml_call2(Incremental_On_update_handler[3], f, t[3]);
    caml_call2(Incremental_Observer[6], observer, _cO_);
    return handle_after_stabilization$1
            (caml_call1(Incremental_Observer[3], observer));
   }
   function set_var_while_not_stabilizing(var$0, value){
    var t = caml_call1(Incremental_Var[5], var$0);
    t[27] = t[27] + 1 | 0;
    var$0[1] = value;
    var
     _cJ_ = caml_call2(Incremental_Stabilization_num[1], var$0[3], t[3]),
     _cK_ = caml_call2(Incremental_Import[5], _cJ_, 0);
    if(_cK_){
     var$0[3] = t[3];
     var watch = var$0[4];
     if(Incremental_Import[11] && ! caml_call1(Incremental_Node[19], watch))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a4_], 1);
     var
      _cL_ = caml_call1(Incremental_Node[15], watch),
      _cM_ = _cL_ ? 1 - caml_call1(Incremental_Node[14], watch) : _cL_;
     if(_cM_) return caml_call2(Incremental_Recompute_heap[8], t[5], watch);
     var _cN_ = _cM_;
    }
    else
     var _cN_ = _cK_;
    return _cN_;
   }
   function set_var(var$0, value){
    var t = caml_call1(Incremental_Var[5], var$0), match = t[1];
    if(typeof match !== "number"){
     var raised_exn = match[1];
     return caml_call5
             (Core[236],
              0,
              _a5_,
              cst_cannot_set_var_stabilizati,
              raised_exn,
              Incremental_Raised_exn[1]);
    }
    if(match) return set_var_while_not_stabilizing(var$0, value);
    if(caml_call1(Incremental_Import[16][5], var$0[2]))
     caml_call2(Core_Stack[25], t[13], var$0);
    var$0[2] = caml_call1(Incremental_Import[16][4], value);
    return 0;
   }
   function reclaim_space_in_weak_hashtbls(t){
    for(;;){
     var _cI_ = caml_call1(Thread_safe_queue[4], t[17]);
     if(! caml_call2(Incremental_Import[4], _cI_, 0)) return 0;
     var weak_hashtbl = caml_call1(Thread_safe_queue[6], t[17])[1];
     caml_call1(Weak_hashtbl[11], weak_hashtbl);
    }
   }
   function stabilize_start(t){
    t[1] = 0;
    disallow_finalized_observers(t);
    add_new_observers(t);
    unlink_disallowed_observers(t);
    var _cH_ = Incremental_Import[11];
    return _cH_ ? invariant$2(t) : _cH_;
   }
   function stabilize_end(t){
    if(Incremental_Import[11]){t[16][1] = 0; t[16][2] = 0;}
    t[3] = caml_call1(Incremental_Stabilization_num[9], t[3]);
    for(;;){
     if(caml_call1(Core_Stack[7], t[13])) break;
     var
      match$0 = caml_call1(Core_Stack[27], t[13]),
      value = caml_call1(Incremental_Import[16][7], match$0[2]);
     match$0[2] = Incremental_Import[16][3];
     set_var_while_not_stabilizing(match$0, value);
    }
    for(;;){
     if(caml_call1(Core_Stack[7], t[14])) break;
     var node$0 = caml_call1(Core_Stack[27], t[14]);
     node$0[22] = 0;
     var old_value = node$0[20];
     node$0[20] = Incremental_Import[16][3];
     if(caml_call1(Incremental_Node[16], node$0))
      if(caml_call1(Incremental_Node[15], node$0))
       var
        new_value = caml_call1(Incremental_Import[16][7], node$0[4]),
        _cG_ =
          caml_call1(Incremental_Import[16][5], old_value)
           ? [0, new_value]
           : [1, caml_call1(Incremental_Import[16][11], old_value), new_value],
        node_update$0 = _cG_;
      else
       var node_update$0 = 1;
     else
      var node_update$0 = 0;
     caml_call2(Core_Stack[25], t[15], [0, node$0, node_update$0]);
    }
    t[1] = 1;
    var now = t[3];
    for(;;){
     if(caml_call1(Core_Stack[7], t[15])){
      t[1] = 2;
      return reclaim_space_in_weak_hashtbls(t);
     }
     var
      match = caml_call1(Core_Stack[27], t[15]),
      node_update = match[2],
      node = match[1];
     caml_call3(Incremental_Node[26], node, node_update, now);
    }
   }
   function raise_during_stabilization(t, exn){
    t[1] = [0, caml_call1(Incremental_Raised_exn[2], exn)];
    throw caml_maybe_attach_backtrace(exn, 0);
   }
   function stabilize(t){
    ensure_not_stabilizing(t, cst_stabilize, 0);
    try{
     stabilize_start(t);
     var r = t[5];
     for(;;){
      var _cE_ = caml_call1(Incremental_Recompute_heap[4], r);
      if(! caml_call2(Incremental_Import[4], _cE_, 0)){var _cF_ = stabilize_end(t); return _cF_;}
      recompute_first_node_that_is_n(r);
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     return raise_during_stabilization(t, exn);
    }
   }
   function sexp_of_t$5(param){return param ? _a6_ : _a7_;}
   var
    Step_result = [0, sexp_of_t$5],
    cst_step = "step",
    _a8_ = [0, cst_src_state_ml, 1417, 6];
   function do_one_step_of_stabilize(t){
    try{
     var _cA_ = t[1];
     a:
     if(typeof _cA_ === "number"){
      switch(_cA_){
        case 0:
         var
          r = t[5],
          _cB_ = caml_call1(Incremental_Recompute_heap[4], r),
          _cC_ =
            caml_call2(Incremental_Import[4], _cB_, 0)
             ? (recompute_first_node_that_is_n(r), 0)
             : (stabilize_end(t), 1),
          _cD_ = _cC_;
         break;
        case 2:
         stabilize_start(t); var _cD_ = 0; break;
        default: break a;
      }
      return _cD_;
     }
     ensure_not_stabilizing(t, cst_step, 0);
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a8_], 1);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(typeof t[1] === "number") return raise_during_stabilization(t, exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function create_node_in(t, created_in, kind){
    t[22] = t[22] + 1 | 0;
    return caml_call3(Incremental_Node[5], t, created_in, kind);
   }
   function create_node(t, kind){return create_node_in(t, t[4], kind);}
   function create_node_top(t, kind){
    return create_node_in(t, Incremental_Scope[3], kind);
   }
   function create_var(t, opt, value){
    if(opt)
     var sth = opt[1], use_current_scope = sth;
    else
     var use_current_scope = 0;
    var
     scope = use_current_scope ? t[4] : Incremental_Scope[3],
     watch = create_node_in(t, scope, 1),
     var$0 = [0, value, Incremental_Import[16][3], t[3], watch];
    caml_call2(Incremental_Node[6], watch, [16, var$0]);
    return var$0;
   }
   function const$0(t, a){return create_node(t, [5, a]);}
   function map$5(n, f){return create_node(n[2], [12, f, n]);}
   function map2(n1, n2, f){return create_node(n1[2], [17, f, n1, n2]);}
   function both(n1, n2){
    var _cz_ = n1[5];
    a:
    if(typeof _cz_ !== "number" && 5 === _cz_[0]){
     var a = _cz_[1], match = n2[5];
     if(typeof match !== "number" && 5 === match[0]){
      var b = match[1];
      return const$0(n1[2], [0, a, b]);
     }
     break a;
    }
    return map2(n1, n2, Core_Tuple[1][6]);
   }
   function map3(n1, n2, n3, f){
    return create_node(n1[2], [18, f, n1, n2, n3]);
   }
   function map4(n1, n2, n3, n4, f){
    return create_node(n1[2], [19, f, n1, n2, n3, n4]);
   }
   function map5(n1, n2, n3, n4, n5, f){
    return create_node(n1[2], [20, f, n1, n2, n3, n4, n5]);
   }
   function map6(n1, n2, n3, n4, n5, n6, f){
    return create_node(n1[2], [21, f, n1, n2, n3, n4, n5, n6]);
   }
   function map7(n1, n2, n3, n4, n5, n6, n7, f){
    return create_node(n1[2], [22, f, n1, n2, n3, n4, n5, n6, n7]);
   }
   function map8(n1, n2, n3, n4, n5, n6, n7, n8, f){
    return create_node(n1[2], [23, f, n1, n2, n3, n4, n5, n6, n7, n8]);
   }
   function map9(n1, n2, n3, n4, n5, n6, n7, n8, n9, f){
    return create_node(n1[2], [24, f, n1, n2, n3, n4, n5, n6, n7, n8, n9]);
   }
   function map10(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, f){
    return create_node
            (n1[2], [25, f, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10]);
   }
   function map11(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, f){
    return create_node
            (n1[2], [26, f, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11]);
   }
   function map12(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, f){
    return create_node
            (n1[2],
             [27, f, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12]);
   }
   function map13(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, f){
    return create_node
            (n1[2],
             [28, f, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13]);
   }
   function map14
   (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, f){
    return create_node
            (n1[2],
             [29,
              f,
              n1,
              n2,
              n3,
              n4,
              n5,
              n6,
              n7,
              n8,
              n9,
              n10,
              n11,
              n12,
              n13,
              n14]);
   }
   function map15
   (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, f){
    return create_node
            (n1[2],
             [30,
              f,
              n1,
              n2,
              n3,
              n4,
              n5,
              n6,
              n7,
              n8,
              n9,
              n10,
              n11,
              n12,
              n13,
              n14,
              n15]);
   }
   function preserve_cutoff(input, output){
    var
     _cx_ =
       caml_call1
        (Incremental_Cutoff[3],
         function(param, _cy_){
          return caml_call2
                  (Incremental_Stabilization_num[3], input[7], output[7]);
         });
    return caml_call2(Incremental_Node[24], output, _cx_);
   }
   function depend_on(input, depend_on){
    var output = map2(input, depend_on, function(a, param){return a;});
    preserve_cutoff(input, output);
    return output;
   }
   function necessary_if_alive(input){
    var
     observer = create_observer(0, input),
     output =
       map$5(input, function(a){caml_call1(Core_Gc[5], observer); return a;});
    preserve_cutoff(input, output);
    return output;
   }
   function bind(lhs, f){
    var
     t = lhs[2],
     lhs_change = create_node(t, 1),
     main = create_node(t, 1),
     bind =
       [0,
        main,
        f,
        lhs,
        lhs_change,
        Incremental_Import[16][3],
        Incremental_Scope[3],
        Incremental_Import[16][3]];
    caml_call2(Incremental_Node[24], lhs_change, Incremental_Cutoff[7]);
    bind[6] = [0, bind];
    caml_call2(Incremental_Node[6], lhs_change, [3, bind]);
    caml_call2(Incremental_Node[6], main, [4, bind]);
    return main;
   }
   function bind2(n1, n2, f){
    return bind
            (map2(n1, n2, function(v1, v2){return [0, v1, v2];}),
             function(param){
              var v2 = param[2], v1 = param[1];
              return caml_call2(f, v1, v2);
             });
   }
   function bind3(n1, n2, n3, f){
    return bind
            (map3(n1, n2, n3, function(v1, v2, v3){return [0, v1, v2, v3];}),
             function(param){
              var v3 = param[3], v2 = param[2], v1 = param[1];
              return caml_call3(f, v1, v2, v3);
             });
   }
   function bind4(n1, n2, n3, n4, f){
    return bind
            (map4
              (n1,
               n2,
               n3,
               n4,
               function(v1, v2, v3, v4){return [0, v1, v2, v3, v4];}),
             function(param){
              var v4 = param[4], v3 = param[3], v2 = param[2], v1 = param[1];
              return caml_call4(f, v1, v2, v3, v4);
             });
   }
   function join(lhs){
    var
     t = lhs[2],
     lhs_change = create_node(t, 1),
     main = create_node(t, 1),
     join = [0, main, lhs, lhs_change, Incremental_Import[16][3]];
    caml_call2(Incremental_Node[24], lhs_change, Incremental_Cutoff[7]);
    caml_call2(Incremental_Node[6], lhs_change, [10, join]);
    caml_call2(Incremental_Node[6], main, [11, join]);
    return main;
   }
   function if$0(test, then, else$0){
    var
     t = test[2],
     test_change = create_node(t, 1),
     main = create_node(t, 1),
     if_then_else =
       [0, main, test, test_change, Incremental_Import[16][3], then, else$0];
    caml_call2(Incremental_Node[24], test_change, Incremental_Cutoff[7]);
    caml_call2(Incremental_Node[6], test_change, [8, if_then_else]);
    caml_call2(Incremental_Node[6], main, [9, if_then_else]);
    return main;
   }
   function lazy_from_fun(t, f){
    var scope = t[4];
    return caml_call1
            (Core_Lazy[33],
             function(param){return within_scope(t, scope, f);});
   }
   var
    default_hash_table_initial_siz = 4,
    cst_unordered_array_fold_got_n =
      "unordered_array_fold got non-positive full_compute_every_n_changes",
    _a9_ = [0, cst_src_state_ml, 1675, 65886, 65898],
    _a__ = [0, cst_src_state_ml, 1764, 16],
    _a$_ = [0, 0],
    _ba_ = [0, cst_src_state_ml, 1797, 16],
    cst_at_intervals_got_too_small = "at_intervals got too small interval",
    _bb_ = [0, cst_src_state_ml, 1806, 69449, 69461],
    cst_cannot_take_snapshot_in_th = "cannot take snapshot in the past",
    cst_advance_clock = "advance_clock",
    _bc_ = [5, 1],
    _bd_ = [0, cst_src_state_ml, 1899, 22],
    _be_ = [0, cst$0],
    cst_unexpected_kind_for_expert = "unexpected kind for expert node",
    cst_during_stabilization = cst_during_stabilization$0,
    cst_can_only_call = cst_can_only_call$2,
    _bf_ = [0, cst$0],
    _bg_ = [0, cst_current_kind],
    _bh_ = [0, cst$0],
    _bi_ = [0, cst_node_kind],
    cst_on_parent_nodes = " on parent nodes",
    cst_can_only_call$0 = cst_can_only_call$2,
    _bj_ = [0, cst$0],
    _bk_ = [0, cst_current_kind],
    _bl_ = [0, cst$0],
    _bm_ = [0, cst_node_kind],
    cst_on_children_nodes = " on children nodes",
    cst_can_only_call$1 = cst_can_only_call$2,
    cst_make_stale = "make_stale",
    cst_invalidate = "invalidate",
    cst_add_dependency = "add_dependency",
    _bn_ = [0, cst_src_state_ml, 2078, 22],
    cst_remove_dependency = "remove_dependency",
    _bo_ = [0, cst_src_state_ml, 2108, 20];
   function memoize_fun_by_key(opt, t, hashable, project_key, f){
    if(opt)
     var sth = opt[1], initial_size = sth;
    else
     var initial_size = default_hash_table_initial_siz;
    var
     scope = t[4],
     table = caml_call3(Core_Hashtbl[4], 0, [0, initial_size], hashable);
    return caml_call1
            (Core[258],
             function(a){
              var
               key = caml_call1(project_key, a),
               match = caml_call2(Core_Hashtbl[53], table, key);
              if(match){var b = match[1]; return b;}
              var
               b$0 =
                 within_scope
                  (t, scope, function(param){return caml_call1(f, a);});
              caml_call3(Core_Hashtbl[36], table, key, b$0);
              return b$0;
             });
   }
   function array_fold(t, children, init, f){
    return caml_call2(Incremental_Import[3], children.length - 1, 0)
            ? const$0(t, init)
            : create_node(t, [0, [0, init, f, children]]);
   }
   function all(t, ts){
    return array_fold
            (t,
             caml_call1(Incremental_Import[15][90], ts),
             0,
             function(ac, a){return [0, a, ac];});
   }
   function unordered_array_fold(t, opt, children, init, f, update){
    if(opt)
     var sth = opt[1], full_compute_every_n_changes = sth;
    else
     var full_compute_every_n_changes = Core_Int[41];
    if(caml_call2(Incremental_Import[3], children.length - 1, 0))
     return const$0(t, init);
    if(caml_call2(Incremental_Import[2], full_compute_every_n_changes, 0))
     return caml_call5
             (Core[236],
              0,
              _a9_,
              cst_unordered_array_fold_got_n,
              full_compute_every_n_changes,
              Core[356]);
    var
     main = create_node(t, 1),
     _cw_ =
       [15,
        caml_call6
         (Incremental_Unordered_array_fo[4],
          init,
          f,
          update,
          full_compute_every_n_changes,
          children,
          main)];
    caml_call2(Incremental_Node[6], main, _cw_);
    return main;
   }
   function opt_unordered_array_fold
   (t, full_compute_every_n_changes, ts, init, f, f_inverse){
    function f$0(param, x){
     var num_invalid = param[2], accum = param[1];
     if(! x) return [0, accum, num_invalid + 1 | 0];
     var x$0 = x[1];
     return [0, caml_call2(f, accum, x$0), num_invalid];
    }
    function f_inverse$0(param, x){
     var num_invalid = param[2], accum = param[1];
     if(! x) return [0, accum, num_invalid - 1 | 0];
     var x$0 = x[1];
     return [0, caml_call2(f_inverse, accum, x$0), num_invalid];
    }
    return map$5
            (unordered_array_fold
              (t,
               full_compute_every_n_changes,
               ts,
               [0, init, 0],
               f$0,
               [0, f_inverse$0]),
             function(param){
              var num_invalid = param[2], accum = param[1];
              return caml_call2(Incremental_Import[3], num_invalid, 0)
                      ? [0, accum]
                      : 0;
             });
   }
   function at_least_k_of(t, nodes, k){
    function bool_to_int(b){return b ? 1 : 0;}
    return map$5
            (unordered_array_fold
              (t,
               0,
               nodes,
               0,
               function(num_true, b){return num_true + bool_to_int(b) | 0;},
               [0,
                function(num_true, b){return num_true - bool_to_int(b) | 0;}]),
             function(i){return caml_call2(Incremental_Import[1], i, k);});
   }
   function exists$5(t, nodes){return at_least_k_of(t, nodes, 1);}
   function for_all$5(t, nodes){
    return at_least_k_of(t, nodes, nodes.length - 1);
   }
   function sum(t, full_compute_every_n_changes, nodes, zero, add, sub){
    return unordered_array_fold
            (t, full_compute_every_n_changes, nodes, zero, add, [0, sub]);
   }
   function opt_sum(t, full_compute_every_n_changes, nodes, zero, add, sub){
    return opt_unordered_array_fold
            (t, full_compute_every_n_changes, nodes, zero, add, sub);
   }
   function sum_int(t, nodes){
    return sum
            (t,
             0,
             nodes,
             0,
             function(_cv_, _cu_){return _cv_ + _cu_ | 0;},
             function(_ct_, _cs_){return _ct_ - _cs_ | 0;});
   }
   function sum_float(t, nodes){
    return sum
            (t,
             [0, nodes.length - 1],
             nodes,
             0.,
             function(_cr_, _cq_){return _cr_ + _cq_;},
             function(_cp_, _co_){return _cp_ - _co_;});
   }
   function set_freeze(node, child, only_freeze_when){
    if(Incremental_Import[11] && ! caml_call1(Incremental_Scope[4], node[12]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a__], 1);
    var was_necessary = caml_call1(Incremental_Node[15], node);
    caml_call2
     (Incremental_Node[6], node, [7, [0, node, child, only_freeze_when]]);
    return was_necessary
            ? add_parent(child, node, Incremental_Kind[7])
            : became_necessary(node);
   }
   function freeze(child, only_freeze_when){
    var t = child[2], node = create_node_top(t, 1);
    set_freeze(node, child, only_freeze_when);
    return node;
   }
   function at(clock, time){
    var t = caml_call1(Clock[9], clock), _cn_ = now$1(clock);
    if(caml_call2(Incremental_Import[14][16], time, _cn_))
     return const$0(t, 1);
    var
     main = create_node(t, 1),
     at = [0, main, time, Incremental_Alarm[3], clock];
    caml_call2(Incremental_Node[6], main, [1, at]);
    at[3] =
     add_alarm(clock, time, caml_call1(Incremental_Alarm_value[4], [0, at]));
    return main;
   }
   function after(clock, span){
    var _cm_ = now$1(clock);
    return at(clock, caml_call2(Incremental_Import[14][66], _cm_, span));
   }
   function next_interval_alarm_strict(clock, base, interval){
    var
     after = now$1(clock),
     at =
       caml_call5(Incremental_Import[14][80], _a$_, base, after, interval, 0);
    if
     (Incremental_Import[11]
      && ! caml_call2(Incremental_Import[14][18], at, after))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ba_], 1);
    return at;
   }
   function at_intervals(clock, interval){
    var
     t = caml_call1(Clock[9], clock),
     _ck_ = caml_call1(Timing_wheel[10], clock[1]);
    if(caml_call2(Incremental_Import[14][1][19], interval, _ck_))
     caml_call5
      (Core[236],
       0,
       _bb_,
       cst_at_intervals_got_too_small,
       interval,
       Incremental_Import[14][1][10]);
    var
     main = create_node(t, 1),
     base = now$1(clock),
     at_intervals = [0, main, base, interval, Incremental_Alarm[3], clock];
    caml_call2(Incremental_Node[6], main, [2, at_intervals]);
    caml_call2(Incremental_Node[24], main, Incremental_Cutoff[7]);
    var _cl_ = caml_call1(Incremental_Alarm_value[4], [1, at_intervals]);
    at_intervals[4] =
     add_alarm(clock, next_interval_alarm_strict(clock, base, interval), _cl_);
    return main;
   }
   function snapshot(clock, value_at, at, before){
    var t = caml_call1(Clock[9], clock), _ci_ = now$1(clock);
    if(caml_call2(Incremental_Import[14][16], at, _ci_)){
     var _cj_ = now$1(clock);
     return caml_call2(Incremental_Import[14][19], at, _cj_)
             ? caml_call5
               (Core_Or_error[39],
                0,
                0,
                cst_cannot_take_snapshot_in_th,
                at,
                Incremental_Import[14][119])
             : [0, freeze(value_at, caml_call1(Core_Fn[1], 1))];
    }
    var
     main = create_node_top(t, 1),
     snapshot = [0, main, at, before, value_at, clock];
    caml_call2(Incremental_Node[6], main, [13, snapshot]);
    add_alarm
     (clock, at, caml_call1(Incremental_Alarm_value[4], [2, snapshot]));
    return [0, main];
   }
   function incremental_step_function(clock, child){
    var
     t = caml_call1(Clock[9], clock),
     main = create_node(t, 1),
     _ce_ = Incremental_Alarm[3],
     _cf_ = Core_Sequence[46],
     _cg_ = Incremental_Import[16][3],
     _ch_ = Incremental_Stabilization_num[5],
     step_function_node =
       [0,
        main,
        caml_call1(Incremental_Import[16][4], child),
        _ch_,
        _cg_,
        _cf_,
        _ce_,
        0,
        clock];
    step_function_node[7] =
     caml_call1(Incremental_Alarm_value[4], [3, step_function_node]);
    caml_call2(Incremental_Node[6], main, [14, step_function_node]);
    return main;
   }
   function make_stale(node){
    var t = node[2];
    node[3] = Incremental_Stabilization_num[5];
    var
     _cc_ = caml_call1(Incremental_Node[20], node),
     _cd_ = _cc_ ? 1 - caml_call1(Incremental_Node[14], node) : _cc_;
    return _cd_ ? caml_call2(Incremental_Recompute_heap[8], t[5], node) : _cd_;
   }
   function advance_clock(clock, to){
    var t = caml_call1(Clock[9], clock);
    ensure_not_stabilizing(t, cst_advance_clock, 1);
    if(Incremental_Import[11]) invariant$2(t);
    var
     _b__ = now$1(clock),
     _b$_ = caml_call2(Incremental_Import[14][18], to, _b__);
    if(_b$_){
     set_var_while_not_stabilizing(clock[2], to);
     caml_call3(Timing_wheel[20], clock[1], to, clock[3]);
     caml_call2(Timing_wheel[21], clock[1], clock[3]);
     for(;;){
      if(! caml_call1(Incremental_Import[16][6], clock[4])){
       var _ca_ = Incremental_Import[11];
       if(_ca_) return invariant$2(t);
       var _cb_ = _ca_;
       break;
      }
      var alarm_value = caml_call1(Incremental_Import[16][11], clock[4]);
      clock[4] = alarm_value[2];
      alarm_value[2] = Incremental_Import[16][3];
      var match = alarm_value[1];
      switch(match[0]){
        case 0:
         var main = match[1][1];
         if(caml_call1(Incremental_Node[16], main)){
          caml_call2(Incremental_Node[6], main, _bc_);
          make_stale(main);
         }
         break;
        case 1:
         var
          at_intervals = match[1],
          interval = at_intervals[3],
          base = at_intervals[2],
          main$0 = at_intervals[1];
         if(caml_call1(Incremental_Node[16], main$0)){
          at_intervals[4] =
           add_alarm
            (clock,
             next_interval_alarm_strict(clock, base, interval),
             alarm_value);
          make_stale(main$0);
         }
         break;
        case 2:
         var match$0 = match[1], value_at = match$0[4], main$1 = match$0[1];
         if
          (Incremental_Import[11]
           && ! caml_call1(Incremental_Node[16], main$1))
          throw caml_maybe_attach_backtrace([0, Assert_failure, _bd_], 1);
         set_freeze(main$1, value_at, function(param){return 1;});
         make_stale(main$1);
         break;
        default:
         var main$2 = match[1][1];
         if(caml_call1(Incremental_Node[16], main$2)) make_stale(main$2);
      }
     }
    }
    else
     var _cb_ = _b$_;
    return _cb_;
   }
   function create_clock(t, timing_wheel_config, start){
    var
     timing_wheel = caml_call2(Timing_wheel[9], timing_wheel_config, start),
     clock = [],
     handle_fired = function _b9_(_b8_){return _b9_.fun(_b8_);},
     _b7_ = Incremental_Import[16][3];
    caml_update_dummy
     (clock, [0, timing_wheel, create_var(t, 0, start), handle_fired, _b7_]);
    caml_update_dummy
     (handle_fired,
      function(alarm){
       var alarm_value = caml_call2(Timing_wheel[5][5], clock[1], alarm);
       alarm_value[2] = clock[4];
       clock[4] = caml_call1(Incremental_Import[16][4], alarm_value);
       return 0;
      });
    return clock;
   }
   function create$3(Config){
    return function(max_height_allowed){
     var
      adjust_heights_heap =
        caml_call1(Incremental_Adjust_heights_hea[3], max_height_allowed),
      recompute_heap =
        caml_call1(Incremental_Recompute_heap[3], max_height_allowed),
      _bX_ = caml_call1(Thread_safe_queue[3], 0),
      _bY_ = caml_call1(Only_in_debug[8], 0),
      _bZ_ = caml_call1(Core_Stack[23], 0),
      _b0_ = caml_call1(Core_Stack[23], 0),
      _b1_ = caml_call1(Core_Stack[23], 0),
      _b2_ = caml_call1(Core_Stack[23], 0),
      _b3_ = caml_call1(Core_Stack[23], 0),
      _b4_ = caml_call1(Thread_safe_queue[3], 0),
      _b5_ = Incremental_Import[16][3],
      _b6_ = caml_call1(Core_Stack[23], 0),
      t =
        [0,
         2,
         Config[1],
         Incremental_Stabilization_num[6],
         Incremental_Scope[3],
         recompute_heap,
         adjust_heights_heap,
         _b6_,
         0,
         _b5_,
         _b4_,
         _b3_,
         _b2_,
         _b1_,
         _b0_,
         _bZ_,
         _bY_,
         _bX_,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0];
     return t;};
   }
   function weak_memoize_fun_by_key(opt, t, hashable, project_key, f){
    if(opt)
     var sth = opt[1], initial_size = sth;
    else
     var initial_size = default_hash_table_initial_siz;
    var
     scope = t[4],
     table = caml_call3(Weak_hashtbl[2], 0, [0, initial_size], hashable),
     packed = [0, table];
    caml_call2
     (Weak_hashtbl[12],
      table,
      function(param){return caml_call2(Thread_safe_queue[5], t[17], packed);});
    return caml_call1
            (Core[258],
             function(a){
              var
               key = caml_call1(project_key, a),
               match = caml_call2(Weak_hashtbl[5], table, key);
              if(match){var b = match[1]; return b;}
              var
               b$0 =
                 within_scope
                  (t, scope, function(param){return caml_call1(f, a);});
              caml_call3(Weak_hashtbl[8], table, key, b$0);
              return b$0;
             });
   }
   function expert_kind_of_node(node){
    var x_118 = node[5];
    if(typeof x_118 === "number"){
     if(0 === x_118) return Incremental_Import[16][3];
    }
    else if(6 === x_118[0]){
     var e = x_118[1];
     return caml_call1(Incremental_Import[16][4], e);
    }
    var
     _bV_ =
       [0,
        caml_call2(Incremental_Kind[2], function(param){return _be_;}, x_118),
        0],
     _bW_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_unexpected_kind_for_expert),
         _bV_]];
    return caml_call1(Core[253], _bW_);
   }
   function create$4(state, on_observability_change, f){
    var
     e = caml_call2(Incremental_Expert[5], f, on_observability_change),
     node = create_node(state, [6, e]);
    if(Incremental_Import[11] && caml_call1(Core_Option[57], state[16][1]))
     state[16][2] = [0, node, state[16][2]];
    return node;
   }
   function currently_running_node_exn(state, name){
    var match = state[16][1];
    if(match){var current = match[1]; return current;}
    var
     _bS_ = caml_call2(Core[18], name, cst_during_stabilization),
     _bT_ = caml_call2(Core[18], cst_can_only_call, _bS_),
     _bU_ = caml_call1(Core[471], _bT_);
    return caml_call1(Core[253], _bU_);
   }
   function assert_currently_running_node_(state, node, name){
    var
     current = currently_running_node_exn(state, name),
     _bM_ = 1 - caml_call2(Incremental_Node[30], node, current);
    if(! _bM_) return _bM_;
    var
     x_120 = current[5],
     _bN_ =
       [0,
        [1,
         [0,
          _bg_,
          [0,
           caml_call2
            (Incremental_Kind[2], function(param){return _bf_;}, x_120),
           0]]],
        0],
     x_119 = node[5],
     _bO_ =
       [0,
        [1,
         [0,
          _bi_,
          [0,
           caml_call2
            (Incremental_Kind[2], function(param){return _bh_;}, x_119),
           0]]],
        _bN_],
     _bP_ = caml_call2(Core[18], name, cst_on_parent_nodes),
     _bQ_ = caml_call2(Core[18], cst_can_only_call$0, _bP_),
     _bR_ = [1, [0, caml_call1(Core[471], _bQ_), _bO_]];
    return caml_call1(Core[253], _bR_);
   }
   function assert_currently_running_node_$0(state, node, name){
    var
     current = currently_running_node_exn(state, name),
     _bG_ = 1 - caml_call2(Incremental_Node[31], node, current);
    if(! _bG_) return _bG_;
    var
     x_122 = current[5],
     _bH_ =
       [0,
        [1,
         [0,
          _bk_,
          [0,
           caml_call2
            (Incremental_Kind[2], function(param){return _bj_;}, x_122),
           0]]],
        0],
     x_121 = node[5],
     _bI_ =
       [0,
        [1,
         [0,
          _bm_,
          [0,
           caml_call2
            (Incremental_Kind[2], function(param){return _bl_;}, x_121),
           0]]],
        _bH_],
     _bJ_ = caml_call2(Core[18], name, cst_on_children_nodes),
     _bK_ = caml_call2(Core[18], cst_can_only_call$1, _bJ_),
     _bL_ = [1, [0, caml_call1(Core[471], _bK_), _bI_]];
    return caml_call1(Core[253], _bL_);
   }
   function make_stale$0(node){
    var
     state = node[2],
     e_opt = expert_kind_of_node(node),
     _bC_ = caml_call1(Incremental_Import[16][6], e_opt);
    if(_bC_){
     if(Incremental_Import[11])
      assert_currently_running_node_(state, node, cst_make_stale);
     var e = caml_call1(Incremental_Import[16][11], e_opt);
     if(534011858 <= caml_call1(Incremental_Expert[6], e)) return 0;
     var
      _bD_ = caml_call1(Incremental_Node[15], node),
      _bE_ = _bD_ ? 1 - caml_call1(Incremental_Node[14], node) : _bD_;
     if(_bE_)
      return caml_call2(Incremental_Recompute_heap[8], state[5], node);
     var _bF_ = _bE_;
    }
    else
     var _bF_ = _bC_;
    return _bF_;
   }
   function invalidate(node){
    var state = node[2];
    if(Incremental_Import[11])
     assert_currently_running_node_(state, node, cst_invalidate);
    invalidate_node(node);
    return propagate_invalidity$1(state);
   }
   function add_dependency(node, dep){
    var
     state = node[2],
     e_opt = expert_kind_of_node(node),
     _bv_ = caml_call1(Incremental_Import[16][6], e_opt);
    if(_bv_){
     if(Incremental_Import[11]){
      var
       _bw_ = am_stabilizing(state),
       _bx_ =
         _bw_
          ? 1 - caml_call3(Core_List[6], state[16][2], node, Core[246])
          : _bw_;
      if(_bx_)
       assert_currently_running_node_(state, node, cst_add_dependency);
     }
     var
      e = caml_call1(Incremental_Import[16][11], e_opt),
      new_child_index = caml_call2(Incremental_Expert[9], e, dep),
      _by_ = caml_call1(Incremental_Node[15], node);
     if(_by_){
      add_parent(dep[1], node, new_child_index);
      if(Incremental_Import[11] && ! caml_call1(Incremental_Node[20], node))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _bn_], 1);
      var _bz_ = 1 - caml_call1(Incremental_Node[14], node);
      if(_bz_)
       return caml_call2(Incremental_Recompute_heap[8], state[5], node);
      var _bA_ = _bz_;
     }
     else
      var _bA_ = _by_;
     var _bB_ = _bA_;
    }
    else
     var _bB_ = _bv_;
    return _bB_;
   }
   function remove_dependency(node, edge){
    var
     state = node[2],
     e_opt = expert_kind_of_node(node),
     _bp_ = caml_call1(Incremental_Import[16][6], e_opt);
    if(_bp_){
     if(Incremental_Import[11])
      assert_currently_running_node_(state, node, cst_remove_dependency);
     var
      e = caml_call1(Incremental_Import[16][11], e_opt),
      edge_index = caml_call1(Incremental_Import[16][7], edge[3]),
      last_edge = caml_call1(Incremental_Expert[11], e),
      last_edge_index = caml_call1(Incremental_Import[16][7], last_edge[3]);
     if(caml_call2(Incremental_Import[6], edge_index, last_edge_index)){
      if(caml_call1(Incremental_Node[15], node))
       caml_call5
        (Incremental_Node[12],
         node,
         edge[1],
         edge_index,
         last_edge[1],
         last_edge_index);
      caml_call3(Incremental_Expert[10], e, edge_index, last_edge_index);
      if(Incremental_Import[11])
       caml_call2(Incremental_Node[4], function(_bu_){return 0;}, node);
     }
     caml_call1(Incremental_Expert[12], e);
     if(Incremental_Import[11] && ! caml_call1(Incremental_Node[19], node))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _bo_], 1);
     var _bq_ = caml_call1(Incremental_Node[15], node);
     if(_bq_){
      remove_child(edge[1], node, last_edge_index);
      if(1 - caml_call1(Incremental_Node[14], node))
       caml_call2(Incremental_Recompute_heap[8], state[5], node);
      var _br_ = 1 - caml_call1(Incremental_Node[16], edge[1]);
      if(_br_) return caml_call1(Incremental_Expert[8], e);
      var _bs_ = _br_;
     }
     else
      var _bs_ = _bq_;
     var _bt_ = _bs_;
    }
    else
     var _bt_ = _bp_;
    return _bt_;
   }
   var
    Expert =
      [0,
       expert_kind_of_node,
       create$4,
       currently_running_node_exn,
       assert_currently_running_node_,
       assert_currently_running_node_$0,
       make_stale$0,
       invalidate,
       add_dependency,
       remove_dependency];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_State);
   var
    Incremental_State =
      [0,
       sexp_of_status,
       Run_on_update_handlers,
       Only_in_debug,
       Packed_weak_hashtbl,
       num_var_sets,
       set_num_var_sets,
       num_nodes_recomputed_directly_,
       set_num_nodes_recomputed_direc,
       num_nodes_recomputed_directly_$0,
       set_num_nodes_recomputed_direc$0,
       num_nodes_recomputed,
       set_num_nodes_recomputed,
       num_nodes_invalidated,
       set_num_nodes_invalidated,
       num_nodes_created,
       set_num_nodes_created,
       num_nodes_changed,
       set_num_nodes_changed,
       num_nodes_became_unnecessary,
       set_num_nodes_became_unnecessa,
       num_nodes_became_necessary,
       set_num_nodes_became_necessary,
       keep_node_creation_backtrace,
       set_keep_node_creation_backtra,
       weak_hashtbls,
       only_in_debug,
       set_only_in_debug,
       run_on_update_handlers,
       set_during_stabilization,
       disallowed_observers,
       new_observers,
       finalized_observers,
       all_observers,
       set_all_observers,
       num_active_observers,
       set_num_active_observers,
       adjust_heights_heap,
       recompute_heap,
       current_scope,
       set_current_scope,
       stabilization_num,
       set_stabilization_num,
       bind_lhs_change_should_invalid,
       status,
       set_status,
       Fields$0,
       sexp_of_t$2,
       Clock,
       now$1,
       timing_wheel_length,
       num_stabilizes,
       max_height_allowed,
       max_height_seen,
       iter_observers,
       directly_observed,
       save_dot,
       save_dot_to_file,
       iter_observer_descendants,
       Stats,
       stats,
       am_stabilizing,
       invariant$2,
       ensure_not_stabilizing,
       set_height,
       set_max_height_allowed,
       handle_after_stabilization$1,
       remove_children,
       remove_child,
       check_if_unnecessary,
       became_unnecessary,
       remove_alarm,
       invalidate_node,
       invalidate_nodes_created_on_rh,
       rescope_nodes_created_on_rhs,
       propagate_invalidity$1,
       add_parent_without_adjusting_h,
       became_necessary,
       add_parent,
       run_with_scope,
       within_scope,
       change_child,
       add_alarm,
       recompute,
       copy_child,
       maybe_change_value,
       recompute_first_node_that_is_n,
       unlink_disallowed_observers,
       disallow_future_use,
       disallow_finalized_observers,
       observer_finalizer,
       create_observer,
       add_new_observers,
       observer_value_exn,
       observer_value,
       node_on_update,
       observer_on_update_exn,
       set_var_while_not_stabilizing,
       set_var,
       reclaim_space_in_weak_hashtbls,
       stabilize_start,
       stabilize_end,
       raise_during_stabilization,
       stabilize,
       Step_result,
       do_one_step_of_stabilize,
       create_node_in,
       create_node,
       create_node_top,
       create_var,
       const$0,
       map$5,
       map2,
       both,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       preserve_cutoff,
       depend_on,
       necessary_if_alive,
       bind,
       bind2,
       bind3,
       bind4,
       join,
       if$0,
       lazy_from_fun,
       default_hash_table_initial_siz,
       memoize_fun_by_key,
       array_fold,
       all,
       unordered_array_fold,
       opt_unordered_array_fold,
       at_least_k_of,
       exists$5,
       for_all$5,
       sum,
       opt_sum,
       sum_int,
       sum_float,
       set_freeze,
       freeze,
       at,
       after,
       next_interval_alarm_strict,
       at_intervals,
       snapshot,
       incremental_step_function,
       make_stale,
       advance_clock,
       create_clock,
       create$3,
       weak_memoize_fun_by_key,
       Expert];
   runtime.caml_register_global(254, Incremental_State, cst_Incremental_State);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Expert1
//# unitInfo: Requires: Expect_test_collector, Incremental__Expert, Incremental__Import, Incremental__Node, Incremental__State, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Expert1 = "Incremental__Expert1",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Incremental_State = global_data.Incremental__State,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_Node = global_data.Incremental__Node,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Incremental_Expert = global_data.Incremental__Expert;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Expert1);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/expert1.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    sexp_of_t = Incremental_Expert[3],
    cst_Dependency_value = "Dependency.value";
   function create(opt, child){
    if(opt)
     var sth = opt[1], on_change = sth;
    else
     var on_change = function(_b_){return 0;};
    return [0, child, on_change, Incremental_Import[16][3]];
   }
   function value(t){
    var state = t[1][2];
    if(Incremental_Import[11])
     caml_call3(Incremental_State[163][5], state, t[1], cst_Dependency_value);
    return caml_call1(Incremental_Node[21], t[1]);
   }
   var
    Dependency = [0, sexp_of_t, create, value],
    sexp_of_t$0 = Incremental_Node[2];
   function create$0(state, opt, f){
    if(opt)
     var sth = opt[1], on_observability_change = sth;
    else
     var on_observability_change = function(param){return 0;};
    return caml_call3
            (Incremental_State[163][2], state, on_observability_change, f);
   }
   var make_stale = Incremental_State[163][6];
   function watch(_a_){return _a_;}
   var
    invalidate = Incremental_State[163][7],
    add_dependency = Incremental_State[163][8],
    remove_dependency = Incremental_State[163][9];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Expert1);
   var
    Incremental_Expert1 =
      [0,
       Dependency,
       [0,
        sexp_of_t$0,
        create$0,
        watch,
        make_stale,
        invalidate,
        add_dependency,
        remove_dependency]];
   runtime.caml_register_global
    (16, Incremental_Expert1, cst_Incremental_Expert1);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Reduce_balanced
//# unitInfo: Requires: Balanced_reducer, Core, Expect_test_collector, Incremental__Expert1, Incremental__Import, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Reduce_balance = "Incremental__Reduce_balanced",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Balanced_reducer = global_data.Balanced_reducer,
    Incremental_Import = global_data.Incremental__Import,
    Core = global_data.Core,
    Incremental_Expert1 = global_data.Incremental__Expert1,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Reduce_balance);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/reduce_balanced.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   function create(state, children, f, reduce){
    var len = children.length - 1;
    if(caml_call2(Incremental_Import[3], len, 0)) return 0;
    var reducer = caml_call4(Balanced_reducer[3], 0, 0, len, reduce);
    if(Incremental_Import[11]){
     var _a_ = caml_call1(Core[230], 0);
     caml_call2(Balanced_reducer[2], _a_, reducer);
    }
    var
     node =
       caml_call3
        (Incremental_Expert1[2][2],
         state,
         0,
         function(param){
          var a = caml_call1(Balanced_reducer[6], reducer);
          if(Incremental_Import[11]){
           var _j_ = caml_call1(Core[230], 0);
           caml_call2(Balanced_reducer[2], _j_, reducer);
          }
          return a;
         }),
     _c_ = len - 1 | 0,
     _b_ = 0;
    if(_c_ >= 0){
     var i = _b_;
     for(;;){
      let i$0 = i;
      var
       _d_ = runtime.caml_check_bound(children, i)[1 + i],
       _e_ =
         caml_call2
          (Incremental_Expert1[1][2],
           [0,
            function(a){
             var _g_ = caml_call1(f, a);
             caml_call3(Balanced_reducer[4], reducer, i$0, _g_);
             var _h_ = Incremental_Import[11];
             if(! _h_) return _h_;
             var _i_ = caml_call1(Core[230], 0);
             return caml_call2(Balanced_reducer[2], _i_, reducer);
            }],
           _d_);
      caml_call2(Incremental_Expert1[2][6], node, _e_);
      var _f_ = i + 1 | 0;
      if(_c_ === i) break;
      i = _f_;
     }
    }
    return [0, caml_call1(Incremental_Expert1[2][3], node)];
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Reduce_balance);
   var Incremental_Reduce_balanced = [0, create];
   runtime.caml_register_global
    (15, Incremental_Reduce_balanced, cst_Incremental_Reduce_balance);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental__Incremental_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_Incremental_in = "Incremental__Incremental_intf",
    cst_incremental = "incremental";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_Incremental_in);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], "src/incremental_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_Incremental_in);
   var Incremental_Incremental_intf = [0];
   runtime.caml_register_global
    (11, Incremental_Incremental_intf, cst_Incremental_Incremental_in);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Incremental
//# unitInfo: Requires: Assert_failure, Core, Expect_test_collector, Incremental__Before_or_after, Incremental__Config, Incremental__Cutoff, Incremental__Expert1, Incremental__Import, Incremental__Incremental_intf, Incremental__Node, Incremental__Observer, Incremental__On_update_handler, Incremental__Reduce_balanced, Incremental__Scope, Incremental__State, Incremental__Unordered_array_fold, Incremental__Var, Incremental_step_function, Ppx_bench_lib__Benchmark_accumulator, Ppx_compare_lib, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdio__Out_channel, Timing_wheel
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_invalid$1 = "<invalid>",
    cst_Incremental = "Incremental",
    cst_incremental = "incremental",
    cst_src_incremental_ml = "src/incremental.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    level_bits = [0, 14, [0, 13, [0, 5, 0]]],
    Incremental_Before_or_after = global_data.Incremental__Before_or_after,
    Incremental_Cutoff = global_data.Incremental__Cutoff,
    Incremental_On_update_handler = global_data.Incremental__On_update_handler,
    Incremental_Config = global_data.Incremental__Config,
    Stdio_Out_channel = global_data.Stdio__Out_channel,
    Assert_failure = global_data.Assert_failure,
    Incremental_Expert1 = global_data.Incremental__Expert1;
   global_data.Incremental__Unordered_array_fold;
   var
    Core = global_data.Core,
    Incremental_Import = global_data.Incremental__Import,
    Incremental_step_function = global_data.Incremental_step_function,
    Timing_wheel = global_data.Timing_wheel,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Incremental_Reduce_balanced = global_data.Incremental__Reduce_balanced,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Incremental_State = global_data.Incremental__State,
    Incremental_Scope = global_data.Incremental__Scope,
    Incremental_Node = global_data.Incremental__Node,
    Incremental_Var = global_data.Incremental__Var,
    Incremental_Observer = global_data.Incremental__Observer;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental);
   caml_call1(Expect_test_collector[5][1], cst_src_incremental_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_incremental, cst);
   var
    sexp_of_status = Incremental_State[1],
    Run_on_update_handlers = Incremental_State[2],
    Only_in_debug = Incremental_State[3],
    Packed_weak_hashtbl = Incremental_State[4],
    num_var_sets = Incremental_State[5],
    set_num_var_sets = Incremental_State[6],
    num_nodes_recomputed_directly_ = Incremental_State[7],
    set_num_nodes_recomputed_direc = Incremental_State[8],
    num_nodes_recomputed_directly_$0 = Incremental_State[9],
    set_num_nodes_recomputed_direc$0 = Incremental_State[10],
    num_nodes_recomputed = Incremental_State[11],
    set_num_nodes_recomputed = Incremental_State[12],
    num_nodes_invalidated = Incremental_State[13],
    set_num_nodes_invalidated = Incremental_State[14],
    num_nodes_created = Incremental_State[15],
    set_num_nodes_created = Incremental_State[16],
    num_nodes_changed = Incremental_State[17],
    set_num_nodes_changed = Incremental_State[18],
    num_nodes_became_unnecessary = Incremental_State[19],
    set_num_nodes_became_unnecessa = Incremental_State[20],
    num_nodes_became_necessary = Incremental_State[21],
    set_num_nodes_became_necessary = Incremental_State[22],
    keep_node_creation_backtrace = Incremental_State[23],
    set_keep_node_creation_backtra = Incremental_State[24],
    weak_hashtbls = Incremental_State[25],
    only_in_debug = Incremental_State[26],
    set_only_in_debug = Incremental_State[27],
    run_on_update_handlers = Incremental_State[28],
    set_during_stabilization = Incremental_State[29],
    disallowed_observers = Incremental_State[30],
    new_observers = Incremental_State[31],
    finalized_observers = Incremental_State[32],
    all_observers = Incremental_State[33],
    set_all_observers = Incremental_State[34],
    num_active_observers = Incremental_State[35],
    set_num_active_observers = Incremental_State[36],
    adjust_heights_heap = Incremental_State[37],
    recompute_heap = Incremental_State[38],
    current_scope = Incremental_State[39],
    set_current_scope = Incremental_State[40],
    stabilization_num = Incremental_State[41],
    set_stabilization_num = Incremental_State[42],
    bind_lhs_change_should_invalid = Incremental_State[43],
    status = Incremental_State[44],
    set_status = Incremental_State[45],
    Fields = Incremental_State[46],
    sexp_of_t = Incremental_State[47],
    include = Incremental_State[48],
    now = Incremental_State[49],
    timing_wheel_length = Incremental_State[50],
    num_stabilizes = Incremental_State[51],
    max_height_allowed = Incremental_State[52],
    max_height_seen = Incremental_State[53],
    iter_observers = Incremental_State[54],
    directly_observed = Incremental_State[55],
    save_dot = Incremental_State[56],
    save_dot_to_file = Incremental_State[57],
    iter_observer_descendants = Incremental_State[58],
    Stats = Incremental_State[59],
    stats = Incremental_State[60],
    am_stabilizing = Incremental_State[61],
    invariant = Incremental_State[62],
    ensure_not_stabilizing = Incremental_State[63],
    set_height = Incremental_State[64],
    set_max_height_allowed = Incremental_State[65],
    handle_after_stabilization = Incremental_State[66],
    remove_children = Incremental_State[67],
    remove_child = Incremental_State[68],
    check_if_unnecessary = Incremental_State[69],
    became_unnecessary = Incremental_State[70],
    remove_alarm = Incremental_State[71],
    invalidate_node = Incremental_State[72],
    invalidate_nodes_created_on_rh = Incremental_State[73],
    rescope_nodes_created_on_rhs = Incremental_State[74],
    propagate_invalidity = Incremental_State[75],
    add_parent_without_adjusting_h = Incremental_State[76],
    became_necessary = Incremental_State[77],
    add_parent = Incremental_State[78],
    run_with_scope = Incremental_State[79],
    within_scope = Incremental_State[80],
    change_child = Incremental_State[81],
    add_alarm = Incremental_State[82],
    recompute = Incremental_State[83],
    copy_child = Incremental_State[84],
    maybe_change_value = Incremental_State[85],
    recompute_first_node_that_is_n = Incremental_State[86],
    unlink_disallowed_observers = Incremental_State[87],
    disallow_future_use = Incremental_State[88],
    disallow_finalized_observers = Incremental_State[89],
    observer_finalizer = Incremental_State[90],
    create_observer = Incremental_State[91],
    add_new_observers = Incremental_State[92],
    observer_value_exn = Incremental_State[93],
    observer_value = Incremental_State[94],
    node_on_update = Incremental_State[95],
    observer_on_update_exn = Incremental_State[96],
    set_var_while_not_stabilizing = Incremental_State[97],
    set_var = Incremental_State[98],
    reclaim_space_in_weak_hashtbls = Incremental_State[99],
    stabilize_start = Incremental_State[100],
    stabilize_end = Incremental_State[101],
    raise_during_stabilization = Incremental_State[102],
    stabilize = Incremental_State[103],
    Step_result = Incremental_State[104],
    do_one_step_of_stabilize = Incremental_State[105],
    create_node_in = Incremental_State[106],
    create_node = Incremental_State[107],
    create_node_top = Incremental_State[108],
    create_var = Incremental_State[109],
    const$0 = Incremental_State[110],
    map = Incremental_State[111],
    map2 = Incremental_State[112],
    both = Incremental_State[113],
    map3 = Incremental_State[114],
    map4 = Incremental_State[115],
    map5 = Incremental_State[116],
    map6 = Incremental_State[117],
    map7 = Incremental_State[118],
    map8 = Incremental_State[119],
    map9 = Incremental_State[120],
    map10 = Incremental_State[121],
    map11 = Incremental_State[122],
    map12 = Incremental_State[123],
    map13 = Incremental_State[124],
    map14 = Incremental_State[125],
    map15 = Incremental_State[126],
    preserve_cutoff = Incremental_State[127],
    depend_on = Incremental_State[128],
    necessary_if_alive = Incremental_State[129],
    bind = Incremental_State[130],
    bind2 = Incremental_State[131],
    bind3 = Incremental_State[132],
    bind4 = Incremental_State[133],
    join = Incremental_State[134],
    if$0 = Incremental_State[135],
    lazy_from_fun = Incremental_State[136],
    default_hash_table_initial_siz = Incremental_State[137],
    memoize_fun_by_key = Incremental_State[138],
    array_fold = Incremental_State[139],
    all = Incremental_State[140],
    unordered_array_fold = Incremental_State[141],
    opt_unordered_array_fold = Incremental_State[142],
    at_least_k_of = Incremental_State[143],
    exists = Incremental_State[144],
    for_all = Incremental_State[145],
    sum = Incremental_State[146],
    opt_sum = Incremental_State[147],
    sum_int = Incremental_State[148],
    sum_float = Incremental_State[149],
    set_freeze = Incremental_State[150],
    freeze = Incremental_State[151],
    at = Incremental_State[152],
    after = Incremental_State[153],
    next_interval_alarm_strict = Incremental_State[154],
    at_intervals = Incremental_State[155],
    snapshot = Incremental_State[156],
    incremental_step_function = Incremental_State[157],
    make_stale = Incremental_State[158],
    advance_clock = Incremental_State[159],
    create_clock = Incremental_State[160],
    create_internal = Incremental_State[161],
    weak_memoize_fun_by_key = Incremental_State[162],
    Expert = Incremental_State[163],
    default_max_height_allowed = 128,
    _a_ = [0, cst_src_incremental_ml, 30, 8];
   function create(opt, param){
    if(opt)
     var sth = opt[1], max_height_allowed = sth;
    else
     var max_height_allowed = default_max_height_allowed;
    function sexp_of_state_witness(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    }
    var
     t =
       caml_call2
        (create_internal,
         caml_call1(Incremental_Config[1], [0]),
         max_height_allowed);
    return [0, sexp_of_state_witness, t];
   }
   var
    sexp_of_t$0 = Incremental_Scope[1],
    invariant$0 = Incremental_Scope[2],
    top = Incremental_Scope[3],
    is_top = Incremental_Scope[4],
    height = Incremental_Scope[5],
    is_valid = Incremental_Scope[6],
    is_necessary = Incremental_Scope[7],
    add_node = Incremental_Scope[8];
   function current(state, param){return state[4];}
   function within(state, t, f){return caml_call3(within_scope, state, t, f);}
   var
    Packed = Incremental_Node[1],
    invariant$1 = Incremental_Node[4],
    is_const = Incremental_Node[13],
    is_necessary$0 = Incremental_Node[15],
    is_valid$0 = Incremental_Node[16],
    unsafe_value = Incremental_Node[22],
    get_cutoff = Incremental_Node[23],
    set_cutoff = Incremental_Node[24],
    user_info = Incremental_Node[27],
    set_user_info = Incremental_Node[28],
    append_user_info_graphviz = Incremental_Node[29];
   function state(t){return t[2];}
   function pack(t){return t;}
   function return$0(state, a){return caml_call2(const$0, state, a);}
   var
    N_ary_map_and_bind =
      [0,
       map2,
       map3,
       map4,
       map5,
       map6,
       map7,
       map8,
       map9,
       map10,
       map11,
       map12,
       map13,
       map14,
       map15,
       bind2,
       bind3,
       bind4],
    map2$0 = N_ary_map_and_bind[1],
    map3$0 = N_ary_map_and_bind[2],
    map4$0 = N_ary_map_and_bind[3],
    map5$0 = N_ary_map_and_bind[4],
    map6$0 = N_ary_map_and_bind[5],
    map7$0 = N_ary_map_and_bind[6],
    map8$0 = N_ary_map_and_bind[7],
    map9$0 = N_ary_map_and_bind[8],
    map10$0 = N_ary_map_and_bind[9],
    map11$0 = N_ary_map_and_bind[10],
    map12$0 = N_ary_map_and_bind[11],
    map13$0 = N_ary_map_and_bind[12],
    map14$0 = N_ary_map_and_bind[13],
    map15$0 = N_ary_map_and_bind[14],
    bind2$0 = N_ary_map_and_bind[15],
    bind3$0 = N_ary_map_and_bind[16],
    bind4$0 = N_ary_map_and_bind[17];
   function symbol_map(t, f){return caml_call2(map, t, f);}
   function symbol_bind(t, f){return caml_call2(bind, t, f);}
   var
    Infix = [0, symbol_map, symbol_bind],
    symbol_map$0 = Infix[1],
    symbol_bind$0 = Infix[2];
   function lazy_from_fun$0(state, f){
    return caml_call2(lazy_from_fun, state, f);
   }
   function memoize_fun(initial_size, state, hashable, f){
    return caml_call5
            (memoize_fun_by_key,
             initial_size,
             state,
             hashable,
             function(_S_){return _S_;},
             f);
   }
   function array_fold$0(state, ts, init, f){
    return caml_call4(array_fold, state, ts, init, f);
   }
   function reduce_balanced(state, ts, f, reduce){
    return caml_call4(Incremental_Reduce_balanced[1], state, ts, f, reduce);
   }
   var
    invariant$2 = Incremental_Var[1],
    Packed$0 = Incremental_Var[3],
    latest_value = Incremental_Var[4],
    incr_state = Incremental_Var[5];
   function value(t){return t[1];}
   function watch(t){return t[4];}
   function sexp_of_t$1(sexp_of_a, t){return caml_call1(sexp_of_a, t[1]);}
   function replace(t, f){
    return caml_call2(set_var, t, caml_call1(f, caml_call1(latest_value, t)));
   }
   var
    invariant$3 = Incremental_Observer[1],
    observing = Incremental_Observer[3],
    use_is_allowed = Incremental_Observer[4],
    incr_state$0 = Incremental_Observer[7],
    _c_ = [0, "Invalidated"],
    _d_ = [0, "Initialized"],
    _e_ = [0, "Changed"];
   function compare(cmp_a, a_001, b_002){
    if(caml_call2(Ppx_compare_lib[1], a_001, b_002)) return 0;
    if(typeof a_001 === "number"){
     if(typeof b_002 === "number") return 0;
     if(1 === b_002[0]) return 1;
    }
    else{
     if(0 === a_001[0]){
      var a_003 = a_001[1];
      if(typeof b_002 !== "number" && 0 === b_002[0]){
       var b_004 = b_002[1];
       return caml_call2(cmp_a, a_003, b_004);
      }
      return -1;
     }
     var a_007 = a_001[2], a_005 = a_001[1];
     if(typeof b_002 === "number") return -1;
     if(0 !== b_002[0]){
      var
       b_008 = b_002[2],
       b_006 = b_002[1],
       n = caml_call2(cmp_a, a_005, b_006);
      return 0 === n ? caml_call2(cmp_a, a_007, b_008) : n;
     }
    }
    return 1;
   }
   function sexp_of_t$2(of_a_009, param){
    if(typeof param === "number") return _c_;
    if(0 === param[0]){
     var arg0_010 = param[1], res0_011 = caml_call1(of_a_009, arg0_010);
     return [1, [0, _d_, [0, res0_011, 0]]];
    }
    var
     arg1_013 = param[2],
     arg0_012 = param[1],
     res0_014 = caml_call1(of_a_009, arg0_012),
     res1_015 = caml_call1(of_a_009, arg1_013);
    return [1, [0, _e_, [0, res0_014, [0, res1_015, 0]]]];
   }
   var
    Update = [0, compare, sexp_of_t$2],
    _b_ = Incremental_Observer[2],
    _f_ = [0, "_"],
    cst_Incremental_bug_Observer_o =
      "Incremental bug -- Observer.on_update_exn got unexpected update Unnecessary",
    _g_ = [0, cst_src_incremental_ml, 141, 3574, 3592],
    cst_invalid = cst_invalid$1,
    cst_disallowed = "<disallowed>",
    cst_unstabilized = "<unstabilized>";
   function on_update_exn(t, f){
    return caml_call2
            (observer_on_update_exn,
             t,
             function(param){
              if(typeof param === "number")
               return 0 === param
                       ? caml_call1(f, 0)
                       : caml_call5
                         (Core[236],
                          0,
                          _g_,
                          cst_Incremental_bug_Observer_o,
                          t,
                          function(x_017){
                           return caml_call2(_b_, function(param){return _f_;}, x_017);
                          });
              if(0 === param[0]){
               var a = param[1];
               return caml_call1(f, [0, a]);
              }
              var a2 = param[2], a1 = param[1];
              return caml_call1(f, [1, a1, a2]);
             });
   }
   function disallow_future_use$0(t){
    return caml_call1(disallow_future_use, t[1]);
   }
   function sexp_of_t$3(sexp_of_a, t){
    var _R_ = t[1][1];
    if(1 !== _R_)
     return _R_
             ? caml_call1(Sexplib0_Sexp_conv[7], cst_disallowed)
             : caml_call1(Sexplib0_Sexp_conv[7], cst_unstabilized);
    var uopt = t[1][2][4];
    return caml_call1(Incremental_Import[16][5], uopt)
            ? caml_call1(Sexplib0_Sexp_conv[7], cst_invalid)
            : caml_call1
              (sexp_of_a, caml_call1(Incremental_Import[16][11], uopt));
   }
   var
    Observer =
      [0,
       invariant$3,
       observing,
       use_is_allowed,
       incr_state$0,
       Update,
       on_update_exn,
       disallow_future_use$0,
       observer_value,
       observer_value_exn,
       sexp_of_t$3],
    fired_alarm_values = include[1],
    set_fired_alarm_values = include[2],
    handle_fired = include[3],
    timing_wheel = include[5],
    Fields$0 = include[6],
    sexp_of_t$4 = include[7],
    invariant$4 = include[8],
    incr_state$1 = include[9],
    alarm_precision = Timing_wheel[1][10],
    _h_ = [0, caml_call2(Timing_wheel[7][5], [0, 1], level_bits)],
    default_timing_wheel_config =
      caml_call4(Timing_wheel[8][4], 0, _h_, alarm_precision, 0),
    _i_ = [0, "Invalid"],
    _j_ = [0, "Necessary_maybe_stale"],
    _k_ = [0, "Unnecessary_maybe_stale"];
   function create$0(state, opt, start, param){
    if(opt)
     var sth = opt[1], timing_wheel_config = sth;
    else
     var timing_wheel_config = default_timing_wheel_config;
    var
     _Q_ = caml_call1(Incremental_Import[14][86], start),
     start$0 = caml_call1(Incremental_Import[14][88], _Q_);
    return caml_call3(create_clock, state, timing_wheel_config, start$0);
   }
   function alarm_precision$0(t){return caml_call1(Timing_wheel[10], t[1]);}
   function watch_now(t){return t[2][4];}
   function advance_clock_by(t, span){
    var _P_ = caml_call1(now, t);
    return caml_call2
            (advance_clock,
             t,
             caml_call2(Incremental_Import[14][66], _P_, span));
   }
   function step_function(t, init, steps){
    var
     a = caml_call2(Incremental_step_function[7], init, steps),
     state = caml_call1(incr_state$1, t);
    return caml_call2
            (incremental_step_function, t, caml_call2(const$0, state, a));
   }
   function freeze$0(opt, t){
    if(opt)
     var sth = opt[1], when = sth;
    else
     var when = function(param){return 1;};
    return caml_call2(freeze, t, when);
   }
   function depend_on$0(t, depend_on$0){
    return caml_call2(depend_on, t, depend_on$0);
   }
   function stabilize$0(state){return caml_call1(stabilize, state);}
   function am_stabilizing$0(state){return caml_call1(am_stabilizing, state);}
   function sexp_of_t$5(of_a_018, param){
    if(typeof param === "number") return _i_;
    if(0 === param[0]){
     var
      arg0_019 = param[1],
      res0_020 = caml_call2(Core[454], of_a_018, arg0_019);
     return [1, [0, _j_, [0, res0_020, 0]]];
    }
    var
     arg0_021 = param[1],
     res0_022 = caml_call2(Core[454], of_a_018, arg0_021);
    return [1, [0, _k_, [0, res0_022, 0]]];
   }
   var
    Node_value = [0, sexp_of_t$5],
    cst_uncomputed = "<uncomputed>",
    cst_unnecessary = "<unnecessary>",
    cst_invalid$0 = cst_invalid$1;
   function node_value(t){
    return caml_call1(is_valid$0, t)
            ? caml_call1
               (is_necessary$0, t)
              ? [0, caml_call1(Incremental_Import[16][8], t[4])]
              : [1, caml_call1(Incremental_Import[16][8], t[4])]
            : 0;
   }
   function sexp_of_t$6(sexp_of_a, t){
    return caml_call1(is_valid$0, t)
            ? caml_call1
               (is_necessary$0, t)
              ? caml_call1
                 (Incremental_Import[16][5], t[4])
                ? caml_call1(Core[471], cst_uncomputed)
                : caml_call1(sexp_of_a, caml_call1(unsafe_value, t))
              : caml_call1(Core[471], cst_unnecessary)
            : caml_call1(Core[471], cst_invalid$0);
   }
   function both$0(t1, t2){
    return caml_call3(map2$0, t1, t2, function(x1, x2){return [0, x1, x2];});
   }
   var
    map2$1 = N_ary_map_and_bind[1],
    map3$1 = N_ary_map_and_bind[2],
    map4$1 = N_ary_map_and_bind[3],
    map5$1 = N_ary_map_and_bind[4],
    map6$1 = N_ary_map_and_bind[5],
    map7$1 = N_ary_map_and_bind[6],
    map8$1 = N_ary_map_and_bind[7],
    map9$1 = N_ary_map_and_bind[8],
    map10$1 = N_ary_map_and_bind[9],
    map11$1 = N_ary_map_and_bind[10],
    map12$1 = N_ary_map_and_bind[11],
    map13$1 = N_ary_map_and_bind[12],
    map14$1 = N_ary_map_and_bind[13],
    map15$1 = N_ary_map_and_bind[14],
    bind2$1 = N_ary_map_and_bind[15],
    bind3$1 = N_ary_map_and_bind[16],
    bind4$1 = N_ary_map_and_bind[17],
    Open_on_rhs = [0, watch],
    _l_ = [0, cst_src_incremental_ml, 282, 2];
   function weak_memoize_fun(initial_size, state, hashable, f){
    return caml_call5
            (weak_memoize_fun_by_key,
             initial_size,
             state,
             hashable,
             function(_O_){return _O_;},
             f);
   }
   function Make_with_config(Incremental_config, symbol){
    function sexp_of_state_witness(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    }
    var
     t = caml_call2(create_internal, Incremental_config, 128),
     State =
       [0,
        sexp_of_status,
        Run_on_update_handlers,
        Only_in_debug,
        Packed_weak_hashtbl,
        num_var_sets,
        set_num_var_sets,
        num_nodes_recomputed_directly_,
        set_num_nodes_recomputed_direc,
        num_nodes_recomputed_directly_$0,
        set_num_nodes_recomputed_direc$0,
        num_nodes_recomputed,
        set_num_nodes_recomputed,
        num_nodes_invalidated,
        set_num_nodes_invalidated,
        num_nodes_created,
        set_num_nodes_created,
        num_nodes_changed,
        set_num_nodes_changed,
        num_nodes_became_unnecessary,
        set_num_nodes_became_unnecessa,
        num_nodes_became_necessary,
        set_num_nodes_became_necessary,
        keep_node_creation_backtrace,
        set_keep_node_creation_backtra,
        weak_hashtbls,
        only_in_debug,
        set_only_in_debug,
        run_on_update_handlers,
        set_during_stabilization,
        disallowed_observers,
        new_observers,
        finalized_observers,
        all_observers,
        set_all_observers,
        num_active_observers,
        set_num_active_observers,
        adjust_heights_heap,
        recompute_heap,
        current_scope,
        set_current_scope,
        stabilization_num,
        set_stabilization_num,
        bind_lhs_change_should_invalid,
        status,
        set_status,
        Fields,
        sexp_of_t,
        include,
        now,
        timing_wheel_length,
        num_stabilizes,
        max_height_allowed,
        max_height_seen,
        iter_observers,
        directly_observed,
        save_dot,
        save_dot_to_file,
        iter_observer_descendants,
        Stats,
        stats,
        am_stabilizing,
        invariant,
        ensure_not_stabilizing,
        set_height,
        set_max_height_allowed,
        handle_after_stabilization,
        remove_children,
        remove_child,
        check_if_unnecessary,
        became_unnecessary,
        remove_alarm,
        invalidate_node,
        invalidate_nodes_created_on_rh,
        rescope_nodes_created_on_rhs,
        propagate_invalidity,
        add_parent_without_adjusting_h,
        became_necessary,
        add_parent,
        run_with_scope,
        within_scope,
        change_child,
        add_alarm,
        recompute,
        copy_child,
        maybe_change_value,
        recompute_first_node_that_is_n,
        unlink_disallowed_observers,
        disallow_future_use,
        disallow_finalized_observers,
        observer_finalizer,
        create_observer,
        add_new_observers,
        observer_value_exn,
        observer_value,
        node_on_update,
        observer_on_update_exn,
        set_var_while_not_stabilizing,
        set_var,
        reclaim_space_in_weak_hashtbls,
        stabilize_start,
        stabilize_end,
        raise_during_stabilization,
        stabilize,
        Step_result,
        do_one_step_of_stabilize,
        create_node_in,
        create_node,
        create_node_top,
        create_var,
        const$0,
        map,
        map2,
        both,
        map3,
        map4,
        map5,
        map6,
        map7,
        map8,
        map9,
        map10,
        map11,
        map12,
        map13,
        map14,
        map15,
        preserve_cutoff,
        depend_on,
        necessary_if_alive,
        bind,
        bind2,
        bind3,
        bind4,
        join,
        if$0,
        lazy_from_fun,
        default_hash_table_initial_siz,
        memoize_fun_by_key,
        array_fold,
        all,
        unordered_array_fold,
        opt_unordered_array_fold,
        at_least_k_of,
        exists,
        for_all,
        sum,
        opt_sum,
        sum_int,
        sum_float,
        set_freeze,
        freeze,
        at,
        after,
        next_interval_alarm_strict,
        at_intervals,
        snapshot,
        incremental_step_function,
        make_stale,
        advance_clock,
        create_clock,
        weak_memoize_fun_by_key,
        Expert,
        create_internal,
        create,
        t];
    function create$1(timing_wheel_config, start, param){
     return create$0(State[165], timing_wheel_config, start, 0);
    }
    var
     Clock =
       [0,
        fired_alarm_values,
        set_fired_alarm_values,
        handle_fired,
        timing_wheel,
        Fields$0,
        sexp_of_t$4,
        invariant$4,
        incr_state$1,
        incr_state$1,
        default_timing_wheel_config,
        alarm_precision$0,
        timing_wheel_length,
        now,
        watch_now,
        at,
        after,
        at_intervals,
        advance_clock,
        advance_clock_by,
        incremental_step_function,
        step_function,
        snapshot,
        create$1],
     Dependency = Incremental_Expert1[1],
     Node = Incremental_Expert1[2],
     sexp_of_t$2 = Node[1],
     watch$0 = Node[3],
     make_stale$0 = Node[4],
     invalidate = Node[5],
     add_dependency = Node[6],
     remove_dependency = Node[7],
     _N_ = Node[2];
    function create$2(on_observability_change, f){
     return caml_call3(_N_, State[165], on_observability_change, f);
    }
    var
     Node$0 =
       [0,
        sexp_of_t$2,
        watch$0,
        make_stale$0,
        invalidate,
        add_dependency,
        remove_dependency,
        create$2];
    function do_one_step_of_stabilize$0(param){
     return caml_call1(State[105], State[165]);
    }
    var Expert$0 = [0, Dependency, Node$0, do_one_step_of_stabilize$0];
    function return$0(a){
     var state = State[165];
     return caml_call2(const$0, state, a);
    }
    var
     Let_syntax =
       [0,
        bind,
        map,
        both$0,
        map2$1,
        map3$1,
        map4$1,
        map5$1,
        map6$1,
        map7$1,
        map8$1,
        map9$1,
        map10$1,
        map11$1,
        map12$1,
        map13$1,
        map14$1,
        map15$1,
        bind2$1,
        bind3$1,
        bind4$1,
        Open_on_rhs,
        return$0],
     Let_syntax$0 = [0, symbol_map$0, symbol_bind$0, return$0, Let_syntax];
    function current(param){var state = State[165]; return state[4];}
    function within(t, f){
     var state = State[165];
     return caml_call3(within_scope, state, t, f);
    }
    var
     Scope =
       [0,
        sexp_of_t$0,
        invariant$0,
        top,
        is_top,
        height,
        is_valid,
        is_necessary,
        add_node,
        current,
        within];
    function create$3(use_current_scope, value){
     return caml_call3(create_var, State[165], use_current_scope, value);
    }
    var
     Var =
       [0,
        invariant$2,
        Packed$0,
        latest_value,
        incr_state,
        set_var,
        value,
        watch,
        sexp_of_t$1,
        replace,
        create$3];
    function const$1(a){
     var state = State[165];
     return caml_call2(const$0, state, a);
    }
    function return$1(a){
     var state = State[165];
     return caml_call2(const$0, state, a);
    }
    function all$0(ts){return caml_call2(all, State[165], ts);}
    function exists$0(ts){return caml_call2(exists, State[165], ts);}
    function for_all$0(ts){return caml_call2(for_all, State[165], ts);}
    function memoize_fun_by_key$0(initial_size, hashable, project_key, f){
     return caml_call5
             (memoize_fun_by_key,
              initial_size,
              State[165],
              hashable,
              project_key,
              f);
    }
    function memoize_fun$0(initial_size, hashable, f){
     return memoize_fun(initial_size, State[165], hashable, f);
    }
    function array_fold$0(ts, init, f){
     var state = State[165];
     return caml_call4(array_fold, state, ts, init, f);
    }
    function reduce_balanced$0(ts, f, reduce){
     return reduce_balanced(State[165], ts, f, reduce);
    }
    function unordered_array_fold$0
    (full_compute_every_n_changes, ts, init, f, update){
     return caml_call6
             (unordered_array_fold,
              State[165],
              full_compute_every_n_changes,
              ts,
              init,
              f,
              update);
    }
    function opt_unordered_array_fold$0
    (full_compute_every_n_changes, ts, init, f, f_inverse){
     return caml_call6
             (opt_unordered_array_fold,
              State[165],
              full_compute_every_n_changes,
              ts,
              init,
              f,
              f_inverse);
    }
    function sum$0(full_compute_every_n_changes, ts, zero, add, sub){
     return caml_call6
             (sum,
              State[165],
              full_compute_every_n_changes,
              ts,
              zero,
              add,
              sub);
    }
    function opt_sum$0(full_compute_every_n_changes, ts, zero, add, sub){
     return caml_call6
             (opt_sum,
              State[165],
              full_compute_every_n_changes,
              ts,
              zero,
              add,
              sub);
    }
    function sum_int$0(ts){return caml_call2(sum_int, State[165], ts);}
    function sum_float$0(ts){return caml_call2(sum_float, State[165], ts);}
    function stabilize$0(param){
     var state = State[165];
     return caml_call1(stabilize, state);
    }
    function am_stabilizing$0(param){
     var state = State[165];
     return caml_call1(am_stabilizing, state);
    }
    function save_dot$0(out){return caml_call2(save_dot, State[165], out);}
    function save_dot_to_file$0(file){
     return caml_call6(Stdio_Out_channel[6], 0, 0, 0, 0, file, save_dot$0);
    }
    function lazy_from_fun$0(f){
     var state = State[165];
     return caml_call2(State[136], state, f);
    }
    function weak_memoize_fun_by_key$0(initial_size, hashable, project_key, f){
     return caml_call5
             (weak_memoize_fun_by_key,
              initial_size,
              State[165],
              hashable,
              project_key,
              f);
    }
    function weak_memoize_fun$0(initial_size, hashable, f){
     return weak_memoize_fun(initial_size, State[165], hashable, f);
    }
    return [0,
            sexp_of_state_witness,
            Packed,
            ,
            invariant$1,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            is_const,
            ,
            is_necessary$0,
            is_valid$0,
            ,
            ,
            ,
            ,
            ,
            ,
            get_cutoff,
            set_cutoff,
            ,
            user_info,
            set_user_info,
            append_user_info_graphviz,
            ,
            ,
            ,
            pack,
            create_observer,
            map,
            bind,
            ,
            map2$0,
            map3$0,
            map4$0,
            map5$0,
            map6$0,
            map7$0,
            map8$0,
            map9$0,
            map10$0,
            map11$0,
            map12$0,
            map13$0,
            map14$0,
            map15$0,
            bind2$0,
            bind3$0,
            bind4$0,
            Infix,
            symbol_map$0,
            symbol_bind$0,
            join,
            if$0,
            default_hash_table_initial_siz,
            ,
            both,
            Observer,
            freeze$0,
            depend_on$0,
            necessary_if_alive,
            node_on_update,
            Node_value,
            node_value,
            sexp_of_t$6,
            State,
            Clock,
            Expert$0,
            Let_syntax$0,
            Scope,
            Var,
            const$1,
            return$1,
            all$0,
            exists$0,
            for_all$0,
            memoize_fun_by_key$0,
            memoize_fun$0,
            array_fold$0,
            reduce_balanced$0,
            unordered_array_fold$0,
            opt_unordered_array_fold$0,
            sum$0,
            opt_sum$0,
            sum_int$0,
            sum_float$0,
            stabilize$0,
            am_stabilizing$0,
            save_dot$0,
            save_dot_to_file$0,
            lazy_from_fun$0,
            weak_memoize_fun_by_key$0,
            weak_memoize_fun$0];
   }
   function Add_witness0(M){
    function sexp_of_t(param, t){return caml_call1(M[1], t);}
    return [0, sexp_of_t];
   }
   function Add_witness1(M){
    function invariant(invariant_a, param, t){return caml_call2(M[2], invariant_a, t);
    }
    function sexp_of_t(sexp_of_a, param, t){return caml_call2(M[1], sexp_of_a, t);
    }
    return [0, sexp_of_t, invariant];
   }
   var
    include$0 = Add_witness0([0, sexp_of_t$4, invariant$4]),
    sexp_of_t$7 = include$0[1],
    Dependency = Incremental_Expert1[1],
    Node = Incremental_Expert1[2],
    create$1 = Dependency[2],
    value$0 = Dependency[3],
    sexp_of_t$8 = Dependency[1];
   function invariant$5(param, _M_){return 0;}
   var
    include$1 = Add_witness1([0, sexp_of_t$8, invariant$5]),
    sexp_of_t$9 = include$1[1],
    create$2 = Node[2],
    watch$0 = Node[3],
    make_stale$0 = Node[4],
    invalidate = Node[5],
    add_dependency = Node[6],
    remove_dependency = Node[7],
    sexp_of_t$10 = Node[1];
   function invariant$6(param, _L_){return 0;}
   var
    include$2 = Add_witness1([0, sexp_of_t$10, invariant$6]),
    sexp_of_t$11 = include$2[1];
   function do_one_step_of_stabilize$0(state){
    return caml_call1(do_one_step_of_stabilize, state);
   }
   var
    include$3 = Add_witness1([0, Incremental_Node[2], Incremental_Node[4]]),
    sexp_of_t$12 = include$3[1],
    invariant$7 = include$3[2],
    observing$0 = Observer[2],
    use_is_allowed$0 = Observer[3],
    Update$0 = Observer[5],
    on_update_exn$0 = Observer[6],
    disallow_future_use$1 = Observer[7],
    value$1 = Observer[8],
    value_exn = Observer[9],
    include$4 = Add_witness1([0, Observer[10], Observer[1]]),
    sexp_of_t$13 = include$4[1],
    invariant$8 = include$4[2],
    include$5 = Add_witness0([0, sexp_of_t, invariant]),
    sexp_of_t$14 = include$5[1],
    include$6 = Add_witness1([0, sexp_of_t$1, invariant$2]),
    sexp_of_t$15 = include$6[1],
    debug = Incremental_Import[11],
    Private = [0, debug];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental);
   var
    Incremental =
      [0,
       [0,
        sexp_of_t$14,
        create,
        keep_node_creation_backtrace,
        set_keep_node_creation_backtra,
        max_height_allowed,
        set_max_height_allowed,
        num_active_observers,
        max_height_seen,
        num_nodes_became_necessary,
        num_nodes_became_unnecessary,
        num_nodes_changed,
        num_nodes_created,
        num_nodes_invalidated,
        num_nodes_recomputed,
        num_nodes_recomputed_directly_$0,
        num_nodes_recomputed_directly_,
        num_stabilizes,
        num_var_sets,
        [0, Stats[2]],
        stats],
       sexp_of_t$12,
       invariant$7,
       state,
       is_const,
       is_valid$0,
       is_necessary$0,
       return$0,
       return$0,
       map,
       symbol_map$0,
       map2$0,
       map3$0,
       map4$0,
       map5$0,
       map6$0,
       map7$0,
       map8$0,
       map9$0,
       map10$0,
       map11$0,
       map12$0,
       map13$0,
       map14$0,
       map15$0,
       bind,
       symbol_bind$0,
       bind2$0,
       bind3$0,
       bind4$0,
       Infix,
       join,
       if$0,
       freeze$0,
       depend_on$0,
       necessary_if_alive,
       for_all,
       exists,
       all,
       both,
       array_fold$0,
       reduce_balanced,
       [0],
       unordered_array_fold,
       opt_unordered_array_fold,
       sum,
       opt_sum,
       sum_int,
       sum_float,
       [0, top, current, within],
       [0,
        sexp_of_t$15,
        create_var,
        set_var,
        watch,
        value,
        latest_value,
        replace],
       [0,
        sexp_of_t$13,
        invariant$8,
        observing$0,
        use_is_allowed$0,
        value$1,
        value_exn,
        Update$0,
        on_update_exn$0,
        disallow_future_use$1],
       create_observer,
       Incremental_On_update_handler[1],
       node_on_update,
       stabilize$0,
       am_stabilizing$0,
       [0,
        Incremental_Cutoff[1],
        Incremental_Cutoff[2],
        Incremental_Cutoff[3],
        Incremental_Cutoff[4],
        Incremental_Cutoff[5],
        Incremental_Cutoff[6],
        Incremental_Cutoff[7],
        Incremental_Cutoff[8],
        Incremental_Cutoff[9],
        Incremental_Cutoff[11],
        Incremental_Cutoff[10]],
       set_cutoff,
       get_cutoff,
       lazy_from_fun$0,
       default_hash_table_initial_siz,
       memoize_fun,
       memoize_fun_by_key,
       weak_memoize_fun,
       weak_memoize_fun_by_key,
       user_info,
       set_user_info,
       append_user_info_graphviz,
       Node_value,
       node_value,
       [0, Packed[5], Packed[6]],
       pack,
       save_dot,
       save_dot_to_file,
       [0,
        symbol_map$0,
        symbol_bind$0,
        [0,
         bind,
         bind2$1,
         bind3$1,
         bind4$1,
         map,
         map2$1,
         map3$1,
         map4$1,
         map5$1,
         map6$1,
         map7$1,
         map8$1,
         map9$1,
         map10$1,
         map11$1,
         map12$1,
         map13$1,
         map14$1,
         map15$1,
         both$0,
         Open_on_rhs]],
       Incremental_Before_or_after,
       [0,
        sexp_of_t$7,
        default_timing_wheel_config,
        create$0,
        alarm_precision$0,
        incr_state$1,
        timing_wheel_length,
        now,
        watch_now,
        advance_clock,
        advance_clock_by,
        at,
        after,
        at_intervals,
        step_function,
        incremental_step_function,
        snapshot],
       [0,
        [0, sexp_of_t$9, create$1, value$0],
        [0,
         sexp_of_t$11,
         create$2,
         watch$0,
         make_stale$0,
         invalidate,
         add_dependency,
         remove_dependency],
        Step_result,
        do_one_step_of_stabilize$0],
       function(_z_){
        var
         _K_ = Make_with_config(caml_call1(Incremental_Config[1], [0]), [0]),
         _A_ = _K_[72],
         _B_ = _A_[2],
         _C_ = _K_[71],
         _D_ = _K_[73],
         _E_ = _D_[4],
         _F_ = _K_[2],
         _G_ = _K_[62],
         _H_ = _K_[75],
         _I_ = _K_[74],
         _J_ = _K_[70];
        return [0,
                _K_[1],
                [0,
                 _J_[47],
                 _J_[62],
                 _J_[165],
                 _J_[23],
                 _J_[24],
                 _J_[52],
                 _J_[65],
                 _J_[35],
                 _J_[53],
                 _J_[21],
                 _J_[19],
                 _J_[17],
                 _J_[15],
                 _J_[13],
                 _J_[11],
                 _J_[9],
                 _J_[7],
                 _J_[51],
                 _J_[5],
                 [0, _J_[59][2]],
                 _J_[60]],
                _K_[69],
                _K_[4],
                _K_[13],
                _K_[16],
                _K_[15],
                _K_[76],
                _K_[77],
                _K_[34],
                _K_[55],
                _K_[37],
                _K_[38],
                _K_[39],
                _K_[40],
                _K_[41],
                _K_[42],
                _K_[43],
                _K_[44],
                _K_[45],
                _K_[46],
                _K_[47],
                _K_[48],
                _K_[49],
                _K_[50],
                _K_[35],
                _K_[56],
                _K_[51],
                _K_[52],
                _K_[53],
                _K_[54],
                _K_[57],
                _K_[58],
                _K_[63],
                _K_[64],
                _K_[65],
                _K_[80],
                _K_[79],
                _K_[78],
                _K_[61],
                _K_[83],
                _K_[84],
                [0],
                _K_[85],
                _K_[86],
                _K_[87],
                _K_[88],
                _K_[89],
                _K_[90],
                [0, _I_[3], _I_[9], _I_[10]],
                [0, _H_[8], _H_[10], _H_[5], _H_[7], _H_[6], _H_[3], _H_[9]],
                [0,
                 _G_[10],
                 _G_[1],
                 _G_[2],
                 _G_[3],
                 _G_[8],
                 _G_[9],
                 _G_[5],
                 _G_[6],
                 _G_[7]],
                _K_[33],
                Incremental_On_update_handler[1],
                _K_[66],
                _K_[91],
                _K_[92],
                [0,
                 Incremental_Cutoff[1],
                 Incremental_Cutoff[2],
                 Incremental_Cutoff[3],
                 Incremental_Cutoff[4],
                 Incremental_Cutoff[5],
                 Incremental_Cutoff[6],
                 Incremental_Cutoff[7],
                 Incremental_Cutoff[8],
                 Incremental_Cutoff[9],
                 Incremental_Cutoff[11],
                 Incremental_Cutoff[10]],
                _K_[24],
                _K_[23],
                _K_[95],
                _K_[59],
                _K_[82],
                _K_[81],
                _K_[97],
                _K_[96],
                _K_[26],
                _K_[27],
                _K_[28],
                _K_[67],
                _K_[68],
                [0, _F_[5], _F_[6], _F_[7]],
                _K_[32],
                _K_[93],
                _K_[94],
                [0,
                 _D_[3],
                 _D_[1],
                 _D_[2],
                 [0,
                  _E_[1],
                  _E_[22],
                  _E_[18],
                  _E_[19],
                  _E_[20],
                  _E_[2],
                  _E_[4],
                  _E_[5],
                  _E_[6],
                  _E_[7],
                  _E_[8],
                  _E_[9],
                  _E_[10],
                  _E_[11],
                  _E_[12],
                  _E_[13],
                  _E_[14],
                  _E_[15],
                  _E_[16],
                  _E_[17],
                  _E_[3],
                  _E_[21]]],
                Incremental_Before_or_after,
                [0,
                 _C_[6],
                 _C_[10],
                 _C_[23],
                 _C_[11],
                 _C_[12],
                 _C_[13],
                 _C_[14],
                 _C_[18],
                 _C_[19],
                 _C_[15],
                 _C_[16],
                 _C_[17],
                 _C_[21],
                 _C_[20],
                 _C_[22]],
                [0,
                 _A_[1],
                 [0, _B_[1], _B_[7], _B_[2], _B_[3], _B_[4], _B_[5], _B_[6]],
                 _K_[70][104],
                 _A_[3]]];
       },
       Incremental_Config,
       function(_n_, _m_){
        var
         _o_ = Make_with_config(_n_, _m_),
         _p_ = _o_[72],
         _q_ = _p_[2],
         _r_ = _o_[71],
         _s_ = _o_[73],
         _t_ = _s_[4],
         _u_ = _o_[2],
         _v_ = _o_[62],
         _w_ = _o_[75],
         _x_ = _o_[74],
         _y_ = _o_[70];
        return [0,
                _o_[1],
                [0,
                 _y_[47],
                 _y_[62],
                 _y_[165],
                 _y_[23],
                 _y_[24],
                 _y_[52],
                 _y_[65],
                 _y_[35],
                 _y_[53],
                 _y_[21],
                 _y_[19],
                 _y_[17],
                 _y_[15],
                 _y_[13],
                 _y_[11],
                 _y_[9],
                 _y_[7],
                 _y_[51],
                 _y_[5],
                 [0, _y_[59][2]],
                 _y_[60]],
                _o_[69],
                _o_[4],
                _o_[13],
                _o_[16],
                _o_[15],
                _o_[76],
                _o_[77],
                _o_[34],
                _o_[55],
                _o_[37],
                _o_[38],
                _o_[39],
                _o_[40],
                _o_[41],
                _o_[42],
                _o_[43],
                _o_[44],
                _o_[45],
                _o_[46],
                _o_[47],
                _o_[48],
                _o_[49],
                _o_[50],
                _o_[35],
                _o_[56],
                _o_[51],
                _o_[52],
                _o_[53],
                _o_[54],
                _o_[57],
                _o_[58],
                _o_[63],
                _o_[64],
                _o_[65],
                _o_[80],
                _o_[79],
                _o_[78],
                _o_[61],
                _o_[83],
                _o_[84],
                [0],
                _o_[85],
                _o_[86],
                _o_[87],
                _o_[88],
                _o_[89],
                _o_[90],
                [0, _x_[3], _x_[9], _x_[10]],
                [0, _w_[8], _w_[10], _w_[5], _w_[7], _w_[6], _w_[3], _w_[9]],
                [0,
                 _v_[10],
                 _v_[1],
                 _v_[2],
                 _v_[3],
                 _v_[8],
                 _v_[9],
                 _v_[5],
                 _v_[6],
                 _v_[7]],
                _o_[33],
                Incremental_On_update_handler[1],
                _o_[66],
                _o_[91],
                _o_[92],
                [0,
                 Incremental_Cutoff[1],
                 Incremental_Cutoff[2],
                 Incremental_Cutoff[3],
                 Incremental_Cutoff[4],
                 Incremental_Cutoff[5],
                 Incremental_Cutoff[6],
                 Incremental_Cutoff[7],
                 Incremental_Cutoff[8],
                 Incremental_Cutoff[9],
                 Incremental_Cutoff[11],
                 Incremental_Cutoff[10]],
                _o_[24],
                _o_[23],
                _o_[95],
                _o_[59],
                _o_[82],
                _o_[81],
                _o_[97],
                _o_[96],
                _o_[26],
                _o_[27],
                _o_[28],
                _o_[67],
                _o_[68],
                [0, _u_[5], _u_[6], _u_[7]],
                _o_[32],
                _o_[93],
                _o_[94],
                [0,
                 _s_[3],
                 _s_[1],
                 _s_[2],
                 [0,
                  _t_[1],
                  _t_[22],
                  _t_[18],
                  _t_[19],
                  _t_[20],
                  _t_[2],
                  _t_[4],
                  _t_[5],
                  _t_[6],
                  _t_[7],
                  _t_[8],
                  _t_[9],
                  _t_[10],
                  _t_[11],
                  _t_[12],
                  _t_[13],
                  _t_[14],
                  _t_[15],
                  _t_[16],
                  _t_[17],
                  _t_[3],
                  _t_[21]]],
                Incremental_Before_or_after,
                [0,
                 _r_[6],
                 _r_[10],
                 _r_[23],
                 _r_[11],
                 _r_[12],
                 _r_[13],
                 _r_[14],
                 _r_[18],
                 _r_[19],
                 _r_[15],
                 _r_[16],
                 _r_[17],
                 _r_[21],
                 _r_[20],
                 _r_[22]],
                [0,
                 _p_[1],
                 [0, _q_[1], _q_[7], _q_[2], _q_[3], _q_[4], _q_[5], _q_[6]],
                 _o_[70][104],
                 _p_[3]]];
       },
       Private];
   runtime.caml_register_global(50, Incremental, cst_Incremental);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
