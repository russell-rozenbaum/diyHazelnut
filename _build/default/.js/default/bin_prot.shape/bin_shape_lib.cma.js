// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Bin_shape_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bin_shape_lib = [0];
   runtime.caml_register_global(0, Bin_shape_lib, "Bin_shape_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_shape_lib__Bin_shape
//# unitInfo: Requires: Assert_failure, Base, Base__Comparator, Base__Int, Base__List, Base__Map, Base__Option, Base__Printf, Base__String, Md5_lib, Ppx_compare_lib, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Annotate = "Annotate",
    cst_Application = "Application",
    cst_Base = "Base",
    cst_Exp = "Exp",
    cst_Poly_variant = "Poly_variant",
    cst_Rec_app = "Rec_app",
    cst_Record = "Record",
    cst_Tuple = "Tuple",
    cst_Var = "Var",
    cst_Variant = "Variant",
    cst_annotate$0 = "annotate",
    cst_application$0 = "application",
    cst_base$0 = "base",
    cst_exp = "exp",
    cst_poly_variant$0 = "poly_variant",
    cst_rec_app$0 = "rec_app",
    cst_record$0 = "record",
    cst_sorted$0 = "sorted",
    cst_tuple$0 = "tuple",
    cst_var$0 = "var",
    cst_variant$0 = "variant",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    error_source_026 = "shape/src/bin_shape.ml.Sorted_table.t",
    error_source_042 = "shape/src/bin_shape.ml.Canonical_exp_constructor.t",
    error_source_206 = "shape/src/bin_shape.ml.Canonical_full.Exp1.t0",
    Assert_failure = global_data.Assert_failure,
    Base_List = global_data.Base__List,
    Base = global_data.Base,
    Base_Option = global_data.Base__Option,
    Base_Map = global_data.Base__Map,
    Base_Comparator = global_data.Base__Comparator,
    Ppx_compare_lib = global_data.Ppx_compare_lib,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Base_String = global_data.Base__String,
    Base_Int = global_data.Base__Int,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base_Printf = global_data.Base__Printf,
    Md5_lib = global_data.Md5_lib,
    sexp_of_t = Base_String[28],
    of_string = Base_String[29],
    to_string = Base_String[30],
    t_of_sexp = Base_String[27],
    sexp_of_t$0 = Base_String[28],
    of_string$0 = Base_String[29],
    to_string$0 = Base_String[30],
    compare = Base_String[37],
    cst_Location_s = "%{Location}: %s",
    _a_ = [11, ": ", [2, 0, 0]],
    _b_ = [0, 0],
    _e_ = [0, 17724, 0],
    _f_ =
      [0,
       [11,
        "Different shapes for duplicated polymorphic constructor: `",
        [2, 0, 0]],
       "Different shapes for duplicated polymorphic constructor: `%s"];
   function eval_fail(loc, fmt){
    return caml_call2
            (Base_Printf[4],
             function(s){
              var
               _dP_ =
                 caml_call3
                  (Base_Printf[2],
                   [0,
                    [24,
                     _b_,
                     function(param, custom_printf_001){
                      return caml_call1(to_string, custom_printf_001);
                     },
                     _a_],
                    cst_Location_s],
                   loc,
                   s);
              return caml_call1(Base[200], _dP_);
             },
             fmt);
   }
   function equal_option(equal, a, b){
    if(a){
     if(b){var y = b[1], x = a[1]; return caml_call2(equal, x, y);}
    }
    else if(! b) return 1;
    return 0;
   }
   function create(loc, eq, xs$1){
    var
     sorted =
       caml_call2
        (Base_List[62],
         xs$1,
         function(param, _dO_){
          var s2 = _dO_[1], s1 = param[1];
          return caml_call2(Base_String[37], s1, s2);
         });
    if(sorted){
     var
      xs$0 = sorted[2],
      match$0 = sorted[1],
      last_value$1 = match$0[2],
      last_key$1 = match$0[1],
      acc$1 = [0, [0, last_key$1, last_value$1], 0],
      acc = acc$1,
      last_key = last_key$1,
      last_value = last_value$1,
      param = xs$0;
     for(;;){
      if(! param){
       var match$1 = [0, 17724, caml_call1(Base_List[38], acc)];
       break;
      }
      var
       xs = param[2],
       match = param[1],
       last_value$0 = match[2],
       last_key$0 = match[1];
      if(caml_call2(Base_String[33], last_key, last_key$0)){
       if(! caml_call2(eq, last_value, last_value$0)){
        var match$1 = [0, -1062743954, last_key$0];
        break;
       }
       param = xs;
      }
      else{
       var acc$0 = [0, [0, last_key$0, last_value$0], acc];
       acc = acc$0;
       last_key = last_key$0;
       last_value = last_value$0;
       param = xs;
      }
     }
    }
    else
     var match$1 = _e_;
    if(17724 <= match$1[1]){var sorted$0 = match$1[2]; return [0, sorted$0];}
    var s = match$1[2];
    return caml_call2(eval_fail(loc, _f_), s, 0);
   }
   function map(t, f){
    return [0,
            caml_call2
             (Base_List[76],
              t[1],
              function(param){
               var v = param[2], k = param[1];
               return [0, k, caml_call1(f, v)];
              })];
   }
   var
    compare$0 = Md5_lib[1],
    to_binary = Md5_lib[3],
    to_hex = Md5_lib[6],
    of_hex_exn = Md5_lib[7],
    string = Md5_lib[8],
    _c_ = [0, "shape/src/bin_shape.ml", 33, 2],
    cst_sorted = cst_sorted$0,
    _d_ = [0, cst_sorted$0],
    _g_ = [0, ""],
    cst_some = "some",
    cst_none = "none",
    _h_ = [0, cst_Annotate],
    _i_ = [0, cst_Base],
    _j_ = [0, cst_Tuple],
    _k_ = [0, cst_Record],
    _l_ = [0, cst_Variant],
    _m_ = [0, cst_Poly_variant],
    _n_ = [0, cst_Application],
    _o_ = [0, cst_Rec_app],
    _p_ = [0, cst_Var],
    _q_ = [0, "..."],
    cst_annotate = cst_annotate$0,
    cst_base = cst_base$0,
    cst_tuple = cst_tuple$0,
    cst_record = cst_record$0,
    cst_variant = cst_variant$0,
    cst_poly_variant = cst_poly_variant$0,
    cst_application = cst_application$0,
    cst_rec_app = cst_rec_app$0,
    cst_var = cst_var$0;
   function to_md5(t){return t;}
   function of_md5(t){return t;}
   function sexp_of_t$1(t){
    var _dN_ = caml_call1(to_hex, t);
    return caml_call1(Base[164], _dN_);
   }
   function t_of_sexp$0(s){
    return caml_call1(of_hex_exn, caml_call1(Base[163], s));
   }
   function uuid(u){return caml_call1(string, caml_call1(to_string$0, u));}
   function int$0(x){return caml_call1(string, caml_call1(Base_Int[11], x));}
   function pair(x, y){
    var _dL_ = caml_call1(to_binary, y), _dM_ = caml_call1(to_binary, x);
    return caml_call1(string, caml_call2(Base[197], _dM_, _dL_));
   }
   function list(l){
    var _dK_ = caml_call2(Base_List[76], l, to_binary);
    return caml_call1(string, caml_call2(Base_String[54], _g_, _dK_));
   }
   function constructor(s, l){
    var _dJ_ = caml_call1(to_binary, list(l));
    return caml_call1(string, caml_call2(Base[197], s, _dJ_));
   }
   function t_of_sexp$1(of_a_039, sexp_044){
    a:
    {
     if(0 === sexp_044[0]){
      var
       _du_ = sexp_044[1],
       _dv_ = caml_string_compare(_du_, cst_annotate$0);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              if(0 <= _dv_){
               if(0 < _dv_){
                if(_du_ === cst_application$0) break i;
                if(_du_ === cst_base$0) break h;
                if(_du_ === cst_poly_variant$0) break g;
                if(_du_ === cst_rec_app$0) break f;
                if(_du_ === cst_record$0) break e;
                if(_du_ === cst_tuple$0) break d;
                if(_du_ === cst_var$0) break c;
                if(_du_ !== cst_variant$0) break a;
                break b;
               }
              }
              else if(_du_ !== cst_Annotate){
               if(_du_ === cst_Application) break i;
               if(_du_ === cst_Base) break h;
               if(_du_ === cst_Poly_variant) break g;
               if(_du_ === cst_Rec_app) break f;
               if(_du_ === cst_Record) break e;
               if(_du_ === cst_Tuple) break d;
               if(_du_ === cst_Var) break c;
               if(_du_ !== cst_Variant) break a;
               break b;
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_042, sexp_044);
     }
     var _dw_ = sexp_044[1];
     if(! _dw_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_042, sexp_044);
     var _dx_ = _dw_[1];
     if(0 !== _dx_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_042, sexp_044);
     var
      tag_045 = _dx_[1],
      _dy_ = caml_string_compare(tag_045, cst_annotate$0);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             if(0 <= _dy_){
              if(0 < _dy_){
               if(tag_045 === cst_application$0) break i;
               if(tag_045 === cst_base$0) break h;
               if(tag_045 === cst_poly_variant$0) break g;
               if(tag_045 === cst_rec_app$0) break f;
               if(tag_045 === cst_record$0) break e;
               if(tag_045 === cst_tuple$0) break d;
               if(tag_045 === cst_var$0) break c;
               if(tag_045 !== cst_variant$0) break a;
               break b;
              }
             }
             else if(tag_045 !== cst_Annotate){
              if(tag_045 === cst_Application) break i;
              if(tag_045 === cst_Base) break h;
              if(tag_045 === cst_Poly_variant) break g;
              if(tag_045 === cst_Rec_app) break f;
              if(tag_045 === cst_Record) break e;
              if(tag_045 === cst_Tuple) break d;
              if(tag_045 === cst_Var) break c;
              if(tag_045 !== cst_Variant) break a;
              break b;
             }
             var sexp_args_046 = _dw_[2];
             if(sexp_args_046){
              var _dC_ = sexp_args_046[2];
              if(_dC_ && ! _dC_[2]){
               var
                arg1_048 = _dC_[1],
                arg0_047 = sexp_args_046[1],
                res0_049 = caml_call1(t_of_sexp, arg0_047),
                res1_050 = caml_call1(of_a_039, arg1_048);
               return [0, res0_049, res1_050];
              }
             }
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_042,
                      tag_045,
                      sexp_044);
            }
            var sexp_args_090 = _dw_[2];
            if(sexp_args_090){
             var _dB_ = sexp_args_090[2];
             if(_dB_ && ! _dB_[2]){
              var
               arg1_092 = _dB_[1],
               arg0_091 = sexp_args_090[1],
               res0_093 = caml_call1(of_a_039, arg0_091),
               res1_094 = caml_call2(Base[138], of_a_039, arg1_092);
              return [6, res0_093, res1_094];
             }
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_042,
                     tag_045,
                     sexp_044);
           }
           var sexp_args_053 = _dw_[2];
           if(sexp_args_053){
            var _dA_ = sexp_args_053[2];
            if(_dA_ && ! _dA_[2]){
             var
              arg1_055 = _dA_[1],
              arg0_054 = sexp_args_053[1],
              res0_056 = caml_call1(t_of_sexp, arg0_054),
              res1_057 = caml_call2(Base[138], of_a_039, arg1_055);
             return [1, res0_056, res1_057];
            }
           }
           return caml_call3
                   (Sexplib0_Sexp_conv_error[4],
                    error_source_042,
                    tag_045,
                    sexp_044);
          }
          var sexp_args_085 = _dw_[2];
          if(sexp_args_085 && ! sexp_args_085[2]){
           var
            arg0_086 = sexp_args_085[1],
            of_a_010 = caml_call1(Base[151], of_a_039);
           if(0 === arg0_086[0])
            var
             res0_087 =
               caml_call2
                (Sexplib0_Sexp_conv_error[16], error_source_026, arg0_086);
           else{
            var
             field_sexps_013 = arg0_086[1],
             sorted_014 = [0, 0],
             duplicates_016 = [0, 0],
             extra_017 = [0, 0];
            g:
            {
             h:
             i:
             j:
             {
              k:
              {
               var param = field_sexps_013;
               for(;;){
                if(! param) break;
                var sexp_012 = param[1];
                if(1 !== sexp_012[0]) break h;
                var _ds_ = sexp_012[1];
                if(! _ds_) break i;
                var _dt_ = _ds_[1];
                if(0 !== _dt_[0]) break k;
                var field_sexps_020 = _ds_[2], field_name_018 = _dt_[1];
                if(field_sexps_020 && field_sexps_020[2]) break j;
                var tail_029 = param[2];
                if(field_name_018 !== cst_sorted$0){
                 if(Sexplib0_Sexp_conv[26][1])
                  extra_017[1] = [0, field_name_018, extra_017[1]];
                }
                else if(sorted_014[1])
                 duplicates_016[1] = [0, field_name_018, duplicates_016[1]];
                else{
                 if(field_sexps_020){
                  if(field_sexps_020[2])
                   throw caml_maybe_attach_backtrace
                          ([0, Assert_failure, _c_], 1);
                  var x_030 = field_sexps_020[1], field_sexp_019 = x_030;
                 }
                 else
                  var
                   field_sexp_019 =
                     caml_call2
                      (Sexplib0_Sexp_conv_error[10], error_source_026, arg0_086);
                 var
                  fvalue_027 =
                    caml_call2
                     (Base[138],
                      function(sexp_025){
                       if(1 === sexp_025[0]){
                        var _dH_ = sexp_025[1];
                        if(_dH_){
                         var _dI_ = _dH_[2];
                         if(_dI_ && ! _dI_[2]){
                          var
                           arg1_022 = _dI_[1],
                           arg0_021 = _dH_[1],
                           res0_023 = caml_call1(Base[163], arg0_021),
                           res1_024 = caml_call1(of_a_010, arg1_022);
                          return [0, res0_023, res1_024];
                         }
                        }
                       }
                       return caml_call3
                               (Sexplib0_Sexp_conv_error[2], error_source_026, 2, sexp_025);
                      },
                      field_sexp_019);
                 sorted_014[1] = [0, fvalue_027];
                }
                param = tail_029;
               }
               break g;
              }
              break i;
             }
             caml_call2
              (Sexplib0_Sexp_conv_error[10], error_source_026, sexp_012);
            }
            if(duplicates_016[1])
             var
              res0_087 =
                caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_026,
                  duplicates_016[1],
                  arg0_086);
            else if(extra_017[1])
             var
              res0_087 =
                caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_026,
                  extra_017[1],
                  arg0_086);
            else{
             var match = sorted_014[1];
             if(match)
              var sorted_015 = match[1], res0_087 = [0, sorted_015];
             else
              var
               res0_087 =
                 caml_call3
                  (Sexplib0_Sexp_conv_error[15],
                   error_source_026,
                   arg0_086,
                   [0, [0, 0 === sorted_014[1] ? 1 : 0, cst_sorted], 0]);
            }
           }
           return [5, res0_087];
          }
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_042,
                   tag_045,
                   sexp_044);
         }
         var sexp_args_097 = _dw_[2];
         if(sexp_args_097){
          var _dz_ = sexp_args_097[2];
          if(_dz_ && ! _dz_[2]){
           var
            arg1_099 = _dz_[1],
            arg0_098 = sexp_args_097[1],
            res0_100 = caml_call1(Base[118], arg0_098),
            res1_101 = caml_call2(Base[138], of_a_039, arg1_099);
           return [7, res0_100, res1_101];
          }
         }
         return caml_call3
                 (Sexplib0_Sexp_conv_error[4],
                  error_source_042,
                  tag_045,
                  sexp_044);
        }
        var sexp_args_065 = _dw_[2];
        if(sexp_args_065 && ! sexp_args_065[2]){
         var
          arg0_071 = sexp_args_065[1],
          res0_072 =
            caml_call2
             (Base[138],
              function(sexp_070){
               if(1 === sexp_070[0]){
                var _dF_ = sexp_070[1];
                if(_dF_){
                 var _dG_ = _dF_[2];
                 if(_dG_ && ! _dG_[2]){
                  var
                   arg1_067 = _dG_[1],
                   arg0_066 = _dF_[1],
                   res0_068 = caml_call1(Base[163], arg0_066),
                   res1_069 = caml_call1(of_a_039, arg1_067);
                  return [0, res0_068, res1_069];
                 }
                }
               }
               return caml_call3
                       (Sexplib0_Sexp_conv_error[2], error_source_042, 2, sexp_070);
              },
              arg0_071);
         return [3, res0_072];
        }
        return caml_call3
                (Sexplib0_Sexp_conv_error[4],
                 error_source_042,
                 tag_045,
                 sexp_044);
       }
       var sexp_args_060 = _dw_[2];
       if(sexp_args_060 && ! sexp_args_060[2]){
        var
         arg0_061 = sexp_args_060[1],
         res0_062 = caml_call2(Base[138], of_a_039, arg0_061);
        return [2, res0_062];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_042,
                tag_045,
                sexp_044);
      }
      var sexp_args_104 = _dw_[2];
      if(sexp_args_104 && ! sexp_args_104[2]){
       var
        arg0_105 = sexp_args_104[1],
        res0_106 = caml_call1(Base[118], arg0_105);
       return [8, res0_106];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_042,
               tag_045,
               sexp_044);
     }
     var sexp_args_075 = _dw_[2];
     if(sexp_args_075 && ! sexp_args_075[2]){
      var
       arg0_081 = sexp_args_075[1],
       res0_082 =
         caml_call2
          (Base[138],
           function(sexp_080){
            if(1 === sexp_080[0]){
             var _dD_ = sexp_080[1];
             if(_dD_){
              var _dE_ = _dD_[2];
              if(_dE_ && ! _dE_[2]){
               var
                arg1_077 = _dE_[1],
                arg0_076 = _dD_[1],
                res0_078 = caml_call1(Base[163], arg0_076),
                res1_079 = caml_call2(Base[138], of_a_039, arg1_077);
               return [0, res0_078, res1_079];
              }
             }
            }
            return caml_call3
                    (Sexplib0_Sexp_conv_error[2], error_source_042, 2, sexp_080);
           },
           arg0_081);
      return [4, res0_082];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_042,
              tag_045,
              sexp_044);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_042, sexp_044);
   }
   function sexp_of_t$2(of_a_108, param){
    switch(param[0]){
      case 0:
       var
        arg1_110 = param[2],
        arg0_109 = param[1],
        res0_111 = caml_call1(sexp_of_t$0, arg0_109),
        res1_112 = caml_call1(of_a_108, arg1_110);
       return [1, [0, _h_, [0, res0_111, [0, res1_112, 0]]]];
      case 1:
       var
        arg1_114 = param[2],
        arg0_113 = param[1],
        res0_115 = caml_call1(sexp_of_t$0, arg0_113),
        res1_116 = caml_call2(Base[139], of_a_108, arg1_114);
       return [1, [0, _i_, [0, res0_115, [0, res1_116, 0]]]];
      case 2:
       var
        arg0_117 = param[1],
        res0_118 = caml_call2(Base[139], of_a_108, arg0_117);
       return [1, [0, _j_, [0, res0_118, 0]]];
      case 3:
       var
        arg0_123 = param[1],
        res0_124 =
          caml_call2
           (Base[139],
            function(param){
             var
              arg1_120 = param[2],
              arg0_119 = param[1],
              res0_121 = caml_call1(Base[164], arg0_119),
              res1_122 = caml_call1(of_a_108, arg1_120);
             return [1, [0, res0_121, [0, res1_122, 0]]];
            },
            arg0_123);
       return [1, [0, _k_, [0, res0_124, 0]]];
      case 4:
       var
        arg0_129 = param[1],
        res0_130 =
          caml_call2
           (Base[139],
            function(param){
             var
              arg1_126 = param[2],
              arg0_125 = param[1],
              res0_127 = caml_call1(Base[164], arg0_125),
              res1_128 = caml_call2(Base[139], of_a_108, arg1_126);
             return [1, [0, res0_127, [0, res1_128, 0]]];
            },
            arg0_129);
       return [1, [0, _l_, [0, res0_130, 0]]];
      case 5:
       var
        arg0_131 = param[1],
        of_a_031 = caml_call1(Base[152], of_a_108),
        sorted_033 = arg0_131[1],
        arg_034 =
          caml_call2
           (Base[139],
            function(param){
             var
              arg1_036 = param[2],
              arg0_035 = param[1],
              res0_037 = caml_call1(Base[164], arg0_035),
              res1_038 = caml_call1(of_a_031, arg1_036);
             return [1, [0, res0_037, [0, res1_038, 0]]];
            },
            sorted_033),
        bnds_032 = [0, [1, [0, _d_, [0, arg_034, 0]]], 0],
        res0_132 = [1, bnds_032];
       return [1, [0, _m_, [0, res0_132, 0]]];
      case 6:
       var
        arg1_134 = param[2],
        arg0_133 = param[1],
        res0_135 = caml_call1(of_a_108, arg0_133),
        res1_136 = caml_call2(Base[139], of_a_108, arg1_134);
       return [1, [0, _n_, [0, res0_135, [0, res1_136, 0]]]];
      case 7:
       var
        arg1_138 = param[2],
        arg0_137 = param[1],
        res0_139 = caml_call1(Base[119], arg0_137),
        res1_140 = caml_call2(Base[139], of_a_108, arg1_138);
       return [1, [0, _o_, [0, res0_139, [0, res1_140, 0]]]];
      default:
       var arg0_141 = param[1], res0_142 = caml_call1(Base[119], arg0_141);
       return [1, [0, _p_, [0, res0_142, 0]]];
    }
   }
   function map$0(x, f){
    switch(x[0]){
      case 0:
       var x$0 = x[2], u = x[1]; return [0, u, caml_call1(f, x$0)];
      case 1:
       var xs = x[2], s = x[1];
       return [1, s, caml_call2(Base_List[76], xs, f)];
      case 2:
       var xs$0 = x[1]; return [2, caml_call2(Base_List[76], xs$0, f)];
      case 3:
       var l = x[1];
       return [3,
               caml_call2
                (Base_List[76],
                 l,
                 function(param){
                  var x = param[2], s = param[1];
                  return [0, s, caml_call1(f, x)];
                 })];
      case 4:
       var l$0 = x[1];
       return [4,
               caml_call2
                (Base_List[76],
                 l$0,
                 function(param){
                  var xs = param[2], s = param[1];
                  return [0, s, caml_call2(Base_List[76], xs, f)];
                 })];
      case 5:
       var t = x[1], _dp_ = Base_Option[21];
       return [5, map(t, function(_dr_){return caml_call2(_dp_, _dr_, f);})];
      case 6:
       var l$1 = x[2], x$1 = x[1], _dq_ = caml_call2(Base_List[76], l$1, f);
       return [6, caml_call1(f, x$1), _dq_];
      case 7:
       var l$2 = x[2], t$0 = x[1];
       return [7, t$0, caml_call2(Base_List[76], l$2, f)];
      default: var v = x[1]; return [8, v];
    }
   }
   function to_string$1(t){
    var _do_ = sexp_of_t$2(function(param){return _q_;}, t);
    return caml_call1(Base[84][15], _do_);
   }
   function digest_layer(param){
    switch(param[0]){
      case 0:
       var x = param[2], u = param[1];
       return constructor(cst_annotate, [0, uuid(u), [0, x, 0]]);
      case 1:
       var l = param[2], u$0 = param[1], _dk_ = [0, list(l), 0];
       return constructor(cst_base, [0, uuid(u$0), _dk_]);
      case 2:
       var l$0 = param[1]; return constructor(cst_tuple, [0, list(l$0), 0]);
      case 3:
       var l$1 = param[1];
       return constructor
               (cst_record,
                [0,
                 list
                  (caml_call2
                    (Base_List[76],
                     l$1,
                     function(param){
                      var t = param[2], s = param[1];
                      return pair(caml_call1(string, s), t);
                     })),
                 0]);
      case 4:
       var l$2 = param[1];
       return constructor
               (cst_variant,
                [0,
                 list
                  (caml_call2
                    (Base_List[76],
                     l$2,
                     function(param){
                      var l = param[2], s = param[1], _dn_ = list(l);
                      return pair(caml_call1(string, s), _dn_);
                     })),
                 0]);
      case 5:
       var table = param[1];
       return constructor
               (cst_poly_variant,
                [0,
                 list
                  (caml_call2
                    (Base_List[76],
                     table[1],
                     function(param){
                      var y = param[2], x$0 = param[1];
                      if(y)
                       var x = y[1], _dm_ = constructor(cst_some, [0, x, 0]);
                      else
                       var _dm_ = constructor(cst_none, 0);
                      return pair(caml_call1(string, x$0), _dm_);
                     })),
                 0]);
      case 6:
       var l$3 = param[2], x$0 = param[1];
       return constructor(cst_application, [0, x$0, [0, list(l$3), 0]]);
      case 7:
       var l$4 = param[2], n = param[1], _dl_ = [0, list(l$4), 0];
       return constructor(cst_rec_app, [0, int$0(n), _dl_]);
      default:
       var n$0 = param[1]; return constructor(cst_var, [0, int$0(n$0), 0]);
    }
   }
   function to_digest(param){var x = param[1]; return x;}
   function to_digest$0(x){
    switch(x[0]){
      case 0:
       var x$0 = x[1]; return digest_layer([5, x$0]);
      case 1:
       var x$1 = x[1][2]; return x$1;
      default: var x$2 = x[1]; return x$2;
    }
   }
   function equal(x, y){
    var _dj_ = to_digest$0(y);
    return 0 === caml_call2(compare$0, to_digest$0(x), _dj_) ? 1 : 0;
   }
   function opaque(x){return [2, to_digest$0(x)];}
   function create$0(x){
    var x$0 = map$0(x, to_digest$0), desc = to_string$1(x$0);
    switch(x$0[0]){
      case 0:
       return [1, [0, desc, digest_layer(x$0)]];
      case 1:
       return [1, [0, desc, digest_layer(x$0)]];
      case 5:
       var l = x$0[1]; return [0, l];
      case 6:
       return [1, [0, desc, digest_layer(x$0)]];
      case 7:
       return [1, [0, desc, digest_layer(x$0)]];
      default: return [1, [0, desc, digest_layer(x$0)]];
    }
   }
   function var$0(x){return create$0([8, x]);}
   function apply(def, l){return create$0([6, def, l]);}
   function recurse(tid, l){return create$0([7, tid, l]);}
   function get_poly_variant(x){
    if(1 === x[0]){var desc = x[1][1]; return [1, desc];}
    var l = x[1], _dg_ = Base_Option[21];
    function _dh_(x){return [2, x];}
    return [0, map(l, function(_di_){return caml_call2(_dg_, _di_, _dh_);})];
   }
   var Def = [0];
   function annotate(u, x){return create$0([0, u, x]);}
   function basetype(u, l){return create$0([1, u, l]);}
   function tuple(l){return create$0([2, l]);}
   function poly_variant(loc, l){
    return create$0
            ([5,
              create
               (loc,
                function(_de_, _df_){return equal_option(equal, _de_, _df_);},
                l)]);
   }
   function var$1(x){return create$0([8, x]);}
   function apply$0(x, l){return create$0([6, x, l]);}
   function recurse$0(t, l){return create$0([7, t, l]);}
   function define(x){return x;}
   function record(l){return create$0([3, l]);}
   function variant(l){return create$0([4, l]);}
   function create$1(e){return [0, to_digest$0(e)];}
   var
    Canonical_digest =
      [0,
       to_digest,
       [0, var$0, recurse, apply, opaque, get_poly_variant],
       Def,
       [0,
        annotate,
        basetype,
        tuple,
        poly_variant,
        var$1,
        recurse$0,
        apply$0,
        define,
        record,
        variant,
        create$1]];
   function compare_t0$0(counter, a_198, b_199){
    if(caml_call2(Ppx_compare_lib[1], a_198, b_199)) return 0;
    var b_201 = b_199[1], a_200 = a_198[1];
    if(caml_call2(Ppx_compare_lib[1], a_200, b_201)) return 0;
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          switch(a_200[0]){
            case 0:
             var a_146 = a_200[1];
             if(0 !== b_201[0]) return -1;
             var
              b_149 = b_201[2],
              b_147 = b_201[1],
              a_148 = a_200[2],
              n = caml_call2(compare, a_146, b_147);
             if(0 !== n) return n;
             if(counter >= 50)
              return caml_trampoline_return(compare_t0$0, [0, a_148, b_149]);
             var counter$0 = counter + 1 | 0;
             return compare_t0$0(counter$0, a_148, b_149);
            case 1:
             var a_152 = a_200[2], a_150 = a_200[1];
             switch(b_201[0]){
               case 0:
                break a;
               case 1:
                var
                 b_153 = b_201[2],
                 b_151 = b_201[1],
                 n$0 = caml_call2(compare, a_150, b_151);
                return 0 === n$0
                        ? caml_call3
                          (Base[135],
                           function(a_154, b_155){return compare_t0(a_154, b_155);},
                           a_152,
                           b_153)
                        : n$0;
               default: return -1;
             }
            case 2:
             var a_156 = a_200[1];
             switch(b_201[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                var b_157 = b_201[1];
                return caml_call3
                        (Base[135],
                         function(a_158, b_159){return compare_t0(a_158, b_159);},
                         a_156,
                         b_157);
               default: return -1;
             }
            case 3:
             var a_160 = a_200[1];
             switch(b_201[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                var b_161 = b_201[1];
                return caml_call3
                        (Base[135],
                         function(a_162, b_163){
                          var
                           t_165 = a_162[2],
                           t_164 = a_162[1],
                           t_167 = b_163[2],
                           t_166 = b_163[1],
                           n = caml_call2(Base[159], t_164, t_166);
                          return 0 === n ? compare_t0(t_165, t_167) : n;
                         },
                         a_160,
                         b_161);
               default: return -1;
             }
            case 4:
             var a_168 = a_200[1];
             switch(b_201[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                var b_169 = b_201[1];
                return caml_call3
                        (Base[135],
                         function(a_170, b_171){
                          var
                           t_173 = a_170[2],
                           t_172 = a_170[1],
                           t_175 = b_171[2],
                           t_174 = b_171[1],
                           n = caml_call2(Base[159], t_172, t_174);
                          return 0 === n
                                  ? caml_call3
                                    (Base[135],
                                     function(a_176, b_177){return compare_t0(a_176, b_177);},
                                     t_173,
                                     t_175)
                                  : n;
                         },
                         a_168,
                         b_169);
               default: return -1;
             }
            case 5:
             var a_002 = a_200[1];
             switch(b_201[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                var b_179 = b_201[1];
                return caml_call2(Ppx_compare_lib[1], a_002, b_179)
                        ? 0
                        : caml_call3
                          (Base[135],
                           function(a_004, b_005){
                            var
                             t_007 = a_004[2],
                             t_006 = a_004[1],
                             t_009 = b_005[2],
                             t_008 = b_005[1],
                             n = caml_call2(Base[159], t_006, t_008);
                            return 0 === n
                                    ? caml_call3
                                      (Base[148],
                                       function(a_182, b_183){return compare_t0(a_182, b_183);},
                                       t_007,
                                       t_009)
                                    : n;
                           },
                           a_002[1],
                           b_179[1]);
               default: return -1;
             }
            case 6:
             var a_186 = a_200[2], a_184 = a_200[1];
             switch(b_201[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
               case 6:
                var
                 b_187 = b_201[2],
                 b_185 = b_201[1],
                 n$2 = compare_t0(a_184, b_185);
                return 0 === n$2
                        ? caml_call3
                          (Base[135],
                           function(a_188, b_189){return compare_t0(a_188, b_189);},
                           a_186,
                           b_187)
                        : n$2;
               default: return -1;
             }
            case 7:
             var a_192 = a_200[2], a_190 = a_200[1];
             switch(b_201[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
               case 6: break;
               case 7:
                var
                 b_193 = b_201[2],
                 b_191 = b_201[1],
                 n$1 = caml_call2(Base[114], a_190, b_191);
                return 0 === n$1
                        ? caml_call3
                          (Base[135],
                           function(a_194, b_195){return compare_t0(a_194, b_195);},
                           a_192,
                           b_193)
                        : n$1;
               default: return -1;
             }
             break;
            default:
             var a_196 = a_200[1];
             switch(b_201[0]){
               case 0:
                break a;
               case 1:
                break b;
               case 2:
                break c;
               case 3:
                break d;
               case 4:
                break e;
               case 5:
                break f;
               case 6: break;
               case 7:
                return 1;
               default:
                var b_197 = b_201[1];
                return caml_call2(Base[114], a_196, b_197);
             }
          }
          return 1;
         }
         return 1;
        }
        return 1;
       }
       return 1;
      }
      return 1;
     }
     return 1;
    }
    return 1;
   }
   function compare_t0(a_198, b_199){
    return caml_trampoline(compare_t0$0(0, a_198, b_199));
   }
   var t0_of_sexp = function _dd_(_dc_){return _dd_.fun(_dc_);};
   runtime.caml_update_dummy
    (t0_of_sexp,
     function(sexp_208){
      a:
      {
       if(0 === sexp_208[0]){
        var _c$_ = sexp_208[1];
        if(_c$_ !== cst_Exp && _c$_ !== cst_exp) break a;
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_206, sexp_208);
       }
       var _da_ = sexp_208[1];
       if(! _da_)
        return caml_call2
                (Sexplib0_Sexp_conv_error[7], error_source_206, sexp_208);
       var _db_ = _da_[1];
       if(0 !== _db_[0])
        return caml_call2
                (Sexplib0_Sexp_conv_error[6], error_source_206, sexp_208);
       var tag_209 = _db_[1];
       if(tag_209 !== cst_Exp && tag_209 !== cst_exp) break a;
       var sexp_args_210 = _da_[2];
       if(sexp_args_210 && ! sexp_args_210[2]){
        var
         arg0_211 = sexp_args_210[1],
         res0_212 = t_of_sexp$1(t0_of_sexp, arg0_211);
        return [0, res0_212];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_206,
                tag_209,
                sexp_208);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[8], error_source_206, sexp_208);
     });
   var _r_ = [0, cst_Exp];
   function sexp_of_t0(param){
    var arg0_213 = param[1], res0_214 = sexp_of_t$2(sexp_of_t0, arg0_213);
    return [1, [0, _r_, [0, res0_214, 0]]];
   }
   function equal_t0(x, y){return 0 === compare_t0(x, y) ? 1 : 0;}
   function var$2(x){return [0, [8, x]];}
   function apply$1(d, xs){return [0, [6, d, xs]];}
   function recurse$1(r, xs){return [0, [7, r, xs]];}
   function get_poly_variant$0(param){
    var cc = param[1];
    if(5 !== cc[0]) return [1, to_string$1(cc)];
    var tab = cc[1];
    return [0, tab];
   }
   function opaque$0(t){return t;}
   function to_digest$1(param){
    var e = param[1];
    return digest_layer(map$0(e, to_digest$1));
   }
   function to_digest$2(e){return to_digest$1(e);}
   function annotate$0(u, x){return [0, [0, u, x]];}
   function basetype$0(u, xs){return [0, [1, u, xs]];}
   function tuple$0(xs){return [0, [2, xs]];}
   function poly_variant$0(loc, xs){
    return [0,
            [5,
             create
              (loc,
               function(_c9_, _c__){
                return equal_option(equal_t0, _c9_, _c__);
               },
               xs)]];
   }
   function var$3(n){return [0, [8, n]];}
   function recurse$2(r, xs){return recurse$1(r, xs);}
   function apply$2(d, xs){return apply$1(d, xs);}
   function define$0(x){return x;}
   function record$0(xs){return [0, [3, xs]];}
   function variant$0(xs){return [0, [4, xs]];}
   function create$2(exp){return exp;}
   var
    Create =
      [0,
       annotate$0,
       basetype$0,
       tuple$0,
       poly_variant$0,
       var$3,
       recurse$2,
       apply$2,
       define$0,
       record$0,
       variant$0,
       create$2];
   function to_string_hum(t){
    var _c8_ = sexp_of_t0(t);
    return caml_call2(Base[84][13], 0, _c8_);
   }
   var
    Def$0 = [0],
    Exp1 = [0, var$2, recurse$1, apply$1, opaque$0, get_poly_variant$0],
    sexp_of_t$3 = Base_String[28],
    of_string$1 = Base_String[29],
    to_string$2 = Base_String[30],
    symbol = Base_String[33],
    compare$1 = Base_String[37],
    equal$0 = Base_String[121],
    sexp_of_t$4 = Base_String[28],
    of_string$2 = Base_String[29],
    to_string$3 = Base_String[30],
    comparator = Base_String[45],
    compare$2 = Base[114],
    sexp_of_t$5 = Base[119],
    r = [0, 0],
    _s_ = [0, "Constr"],
    _t_ = [0, "Inherit"],
    _u_ = [0, "members"],
    _v_ = [0, "loc"],
    _w_ = [0, "gid"],
    cst_impossible_lookup_group_un =
      "impossible: lookup_group, unbound type-identifier: %{Tid}",
    _x_ = [0, 0],
    cst_impossible_lookup_group_un$0 =
      "impossible: lookup_group, unbound type-identifier: ",
    _y_ = [0, cst_Annotate],
    _z_ = [0, cst_Base],
    _A_ = [0, cst_Record],
    _B_ = [0, cst_Variant],
    _C_ = [0, cst_Tuple],
    _D_ = [0, cst_Poly_variant],
    _E_ = [0, cst_Var],
    _F_ = [0, cst_Rec_app],
    _G_ = [0, "Top_app"];
   function create$3(loc, trips){
    var gid = r[1];
    r[1] = 1 + gid | 0;
    var
     members =
       caml_call2
        (Base_List[76],
         trips,
         function(param){
          var t = param[3], vs = param[2], x = param[1];
          return [0, x, [0, vs, t]];
         });
    return [0, gid, loc, members];
   }
   function lookup(g, tid){
    var match = caml_call3(Base_List[129][5], g[3], symbol, tid);
    if(! match)
     return caml_call2
             (eval_fail
               (g[2],
                [0,
                 [11,
                  cst_impossible_lookup_group_un$0,
                  [24,
                   _x_,
                   function(param, custom_printf_285){
                    return caml_call1(to_string$2, custom_printf_285);
                   },
                   0]],
                 cst_impossible_lookup_group_un]),
              tid,
              0);
    var scheme = match[1];
    return scheme;
   }
   function annotate$1(v0, v1){return [0, v0, v1];}
   function basetype$1(v0, v1){return [1, v0, v1];}
   function record$1(v0){return [2, v0];}
   function variant$1(v0){return [3, v0];}
   function tuple$1(v0){return [4, v0];}
   function rec_app(v0, v1){return [7, v0, v1];}
   function top_app(v0, v1, v2){return [8, v0, v1, v2];}
   function sexp_of_t$6(param){
    switch(param[0]){
      case 0:
       var
        arg1_287 = param[2],
        arg0_286 = param[1],
        res0_288 = caml_call1(sexp_of_t$0, arg0_286),
        res1_289 = sexp_of_t$6(arg1_287);
       return [1, [0, _y_, [0, res0_288, [0, res1_289, 0]]]];
      case 1:
       var
        arg1_291 = param[2],
        arg0_290 = param[1],
        res0_292 = caml_call1(sexp_of_t$0, arg0_290),
        res1_293 = caml_call2(Base[139], sexp_of_t$6, arg1_291);
       return [1, [0, _z_, [0, res0_292, [0, res1_293, 0]]]];
      case 2:
       var
        arg0_298 = param[1],
        res0_299 =
          caml_call2
           (Base[139],
            function(param){
             var
              arg1_295 = param[2],
              arg0_294 = param[1],
              res0_296 = caml_call1(Base[164], arg0_294),
              res1_297 = sexp_of_t$6(arg1_295);
             return [1, [0, res0_296, [0, res1_297, 0]]];
            },
            arg0_298);
       return [1, [0, _A_, [0, res0_299, 0]]];
      case 3:
       var
        arg0_304 = param[1],
        res0_305 =
          caml_call2
           (Base[139],
            function(param){
             var
              arg1_301 = param[2],
              arg0_300 = param[1],
              res0_302 = caml_call1(Base[164], arg0_300),
              res1_303 = caml_call2(Base[139], sexp_of_t$6, arg1_301);
             return [1, [0, res0_302, [0, res1_303, 0]]];
            },
            arg0_304);
       return [1, [0, _B_, [0, res0_305, 0]]];
      case 4:
       var
        arg0_306 = param[1],
        res0_307 = caml_call2(Base[139], sexp_of_t$6, arg0_306);
       return [1, [0, _C_, [0, res0_307, 0]]];
      case 5:
       var
        arg0_312 = param[1],
        arg1_309 = arg0_312[2],
        arg0_308 = arg0_312[1],
        res0_310 = caml_call1(sexp_of_t, arg0_308),
        res1_311 =
          caml_call2
           (Base[139],
            function(param){
             if(-59723313 <= param[1]){
              var
               v_245 = param[2],
               arg1_247 = v_245[2],
               arg0_246 = v_245[1],
               res0_248 = caml_call1(Base[164], arg0_246),
               res1_249 = caml_call2(Base[152], sexp_of_t$6, arg1_247);
              return [1,
                      [0, _s_, [0, [1, [0, res0_248, [0, res1_249, 0]]], 0]]];
             }
             var
              v_250 = param[2],
              arg1_252 = v_250[2],
              arg0_251 = v_250[1],
              res0_253 = caml_call1(sexp_of_t, arg0_251),
              res1_254 = sexp_of_t$6(arg1_252);
             return [1,
                     [0, _t_, [0, [1, [0, res0_253, [0, res1_254, 0]]], 0]]];
            },
            arg1_309),
        res0_313 = [1, [0, res0_310, [0, res1_311, 0]]];
       return [1, [0, _D_, [0, res0_313, 0]]];
      case 6:
       var
        arg0_318 = param[1],
        arg1_315 = arg0_318[2],
        arg0_314 = arg0_318[1],
        res0_316 = caml_call1(sexp_of_t, arg0_314),
        res1_317 = caml_call1(sexp_of_t$4, arg1_315),
        res0_319 = [1, [0, res0_316, [0, res1_317, 0]]];
       return [1, [0, _E_, [0, res0_319, 0]]];
      case 7:
       var
        arg1_321 = param[2],
        arg0_320 = param[1],
        res0_322 = caml_call1(sexp_of_t$3, arg0_320),
        res1_323 = caml_call2(Base[139], sexp_of_t$6, arg1_321);
       return [1, [0, _F_, [0, res0_322, [0, res1_323, 0]]]];
      default:
       var
        arg2_326 = param[3],
        arg1_325 = param[2],
        arg0_324 = param[1],
        members_275 = arg0_324[3],
        loc_273 = arg0_324[2],
        gid_271 = arg0_324[1],
        arg_276 =
          caml_call2
           (Base[139],
            function(param){
             var
              arg1_282 = param[2],
              arg0_281 = param[1],
              res0_283 = caml_call1(sexp_of_t$3, arg0_281),
              arg1_278 = arg1_282[2],
              arg0_277 = arg1_282[1],
              res0_279 = caml_call2(Base[139], sexp_of_t$4, arg0_277),
              res1_280 = sexp_of_t$6(arg1_278),
              res1_284 = [1, [0, res0_279, [0, res1_280, 0]]];
             return [1, [0, res0_283, [0, res1_284, 0]]];
            },
            members_275),
        bnds_270 = [0, [1, [0, _u_, [0, arg_276, 0]]], 0],
        arg_274 = caml_call1(sexp_of_t, loc_273),
        bnds_270$0 = [0, [1, [0, _v_, [0, arg_274, 0]]], bnds_270],
        arg_272 = caml_call1(sexp_of_t$5, gid_271),
        bnds_270$1 = [0, [1, [0, _w_, [0, arg_272, 0]]], bnds_270$0],
        res0_327 = [1, bnds_270$1],
        res1_328 = caml_call1(sexp_of_t$3, arg1_325),
        res2_329 = caml_call2(Base[139], sexp_of_t$6, arg2_326);
       return [1, [0, _G_, [0, res0_327, [0, res1_328, [0, res2_329, 0]]]]];
    }
   }
   function constr(s, t){return [0, -59723313, [0, s, t]];}
   function inherit(loc, t){return [0, -72987685, [0, loc, t]];}
   function var$4(loc, t){return [6, [0, loc, t]];}
   function poly_variant$1(loc, xs){return [5, [0, loc, xs]];}
   function is_cyclic_0(via_VR, group, tid){
    var set = [0, 0];
    function visited(tid){
     return caml_call3(Base_List[6], set[1], tid, equal$0);
    }
    function trav(param){
     var param$0 = param;
     for(;;){
      switch(param$0[0]){
        case 0:
         var t = param$0[2]; param$0 = t; continue;
        case 1:
         var ts = param$0[2]; break;
        case 2:
         var xs = param$0[1];
         return via_VR
                 ? caml_call2
                   (Base_List[9],
                    xs,
                    function(param){var t = param[2]; return trav(t);})
                 : 0;
        case 3:
         var xs$0 = param$0[1];
         return via_VR
                 ? caml_call2
                   (Base_List[9],
                    xs$0,
                    function(param){
                     var ts = param[2];
                     return caml_call2(Base_List[9], ts, trav);
                    })
                 : 0;
        case 4:
         var ts = param$0[1]; break;
        case 5:
         var cs = param$0[1][2];
         return caml_call2
                 (Base_List[9],
                  cs,
                  function(param){
                   if(-59723313 > param[1]){
                    var t$0 = param[2][2];
                    return trav(t$0);
                   }
                   var match = param[2][2];
                   if(! match) return 0;
                   var t = match[1];
                   return trav(t);
                  });
        case 6:
         return 0;
        case 7:
         var ts$0 = param$0[2], tid = param$0[1];
         if(! visited(tid)){set[1] = [0, tid, set[1]]; trav_tid(tid);}
         return caml_call2(Base_List[9], ts$0, trav);
        default: var ts = param$0[3];
      }
      return caml_call2(Base_List[9], ts, trav);
     }
    }
    function trav_tid(tid){
     var body = lookup(group, tid)[2];
     return trav(body);
    }
    trav_tid(tid);
    var res = visited(tid);
    return res;
   }
   var
    _H_ = 1,
    _I_ = 0,
    cst_Free_type_variable_Vid = "Free type variable: '%{Vid}",
    _J_ = [0, 0],
    cst_Free_type_variable = "Free type variable: '",
    _K_ =
      [0,
       [11,
        "The shape for an inherited type is not described as a polymorphic-variant: ",
        [2, 0, 0]],
       "The shape for an inherited type is not described as a polymorphic-variant: %s"],
    cst_apply_incorrect_type_appli = "apply, incorrect type application arity",
    cst_top_level = "top-level";
   function Evaluation(Canonical){
    var func = Base_List[10], _O_ = caml_call1(Base_Map[6], [0, comparator]);
    function _P_(t, param){
     var v = param[2], k = param[1];
     return caml_call3(Base_Map[28], t, k, v);
    }
    function create(_c7_){return caml_call3(func, _c7_, _O_, _P_);}
    function lookup$0(t, k){return caml_call2(Base_Map[36], t, k);}
    var Venv = [0, lookup$0, create];
    function compare(a_330, b_331){
     var
      t_333 = a_330[2],
      t_332 = a_330[1],
      t_335 = b_331[2],
      t_334 = b_331[1],
      n = caml_call2(compare$2, t_332, t_334);
     return 0 === n ? caml_call2(compare$1, t_333, t_335) : n;
    }
    function sexp_of_t(param){
     var
      arg1_337 = param[2],
      arg0_336 = param[1],
      res0_338 = caml_call1(sexp_of_t$5, arg0_336),
      res1_339 = caml_call1(sexp_of_t$3, arg1_337);
     return [1, [0, res0_338, [0, res1_339, 0]]];
    }
    var
     T = [0, compare, sexp_of_t],
     include = caml_call1(Base_Comparator[5], T),
     comparator$0 = include[1];
    function find(t, k){return caml_call2(Base_Map[36], t, k);}
    var empty = caml_call1(Base_Map[6], [0, comparator$0]);
    function extend(t, k, v){return caml_call3(Base_Map[28], t, k, v);}
    var Tenv = [0, find, empty, extend];
    function return$0(x, param, tenv){return x;}
    function bind(t, f, depth, tenv){
     var x = caml_call2(t, depth, tenv);
     return caml_call2(caml_call1(f, x), depth, tenv);
    }
    function look_env(key, param, tenv){
     var result = Tenv[1].call(null, tenv, key);
     return caml_call2
             (Base_Option[21],
              result,
              function(param){var x = param[2]; return [0, x];});
    }
    function extend_new_tid(key, def_t, depth, tenv){
     var
      value = [0, -271630457, depth],
      tenv$0 = Tenv[3].call(null, tenv, key, value);
     return [1, caml_call2(def_t, depth + 1 | 0, tenv$0)];
    }
    function exec(t){return caml_call2(t, 0, Tenv[2]);}
    var
     Defining = [0, return$0, bind, look_env, extend_new_tid, exec],
     symbol_bind = Defining[2],
     return$1 = Defining[1];
    function sequence_defining(xs, f){
     function loop(acc_ys, param){
      if(param){
       var
        xs = param[2],
        x = param[1],
        _cW_ = function(y){return loop([0, y, acc_ys], xs);},
        _cX_ = caml_call1(f, x);
       return function(_c3_, _c4_){
        var _c6_ = _c4_, _c5_ = _c3_;
        return symbol_bind(_cX_, _cW_, _c5_, _c6_);};
      }
      var _cY_ = caml_call1(Base_List[38], acc_ys);
      return function(_cZ_, _c0_){
       var _c2_ = _c0_, _c1_ = _cZ_;
       return return$1(_cY_, _c1_, _c2_);};
     }
     return loop(0, xs);
    }
    function _Q_(group, venv, t){
     switch(t[0]){
       case 0:
        var
         t$0 = t[2],
         s = t[1],
         _bg_ =
           function(v){
            var _cR_ = caml_call2(Canonical[4][1], s, v);
            return function(_cS_, _cT_){
             var _cV_ = _cT_, _cU_ = _cS_;
             return return$1(_cR_, _cU_, _cV_);};
           },
         _bh_ = _Q_(group, venv, t$0);
        return function(_cN_, _cO_){
         var _cQ_ = _cO_, _cP_ = _cN_;
         return symbol_bind(_bh_, _bg_, _cP_, _cQ_);};
       case 1:
        var
         ts = t[2],
         s$0 = t[1],
         _bi_ =
           function(vs){
            var _cI_ = caml_call2(Canonical[4][2], s$0, vs);
            return function(_cJ_, _cK_){
             var _cM_ = _cK_, _cL_ = _cJ_;
             return return$1(_cI_, _cL_, _cM_);};
           },
         _bj_ = eval_list(group, venv, ts);
        return function(_cE_, _cF_){
         var _cH_ = _cF_, _cG_ = _cE_;
         return symbol_bind(_bj_, _bi_, _cG_, _cH_);};
       case 2:
        var
         binds = t[1],
         _bk_ =
           function(binds){
            var _cz_ = caml_call1(Canonical[4][9], binds);
            return function(_cA_, _cB_){
             var _cD_ = _cB_, _cC_ = _cA_;
             return return$1(_cz_, _cC_, _cD_);};
           },
         _bl_ =
           sequence_defining
            (binds,
             function(param){
              var x = param[2], s = param[1];
              function _co_(y){
               var _cu_ = [0, s, y];
               return function(_cv_, _cw_){
                var _cy_ = _cw_, _cx_ = _cv_;
                return return$1(_cu_, _cx_, _cy_);};
              }
              var _cp_ = _Q_(group, venv, x);
              return function(_cq_, _cr_){
               var _ct_ = _cr_, _cs_ = _cq_;
               return symbol_bind(_cp_, _co_, _cs_, _ct_);};
             });
        return function(_ck_, _cl_){
         var _cn_ = _cl_, _cm_ = _ck_;
         return symbol_bind(_bl_, _bk_, _cm_, _cn_);};
       case 3:
        var
         alts = t[1],
         _bm_ =
           function(alts){
            var _cf_ = caml_call1(Canonical[4][10], alts);
            return function(_cg_, _ch_){
             var _cj_ = _ch_, _ci_ = _cg_;
             return return$1(_cf_, _ci_, _cj_);};
           },
         _bn_ =
           sequence_defining
            (alts,
             function(param){
              var xs = param[2], s = param[1];
              function _b6_(ys){
               var _ca_ = [0, s, ys];
               return function(_cb_, _cc_){
                var _ce_ = _cc_, _cd_ = _cb_;
                return return$1(_ca_, _cd_, _ce_);};
              }
              var _b7_ = eval_list(group, venv, xs);
              return function(_b8_, _b9_){
               var _b$_ = _b9_, _b__ = _b8_;
               return symbol_bind(_b7_, _b6_, _b__, _b$_);};
             });
        return function(_b2_, _b3_){
         var _b5_ = _b3_, _b4_ = _b2_;
         return symbol_bind(_bn_, _bm_, _b4_, _b5_);};
       case 4:
        var
         ts$0 = t[1],
         _bo_ =
           function(vs){
            var _bX_ = caml_call1(Canonical[4][3], vs);
            return function(_bY_, _bZ_){
             var _b1_ = _bZ_, _b0_ = _bY_;
             return return$1(_bX_, _b0_, _b1_);};
           },
         _bp_ = eval_list(group, venv, ts$0);
        return function(_bT_, _bU_){
         var _bW_ = _bU_, _bV_ = _bT_;
         return symbol_bind(_bp_, _bo_, _bV_, _bW_);};
       case 5:
        var
         match = t[1],
         cs = match[2],
         loc = match[1],
         _bq_ =
           function(xss){
            var
             _bN_ = caml_call1(Base_List[138], xss),
             _bO_ = caml_call2(Canonical[4][4], loc, _bN_);
            return function(_bP_, _bQ_){
             var _bS_ = _bQ_, _bR_ = _bP_;
             return return$1(_bO_, _bR_, _bS_);};
           },
         _br_ =
           sequence_defining
            (cs, function(_bM_){return eval_poly_constr(group, venv, _bM_);});
        return function(_bI_, _bJ_){
         var _bL_ = _bJ_, _bK_ = _bI_;
         return symbol_bind(_br_, _bq_, _bK_, _bL_);};
       case 6:
        var
         match$0 = t[1],
         vid = match$0[2],
         loc$0 = match$0[1],
         match$1 = Venv[1].call(null, venv, vid);
        if(! match$1)
         return caml_call2
                 (eval_fail
                   (loc$0,
                    [0,
                     [11,
                      cst_Free_type_variable,
                      [24,
                       _J_,
                       function(param, custom_printf_340){
                        return caml_call1(to_string$3, custom_printf_340);
                       },
                       0]],
                     cst_Free_type_variable_Vid]),
                  vid,
                  0);
        var x = match$1[1];
        return function(_bE_, _bF_){
         var _bH_ = _bF_, _bG_ = _bE_;
         return return$1(x, _bG_, _bH_);};
       case 7:
        var
         args = t[2],
         tid = t[1],
         _bs_ = function(args){return eval_app(group, tid, args);},
         _bt_ = eval_list(group, venv, args);
        return function(_bA_, _bB_){
         var _bD_ = _bB_, _bC_ = _bA_;
         return symbol_bind(_bt_, _bs_, _bC_, _bD_);};
       default:
        var
         args$0 = t[3],
         tid$0 = t[2],
         in_group = t[1],
         _bu_ = function(args){return eval_app(in_group, tid$0, args);},
         _bv_ = eval_list(group, venv, args$0);
        return function(_bw_, _bx_){
         var _bz_ = _bx_, _by_ = _bw_;
         return symbol_bind(_bv_, _bu_, _by_, _bz_);};
     }
    }
    function eval_list(group, venv, ts){
     return sequence_defining
             (ts, function(_bf_){return _Q_(group, venv, _bf_);});
    }
    function eval_poly_constr(group, venv, c){
     if(-59723313 > c[1]){
      var
       match$0 = c[2],
       t$0 = match$0[2],
       loc = match$0[1],
       _aT_ =
         function(v){
          var match = caml_call1(Canonical[2][5], v);
          if(0 === match[0]){
           var tab = match[1], _ba_ = tab[1];
           return function(_bb_, _bc_){
            var _be_ = _bc_, _bd_ = _bb_;
            return return$1(_ba_, _bd_, _be_);};
          }
          var desc = match[1];
          return caml_call2(eval_fail(loc, _K_), desc, 0);
         },
       _aU_ = _Q_(group, venv, t$0);
      return function(_a8_, _a9_){
       var _a$_ = _a9_, _a__ = _a8_;
       return symbol_bind(_aU_, _aT_, _a__, _a$_);};
     }
     var _aP_ = c[2], match = _aP_[2], s = _aP_[1];
     if(match){
      var
       t = match[1],
       _aQ_ =
         function(v){
          var _a3_ = [0, [0, s, [0, caml_call1(Canonical[2][4], v)]], 0];
          return function(_a4_, _a5_){
           var _a7_ = _a5_, _a6_ = _a4_;
           return return$1(_a3_, _a6_, _a7_);};
         },
       _aR_ = _Q_(group, venv, t);
      return function(_aZ_, _a0_){
       var _a2_ = _a0_, _a1_ = _aZ_;
       return symbol_bind(_aR_, _aQ_, _a1_, _a2_);};
     }
     var _aS_ = [0, [0, s, 0], 0];
     return function(_aV_, _aW_){
      var _aY_ = _aW_, _aX_ = _aV_;
      return return$1(_aS_, _aX_, _aY_);};
    }
    function eval_definition(group, formals, body){
     var
      _aD_ =
        caml_call2
         (Base_List[96],
          formals,
          function(i, x){return [0, x, caml_call1(Canonical[2][1], i)];}),
      venv = Venv[2].call(null, _aD_);
     function _aE_(v){
      var _aK_ = caml_call1(Canonical[4][8], v);
      return function(_aL_, _aM_){
       var _aO_ = _aM_, _aN_ = _aL_;
       return return$1(_aK_, _aN_, _aO_);};
     }
     var _aF_ = _Q_(group, venv, body);
     return function(_aG_, _aH_){
      var _aJ_ = _aH_, _aI_ = _aG_;
      return symbol_bind(_aF_, _aE_, _aI_, _aJ_);};
    }
    function eval_app(group, tid, args){
     var
      gid = group[1],
      match = lookup(group, tid),
      body = match[2],
      formals = match[1];
     switch(body[0]){
       case 2:
       case 3:
        var record_or_normal_variant = 1; break;
       default: var record_or_normal_variant = 0;
     }
     var
      cyclic = is_cyclic_0(_H_, group, tid),
      cyclic_no_VR = is_cyclic_0(_I_, group, tid);
     a:
     {
      if(record_or_normal_variant && cyclic) break a;
      if(! cyclic_no_VR){
       var match$0 = caml_call2(Base_List[94], formals, args);
       if(match$0)
        var x = match$0[1], venv = Venv[2].call(null, x);
       else
        var venv = caml_call1(Base[200], cst_apply_incorrect_type_appli);
       return _Q_(group, venv, body);
      }
     }
     function _S_(param){
      if(0 === param[0]){
       var r = param[1], _at_ = caml_call2(Canonical[2][2], r, args);
       return function(_az_, _aA_){
        var _aC_ = _aA_, _aB_ = _az_;
        return return$1(_at_, _aB_, _aC_);};
      }
      var def = param[1], _au_ = caml_call2(Canonical[2][3], def, args);
      return function(_av_, _aw_){
       var _ay_ = _aw_, _ax_ = _av_;
       return return$1(_au_, _ax_, _ay_);};
     }
     function _T_(param){
      if(param){
       var recurse = param[1];
       return function(_ap_, _aq_){
        var _as_ = _aq_, _ar_ = _ap_;
        return return$1(recurse, _ar_, _as_);};
      }
      var
       _ai_ = eval_definition(group, formals, body),
       _aj_ = [0, gid, tid],
       _ak_ = Defining[4];
      return function(_al_, _am_){
       var _ao_ = _am_, _an_ = _al_;
       return _ak_(_aj_, _ai_, _an_, _ao_);};
     }
     var _U_ = [0, gid, tid], _V_ = Defining[3];
     function _W_(_ae_, _af_){
      var _ah_ = _af_, _ag_ = _ae_;
      return _V_(_U_, _ag_, _ah_);
     }
     function _X_(_aa_, _ab_){
      var _ad_ = _ab_, _ac_ = _aa_;
      return symbol_bind(_W_, _T_, _ac_, _ad_);
     }
     return function(_Y_, _Z_){
      var _$_ = _Z_, ___ = _Y_;
      return symbol_bind(_X_, _S_, ___, _$_);};
    }
    function eval$0(t){
     var
      group = create$3(caml_call1(of_string, cst_top_level), 0),
      venv = Venv[2].call(null, 0),
      _R_ = _Q_(group, venv, t),
      v = Defining[5].call(null, _R_);
     return caml_call1(Canonical[4][11], v);
    }
    return [0, , , , , , , , , , , , eval$0];
   }
   var
    Exp = [0],
    include = Evaluation([0, to_digest$2, Exp1, Def$0, Create]),
    eval$0 = include[12],
    Evaluation_to_digest = Evaluation(Canonical_digest);
   function eval_to_digest(exp){
    var _N_ = Evaluation_to_digest[12].call(null, exp);
    return caml_call1(Canonical_digest[1], _N_);
   }
   function eval_to_digest_string(exp){
    return caml_call1(to_hex, eval_to_digest(exp));
   }
   var
    Not_a_tuple =
      [248,
       "Bin_shape_lib.Bin_shape.For_typerep.Not_a_tuple",
       runtime.caml_fresh_oo_id(0)],
    _L_ = [0, "shape/src/bin_shape.ml.For_typerep.Not_a_tuple"],
    _M_ = [0, "_none_", 0, -1];
   caml_call4
    (Sexplib0_Sexp_conv[70][1],
     0,
     0,
     Not_a_tuple,
     function(param){
      if(param[1] !== Not_a_tuple)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _M_], 1);
      var arg0_341 = param[2], res0_342 = sexp_of_t$6(arg0_341);
      return [1, [0, _L_, [0, res0_342, 0]]];
     });
   function deconstruct_tuple_exn(t){
    if(4 !== t[0]) throw caml_maybe_attach_backtrace([0, Not_a_tuple, t], 1);
    var ts = t[1];
    return ts;
   }
   var
    Bin_shape_lib_Bin_shape =
      [0,
       sexp_of_t$6,
       [0, of_string$1],
       [0, of_string$2],
       [0, of_string],
       [0, of_string$0],
       create$3,
       tuple$1,
       record$1,
       variant$1,
       constr,
       inherit,
       poly_variant$1,
       rec_app,
       top_app,
       var$4,
       basetype$1,
       annotate$1,
       [0, compare$0, t_of_sexp$0, sexp_of_t$1, to_hex, to_md5, of_md5],
       [0,
        compare_t0,
        sexp_of_t0,
        to_string_hum,
        to_digest$2,
        Exp,
        Def$0,
        [0,
         Create[1],
         Create[2],
         Create[3],
         Create[4],
         Create[5],
         Create[7],
         Create[6],
         Create[8],
         Create[9],
         Create[10],
         Create[11]]],
       eval$0,
       eval_to_digest,
       eval_to_digest_string,
       [0, deconstruct_tuple_exn]];
   runtime.caml_register_global
    (133, Bin_shape_lib_Bin_shape, "Bin_shape_lib__Bin_shape");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_shape_lib__Std
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bin_shape_lib_Std = [0];
   runtime.caml_register_global(0, Bin_shape_lib_Std, "Bin_shape_lib__Std");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
