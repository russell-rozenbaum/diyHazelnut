// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Balanced_reducer
//# unitInfo: Requires: Assert_failure, Base, Base__Int, Base__List, Base__Option_array, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Balanced_reducer = "Balanced_reducer",
    cst_balanced_reducer = "balanced_reducer",
    cst_balanced_reducer_src_balan =
      "balanced_reducer/src/balanced_reducer.ml",
    cst_index = "index",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Option_array = global_data.Base__Option_array,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Base = global_data.Base,
    Base_Int = global_data.Base__Int,
    Assert_failure = global_data.Assert_failure,
    Base_List = global_data.Base__List,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Balanced_reducer);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_balanced_reducer);
   caml_call1(Expect_test_collector[5][1], cst_balanced_reducer_src_balan);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_balanced_reducer, cst);
   var
    _a_ = [0, cst_balanced_reducer_src_balan, 76, 9],
    _b_ = [0, cst_balanced_reducer_src_balan, 78, 6],
    _c_ = [0, "num_leaves"],
    cst_non_positive_number_of_lea =
      "non-positive number of leaves in balanced reducer",
    _d_ = [0, "_"],
    _e_ = [0, cst_index],
    cst_attempt_to_access_negative =
      "attempt to access negative index in balanced reducer",
    _f_ = [0, "length"],
    _g_ = [0, cst_index],
    cst_attempt_to_access_out_of_b =
      "attempt to access out of bounds index in balanced reducer",
    _i_ = [0, cst_balanced_reducer],
    cst_attempt_to_compute_balance =
      "attempt to compute balanced reducer with unset elements";
   function left_child_index(parent_index){return (parent_index * 2 | 0) + 1 | 0;
   }
   function num_branches(t){return t[2] - 1 | 0;}
   function index_is_leaf(t, i){return num_branches(t) <= i ? 1 : 0;}
   function leaf_index(t, i){
    var
     offset_from_start_of_leaves_in = i + t[3] | 0,
     rotated_index =
       offset_from_start_of_leaves_in < t[2]
        ? offset_from_start_of_leaves_in
        : offset_from_start_of_leaves_in - t[2] | 0;
    return rotated_index + num_branches(t) | 0;
   }
   function sexp_of_t(sexp_of_a, t){
    var
     x_001 =
       caml_call2
        (Base_List[123],
         t[2],
         function(i){
          var _D_ = leaf_index(t, i);
          return caml_call2(Base_Option_array[33], t[1], _D_);
         }),
     _C_ = caml_call1(Base[152], sexp_of_a);
    return caml_call2(Base[139], _C_, x_001);
   }
   function invariant(invariant_a, t){
    var
     data = t[1],
     _x_ = caml_call1(Base_Option_array[6], data) - 1 | 0,
     _w_ = 0;
    if(_x_ >= 0){
     var i$0 = _w_;
     for(;;){
      var match = caml_call2(Base_Option_array[33], data, i$0);
      if(match){var a = match[1]; caml_call1(invariant_a, a);}
      var _B_ = i$0 + 1 | 0;
      if(_x_ === i$0) break;
      i$0 = _B_;
     }
    }
    var _z_ = num_branches(t) - 1 | 0, _y_ = 0;
    if(_z_ >= 0){
     var i = _y_;
     for(;;){
      var
       left_child_index$0 = left_child_index(i),
       right = left_child_index$0 + 1 | 0,
       left_is_none =
         caml_call2(Base_Option_array[35], data, left_child_index$0),
       right_is_none = caml_call2(Base_Option_array[35], data, right);
      a:
      {
       if(caml_call2(Base_Option_array[36], data, i)){
        if(! left_is_none && ! right_is_none) break a;
        throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
       }
       if
        (!
         index_is_leaf(t, left_child_index$0)
         && ! index_is_leaf(t, right) && ! left_is_none && ! right_is_none)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
      }
      var _A_ = i + 1 | 0;
      if(_z_ === i) break;
      i = _A_;
     }
    }
    return 0;
   }
   function create_exn(opt, param, num_leaves, reduce){
    if(opt)
     var sth = opt[1], sexp_of_a = sth;
    else
     var sexp_of_a = function(param){return _d_;};
    if(num_leaves < 1){
     var
      _u_ = [0, [1, [0, _c_, [0, caml_call1(Base[119], num_leaves), 0]]], 0],
      _v_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_non_positive_number_of_lea),
          _u_]];
     caml_call1(Base[202], _v_);
    }
    var
     num_branches = num_leaves - 1 | 0,
     num_leaves_not_in_bottom_level =
       caml_call1(Base_Int[63], num_leaves) - num_leaves | 0,
     data = caml_call1(Base_Option_array[5], num_branches + num_leaves | 0);
    return [0,
            data,
            num_leaves,
            num_leaves_not_in_bottom_level,
            reduce,
            sexp_of_a];
   }
   function validate_index(t, i){
    if(i < 0){
     var
      _o_ = [0, [1, [0, _e_, [0, caml_call1(Base[119], i), 0]]], 0],
      _p_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_attempt_to_access_negative),
          _o_]];
     caml_call1(Base[202], _p_);
    }
    var length = t[2], _q_ = length <= i ? 1 : 0;
    if(! _q_) return _q_;
    var
     _r_ = [0, [1, [0, _f_, [0, caml_call1(Base[119], length), 0]]], 0],
     _s_ = [0, [1, [0, _g_, [0, caml_call1(Base[119], i), 0]]], _r_],
     _t_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_attempt_to_access_out_of_b),
         _s_]];
    return caml_call1(Base[202], _t_);
   }
   function set_exn(t, i, a){
    validate_index(t, i);
    var data = t[1], i$0 = [0, leaf_index(t, i)];
    caml_call3(Base_Option_array[42], data, i$0[1], a);
    for(;;){
     if(0 === i$0[1]) return 0;
     var child_index = i$0[1], parent = (child_index - 1 | 0) / 2 | 0;
     if(caml_call2(Base_Option_array[35], data, parent))
      i$0[1] = 0;
     else{caml_call2(Base_Option_array[50], data, parent); i$0[1] = parent;}
    }
   }
   function get_exn(t, i){
    validate_index(t, i);
    var _n_ = leaf_index(t, i);
    return caml_call2(Base_Option_array[34], t[1], _n_);
   }
   function _h_(x_002, i){
    if(caml_call2(Base_Option_array[36], x_002[1], i))
     return caml_call2(Base_Option_array[38], x_002[1], i);
    var
     left_child_index$0 = left_child_index(i),
     right = left_child_index$0 + 1 | 0;
    if(caml_call1(Base_Option_array[6], x_002[1]) <= left_child_index$0){
     var
      sexp_of_a = x_002[5],
      _j_ = [0, [1, [0, _i_, [0, sexp_of_t(sexp_of_a, x_002), 0]]], 0],
      _k_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_attempt_to_compute_balance),
          _j_]];
     caml_call1(Base[202], _k_);
    }
    var
     _l_ = _h_(x_002, right),
     _m_ = _h_(x_002, left_child_index$0),
     a = caml_call2(x_002[4], _m_, _l_);
    caml_call3(Base_Option_array[49], x_002[1], i, a);
    return a;
   }
   function compute_exn(t){return _h_(t, 0);}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_balanced_reducer);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Balanced_reducer);
   var
    Balanced_reducer =
      [0, sexp_of_t, invariant, create_exn, set_exn, get_exn, compute_exn];
   runtime.caml_register_global(29, Balanced_reducer, cst_Balanced_reducer);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
