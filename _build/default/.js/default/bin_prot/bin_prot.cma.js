// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Bin_prot
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bin_prot = [0];
   runtime.caml_register_global(0, Bin_prot, "Bin_prot");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Common
//# unitInfo: Requires: Assert_failure, Base, Base__Printf, Sexplib0__Sexp_conv, Stdlib__Bigarray, Stdlib__Hashtbl
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_dst_pos$3 = "dst_pos",
    cst_src_pos$3 = "src_pos",
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    loc$2 = "blit_buf_string",
    loc$1 = "blit_bytes_buf",
    loc$0 = "blit_string_buf",
    loc = "blit_buf",
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Base = global_data.Base,
    Base_Printf = global_data.Base__Printf,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Assert_failure = global_data.Assert_failure,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    sexp_of_pos = Base[119],
    Buffer_short = [248, "Bin_prot.Common.Buffer_short", caml_fresh_oo_id(0)],
    No_variant_match =
      [248, "Bin_prot.Common.No_variant_match", caml_fresh_oo_id(0)],
    cst_Neg_int8 = "Neg_int8",
    cst_Int_code = "Int_code",
    cst_Int_overflow = "Int_overflow",
    cst_Nat0_code = "Nat0_code",
    cst_Nat0_overflow = "Nat0_overflow",
    cst_Int32_code = "Int32_code",
    cst_Int64_code = "Int64_code",
    cst_Nativeint_code = "Nativeint_code",
    cst_Unit_code = "Unit_code",
    cst_Bool_code = "Bool_code",
    cst_Option_code = "Option_code",
    cst_String_too_long = "String_too_long",
    cst_Variant_tag = "Variant_tag",
    cst_Array_too_long = "Array_too_long",
    cst_Hashtbl_too_long = "Hashtbl_too_long",
    _a_ =
      [0,
       [11,
        "List_too_long / ",
        [4, 0, 0, 0, [11, " (max ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "List_too_long / %d (max %d)"],
    cst_Sum_tag = "Sum_tag / ",
    cst_Variant = "Variant / ",
    cst_Poly_rec_bound = "Poly_rec_bound / ",
    cst_Variant_wrong_type = "Variant_wrong_type / ",
    cst_Silly_type = "Silly_type / ",
    cst_Empty_type = "Empty_type / ";
   function to_string(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_Neg_int8;
       case 1:
        return cst_Int_code;
       case 2:
        return cst_Int_overflow;
       case 3:
        return cst_Nat0_code;
       case 4:
        return cst_Nat0_overflow;
       case 5:
        return cst_Int32_code;
       case 6:
        return cst_Int64_code;
       case 7:
        return cst_Nativeint_code;
       case 8:
        return cst_Unit_code;
       case 9:
        return cst_Bool_code;
       case 10:
        return cst_Option_code;
       case 11:
        return cst_String_too_long;
       case 12:
        return cst_Variant_tag;
       case 13:
        return cst_Array_too_long;
       default: return cst_Hashtbl_too_long;
     }
    switch(param[0]){
      case 0:
       var max_len = param[2], len = param[1];
       return caml_call3(Base_Printf[2], _a_, len, max_len);
      case 1:
       var loc = param[1]; return caml_call2(Base[197], cst_Sum_tag, loc);
      case 2:
       var loc$0 = param[1]; return caml_call2(Base[197], cst_Variant, loc$0);
      case 3:
       var loc$1 = param[1];
       return caml_call2(Base[197], cst_Poly_rec_bound, loc$1);
      case 4:
       var loc$2 = param[1];
       return caml_call2(Base[197], cst_Variant_wrong_type, loc$2);
      case 5:
       var loc$3 = param[1];
       return caml_call2(Base[197], cst_Silly_type, loc$3);
      default:
       var loc$4 = param[1];
       return caml_call2(Base[197], cst_Empty_type, loc$4);
    }
   }
   var
    Read_error = [248, "Bin_prot.Common.Read_error", caml_fresh_oo_id(0)],
    _b_ = [0, "src/common.ml.Read_error"],
    _c_ = [0, "_none_", 0, -1];
   caml_call4
    (Sexplib0_Sexp_conv[70][1],
     0,
     0,
     Read_error,
     function(param){
      if(param[1] !== Read_error)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
      var
       arg1_002 = param[3],
       arg0_001 = param[2],
       res0_003 = [0, to_string(arg0_001)],
       res1_004 = caml_call1(sexp_of_pos, arg1_002);
      return [1, [0, _b_, [0, res0_003, [0, res1_004, 0]]]];
     });
   var
    Poly_rec_write =
      [248, "Bin_prot.Common.Poly_rec_write", caml_fresh_oo_id(0)],
    Empty_type = [248, "Bin_prot.Common.Empty_type", caml_fresh_oo_id(0)],
    cst_concurrent_modification = ": concurrent modification",
    cst_index_out_of_bounds = "index out of bounds";
   function raise_read_error(err, pos){
    throw caml_maybe_attach_backtrace([0, Read_error, err, pos], 1);
   }
   function raise_variant_wrong_type(name, pos){
    throw caml_maybe_attach_backtrace([0, Read_error, [4, name], pos], 1);
   }
   function raise_concurrent_modification(loc){
    var _o_ = caml_call2(Base[197], loc, cst_concurrent_modification);
    return caml_call1(Base[200], _o_);
   }
   function array_bound_error(param){
    return caml_call1(Base[201], cst_index_out_of_bounds);
   }
   function create_buf(n){
    return caml_call3
            (Stdlib_Bigarray[19][1],
             Stdlib_Bigarray[13],
             Stdlib_Bigarray[15],
             n);
   }
   var
    buf_len = caml_ba_dim_1,
    _d_ =
      [0,
       [11, "Bin_prot.Common.", [2, 0, [11, ": ", [2, 0, [11, " < 0", 0]]]]],
       "Bin_prot.Common.%s: %s < 0"],
    cst_src_pos = cst_src_pos$3,
    cst_dst_pos = cst_dst_pos$3,
    cst_Bin_prot_Common_blit_buf_s =
      "Bin_prot.Common.blit_buf: src_pos > src_len",
    cst_Bin_prot_Common_blit_buf_d =
      "Bin_prot.Common.blit_buf: dst_pos > dst_len",
    cst_Bin_prot_Common_blit_buf_s$0 =
      "Bin_prot.Common.blit_buf: src_pos + len > src_len",
    cst_Bin_prot_Common_blit_buf_d$0 =
      "Bin_prot.Common.blit_buf: dst_pos + len > dst_len",
    cst_Bin_prot_Common_blit_buf_l = "Bin_prot.Common.blit_buf: len < 0",
    cst_src_pos$0 = cst_src_pos$3,
    cst_dst_pos$0 = cst_dst_pos$3,
    cst_Bin_prot_Common_blit_strin =
      "Bin_prot.Common.blit_string_buf: src_pos > str_len",
    cst_Bin_prot_Common_blit_strin$0 =
      "Bin_prot.Common.blit_string_buf: src_pos > buf",
    cst_Bin_prot_Common_blit_strin$1 =
      "Bin_prot.Common.blit_string_buf: src_pos + len > str_len",
    cst_Bin_prot_Common_blit_strin$2 =
      "Bin_prot.Common.blit_string_buf: src_pos + len > buf",
    cst_Bin_prot_Common_blit_strin$3 =
      "Bin_prot.Common.blit_string_buf: len < 0",
    cst_src_pos$1 = cst_src_pos$3,
    cst_dst_pos$1 = cst_dst_pos$3,
    cst_Bin_prot_Common_blit_bytes =
      "Bin_prot.Common.blit_bytes_buf: src_pos > str_len",
    cst_Bin_prot_Common_blit_bytes$0 =
      "Bin_prot.Common.blit_bytes_buf: src_pos > buf",
    cst_Bin_prot_Common_blit_bytes$1 =
      "Bin_prot.Common.blit_bytes_buf: src_pos + len > str_len",
    cst_Bin_prot_Common_blit_bytes$2 =
      "Bin_prot.Common.blit_bytes_buf: src_pos + len > buf",
    cst_Bin_prot_Common_blit_bytes$3 =
      "Bin_prot.Common.blit_bytes_buf: len < 0",
    cst_src_pos$2 = cst_src_pos$3,
    cst_dst_pos$2 = cst_dst_pos$3,
    cst_Bin_prot_Common_blit_buf_s$1 =
      "Bin_prot.Common.blit_buf_string: src_pos > buf_len",
    cst_Bin_prot_Common_blit_buf_s$2 =
      "Bin_prot.Common.blit_buf_string: src_pos > str_len",
    cst_Bin_prot_Common_blit_buf_s$3 =
      "Bin_prot.Common.blit_buf_string: src_pos + len > buf_len",
    cst_Bin_prot_Common_blit_buf_s$4 =
      "Bin_prot.Common.blit_buf_string: src_pos + len > str_len",
    cst_Bin_prot_Common_blit_buf_s$5 =
      "Bin_prot.Common.blit_buf_string: len < 0";
   function assert_pos(pos){
    var _n_ = pos < 0 ? 1 : 0;
    return _n_ ? array_bound_error(0) : _n_;
   }
   function check_pos(buf, pos){
    var _m_ = caml_ba_dim_1(buf) <= pos ? 1 : 0;
    if(_m_) throw caml_maybe_attach_backtrace(Buffer_short, 1);
    return _m_;
   }
   function safe_get_pos(buf, pos_ref){
    var pos = pos_ref[1];
    check_pos(buf, pos);
    return pos;
   }
   function check_next(buf, next){
    var _l_ = caml_ba_dim_1(buf) < next ? 1 : 0;
    if(_l_) throw caml_maybe_attach_backtrace(Buffer_short, 1);
    return _l_;
   }
   function get_opt_pos(loc, var$0, param){
    if(! param) return 0;
    var pos = param[1];
    if(pos < 0){
     var _k_ = caml_call3(Base_Printf[2], _d_, loc, var$0);
     caml_call1(Base[201], _k_);
    }
    return pos;
   }
   function blit_buf(src_pos, src, dst_pos, dst, len){
    var
     src_pos$0 = get_opt_pos(loc, cst_src_pos, src_pos),
     dst_pos$0 = get_opt_pos(loc, cst_dst_pos, dst_pos);
    if(0 > len) return caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_l);
    if(0 !== len)
     return caml_ba_dim_1(src) < (src_pos$0 + len | 0)
             ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$0)
             : caml_ba_dim_1
                (dst)
               < (dst_pos$0 + len | 0)
               ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_d$0)
               : runtime.bin_prot_blit_buf_stub
                 (src_pos$0, src, dst_pos$0, dst, len);
    if(caml_ba_dim_1(src) < src_pos$0)
     caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s);
    var _j_ = caml_ba_dim_1(dst) < dst_pos$0 ? 1 : 0;
    return _j_ ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_d) : _j_;
   }
   function blit_string_buf(src_pos, str, dst_pos, buf, len){
    var
     src_pos$0 = get_opt_pos(loc$0, cst_src_pos$0, src_pos),
     dst_pos$0 = get_opt_pos(loc$0, cst_dst_pos$0, dst_pos);
    if(0 > len)
     return caml_call1(Base[201], cst_Bin_prot_Common_blit_strin$3);
    if(0 !== len)
     return caml_ml_string_length(str) < (src_pos$0 + len | 0)
             ? caml_call1(Base[201], cst_Bin_prot_Common_blit_strin$1)
             : caml_ba_dim_1
                (buf)
               < (dst_pos$0 + len | 0)
               ? caml_call1(Base[201], cst_Bin_prot_Common_blit_strin$2)
               : runtime.bin_prot_blit_string_buf_stub
                 (src_pos$0, str, dst_pos$0, buf, len);
    if(caml_ml_string_length(str) < src_pos$0)
     caml_call1(Base[201], cst_Bin_prot_Common_blit_strin);
    var _i_ = caml_ba_dim_1(buf) < dst_pos$0 ? 1 : 0;
    return _i_ ? caml_call1(Base[201], cst_Bin_prot_Common_blit_strin$0) : _i_;
   }
   function blit_bytes_buf(src_pos, str, dst_pos, buf, len){
    var
     src_pos$0 = get_opt_pos(loc$1, cst_src_pos$1, src_pos),
     dst_pos$0 = get_opt_pos(loc$1, cst_dst_pos$1, dst_pos);
    if(0 > len)
     return caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes$3);
    if(0 !== len)
     return caml_ml_bytes_length(str) < (src_pos$0 + len | 0)
             ? caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes$1)
             : caml_ba_dim_1
                (buf)
               < (dst_pos$0 + len | 0)
               ? caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes$2)
               : runtime.bin_prot_blit_bytes_buf_stub
                 (src_pos$0, str, dst_pos$0, buf, len);
    if(caml_ml_bytes_length(str) < src_pos$0)
     caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes);
    var _h_ = caml_ba_dim_1(buf) < dst_pos$0 ? 1 : 0;
    return _h_ ? caml_call1(Base[201], cst_Bin_prot_Common_blit_bytes$0) : _h_;
   }
   function blit_buf_bytes(src_pos, buf, dst_pos, str, len){
    var
     src_pos$0 = get_opt_pos(loc$2, cst_src_pos$2, src_pos),
     dst_pos$0 = get_opt_pos(loc$2, cst_dst_pos$2, dst_pos);
    if(0 > len)
     return caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$5);
    if(0 !== len)
     return caml_ba_dim_1(buf) < (src_pos$0 + len | 0)
             ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$3)
             : caml_ml_bytes_length
                (str)
               < (dst_pos$0 + len | 0)
               ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$4)
               : runtime.bin_prot_blit_buf_bytes_stub
                 (src_pos$0, buf, dst_pos$0, str, len);
    if(caml_ba_dim_1(buf) < src_pos$0)
     caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$1);
    var _g_ = caml_ml_bytes_length(str) < dst_pos$0 ? 1 : 0;
    return _g_ ? caml_call1(Base[201], cst_Bin_prot_Common_blit_buf_s$2) : _g_;
   }
   function copy_htbl_list(htbl, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return htbl;
     var rest = param$0[2], match = param$0[1], v = match[2], k = match[1];
     caml_call3(Stdlib_Hashtbl[5], htbl, k, v);
     param$0 = rest;
    }
   }
   function symbol(_f_, _e_){return _f_ + _e_ | 0;}
   var
    Bin_prot_Common =
      [0,
       create_buf,
       buf_len,
       assert_pos,
       check_pos,
       check_next,
       safe_get_pos,
       blit_string_buf,
       blit_bytes_buf,
       blit_buf_bytes,
       blit_buf_bytes,
       blit_buf,
       Buffer_short,
       No_variant_match,
       [0, to_string],
       Read_error,
       Poly_rec_write,
       Empty_type,
       raise_read_error,
       raise_variant_wrong_type,
       raise_concurrent_modification,
       array_bound_error,
       copy_htbl_list,
       symbol];
   runtime.caml_register_global(70, Bin_prot_Common, "Bin_prot__Common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Nat0
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_Bin_prot_Nat0_of_int_n_0 = "Bin_prot.Nat0.of_int: n < 0";
   function of_int(n){
    if(n < 0) caml_call1(Stdlib[2], cst_Bin_prot_Nat0_of_int_n_0);
    return n;
   }
   var Bin_prot_Nat0 = [0, of_int];
   runtime.caml_register_global(2, Bin_prot_Nat0, "Bin_prot__Nat0");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Write
//# unitInfo: Requires: Assert_failure, Bin_prot__Common, CamlinternalLazy, Md5_lib, Stdlib__Float, Stdlib__Hashtbl, Stdlib__Int64, Stdlib__List, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_uint8_set16 = runtime.caml_ba_uint8_set16,
    caml_ba_uint8_set32 = runtime.caml_ba_uint8_set32,
    caml_ba_uint8_set64 = runtime.caml_ba_uint8_set64,
    caml_bswap16 = runtime.caml_bswap16,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mul = runtime.caml_mul,
    caml_string_get32 = runtime.caml_string_get32,
    caml_string_get64 = runtime.caml_string_get64;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Md5_lib = global_data.Md5_lib,
    Assert_failure = global_data.Assert_failure,
    Bin_prot_Common = global_data.Bin_prot__Common,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Float = global_data.Stdlib__Float,
    Stdlib_List = global_data.Stdlib__List,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Sys = global_data.Stdlib__Sys,
    arch_sixtyfour = 64 === Stdlib_Sys[9] ? 1 : 0,
    arch_big_endian = Stdlib_Sys[11],
    _e_ = [0, "src/write.ml", 500, 2],
    cst_bin_write_hashtbl = "bin_write_hashtbl",
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 128, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 16777088, 65535),
    _c_ = runtime.caml_int64_create_lo_mi_hi(32768, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(16744448, 16777215, 65535),
    unsafe_set16be =
      arch_big_endian
       ? caml_ba_uint8_set16
       : function
        (buf, pos, x){
         caml_ba_uint8_set16(buf, pos, caml_bswap16(x));
         return;
        },
    unsafe_set32be =
      arch_big_endian
       ? caml_ba_uint8_set32
       : function
        (buf, pos, x){
         caml_ba_uint8_set32(buf, pos, caml_int32_bswap(x));
         return;
        },
    unsafe_set64be =
      arch_big_endian
       ? caml_ba_uint8_set64
       : function
        (buf, pos, x){
         caml_ba_uint8_set64(buf, pos, caml_int64_bswap(x));
         return;
        },
    unsafe_set16le =
      arch_big_endian
       ? function
        (buf, pos, x){
         caml_ba_uint8_set16(buf, pos, caml_bswap16(x));
         return;
        }
       : caml_ba_uint8_set16,
    unsafe_set32le =
      arch_big_endian
       ? function
        (buf, pos, x){
         caml_ba_uint8_set32(buf, pos, caml_int32_bswap(x));
         return;
        }
       : caml_ba_uint8_set32,
    unsafe_set64le =
      arch_big_endian
       ? function
        (buf, pos, x){
         caml_ba_uint8_set64(buf, pos, caml_int64_bswap(x));
         return;
        }
       : caml_ba_uint8_set64;
   function bin_write_unit(buf, pos, param){
    caml_call1(Bin_prot_Common[3], pos);
    caml_call2(Bin_prot_Common[4], buf, pos);
    caml_ba_set_1(buf, pos, 0);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function bin_write_bool(buf, pos, b){
    caml_call1(Bin_prot_Common[3], pos);
    caml_call2(Bin_prot_Common[4], buf, pos);
    var _u_ = b ? 1 : 0;
    caml_ba_set_1(buf, pos, _u_);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function all_bin_write_small_int(buf, pos, n){
    caml_call2(Bin_prot_Common[4], buf, pos);
    caml_ba_set_1(buf, pos, n);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function all_bin_write_int16(buf, pos, n){
    var next = caml_call2(Bin_prot_Common[23], pos, 3);
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_ba_set_1(buf, pos, 254);
    unsafe_set16le(buf, caml_call2(Bin_prot_Common[23], pos, 1), n);
    return next;
   }
   function all_bin_write_int32(buf, pos, n){
    var next = caml_call2(Bin_prot_Common[23], pos, 5);
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_ba_set_1(buf, pos, 253);
    unsafe_set32le(buf, caml_call2(Bin_prot_Common[23], pos, 1), n);
    return next;
   }
   function all_bin_write_int64(buf, pos, n){
    var next = caml_call2(Bin_prot_Common[23], pos, 9);
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_ba_set_1(buf, pos, 252);
    unsafe_set64le(buf, caml_call2(Bin_prot_Common[23], pos, 1), n);
    return next;
   }
   function bin_write_char(buf, pos, c){
    caml_call1(Bin_prot_Common[3], pos);
    caml_call2(Bin_prot_Common[4], buf, pos);
    caml_ba_set_1(buf, pos, c);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function bin_write_int(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    if(0 <= n){
     if(128 > n) return all_bin_write_small_int(buf, pos, n);
     if(32768 > n) return all_bin_write_int16(buf, pos, n);
     if(arch_sixtyfour && -2147483648 <= n)
      return all_bin_write_int64(buf, pos, caml_int64_of_int32(n));
     return all_bin_write_int32(buf, pos, n);
    }
    if(-128 <= n){
     var next = caml_call2(Bin_prot_Common[23], pos, 2);
     caml_call2(Bin_prot_Common[5], buf, next);
     caml_ba_set_1(buf, pos, 255);
     caml_ba_set_1(buf, caml_call2(Bin_prot_Common[23], pos, 1), n);
     return next;
    }
    if(-32768 <= n) return all_bin_write_int16(buf, pos, n);
    if(arch_sixtyfour && n < -2147483648)
     return all_bin_write_int64(buf, pos, caml_int64_of_int32(n));
    return all_bin_write_int32(buf, pos, n);
   }
   function bin_write_nat0(buf, pos, nat0){
    caml_call1(Bin_prot_Common[3], pos);
    if(128 > nat0) return all_bin_write_small_int(buf, pos, nat0);
    if(65536 > nat0) return all_bin_write_int16(buf, pos, nat0);
    if(arch_sixtyfour && 1 <= nat0)
     return all_bin_write_int64(buf, pos, caml_int64_of_int32(nat0));
    return all_bin_write_int32(buf, pos, nat0);
   }
   function bin_write_string(buf, pos, str){
    var
     len = caml_ml_string_length(str),
     new_pos = bin_write_nat0(buf, pos, len),
     next = caml_call2(Bin_prot_Common[23], new_pos, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_string_buf_stub(0, str, new_pos, buf, len);
    return next;
   }
   function bin_write_bytes(buf, pos, str){
    var
     len = runtime.caml_ml_bytes_length(str),
     new_pos = bin_write_nat0(buf, pos, len),
     next = caml_call2(Bin_prot_Common[23], new_pos, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_bytes_buf_stub(0, str, new_pos, buf, len);
    return next;
   }
   function bin_write_float(buf, pos, x){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64le(buf, pos, runtime.caml_int64_bits_of_float(x));
    return next;
   }
   var
    bin_write_int32 =
      arch_sixtyfour
       ? function(buf, pos, n){return bin_write_int(buf, pos, n);}
       : function
        (buf, pos, n){
         if(! caml_greaterequal(n, 32768) && ! caml_lessthan(n, -32768))
          return bin_write_int(buf, pos, n);
         caml_call1(Bin_prot_Common[3], pos);
         return all_bin_write_int32(buf, pos, n);
        };
   function bin_write_int64(buf, pos, n){
    if(! caml_greaterequal(n, _a_) && ! caml_lessthan(n, _b_)){
     if(arch_sixtyfour)
      return bin_write_int(buf, pos, caml_int64_to_int32(n));
     if(! caml_greaterequal(n, _c_) && ! caml_lessthan(n, _d_))
      return bin_write_int(buf, pos, caml_int64_to_int32(n));
     caml_call1(Bin_prot_Common[3], pos);
     return all_bin_write_int32(buf, pos, caml_int64_to_int32(n));
    }
    caml_call1(Bin_prot_Common[3], pos);
    return all_bin_write_int64(buf, pos, n);
   }
   function bin_write_nativeint(buf, pos, n){
    a:
    if(arch_sixtyfour){
     if
      (! caml_greaterequal(n, -2147483648) && ! caml_lessthan(n, -2147483648))
      break a;
     caml_call1(Bin_prot_Common[3], pos);
     return all_bin_write_int64(buf, pos, caml_int64_of_int32(n));
    }
    a:
    {
     if(! arch_sixtyfour && caml_greaterequal(n, 32768)) break a;
     if(! caml_lessthan(n, -32768)) return bin_write_int(buf, pos, n);
    }
    caml_call1(Bin_prot_Common[3], pos);
    return all_bin_write_int32(buf, pos, n);
   }
   function bin_write_ref(bin_write_el, buf, pos, r){return caml_call3(bin_write_el, buf, pos, r[1]);
   }
   function bin_write_lazy(bin_write_el, buf, pos, lv){
    var
     _t_ = runtime.caml_obj_tag(lv),
     v =
       250 === _t_
        ? lv[1]
        : 246 === _t_ ? caml_call1(CamlinternalLazy[2], lv) : lv;
    return caml_call3(bin_write_el, buf, pos, v);
   }
   function bin_write_option(bin_write_el, buf, pos, param){
    if(! param) return bin_write_bool(buf, pos, 0);
    var v = param[1], next = bin_write_bool(buf, pos, 1);
    return caml_call3(bin_write_el, buf, next, v);
   }
   function bin_write_pair(bin_write_a, bin_write_b, buf, pos, param){
    var
     b = param[2],
     a = param[1],
     next = caml_call3(bin_write_a, buf, pos, a);
    return caml_call3(bin_write_b, buf, next, b);
   }
   function bin_write_triple
   (bin_write_a, bin_write_b, bin_write_c, buf, pos, param){
    var
     c = param[3],
     b = param[2],
     a = param[1],
     next1 = caml_call3(bin_write_a, buf, pos, a),
     next2 = caml_call3(bin_write_b, buf, next1, b);
    return caml_call3(bin_write_c, buf, next2, c);
   }
   function bin_write_list(bin_write_el, buf, pos, lst$1){
    var
     len = caml_call1(Stdlib_List[1], lst$1),
     els_pos$0 = bin_write_nat0(buf, pos, len),
     els_pos = els_pos$0,
     lst = lst$1;
    for(;;){
     if(! lst) return els_pos;
     var
      lst$0 = lst[2],
      hd = lst[1],
      new_els_pos = caml_call3(bin_write_el, buf, els_pos, hd);
     els_pos = new_els_pos;
     lst = lst$0;
    }
   }
   function bin_write_float_array_gen(length, blit, buf, pos, a){
    var
     len = caml_call1(length, a),
     pos$0 = bin_write_nat0(buf, pos, len),
     size = len * 8 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$0, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    caml_call5(blit, 0, a, pos$0, buf, len);
    return next;
   }
   function bin_write_floatarray(buf, pos, a){
    return bin_write_float_array_gen
            (Stdlib_Float[28][1],
             function(_s_, _r_, _q_, _p_, _o_){
              return runtime.bin_prot_blit_float_array_buf_stub
                      (_s_, _r_, _q_, _p_, _o_);
             },
             buf,
             pos,
             a);
   }
   function bin_write_float_array(buf, pos, a){
    return bin_write_float_array_gen
            (function(_n_){return _n_.length - 1;},
             function(_m_, _l_, _k_, _j_, _i_){
              return runtime.bin_prot_blit_float_array_buf_stub
                      (_m_, _l_, _k_, _j_, _i_);
             },
             buf,
             pos,
             a);
   }
   function bin_write_array_loop(bin_write_el, buf, els_pos, n, ar){
    var els_pos_ref = [0, els_pos], _g_ = n - 1 | 0, _f_ = 0;
    if(_g_ >= 0){
     var i = _f_;
     for(;;){
      els_pos_ref[1] =
       caml_call3(bin_write_el, buf, els_pos_ref[1], ar[1 + i]);
      var _h_ = i + 1 | 0;
      if(_g_ === i) break;
      i = _h_;
     }
    }
    return els_pos_ref[1];
   }
   function bin_write_array(bin_write_el, buf, pos, ar){
    if(bin_write_el === bin_write_float)
     return bin_write_float_array(buf, pos, ar);
    var n = ar.length - 1, els_pos = bin_write_nat0(buf, pos, n);
    return bin_write_array_loop(bin_write_el, buf, els_pos, n, ar);
   }
   function bin_write_hashtbl(bin_write_key, bin_write_val, buf, pos, htbl){
    var
     plen = caml_call1(Stdlib_Hashtbl[15], htbl),
     els_pos = bin_write_nat0(buf, pos, plen),
     cnt_ref = [0, 0];
    function coll_htbl(k, v, els_pos){
     cnt_ref[1]++;
     var new_els_pos = caml_call3(bin_write_key, buf, els_pos, k);
     return caml_call3(bin_write_val, buf, new_els_pos, v);
    }
    var res_pos = caml_call3(Stdlib_Hashtbl[14], coll_htbl, htbl, els_pos);
    if(cnt_ref[1] !== plen)
     caml_call1(Bin_prot_Common[20], cst_bin_write_hashtbl);
    return res_pos;
   }
   function bin_write_float32_vec(buf, pos, v){
    var
     len = caml_ba_dim_1(v),
     pos$0 = bin_write_nat0(buf, pos, len),
     size = len * 4 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$0, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, v, pos$0, buf, size);
    return next;
   }
   function bin_write_float64_vec(buf, pos, v){
    var
     len = caml_ba_dim_1(v),
     pos$0 = bin_write_nat0(buf, pos, len),
     size = len * 8 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$0, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, v, pos$0, buf, size);
    return next;
   }
   function bin_write_float32_mat(buf, pos, m){
    var
     len1 = caml_ba_dim_1(m),
     len2 = caml_ba_dim_2(m),
     pos$0 = bin_write_nat0(buf, pos, len1),
     pos$1 = bin_write_nat0(buf, pos$0, len2),
     size = caml_mul(len1, len2) * 4 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$1, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, m, pos$1, buf, size);
    return next;
   }
   function bin_write_float64_mat(buf, pos, m){
    var
     len1 = caml_ba_dim_1(m),
     len2 = caml_ba_dim_2(m),
     pos$0 = bin_write_nat0(buf, pos, len1),
     pos$1 = bin_write_nat0(buf, pos$0, len2),
     size = caml_mul(len1, len2) * 8 | 0,
     next = caml_call2(Bin_prot_Common[23], pos$1, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, m, pos$1, buf, size);
    return next;
   }
   function bin_write_bigstring(buf, pos, s){
    var
     len = caml_ba_dim_1(s),
     pos$0 = bin_write_nat0(buf, pos, len),
     next = caml_call2(Bin_prot_Common[23], pos$0, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    runtime.bin_prot_blit_buf_stub(0, s, pos$0, buf, len);
    return next;
   }
   function bin_write_variant_int(buf, pos, x){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set32le(buf, pos, x << 1 | 1);
    return next;
   }
   function bin_write_int_8bit(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    caml_call2(Bin_prot_Common[4], buf, pos);
    caml_ba_set_1(buf, pos, n);
    return caml_call2(Bin_prot_Common[23], pos, 1);
   }
   function bin_write_int_16bit(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set16le(buf, pos, n);
    return next;
   }
   function bin_write_int_32bit(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set32le(buf, pos, n);
    return next;
   }
   function bin_write_int_64bit(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64le(buf, pos, caml_int64_of_int32(n));
    return next;
   }
   function bin_write_int64_bits(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64le(buf, pos, n);
    return next;
   }
   function bin_write_network16_int(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set16be(buf, pos, n);
    return next;
   }
   function bin_write_network32_int(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set32be(buf, pos, n);
    return next;
   }
   function bin_write_network32_int32(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set32be(buf, pos, n);
    return next;
   }
   function bin_write_network64_int(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64be(buf, pos, caml_int64_of_int32(n));
    return next;
   }
   function bin_write_network64_int64(buf, pos, n){
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    unsafe_set64be(buf, pos, n);
    return next;
   }
   function bin_write_array_no_length(bin_write_el, buf, pos, ar){
    return bin_write_array_loop(bin_write_el, buf, pos, ar.length - 1, ar);
   }
   function bin_write_md5(buf, pos, x){
    var x$0 = caml_call1(Md5_lib[3], x);
    if(16 !== caml_ml_string_length(x$0))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _e_], 1);
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 16);
    caml_call2(Bin_prot_Common[5], buf, next);
    if(arch_sixtyfour){
     var a = caml_string_get64(x$0, 0), b = caml_string_get64(x$0, 8);
     caml_ba_uint8_set64(buf, pos, a);
     caml_ba_uint8_set64(buf, caml_call2(Bin_prot_Common[23], pos, 8), b);
    }
    else{
     var
      a$0 = caml_string_get32(x$0, 0),
      b$0 = caml_string_get32(x$0, 4),
      c = caml_string_get32(x$0, 8),
      d = caml_string_get32(x$0, 12);
     caml_ba_uint8_set32(buf, pos, a$0);
     caml_ba_uint8_set32(buf, caml_call2(Bin_prot_Common[23], pos, 4), b$0);
     caml_ba_uint8_set32(buf, caml_call2(Bin_prot_Common[23], pos, 8), c);
     caml_ba_uint8_set32(buf, caml_call2(Bin_prot_Common[23], pos, 12), d);
    }
    return next;
   }
   var
    Bin_prot_Write =
      [0,
       bin_write_unit,
       bin_write_bool,
       bin_write_string,
       bin_write_bytes,
       bin_write_char,
       bin_write_int,
       bin_write_nat0,
       bin_write_float,
       bin_write_int32,
       bin_write_int64,
       bin_write_nativeint,
       bin_write_ref,
       bin_write_lazy,
       bin_write_option,
       bin_write_pair,
       bin_write_triple,
       bin_write_list,
       bin_write_array,
       bin_write_hashtbl,
       bin_write_float32_vec,
       bin_write_float64_vec,
       bin_write_float64_vec,
       bin_write_float32_mat,
       bin_write_float64_mat,
       bin_write_float64_mat,
       bin_write_bigstring,
       bin_write_floatarray,
       bin_write_float_array,
       bin_write_md5,
       bin_write_variant_int,
       bin_write_int_8bit,
       bin_write_int_16bit,
       bin_write_int_32bit,
       bin_write_int_64bit,
       bin_write_int64_bits,
       bin_write_network16_int,
       bin_write_network32_int,
       bin_write_network32_int32,
       bin_write_network64_int,
       bin_write_network64_int64,
       bin_write_array_no_length];
   runtime.caml_register_global(21, Bin_prot_Write, "Bin_prot__Write");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Read
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Write, Md5_lib, Stdlib, Stdlib__Array, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__Float, Stdlib__Hashtbl, Stdlib__Int32, Stdlib__Int64, Stdlib__Lazy, Stdlib__List, Stdlib__Nativeint, Stdlib__Obj, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_ba_uint8_get16 = runtime.caml_ba_uint8_get16,
    caml_ba_uint8_get32 = runtime.caml_ba_uint8_get32,
    caml_ba_uint8_get64 = runtime.caml_ba_uint8_get64,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessequal = runtime.caml_lessequal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Md5_lib = global_data.Md5_lib,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Float = global_data.Stdlib__Float,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Bin_prot_Write = global_data.Bin_prot__Write,
    arch_sixtyfour = 64 === Stdlib_Sys[9] ? 1 : 0,
    arch_big_endian = Stdlib_Sys[11],
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _a_ = runtime.caml_int64_create_lo_mi_hi(16777215, 255, 0),
    max_int_int32 = arch_sixtyfour ? Stdlib_Int32[9] : Stdlib[19],
    min_int_int32 = arch_sixtyfour ? Stdlib_Int32[9] : Stdlib[20],
    max_int_int64 = caml_int64_of_int32(Stdlib[19]),
    min_int_int64 = caml_int64_of_int32(Stdlib[20]);
   function safe_int_of_int32(pos, x){
    if(arch_sixtyfour) return x;
    if
     (caml_greaterequal(x, min_int_int32) && caml_lessequal(x, max_int_int32))
     return x;
    return caml_call2(Bin_prot_Common[18], 2, pos);
   }
   function safe_int_of_int64(pos, x){
    if
     (caml_greaterequal(x, min_int_int64) && caml_lessequal(x, max_int_int64))
     return caml_int64_to_int32(x);
    return caml_call2(Bin_prot_Common[18], 2, pos);
   }
   var
    safe_nativeint_of_int64 =
      arch_sixtyfour
       ? function(pos, x){return caml_int64_to_int32(x);}
       : function
        (pos, x){
         if
          (caml_greaterequal(x, caml_int64_of_int32(Stdlib_Nativeint[11]))
           && caml_lessequal(x, caml_int64_of_int32(Stdlib_Nativeint[10])))
          return caml_int64_to_int32(x);
         return caml_call2(Bin_prot_Common[18], 2, pos);
        },
    unsafe_get16be_unsigned =
      arch_big_endian
       ? caml_ba_uint8_get16
       : function
        (buf, pos){
         return caml_bswap16(caml_ba_uint8_get16(buf, pos));
        },
    unsafe_get32be =
      arch_big_endian
       ? caml_ba_uint8_get32
       : function
        (buf, pos){
         return caml_int32_bswap(caml_ba_uint8_get32(buf, pos));
        },
    unsafe_get64be =
      arch_big_endian
       ? caml_ba_uint8_get64
       : function
        (buf, pos){
         return caml_int64_bswap(caml_ba_uint8_get64(buf, pos));
        },
    unsafe_get16le_unsigned =
      arch_big_endian
       ? function
        (buf, pos){
         return caml_bswap16(caml_ba_uint8_get16(buf, pos));
        }
       : caml_ba_uint8_get16,
    unsafe_get32le =
      arch_big_endian
       ? function
        (buf, pos){
         return caml_int32_bswap(caml_ba_uint8_get32(buf, pos));
        }
       : caml_ba_uint8_get32,
    unsafe_get64le =
      arch_big_endian
       ? function
        (buf, pos){
         return caml_int64_bswap(caml_ba_uint8_get64(buf, pos));
        }
       : caml_ba_uint8_get64;
   function bin_read_unit(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    return 0 === caml_ba_get_1(buf, pos)
            ? (pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1), 0)
            : caml_call2(Bin_prot_Common[18], 8, pos);
   }
   function bin_read_bool(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var match = caml_ba_get_1(buf, pos);
    return 1 === match
            ? (pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1), 1)
            : match
              ? caml_call2(Bin_prot_Common[18], 9, pos)
              : (pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1), 0);
   }
   function safe_bin_read_neg_int8(buf, pos_ref, pos){
    var next = caml_call2(Bin_prot_Common[23], pos, 1);
    caml_call2(Bin_prot_Common[5], buf, next);
    var c = caml_ba_get_1(buf, pos), n = 128 <= c ? c - 256 | 0 : c;
    if(0 <= n) caml_call2(Bin_prot_Common[18], 0, pos_ref[1]);
    pos_ref[1] = next;
    return n;
   }
   function safe_bin_read_int16(buf, pos_ref, pos){
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var x = unsafe_get16le_unsigned(buf, pos);
    return 32767 < x ? x - 65536 | 0 : x;
   }
   if(arch_sixtyfour)
    var
     mask_32bit = caml_int64_to_int32(_a_),
     safe_bin_read_nat0_32 =
       function(buf, pos_ref, pos){
        var next = caml_call2(Bin_prot_Common[23], pos, 4);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        var n = unsafe_get32le(buf, pos);
        return 0 <= n ? n : n & mask_32bit;
       };
   else
    var
     safe_bin_read_nat0_32 =
       function(buf, pos_ref, pos){
        var next = caml_call2(Bin_prot_Common[23], pos, 4);
        caml_call2(Bin_prot_Common[5], buf, next);
        var n = unsafe_get32le(buf, pos);
        if(caml_greaterequal(n, 0) && caml_lessequal(n, max_int_int32)){pos_ref[1] = next; return n;}
        return caml_call2(Bin_prot_Common[18], 4, pos_ref[1]);
       };
   function bin_read_nat0(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return ch;
    }
    if(252 <= ch)
     switch(ch - 252 | 0){
       case 0:
        if(! arch_sixtyfour) return caml_call2(Bin_prot_Common[18], 4, pos);
        var
         pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
         next$0 = caml_call2(Bin_prot_Common[23], pos$0, 8);
        caml_call2(Bin_prot_Common[5], buf, next$0);
        var n = unsafe_get64le(buf, pos$0);
        if(caml_greaterequal(n, _b_) && caml_lessequal(n, max_int_int64)){
         var n$0 = caml_int64_to_int32(n);
         pos_ref[1] = next$0;
         return n$0;
        }
        return caml_call2(Bin_prot_Common[18], 4, pos_ref[1]);
       case 1:
        return safe_bin_read_nat0_32
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
       case 2:
        var
         pos$1 = caml_call2(Bin_prot_Common[23], pos, 1),
         next = caml_call2(Bin_prot_Common[23], pos$1, 2);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        return unsafe_get16le_unsigned(buf, pos$1);
     }
    return caml_call2(Bin_prot_Common[18], 3, pos);
   }
   function bin_read_bytes(buf, pos_ref){
    var start_pos = pos_ref[1], len = bin_read_nat0(buf, pos_ref);
    if(Stdlib_Sys[12] < len) caml_call2(Bin_prot_Common[18], 11, start_pos);
    var pos = pos_ref[1], next = caml_call2(Bin_prot_Common[23], pos, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var str = caml_create_bytes(len);
    runtime.bin_prot_blit_buf_bytes_stub(pos, buf, 0, str, len);
    return str;
   }
   function bin_read_string(buf, pos_ref){
    var str = bin_read_bytes(buf, pos_ref);
    return caml_call1(Stdlib_Bytes[48], str);
   }
   function bin_read_char(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
    return caml_ba_get_1(buf, pos);
   }
   function bin_read_int(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return ch;
    }
    if(252 > ch) return caml_call2(Bin_prot_Common[18], 1, pos);
    switch(ch - 252 | 0){
      case 0:
       if(! arch_sixtyfour) return caml_call2(Bin_prot_Common[18], 2, pos);
       var
        pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
        next$0 = caml_call2(Bin_prot_Common[23], pos$0, 8);
       caml_call2(Bin_prot_Common[5], buf, next$0);
       var
        n$1 = unsafe_get64le(buf, pos$0),
        n$2 = safe_int_of_int64(pos_ref[1], n$1);
       pos_ref[1] = next$0;
       return n$2;
      case 1:
       var
        pos$1 = caml_call2(Bin_prot_Common[23], pos, 1),
        next = caml_call2(Bin_prot_Common[23], pos$1, 4);
       caml_call2(Bin_prot_Common[5], buf, next);
       var
        n = unsafe_get32le(buf, pos$1),
        n$0 = safe_int_of_int32(pos_ref[1], n);
       pos_ref[1] = next;
       return n$0;
      case 2:
       return safe_bin_read_int16
               (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
      default:
       return safe_bin_read_neg_int8
               (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
    }
   }
   function bin_read_float(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return runtime.caml_int64_float_of_bits(unsafe_get64le(buf, pos));
   }
   function bin_read_int32(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return ch;
    }
    if(253 <= ch)
     switch(ch - 253 | 0){
       case 0:
        var
         pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
         next = caml_call2(Bin_prot_Common[23], pos$0, 4);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        return unsafe_get32le(buf, pos$0);
       case 1:
        return safe_bin_read_int16
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
       default:
        return safe_bin_read_neg_int8
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
     }
    return caml_call2(Bin_prot_Common[18], 5, pos);
   }
   function bin_read_int64(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return caml_int64_of_int32(ch);
    }
    if(252 <= ch)
     switch(ch - 252 | 0){
       case 0:
        var
         pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
         next = caml_call2(Bin_prot_Common[23], pos$0, 8);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        return unsafe_get64le(buf, pos$0);
       case 1:
        var
         pos$1 = caml_call2(Bin_prot_Common[23], pos, 1),
         next$0 = caml_call2(Bin_prot_Common[23], pos$1, 4);
        caml_call2(Bin_prot_Common[5], buf, next$0);
        pos_ref[1] = next$0;
        var n = unsafe_get32le(buf, pos$1);
        return caml_int64_of_int32(n);
       case 2:
        return caml_int64_of_int32
                (safe_bin_read_int16
                  (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1)));
       default:
        return caml_int64_of_int32
                (safe_bin_read_neg_int8
                  (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1)));
     }
    return caml_call2(Bin_prot_Common[18], 6, pos);
   }
   function bin_read_nativeint(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var ch = caml_ba_get_1(buf, pos);
    if(128 > ch){
     pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
     return ch;
    }
    if(252 <= ch)
     switch(ch - 252 | 0){
       case 0:
        if(arch_sixtyfour){
         var
          pos$0 = caml_call2(Bin_prot_Common[23], pos, 1),
          next$0 = caml_call2(Bin_prot_Common[23], pos$0, 8);
         caml_call2(Bin_prot_Common[5], buf, next$0);
         var
          n$0 = unsafe_get64le(buf, pos$0),
          n$1 = safe_nativeint_of_int64(pos$0, n$0);
         pos_ref[1] = next$0;
         return n$1;
        }
        break;
       case 1:
        var
         pos$1 = caml_call2(Bin_prot_Common[23], pos, 1),
         next = caml_call2(Bin_prot_Common[23], pos$1, 4);
        caml_call2(Bin_prot_Common[5], buf, next);
        pos_ref[1] = next;
        var n = unsafe_get32le(buf, pos$1);
        return n;
       case 2:
        return safe_bin_read_int16
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
       default:
        return safe_bin_read_neg_int8
                (buf, pos_ref, caml_call2(Bin_prot_Common[23], pos, 1));
     }
    return caml_call2(Bin_prot_Common[18], 7, pos);
   }
   function bin_read_ref(bin_read_el, buf, pos_ref){
    var el = caml_call2(bin_read_el, buf, pos_ref);
    return [0, el];
   }
   function bin_read_lazy(bin_read_el, buf, pos_ref){
    var el = caml_call2(bin_read_el, buf, pos_ref);
    return caml_call1(Stdlib_Lazy[4], el);
   }
   function bin_read_option(bin_read_el, buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    var match = caml_ba_get_1(buf, pos);
    if(1 !== match)
     return match
             ? caml_call2(Bin_prot_Common[18], 10, pos)
             : (pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1), 0);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
    var el = caml_call2(bin_read_el, buf, pos_ref);
    return [0, el];
   }
   function bin_read_pair(bin_read_a, bin_read_b, buf, pos_ref){
    var
     a = caml_call2(bin_read_a, buf, pos_ref),
     b = caml_call2(bin_read_b, buf, pos_ref);
    return [0, a, b];
   }
   function bin_read_triple(bin_read_a, bin_read_b, bin_read_c, buf, pos_ref){
    var
     a = caml_call2(bin_read_a, buf, pos_ref),
     b = caml_call2(bin_read_b, buf, pos_ref),
     c = caml_call2(bin_read_c, buf, pos_ref);
    return [0, a, b, c];
   }
   function bin_read_n_rev_list(bin_read_el, buf, pos_ref, len){
    var n = len, acc = 0;
    for(;;){
     if(0 === n) return acc;
     var
      acc$0 = [0, caml_call2(bin_read_el, buf, pos_ref), acc],
      n$0 = n - 1 | 0;
     n = n$0;
     acc = acc$0;
    }
   }
   function bin_read_list_with_max_len(max_len, bin_read_el, buf, pos_ref){
    var len = bin_read_nat0(buf, pos_ref);
    if(max_len < len)
     caml_call2(Bin_prot_Common[18], [0, len, max_len], pos_ref[1]);
    var rev_lst = bin_read_n_rev_list(bin_read_el, buf, pos_ref, len);
    return caml_call1(Stdlib_List[9], rev_lst);
   }
   function bin_read_list(bin_read_el, buf, pos_ref){
    return bin_read_list_with_max_len(Stdlib[19], bin_read_el, buf, pos_ref);
   }
   var dummy_float_buf = caml_call1(Bin_prot_Common[1], 8);
   caml_call3(Bin_prot_Write[8], dummy_float_buf, 0, 3.1);
   var
    max_float_array_length =
      arch_sixtyfour ? Stdlib_Sys[13] : Stdlib_Sys[13] / 2 | 0;
   function bin_read_float_array_gen(create, blit, buf, pos_ref){
    var pos = pos_ref[1], len = bin_read_nat0(buf, pos_ref);
    if(max_float_array_length < len) caml_call2(Bin_prot_Common[18], 13, pos);
    var
     size = len * 8 | 0,
     pos$0 = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos$0, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var arr = caml_call1(create, len);
    caml_call5(blit, pos$0, buf, 0, arr, len);
    pos_ref[1] = next;
    return arr;
   }
   function bin_read_floatarray(buf, pos_ref){
    return bin_read_float_array_gen
            (Stdlib_Float[28][5],
             function(_w_, _v_, _u_, _t_, _s_){
              return runtime.bin_prot_blit_buf_float_array_stub
                      (_w_, _v_, _u_, _t_, _s_);
             },
             buf,
             pos_ref);
   }
   function bin_read_float_array(buf, pos_ref){
    return bin_read_float_array_gen
            (runtime.caml_make_float_vect,
             function(_r_, _q_, _p_, _o_, _n_){
              return runtime.bin_prot_blit_buf_float_array_stub
                      (_r_, _q_, _p_, _o_, _n_);
             },
             buf,
             pos_ref);
   }
   function bin_read_array(bin_read_el, buf, pos_ref){
    if(bin_read_el === bin_read_float)
     return bin_read_float_array(buf, pos_ref);
    var start_pos = pos_ref[1], len = bin_read_nat0(buf, pos_ref);
    if(0 === len) return [0];
    if(arch_sixtyfour){
     if(Stdlib_Sys[13] < len) caml_call2(Bin_prot_Common[18], 13, start_pos);
    }
    else if((Stdlib_Sys[13] / 2 | 0) < len){
     try{
      var
       el$1 = caml_call2(bin_read_el, dummy_float_buf, [0, 0]),
       _l_ = [0, el$1],
       maybe_float = _l_;
     }
     catch(_m_){var maybe_float = 0;}
     if(maybe_float){
      var
       el$0 = maybe_float[1],
       _i_ = Stdlib_Obj[14],
       _j_ = runtime.caml_obj_tag(el$0) === _i_ ? 1 : 0,
       _k_ = _j_ || (Stdlib_Sys[13] < len ? 1 : 0);
      if(_k_) caml_call2(Bin_prot_Common[18], 13, start_pos);
     }
     else if(Stdlib_Sys[13] < len)
      caml_call2(Bin_prot_Common[18], 13, start_pos);
    }
    var
     first = caml_call2(bin_read_el, buf, pos_ref),
     res = runtime.caml_make_vect(len, first),
     _g_ = len - 1 | 0,
     _f_ = 1;
    if(_g_ >= 1){
     var i = _f_;
     for(;;){
      var el = caml_call2(bin_read_el, buf, pos_ref);
      res[1 + i] = el;
      var _h_ = i + 1 | 0;
      if(_g_ === i) break;
      i = _h_;
     }
    }
    return res;
   }
   function bin_read_hashtbl(bin_read_key, bin_read_val, buf, pos_ref){
    var
     len = bin_read_nat0(buf, pos_ref),
     htbl = caml_call2(Stdlib_Hashtbl[1], 0, len);
    function read_kv_pair(_d_, _e_){
     return bin_read_pair(bin_read_key, bin_read_val, _d_, _e_);
    }
    var els = bin_read_n_rev_list(read_kv_pair, buf, pos_ref, len);
    return caml_call2(Bin_prot_Common[22], htbl, els);
   }
   function bin_read_float32_vec(buf, pos_ref){
    var
     len = bin_read_nat0(buf, pos_ref),
     size = len * 4 | 0,
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var
     vec =
       caml_call3
        (Stdlib_Bigarray[19][1], Stdlib_Bigarray[1], Stdlib_Bigarray[16], len);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, vec, size);
    pos_ref[1] = next;
    return vec;
   }
   function bin_read_float64_vec(buf, pos_ref){
    var
     len = bin_read_nat0(buf, pos_ref),
     size = len * 8 | 0,
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var
     vec =
       caml_call3
        (Stdlib_Bigarray[19][1], Stdlib_Bigarray[2], Stdlib_Bigarray[16], len);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, vec, size);
    pos_ref[1] = next;
    return vec;
   }
   function bin_read_float32_mat(buf, pos_ref){
    var
     len1 = bin_read_nat0(buf, pos_ref),
     len2 = bin_read_nat0(buf, pos_ref),
     size = caml_mul(len1, len2) * 4 | 0,
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var
     mat =
       caml_call4
        (Stdlib_Bigarray[20][1],
         Stdlib_Bigarray[1],
         Stdlib_Bigarray[16],
         len1,
         len2);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, mat, size);
    pos_ref[1] = next;
    return mat;
   }
   function bin_read_float64_mat(buf, pos_ref){
    var
     len1 = bin_read_nat0(buf, pos_ref),
     len2 = bin_read_nat0(buf, pos_ref),
     size = caml_mul(len1, len2) * 8 | 0,
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, size);
    caml_call2(Bin_prot_Common[5], buf, next);
    var
     mat =
       caml_call4
        (Stdlib_Bigarray[20][1],
         Stdlib_Bigarray[2],
         Stdlib_Bigarray[16],
         len1,
         len2);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, mat, size);
    pos_ref[1] = next;
    return mat;
   }
   function bin_read_bigstring(buf, pos_ref){
    var
     len = bin_read_nat0(buf, pos_ref),
     pos = pos_ref[1],
     next = caml_call2(Bin_prot_Common[23], pos, len);
    caml_call2(Bin_prot_Common[5], buf, next);
    var str = caml_call1(Bin_prot_Common[1], len);
    runtime.bin_prot_blit_buf_stub(pos, buf, 0, str, len);
    pos_ref[1] = next;
    return str;
   }
   function bin_read_variant_int(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    var n = unsafe_get32le(buf, pos);
    if(runtime.caml_equal(n & 1, 0))
     throw caml_maybe_attach_backtrace([0, Bin_prot_Common[15], 12, pos], 1);
    pos_ref[1] = next;
    return n >> 1;
   }
   function bin_read_int_8bit(buf, pos_ref){
    var pos = caml_call2(Bin_prot_Common[6], buf, pos_ref);
    caml_call1(Bin_prot_Common[3], pos);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos, 1);
    return caml_ba_get_1(buf, pos);
   }
   function bin_read_int_16bit(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get16le_unsigned(buf, pos);
   }
   function bin_read_int_32bit(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var n = unsafe_get32le(buf, pos);
    return safe_int_of_int32(pos, n);
   }
   function bin_read_int_64bit(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var n = unsafe_get64le(buf, pos);
    return safe_int_of_int64(pos, n);
   }
   function bin_read_int64_bits(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get64le(buf, pos);
   }
   function bin_read_network16_int(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 2);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get16be_unsigned(buf, pos);
   }
   function bin_read_network32_int(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var n = unsafe_get32be(buf, pos);
    return safe_int_of_int32(pos, n);
   }
   function bin_read_network32_int32(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 4);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get32be(buf, pos);
   }
   function bin_read_network64_int(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var n = unsafe_get64be(buf, pos);
    return safe_int_of_int64(pos, n);
   }
   function bin_read_network64_int64(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 8);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    return unsafe_get64be(buf, pos);
   }
   function bin_read_md5(buf, pos_ref){
    var pos = pos_ref[1];
    caml_call1(Bin_prot_Common[3], pos);
    var next = caml_call2(Bin_prot_Common[23], pos, 16);
    caml_call2(Bin_prot_Common[5], buf, next);
    pos_ref[1] = next;
    var res = caml_create_bytes(16);
    if(arch_sixtyfour){
     var
      a = caml_ba_uint8_get64(buf, pos),
      b = caml_ba_uint8_get64(buf, caml_call2(Bin_prot_Common[23], pos, 8));
     caml_bytes_set64(res, 0, a);
     caml_bytes_set64(res, 8, b);
    }
    else{
     var
      a$0 = caml_ba_uint8_get32(buf, pos),
      b$0 = caml_ba_uint8_get32(buf, caml_call2(Bin_prot_Common[23], pos, 4)),
      c = caml_ba_uint8_get32(buf, caml_call2(Bin_prot_Common[23], pos, 8)),
      d = caml_ba_uint8_get32(buf, caml_call2(Bin_prot_Common[23], pos, 12));
     caml_bytes_set32(res, 0, a$0);
     caml_bytes_set32(res, 4, b$0);
     caml_bytes_set32(res, 8, c);
     caml_bytes_set32(res, 12, d);
    }
    var _c_ = caml_call1(Stdlib_Bytes[48], res);
    return caml_call1(Md5_lib[5], _c_);
   }
   var
    Bin_prot_Read =
      [0,
       bin_read_unit,
       bin_read_bool,
       bin_read_string,
       bin_read_bytes,
       bin_read_char,
       bin_read_int,
       bin_read_nat0,
       bin_read_float,
       bin_read_int32,
       bin_read_int64,
       bin_read_nativeint,
       bin_read_ref,
       bin_read_lazy,
       bin_read_option,
       bin_read_pair,
       bin_read_triple,
       bin_read_list,
       bin_read_array,
       bin_read_hashtbl,
       bin_read_float32_vec,
       bin_read_float64_vec,
       bin_read_float64_vec,
       bin_read_float32_mat,
       bin_read_float64_mat,
       bin_read_float64_mat,
       bin_read_bigstring,
       bin_read_floatarray,
       bin_read_float_array,
       bin_read_variant_int,
       bin_read_int_8bit,
       bin_read_int_16bit,
       bin_read_int_32bit,
       bin_read_int_64bit,
       bin_read_int64_bits,
       bin_read_network16_int,
       bin_read_network32_int,
       bin_read_network32_int32,
       bin_read_network64_int,
       bin_read_network64_int64,
       bin_read_md5,
       bin_read_list_with_max_len];
   runtime.caml_register_global(20, Bin_prot_Read, "Bin_prot__Read");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Shape
//# unitInfo: Requires: Bin_shape_lib__Bin_shape
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_shape_lib_Bin_shape = global_data.Bin_shape_lib__Bin_shape,
    sexp_of_t = Bin_shape_lib_Bin_shape[1],
    Tid = Bin_shape_lib_Bin_shape[2],
    Vid = Bin_shape_lib_Bin_shape[3],
    Location = Bin_shape_lib_Bin_shape[4],
    Uuid = Bin_shape_lib_Bin_shape[5],
    group = Bin_shape_lib_Bin_shape[6],
    tuple = Bin_shape_lib_Bin_shape[7],
    record = Bin_shape_lib_Bin_shape[8],
    variant = Bin_shape_lib_Bin_shape[9],
    constr = Bin_shape_lib_Bin_shape[10],
    inherit = Bin_shape_lib_Bin_shape[11],
    poly_variant = Bin_shape_lib_Bin_shape[12],
    rec_app = Bin_shape_lib_Bin_shape[13],
    top_app = Bin_shape_lib_Bin_shape[14],
    var$0 = Bin_shape_lib_Bin_shape[15],
    basetype = Bin_shape_lib_Bin_shape[16],
    annotate = Bin_shape_lib_Bin_shape[17],
    Digest = Bin_shape_lib_Bin_shape[18],
    Canonical = Bin_shape_lib_Bin_shape[19],
    eval$0 = Bin_shape_lib_Bin_shape[20],
    eval_to_digest = Bin_shape_lib_Bin_shape[21],
    eval_to_digest_string = Bin_shape_lib_Bin_shape[22],
    For_typerep = Bin_shape_lib_Bin_shape[23],
    bin_shape_unit = caml_call2(basetype, caml_call1(Uuid[1], "unit"), 0),
    bin_shape_bool = caml_call2(basetype, caml_call1(Uuid[1], "bool"), 0),
    bin_shape_string = caml_call2(basetype, caml_call1(Uuid[1], "string"), 0),
    bin_shape_bytes = caml_call2(basetype, caml_call1(Uuid[1], "bytes"), 0),
    bin_shape_char = caml_call2(basetype, caml_call1(Uuid[1], "char"), 0),
    bin_shape_float = caml_call2(basetype, caml_call1(Uuid[1], "float"), 0),
    bin_shape_int = caml_call2(basetype, caml_call1(Uuid[1], "int"), 0),
    bin_shape_int32 = caml_call2(basetype, caml_call1(Uuid[1], "int32"), 0),
    bin_shape_int63 = caml_call2(basetype, caml_call1(Uuid[1], "int63"), 0),
    bin_shape_int64 = caml_call2(basetype, caml_call1(Uuid[1], "int64"), 0),
    bin_shape_nativeint =
      caml_call2(basetype, caml_call1(Uuid[1], "nativeint"), 0),
    bin_shape_nat0 = caml_call2(basetype, caml_call1(Uuid[1], "nat0"), 0),
    bin_shape_digest = caml_call2(basetype, caml_call1(Uuid[1], "digest"), 0),
    bin_shape_float32_vec =
      caml_call2(basetype, caml_call1(Uuid[1], "float32_vec"), 0),
    bin_shape_float64_vec =
      caml_call2(basetype, caml_call1(Uuid[1], "float64_vec"), 0),
    bin_shape_vec = caml_call2(basetype, caml_call1(Uuid[1], "vec"), 0),
    bin_shape_float32_mat =
      caml_call2(basetype, caml_call1(Uuid[1], "float32_mat"), 0),
    bin_shape_float64_mat =
      caml_call2(basetype, caml_call1(Uuid[1], "float64_mat"), 0),
    bin_shape_mat = caml_call2(basetype, caml_call1(Uuid[1], "mat"), 0),
    bin_shape_bigstring =
      caml_call2(basetype, caml_call1(Uuid[1], "bigstring"), 0),
    bin_shape_floatarray =
      caml_call2(basetype, caml_call1(Uuid[1], "floatarray"), 0),
    bin_shape_variant_int =
      caml_call2(basetype, caml_call1(Uuid[1], "variant_int"), 0),
    bin_shape_int_8bit =
      caml_call2(basetype, caml_call1(Uuid[1], "int_8bit"), 0),
    bin_shape_int_16bit =
      caml_call2(basetype, caml_call1(Uuid[1], "int_16bit"), 0),
    bin_shape_int_32bit =
      caml_call2(basetype, caml_call1(Uuid[1], "int_32bit"), 0),
    bin_shape_int_64bit =
      caml_call2(basetype, caml_call1(Uuid[1], "int_64bit"), 0),
    bin_shape_int64_bits =
      caml_call2(basetype, caml_call1(Uuid[1], "int64_bits"), 0),
    bin_shape_network16_int =
      caml_call2(basetype, caml_call1(Uuid[1], "network16_int"), 0),
    bin_shape_network32_int =
      caml_call2(basetype, caml_call1(Uuid[1], "network32_int"), 0),
    bin_shape_network32_int32 =
      caml_call2(basetype, caml_call1(Uuid[1], "network32_int32"), 0),
    bin_shape_network64_int =
      caml_call2(basetype, caml_call1(Uuid[1], "network64_int"), 0),
    bin_shape_network64_int64 =
      caml_call2(basetype, caml_call1(Uuid[1], "network64_int64"), 0),
    cst_ref = "ref",
    cst_option = "option",
    cst_list = "list",
    cst_array = "array",
    cst_hashtbl = "hashtbl";
   function bin_shape_ref(x){
    return caml_call2(basetype, caml_call1(Uuid[1], cst_ref), [0, x, 0]);
   }
   function bin_shape_option(x){
    return caml_call2(basetype, caml_call1(Uuid[1], cst_option), [0, x, 0]);
   }
   function bin_shape_list(x){
    return caml_call2(basetype, caml_call1(Uuid[1], cst_list), [0, x, 0]);
   }
   function bin_shape_array(x){
    return caml_call2(basetype, caml_call1(Uuid[1], cst_array), [0, x, 0]);
   }
   function bin_shape_hashtbl(x, y){
    return caml_call2
            (basetype, caml_call1(Uuid[1], cst_hashtbl), [0, x, [0, y, 0]]);
   }
   var bin_shape_float_array = bin_shape_array(bin_shape_float);
   function bin_shape_lazy(x){return x;}
   function bin_shape_pair(x, y){return caml_call1(tuple, [0, x, [0, y, 0]]);}
   function bin_shape_triple(x, y, z){
    return caml_call1(tuple, [0, x, [0, y, [0, z, 0]]]);
   }
   var
    Bin_prot_Shape =
      [0,
       sexp_of_t,
       Tid,
       Vid,
       Location,
       Uuid,
       group,
       tuple,
       record,
       variant,
       constr,
       inherit,
       poly_variant,
       rec_app,
       top_app,
       var$0,
       basetype,
       annotate,
       Digest,
       Canonical,
       eval$0,
       eval_to_digest,
       eval_to_digest_string,
       For_typerep,
       bin_shape_unit,
       bin_shape_bool,
       bin_shape_string,
       bin_shape_bytes,
       bin_shape_char,
       bin_shape_float,
       bin_shape_int,
       bin_shape_int32,
       bin_shape_int63,
       bin_shape_int64,
       bin_shape_nativeint,
       bin_shape_nat0,
       bin_shape_digest,
       bin_shape_float32_vec,
       bin_shape_float64_vec,
       bin_shape_vec,
       bin_shape_float32_mat,
       bin_shape_float64_mat,
       bin_shape_mat,
       bin_shape_bigstring,
       bin_shape_floatarray,
       bin_shape_variant_int,
       bin_shape_int_8bit,
       bin_shape_int_16bit,
       bin_shape_int_32bit,
       bin_shape_int_64bit,
       bin_shape_int64_bits,
       bin_shape_network16_int,
       bin_shape_network32_int,
       bin_shape_network32_int32,
       bin_shape_network64_int,
       bin_shape_network64_int64,
       bin_shape_ref,
       bin_shape_option,
       bin_shape_list,
       bin_shape_array,
       bin_shape_hashtbl,
       bin_shape_float_array,
       bin_shape_lazy,
       bin_shape_pair,
       bin_shape_triple];
   runtime.caml_register_global(38, Bin_prot_Shape, "Bin_prot__Shape");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Size
//# unitInfo: Requires: Bin_prot__Common, CamlinternalLazy, Stdlib, Stdlib__Float, Stdlib__Hashtbl, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessthan = runtime.caml_lessthan,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Float = global_data.Stdlib__Float,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib = global_data.Stdlib,
    arch_sixtyfour = 64 === Stdlib_Sys[9] ? 1 : 0,
    bin_size_unit = 1,
    bin_size_bool = 1,
    bin_size_char = 1,
    cst_bin_size_hashtbl = "bin_size_hashtbl",
    _d_ = runtime.caml_int64_create_lo_mi_hi(0, 128, 0),
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 16777088, 65535),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 128, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 16777088, 65535),
    bin_size_md5 = 16,
    bin_size_int_nat0 = arch_sixtyfour ? 9 : 5,
    bin_size_int_negative = arch_sixtyfour ? 9 : 5,
    bin_size_int =
      caml_call2(Stdlib[17], bin_size_int_nat0, bin_size_int_negative),
    bin_size_float = 8,
    bin_size_variant_int = 4,
    bin_size_int_8bit = 1,
    bin_size_int_16bit = 2,
    bin_size_int_32bit = 4,
    bin_size_int_64bit = 8,
    bin_size_int64_bits = 8,
    bin_size_network16_int = 2,
    bin_size_network32_int = 4,
    bin_size_network32_int32 = 4,
    bin_size_network64_int = 8,
    bin_size_network64_int64 = 8,
    bin_size_int$0 = caml_call2(Stdlib[16], 1, 2),
    bin_size_nat0 = 1,
    bin_size_pair = caml_call2(Bin_prot_Common[23], 1, 1),
    _a_ = caml_call2(Bin_prot_Common[23], 1, 1),
    bin_size_triple = caml_call2(Bin_prot_Common[23], _a_, 1),
    bin_size_mat =
      caml_call2(Bin_prot_Common[23], bin_size_nat0, bin_size_nat0);
   function bin_size_unit$0(param){return 1;}
   function bin_size_bool$0(param){return 1;}
   function bin_size_char$0(param){return 1;}
   function bin_size_int$1(n){
    if(0 <= n){
     if(128 > n) return 1;
     if(32768 > n) return 3;
     if(arch_sixtyfour && -2147483648 <= n) return 9;
     return 5;
    }
    if(-128 <= n) return 2;
    if(-32768 <= n) return 3;
    if(arch_sixtyfour && n < -2147483648) return 9;
    return 5;
   }
   function bin_size_nat0$0(nat0){
    if(128 > nat0) return 1;
    if(65536 > nat0) return 3;
    if(arch_sixtyfour && 1 <= nat0) return 9;
    return 5;
   }
   function bin_size_string_or_bytes(len){
    var size_len = bin_size_nat0$0(len);
    return caml_call2(Bin_prot_Common[23], size_len, len);
   }
   function bin_size_string(str){
    return bin_size_string_or_bytes(runtime.caml_ml_string_length(str));
   }
   function bin_size_bytes(str){
    return bin_size_string_or_bytes(runtime.caml_ml_bytes_length(str));
   }
   function bin_size_md5$1(param){return 16;}
   function bin_size_float$0(f){return 8;}
   var
    bin_size_int32 = 5,
    bin_size_int64 = 9,
    bin_size_md5$0 = 16,
    bin_size_ref = 1,
    bin_size_lazy_t = 1,
    bin_size_option = 1,
    bin_size_int32$0 =
      arch_sixtyfour
       ? function(n){return bin_size_int$1(n);}
       : function
        (n){
         if(! caml_greaterequal(n, 32768) && ! caml_lessthan(n, -32768))
          return bin_size_int$1(n);
         return 5;
        },
    bin_size_int64$0 =
      arch_sixtyfour
       ? function
        (n){
         if(! caml_greaterequal(n, _b_) && ! caml_lessthan(n, _c_))
          return bin_size_int$1(caml_int64_to_int32(n));
         return 9;
        }
       : function
        (n){
         if(! caml_greaterequal(n, _d_) && ! caml_lessthan(n, _e_))
          return bin_size_int32$0(caml_int64_to_int32(n));
         return 9;
        },
    bin_size_nativeint =
      arch_sixtyfour
       ? function(n){return bin_size_int64$0(runtime.caml_int64_of_int32(n));}
       : function(n){return bin_size_int32$0(n);};
   function bin_size_ref$0(bin_size_el, r){return caml_call1(bin_size_el, r[1]);
   }
   function bin_size_lazy_t$0(bin_size_el, lv){
    var
     _C_ = runtime.caml_obj_tag(lv),
     _D_ =
       250 === _C_
        ? lv[1]
        : 246 === _C_ ? caml_call1(CamlinternalLazy[2], lv) : lv;
    return caml_call1(bin_size_el, _D_);
   }
   function bin_size_option$0(bin_size_el, param){
    if(! param) return 1;
    var v = param[1], _B_ = caml_call1(bin_size_el, v);
    return caml_call2(Bin_prot_Common[23], 1, _B_);
   }
   function bin_size_pair$0(bin_size_a, bin_size_b, param){
    var
     b = param[2],
     a = param[1],
     _z_ = caml_call1(bin_size_b, b),
     _A_ = caml_call1(bin_size_a, a);
    return caml_call2(Bin_prot_Common[23], _A_, _z_);
   }
   function bin_size_triple$0(bin_size_a, bin_size_b, bin_size_c, param){
    var
     c = param[3],
     b = param[2],
     a = param[1],
     _v_ = caml_call1(bin_size_c, c),
     _w_ = caml_call1(bin_size_b, b),
     _x_ = caml_call1(bin_size_a, a),
     _y_ = caml_call2(Bin_prot_Common[23], _x_, _w_);
    return caml_call2(Bin_prot_Common[23], _y_, _v_);
   }
   function bin_size_list(bin_size_el, lst$1){
    var size_acc = 0, len_acc = 0, lst = lst$1;
    for(;;){
     if(! lst){
      var _u_ = bin_size_nat0$0(len_acc);
      return caml_call2(Bin_prot_Common[23], size_acc, _u_);
     }
     var
      lst$0 = lst[2],
      hd = lst[1],
      len_acc$0 = caml_call2(Bin_prot_Common[23], len_acc, 1),
      _t_ = caml_call1(bin_size_el, hd),
      size_acc$0 = caml_call2(Bin_prot_Common[23], size_acc, _t_);
     size_acc = size_acc$0;
     len_acc = len_acc$0;
     lst = lst$0;
    }
   }
   function bin_size_floatarray(ar){
    var len = caml_call1(Stdlib_Float[28][1], ar), _s_ = bin_size_nat0$0(len);
    return caml_call2(Bin_prot_Common[23], _s_, 8 * len | 0);
   }
   function bin_size_float_array(ar){
    var len = ar.length - 1, _r_ = bin_size_nat0$0(len);
    return caml_call2(Bin_prot_Common[23], _r_, 8 * len | 0);
   }
   function bin_size_array_loop(bin_size_el, ar, total_len, n){
    var total_len_ref = [0, total_len], _o_ = n - 1 | 0, _n_ = 0;
    if(_o_ >= 0){
     var i = _n_;
     for(;;){
      var el = ar[1 + i], _p_ = caml_call1(bin_size_el, el);
      total_len_ref[1] =
       caml_call2(Bin_prot_Common[23], total_len_ref[1], _p_);
      var _q_ = i + 1 | 0;
      if(_o_ === i) break;
      i = _q_;
     }
    }
    return total_len_ref[1];
   }
   function bin_size_array(bin_size_el, ar){
    if(bin_size_el === bin_size_float$0) return bin_size_float_array(ar);
    var len = ar.length - 1, total_len = bin_size_nat0$0(len);
    return bin_size_array_loop(bin_size_el, ar, total_len, len);
   }
   function bin_size_hashtbl(bin_size_key, bin_size_val, htbl){
    var cnt_ref = [0, 0];
    function coll_htbl(k, v, total_len){
     cnt_ref[1]++;
     var
      _k_ = caml_call1(bin_size_val, v),
      _l_ = caml_call1(bin_size_key, k),
      _m_ = caml_call2(Bin_prot_Common[23], total_len, _l_);
     return caml_call2(Bin_prot_Common[23], _m_, _k_);
    }
    var
     len = caml_call1(Stdlib_Hashtbl[15], htbl),
     _j_ = bin_size_nat0$0(len),
     total_len = caml_call3(Stdlib_Hashtbl[14], coll_htbl, htbl, _j_);
    if(cnt_ref[1] !== len)
     caml_call1(Bin_prot_Common[20], cst_bin_size_hashtbl);
    return total_len;
   }
   function bin_size_gen_vec(vec, multiplier){
    var len = caml_ba_dim_1(vec), _i_ = bin_size_nat0$0(len);
    return caml_call2(Bin_prot_Common[23], _i_, caml_mul(multiplier, len));
   }
   function bin_size_float32_vec(vec){return bin_size_gen_vec(vec, 4);}
   function bin_size_float64_vec(vec){return bin_size_gen_vec(vec, 8);}
   function bin_size_gen_mat(mat, multiplier){
    var
     dim1 = caml_ba_dim_1(mat),
     dim2 = runtime.caml_ba_dim_2(mat),
     size = caml_mul(dim1, dim2),
     _f_ = bin_size_nat0$0(dim2),
     _h_ = bin_size_nat0$0(dim1),
     _g_ = caml_call2(Bin_prot_Common[23], _h_, _f_);
    return caml_call2(Bin_prot_Common[23], _g_, caml_mul(multiplier, size));
   }
   function bin_size_float32_mat(mat){return bin_size_gen_mat(mat, 4);}
   function bin_size_float64_mat(mat){return bin_size_gen_mat(mat, 8);}
   function bin_size_bigstring(buf){return bin_size_gen_vec(buf, 1);}
   function bin_size_variant_int$0(param){return 4;}
   function bin_size_int_8bit$0(param){return 1;}
   function bin_size_int_16bit$0(param){return 2;}
   function bin_size_int_32bit$0(param){return 4;}
   function bin_size_int_64bit$0(param){return 8;}
   function bin_size_int64_bits$0(param){return 8;}
   function bin_size_network16_int$0(param){return 2;}
   function bin_size_network32_int$0(param){return 4;}
   function bin_size_network32_int32$0(param){return 4;}
   function bin_size_network64_int$0(param){return 8;}
   function bin_size_network64_int64$0(param){return 8;}
   function bin_size_array_no_length(bin_size_el, ar){
    return bin_size_array_loop(bin_size_el, ar, 0, ar.length - 1);
   }
   var
    Bin_prot_Size =
      [0,
       bin_size_unit$0,
       bin_size_bool$0,
       bin_size_string,
       bin_size_bytes,
       bin_size_char$0,
       bin_size_int$1,
       bin_size_float$0,
       bin_size_int32$0,
       bin_size_int64$0,
       bin_size_nativeint,
       bin_size_nat0$0,
       bin_size_ref$0,
       bin_size_lazy_t$0,
       bin_size_lazy_t$0,
       bin_size_option$0,
       bin_size_pair$0,
       bin_size_triple$0,
       bin_size_list,
       bin_size_array,
       bin_size_hashtbl,
       bin_size_float32_vec,
       bin_size_float64_vec,
       bin_size_float64_vec,
       bin_size_float32_mat,
       bin_size_float64_mat,
       bin_size_float64_mat,
       bin_size_bigstring,
       bin_size_floatarray,
       bin_size_float_array,
       bin_size_variant_int$0,
       bin_size_int_8bit$0,
       bin_size_int_16bit$0,
       bin_size_int_32bit$0,
       bin_size_int_64bit$0,
       bin_size_int64_bits$0,
       bin_size_network16_int$0,
       bin_size_network32_int$0,
       bin_size_network32_int32$0,
       bin_size_network64_int$0,
       bin_size_network64_int64$0,
       bin_size_array_no_length,
       bin_size_md5$1,
       [0,
        bin_size_unit,
        bin_size_bool,
        bin_size_char,
        bin_size_md5,
        bin_size_int,
        bin_size_float,
        bin_size_int32,
        bin_size_int64,
        bin_size_int,
        bin_size_int_nat0,
        bin_size_variant_int,
        bin_size_int_8bit,
        bin_size_int_16bit,
        bin_size_int_32bit,
        bin_size_int_64bit,
        bin_size_int64_bits,
        bin_size_network16_int,
        bin_size_network32_int,
        bin_size_network32_int32,
        bin_size_network64_int,
        bin_size_network64_int64],
       [0,
        bin_size_unit,
        bin_size_bool,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_char,
        bin_size_md5$0,
        bin_size_int$0,
        bin_size_float,
        bin_size_int$0,
        bin_size_int$0,
        bin_size_int$0,
        bin_size_nat0,
        bin_size_ref,
        bin_size_lazy_t,
        bin_size_option,
        bin_size_pair,
        bin_size_triple,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_mat,
        bin_size_mat,
        bin_size_mat,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_nat0,
        bin_size_variant_int,
        bin_size_int_8bit,
        bin_size_int_16bit,
        bin_size_int_32bit,
        bin_size_int_64bit,
        bin_size_int64_bits,
        bin_size_network16_int,
        bin_size_network32_int,
        bin_size_network32_int32,
        bin_size_network64_int,
        bin_size_network64_int64]];
   runtime.caml_register_global(13, Bin_prot_Size, "Bin_prot__Size");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Type_class
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Size, Bin_prot__Write
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Common = global_data.Bin_prot__Common,
    S1 = [0],
    S2 = [0],
    S3 = [0];
   function variant_wrong_type(name, buf, pos_ref, x){
    return caml_call2(Bin_prot_Common[19], name, pos_ref[1]);
   }
   var
    bin_writer_unit = [0, Bin_prot_Size[1], Bin_prot_Write[1]],
    cst_unit = "unit",
    bin_reader_unit =
      [0,
       Bin_prot_Read[1],
       function(_bq_, _br_, _bs_){
        return variant_wrong_type(cst_unit, _bq_, _br_, _bs_);
       }],
    bin_shape_unit = Bin_prot_Shape[24],
    bin_unit = [0, bin_shape_unit, bin_writer_unit, bin_reader_unit],
    bin_writer_bool = [0, Bin_prot_Size[2], Bin_prot_Write[2]],
    cst_bool = "bool",
    bin_reader_bool =
      [0,
       Bin_prot_Read[2],
       function(_bn_, _bo_, _bp_){
        return variant_wrong_type(cst_bool, _bn_, _bo_, _bp_);
       }],
    bin_shape_bool = Bin_prot_Shape[25],
    bin_bool = [0, bin_shape_bool, bin_writer_bool, bin_reader_bool],
    bin_writer_string = [0, Bin_prot_Size[3], Bin_prot_Write[3]],
    cst_string = "string",
    bin_reader_string =
      [0,
       Bin_prot_Read[3],
       function(_bk_, _bl_, _bm_){
        return variant_wrong_type(cst_string, _bk_, _bl_, _bm_);
       }],
    bin_shape_string = Bin_prot_Shape[26],
    bin_string = [0, bin_shape_string, bin_writer_string, bin_reader_string],
    bin_writer_bytes = [0, Bin_prot_Size[4], Bin_prot_Write[4]],
    cst_bytes = "bytes",
    bin_reader_bytes =
      [0,
       Bin_prot_Read[4],
       function(_bh_, _bi_, _bj_){
        return variant_wrong_type(cst_bytes, _bh_, _bi_, _bj_);
       }],
    bin_shape_bytes = Bin_prot_Shape[27],
    bin_bytes = [0, bin_shape_bytes, bin_writer_bytes, bin_reader_bytes],
    bin_writer_char = [0, Bin_prot_Size[5], Bin_prot_Write[5]],
    cst_char = "char",
    bin_reader_char =
      [0,
       Bin_prot_Read[5],
       function(_be_, _bf_, _bg_){
        return variant_wrong_type(cst_char, _be_, _bf_, _bg_);
       }],
    bin_shape_char = Bin_prot_Shape[28],
    bin_char = [0, bin_shape_char, bin_writer_char, bin_reader_char],
    bin_writer_int = [0, Bin_prot_Size[6], Bin_prot_Write[6]],
    cst_int = "int",
    bin_reader_int =
      [0,
       Bin_prot_Read[6],
       function(_bb_, _bc_, _bd_){
        return variant_wrong_type(cst_int, _bb_, _bc_, _bd_);
       }],
    bin_shape_int = Bin_prot_Shape[30],
    bin_int = [0, bin_shape_int, bin_writer_int, bin_reader_int],
    bin_writer_float = [0, Bin_prot_Size[7], Bin_prot_Write[8]],
    cst_float = "float",
    bin_reader_float =
      [0,
       Bin_prot_Read[8],
       function(_a__, _a$_, _ba_){
        return variant_wrong_type(cst_float, _a__, _a$_, _ba_);
       }],
    bin_shape_float = Bin_prot_Shape[29],
    bin_float = [0, bin_shape_float, bin_writer_float, bin_reader_float],
    bin_writer_int32 = [0, Bin_prot_Size[8], Bin_prot_Write[9]],
    cst_int32 = "int32",
    bin_reader_int32 =
      [0,
       Bin_prot_Read[9],
       function(_a7_, _a8_, _a9_){
        return variant_wrong_type(cst_int32, _a7_, _a8_, _a9_);
       }],
    bin_shape_int32 = Bin_prot_Shape[31],
    bin_int32 = [0, bin_shape_int32, bin_writer_int32, bin_reader_int32],
    bin_writer_int64 = [0, Bin_prot_Size[9], Bin_prot_Write[10]],
    cst_int64 = "int64",
    bin_reader_int64 =
      [0,
       Bin_prot_Read[10],
       function(_a4_, _a5_, _a6_){
        return variant_wrong_type(cst_int64, _a4_, _a5_, _a6_);
       }],
    bin_shape_int64 = Bin_prot_Shape[33],
    bin_int64 = [0, bin_shape_int64, bin_writer_int64, bin_reader_int64],
    bin_writer_nativeint = [0, Bin_prot_Size[10], Bin_prot_Write[11]],
    cst_nativeint = "nativeint",
    bin_reader_nativeint =
      [0,
       Bin_prot_Read[11],
       function(_a1_, _a2_, _a3_){
        return variant_wrong_type(cst_nativeint, _a1_, _a2_, _a3_);
       }],
    bin_shape_nativeint = Bin_prot_Shape[34],
    bin_nativeint =
      [0, bin_shape_nativeint, bin_writer_nativeint, bin_reader_nativeint],
    bin_writer_nat0 = [0, Bin_prot_Size[11], Bin_prot_Write[7]],
    cst_nat0 = "nat0",
    bin_reader_nat0 =
      [0,
       Bin_prot_Read[7],
       function(_aY_, _aZ_, _a0_){
        return variant_wrong_type(cst_nat0, _aY_, _aZ_, _a0_);
       }],
    bin_shape_nat0 = Bin_prot_Shape[35],
    bin_nat0 = [0, bin_shape_nat0, bin_writer_nat0, bin_reader_nat0],
    cst_ref = "ref",
    cst_lazy = "lazy",
    cst_option = "option",
    cst_pair = "pair",
    cst_triple = "triple",
    cst_list = "list",
    cst_array = "array",
    cst_hashtbl = "hashtbl";
   function bin_writer_ref(bin_writer_el){
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[12], bin_writer_el[1], v);
            },
            function(buf, pos, v){
             return caml_call4
                     (Bin_prot_Write[12], bin_writer_el[2], buf, pos, v);
            }];
   }
   function bin_reader_ref(bin_reader_el){
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[12], bin_reader_el[1], buf, pos_ref);
            },
            function(_aV_, _aW_, _aX_){
             return variant_wrong_type(cst_ref, _aV_, _aW_, _aX_);
            }];
   }
   function bin_shape_ref(x1){return caml_call1(Bin_prot_Shape[56], x1);}
   function bin_ref(bin_el){
    var _aT_ = bin_reader_ref(bin_el[3]), _aU_ = bin_writer_ref(bin_el[2]);
    return [0, bin_shape_ref(bin_el[1]), _aU_, _aT_];
   }
   function bin_writer_lazy(bin_writer_el){
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[14], bin_writer_el[1], v);
            },
            function(buf, pos, v){
             return caml_call4
                     (Bin_prot_Write[13], bin_writer_el[2], buf, pos, v);
            }];
   }
   function bin_reader_lazy(bin_reader_el){
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[13], bin_reader_el[1], buf, pos_ref);
            },
            function(_aQ_, _aR_, _aS_){
             return variant_wrong_type(cst_lazy, _aQ_, _aR_, _aS_);
            }];
   }
   function bin_shape_lazy(x1){return caml_call1(Bin_prot_Shape[62], x1);}
   function bin_lazy(bin_el){
    var _aO_ = bin_reader_lazy(bin_el[3]), _aP_ = bin_writer_lazy(bin_el[2]);
    return [0, bin_shape_lazy(bin_el[1]), _aP_, _aO_];
   }
   function bin_writer_option(bin_writer_el){
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[15], bin_writer_el[1], v);
            },
            function(buf, pos, v){
             return caml_call4
                     (Bin_prot_Write[14], bin_writer_el[2], buf, pos, v);
            }];
   }
   function bin_reader_option(bin_reader_el){
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[14], bin_reader_el[1], buf, pos_ref);
            },
            function(_aL_, _aM_, _aN_){
             return variant_wrong_type(cst_option, _aL_, _aM_, _aN_);
            }];
   }
   function bin_shape_option(x1){return caml_call1(Bin_prot_Shape[57], x1);}
   function bin_option(bin_el){
    var
     _aJ_ = bin_reader_option(bin_el[3]),
     _aK_ = bin_writer_option(bin_el[2]);
    return [0, bin_shape_option(bin_el[1]), _aK_, _aJ_];
   }
   function bin_writer_pair(bin_writer_el1, bin_writer_el2){
    return [0,
            function(v){
             return caml_call3
                     (Bin_prot_Size[16], bin_writer_el1[1], bin_writer_el2[1], v);
            },
            function(buf, pos, v){
             return caml_call5
                     (Bin_prot_Write[15],
                      bin_writer_el1[2],
                      bin_writer_el2[2],
                      buf,
                      pos,
                      v);
            }];
   }
   function bin_reader_pair(bin_reader_el1, bin_reader_el2){
    return [0,
            function(buf, pos_ref){
             return caml_call4
                     (Bin_prot_Read[15],
                      bin_reader_el1[1],
                      bin_reader_el2[1],
                      buf,
                      pos_ref);
            },
            function(_aG_, _aH_, _aI_){
             return variant_wrong_type(cst_pair, _aG_, _aH_, _aI_);
            }];
   }
   function bin_pair(bin_el1, bin_el2){
    var
     _aE_ = bin_reader_pair(bin_el1[3], bin_el2[3]),
     _aF_ = bin_writer_pair(bin_el1[2], bin_el2[2]),
     x2 = bin_el2[1],
     x1 = bin_el1[1];
    return [0, caml_call2(Bin_prot_Shape[63], x1, x2), _aF_, _aE_];
   }
   function bin_writer_triple(bin_writer_el1, bin_writer_el2, bin_writer_el3){
    return [0,
            function(v){
             return caml_call4
                     (Bin_prot_Size[17],
                      bin_writer_el1[1],
                      bin_writer_el2[1],
                      bin_writer_el3[1],
                      v);
            },
            function(buf, pos, v){
             return caml_call6
                     (Bin_prot_Write[16],
                      bin_writer_el1[2],
                      bin_writer_el2[2],
                      bin_writer_el3[2],
                      buf,
                      pos,
                      v);
            }];
   }
   function bin_reader_triple(bin_reader_el1, bin_reader_el2, bin_reader_el3){
    return [0,
            function(buf, pos_ref){
             return caml_call5
                     (Bin_prot_Read[16],
                      bin_reader_el1[1],
                      bin_reader_el2[1],
                      bin_reader_el3[1],
                      buf,
                      pos_ref);
            },
            function(_aB_, _aC_, _aD_){
             return variant_wrong_type(cst_triple, _aB_, _aC_, _aD_);
            }];
   }
   function bin_triple(bin_el1, bin_el2, bin_el3){
    var
     _az_ = bin_reader_triple(bin_el1[3], bin_el2[3], bin_el3[3]),
     _aA_ = bin_writer_triple(bin_el1[2], bin_el2[2], bin_el3[2]),
     x3 = bin_el3[1],
     x2 = bin_el2[1],
     x1 = bin_el1[1];
    return [0, caml_call3(Bin_prot_Shape[64], x1, x2, x3), _aA_, _az_];
   }
   function bin_writer_list(bin_writer_el){
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[18], bin_writer_el[1], v);
            },
            function(buf, pos, v){
             return caml_call4
                     (Bin_prot_Write[17], bin_writer_el[2], buf, pos, v);
            }];
   }
   function bin_reader_list(bin_reader_el){
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[17], bin_reader_el[1], buf, pos_ref);
            },
            function(_aw_, _ax_, _ay_){
             return variant_wrong_type(cst_list, _aw_, _ax_, _ay_);
            }];
   }
   function bin_shape_list(x1){return caml_call1(Bin_prot_Shape[58], x1);}
   function bin_list(bin_el){
    var _au_ = bin_reader_list(bin_el[3]), _av_ = bin_writer_list(bin_el[2]);
    return [0, bin_shape_list(bin_el[1]), _av_, _au_];
   }
   function bin_writer_array(bin_writer_el){
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[19], bin_writer_el[1], v);
            },
            function(buf, pos, v){
             return caml_call4
                     (Bin_prot_Write[18], bin_writer_el[2], buf, pos, v);
            }];
   }
   function bin_reader_array(bin_reader_el){
    return [0,
            function(buf, pos_ref){
             return caml_call3
                     (Bin_prot_Read[18], bin_reader_el[1], buf, pos_ref);
            },
            function(_ar_, _as_, _at_){
             return variant_wrong_type(cst_array, _ar_, _as_, _at_);
            }];
   }
   function bin_shape_array(x1){return caml_call1(Bin_prot_Shape[59], x1);}
   function bin_array(bin_el){
    var
     _ap_ = bin_reader_array(bin_el[3]),
     _aq_ = bin_writer_array(bin_el[2]);
    return [0, bin_shape_array(bin_el[1]), _aq_, _ap_];
   }
   function bin_writer_hashtbl(bin_writer_el1, bin_writer_el2){
    return [0,
            function(v){
             return caml_call3
                     (Bin_prot_Size[20], bin_writer_el1[1], bin_writer_el2[1], v);
            },
            function(buf, pos, v){
             return caml_call5
                     (Bin_prot_Write[19],
                      bin_writer_el1[2],
                      bin_writer_el2[2],
                      buf,
                      pos,
                      v);
            }];
   }
   function bin_reader_hashtbl(bin_reader_el1, bin_reader_el2){
    return [0,
            function(buf, pos_ref){
             return caml_call4
                     (Bin_prot_Read[19],
                      bin_reader_el1[1],
                      bin_reader_el2[1],
                      buf,
                      pos_ref);
            },
            function(_am_, _an_, _ao_){
             return variant_wrong_type(cst_hashtbl, _am_, _an_, _ao_);
            }];
   }
   function bin_shape_hashtbl(x1, x2){
    return caml_call2(Bin_prot_Shape[60], x1, x2);
   }
   function bin_hashtbl(bin_el1, bin_el2){
    var
     _ak_ = bin_reader_hashtbl(bin_el1[3], bin_el2[3]),
     _al_ = bin_writer_hashtbl(bin_el1[2], bin_el2[2]);
    return [0, bin_shape_hashtbl(bin_el1[1], bin_el2[1]), _al_, _ak_];
   }
   var
    bin_writer_float32_vec = [0, Bin_prot_Size[21], Bin_prot_Write[20]],
    cst_float32_vec = "float32_vec",
    bin_reader_float32_vec =
      [0,
       Bin_prot_Read[20],
       function(_ah_, _ai_, _aj_){
        return variant_wrong_type(cst_float32_vec, _ah_, _ai_, _aj_);
       }],
    bin_shape_float32_vec = Bin_prot_Shape[37],
    bin_float32_vec =
      [0,
       bin_shape_float32_vec,
       bin_writer_float32_vec,
       bin_reader_float32_vec],
    bin_writer_float64_vec = [0, Bin_prot_Size[22], Bin_prot_Write[21]],
    cst_float64_vec = "float64_vec",
    bin_reader_float64_vec =
      [0,
       Bin_prot_Read[21],
       function(_ae_, _af_, _ag_){
        return variant_wrong_type(cst_float64_vec, _ae_, _af_, _ag_);
       }],
    bin_shape_float64_vec = Bin_prot_Shape[38],
    bin_float64_vec =
      [0,
       bin_shape_float64_vec,
       bin_writer_float64_vec,
       bin_reader_float64_vec],
    bin_writer_vec = [0, Bin_prot_Size[23], Bin_prot_Write[22]],
    cst_vec = "vec",
    bin_reader_vec =
      [0,
       Bin_prot_Read[22],
       function(_ab_, _ac_, _ad_){
        return variant_wrong_type(cst_vec, _ab_, _ac_, _ad_);
       }],
    bin_shape_vec = Bin_prot_Shape[39],
    bin_vec = [0, bin_shape_vec, bin_writer_vec, bin_reader_vec],
    bin_writer_float32_mat = [0, Bin_prot_Size[24], Bin_prot_Write[23]],
    cst_float32_mat = "float32_mat",
    bin_reader_float32_mat =
      [0,
       Bin_prot_Read[23],
       function(___, _$_, _aa_){
        return variant_wrong_type(cst_float32_mat, ___, _$_, _aa_);
       }],
    bin_shape_float32_mat = Bin_prot_Shape[40],
    bin_float32_mat =
      [0,
       bin_shape_float32_mat,
       bin_writer_float32_mat,
       bin_reader_float32_mat],
    bin_writer_float64_mat = [0, Bin_prot_Size[25], Bin_prot_Write[24]],
    cst_float64_mat = "float64_mat",
    bin_reader_float64_mat =
      [0,
       Bin_prot_Read[24],
       function(_X_, _Y_, _Z_){
        return variant_wrong_type(cst_float64_mat, _X_, _Y_, _Z_);
       }],
    bin_shape_float64_mat = Bin_prot_Shape[41],
    bin_float64_mat =
      [0,
       bin_shape_float64_mat,
       bin_writer_float64_mat,
       bin_reader_float64_mat],
    bin_writer_mat = [0, Bin_prot_Size[26], Bin_prot_Write[25]],
    cst_mat = "mat",
    bin_reader_mat =
      [0,
       Bin_prot_Read[25],
       function(_U_, _V_, _W_){
        return variant_wrong_type(cst_mat, _U_, _V_, _W_);
       }],
    bin_shape_mat = Bin_prot_Shape[42],
    bin_mat = [0, bin_shape_mat, bin_writer_mat, bin_reader_mat],
    bin_writer_bigstring = [0, Bin_prot_Size[27], Bin_prot_Write[26]],
    cst_bigstring = "bigstring",
    bin_reader_bigstring =
      [0,
       Bin_prot_Read[26],
       function(_R_, _S_, _T_){
        return variant_wrong_type(cst_bigstring, _R_, _S_, _T_);
       }],
    bin_shape_bigstring = Bin_prot_Shape[43],
    bin_bigstring =
      [0, bin_shape_bigstring, bin_writer_bigstring, bin_reader_bigstring],
    bin_writer_floatarray = [0, Bin_prot_Size[28], Bin_prot_Write[27]],
    cst_floatarray = "floatarray",
    bin_reader_floatarray =
      [0,
       Bin_prot_Read[27],
       function(_O_, _P_, _Q_){
        return variant_wrong_type(cst_floatarray, _O_, _P_, _Q_);
       }],
    bin_shape_floatarray = Bin_prot_Shape[44],
    bin_floatarray =
      [0, bin_shape_floatarray, bin_writer_floatarray, bin_reader_floatarray],
    bin_writer_float_array = [0, Bin_prot_Size[29], Bin_prot_Write[28]],
    cst_float_array = "float_array",
    bin_reader_float_array =
      [0,
       Bin_prot_Read[28],
       function(_L_, _M_, _N_){
        return variant_wrong_type(cst_float_array, _L_, _M_, _N_);
       }],
    bin_shape_float_array = Bin_prot_Shape[61],
    bin_float_array =
      [0,
       bin_shape_float_array,
       bin_writer_float_array,
       bin_reader_float_array],
    bin_writer_variant_int = [0, Bin_prot_Size[30], Bin_prot_Write[30]],
    cst_variant_int = "variant_int",
    bin_reader_variant_int =
      [0,
       Bin_prot_Read[29],
       function(_I_, _J_, _K_){
        return variant_wrong_type(cst_variant_int, _I_, _J_, _K_);
       }],
    bin_shape_variant_int = Bin_prot_Shape[45],
    bin_variant_int =
      [0,
       bin_shape_variant_int,
       bin_writer_variant_int,
       bin_reader_variant_int],
    bin_writer_int_8bit = [0, Bin_prot_Size[31], Bin_prot_Write[31]],
    cst_int_8bit = "int_8bit",
    bin_reader_int_8bit =
      [0,
       Bin_prot_Read[30],
       function(_F_, _G_, _H_){
        return variant_wrong_type(cst_int_8bit, _F_, _G_, _H_);
       }],
    bin_shape_int_8bit = Bin_prot_Shape[46],
    bin_int_8bit =
      [0, bin_shape_int_8bit, bin_writer_int_8bit, bin_reader_int_8bit],
    bin_writer_int_16bit = [0, Bin_prot_Size[32], Bin_prot_Write[32]],
    cst_int_16bit = "int_16bit",
    bin_reader_int_16bit =
      [0,
       Bin_prot_Read[31],
       function(_C_, _D_, _E_){
        return variant_wrong_type(cst_int_16bit, _C_, _D_, _E_);
       }],
    bin_shape_int_16bit = Bin_prot_Shape[47],
    bin_int_16bit =
      [0, bin_shape_int_16bit, bin_writer_int_16bit, bin_reader_int_16bit],
    bin_writer_int_32bit = [0, Bin_prot_Size[33], Bin_prot_Write[33]],
    cst_int_32bit = "int_32bit",
    bin_reader_int_32bit =
      [0,
       Bin_prot_Read[32],
       function(_z_, _A_, _B_){
        return variant_wrong_type(cst_int_32bit, _z_, _A_, _B_);
       }],
    bin_shape_int_32bit = Bin_prot_Shape[48],
    bin_int_32bit =
      [0, bin_shape_int_32bit, bin_writer_int_32bit, bin_reader_int_32bit],
    bin_writer_int_64bit = [0, Bin_prot_Size[34], Bin_prot_Write[34]],
    cst_int_64bit = "int_64bit",
    bin_reader_int_64bit =
      [0,
       Bin_prot_Read[33],
       function(_w_, _x_, _y_){
        return variant_wrong_type(cst_int_64bit, _w_, _x_, _y_);
       }],
    bin_shape_int_64bit = Bin_prot_Shape[49],
    bin_int_64bit =
      [0, bin_shape_int_64bit, bin_writer_int_64bit, bin_reader_int_64bit],
    bin_writer_int64_bits = [0, Bin_prot_Size[35], Bin_prot_Write[35]],
    cst_int64_bits = "int64_bits",
    bin_reader_int64_bits =
      [0,
       Bin_prot_Read[34],
       function(_t_, _u_, _v_){
        return variant_wrong_type(cst_int64_bits, _t_, _u_, _v_);
       }],
    bin_shape_int64_bits = Bin_prot_Shape[50],
    bin_int64_bits =
      [0, bin_shape_int64_bits, bin_writer_int64_bits, bin_reader_int64_bits],
    bin_writer_network16_int = [0, Bin_prot_Size[36], Bin_prot_Write[36]],
    cst_network16_int = "network16_int",
    bin_reader_network16_int =
      [0,
       Bin_prot_Read[35],
       function(_q_, _r_, _s_){
        return variant_wrong_type(cst_network16_int, _q_, _r_, _s_);
       }],
    bin_shape_network16_int = Bin_prot_Shape[51],
    bin_network16_int =
      [0,
       bin_shape_network16_int,
       bin_writer_network16_int,
       bin_reader_network16_int],
    bin_writer_network32_int = [0, Bin_prot_Size[37], Bin_prot_Write[37]],
    cst_network32_int = "network32_int",
    bin_reader_network32_int =
      [0,
       Bin_prot_Read[36],
       function(_n_, _o_, _p_){
        return variant_wrong_type(cst_network32_int, _n_, _o_, _p_);
       }],
    bin_shape_network32_int = Bin_prot_Shape[52],
    bin_network32_int =
      [0,
       bin_shape_network32_int,
       bin_writer_network32_int,
       bin_reader_network32_int],
    bin_writer_network32_int32 = [0, Bin_prot_Size[38], Bin_prot_Write[38]],
    cst_network32_int32 = "network32_int32",
    bin_reader_network32_int32 =
      [0,
       Bin_prot_Read[37],
       function(_k_, _l_, _m_){
        return variant_wrong_type(cst_network32_int32, _k_, _l_, _m_);
       }],
    bin_shape_network32_int32 = Bin_prot_Shape[53],
    bin_network32_int32 =
      [0,
       bin_shape_network32_int32,
       bin_writer_network32_int32,
       bin_reader_network32_int32],
    bin_writer_network64_int = [0, Bin_prot_Size[39], Bin_prot_Write[39]],
    cst_network64_int = "network64_int",
    bin_reader_network64_int =
      [0,
       Bin_prot_Read[38],
       function(_h_, _i_, _j_){
        return variant_wrong_type(cst_network64_int, _h_, _i_, _j_);
       }],
    bin_shape_network64_int = Bin_prot_Shape[54],
    bin_network64_int =
      [0,
       bin_shape_network64_int,
       bin_writer_network64_int,
       bin_reader_network64_int],
    bin_writer_network64_int64 = [0, Bin_prot_Size[40], Bin_prot_Write[40]],
    cst_network64_int64 = "network64_int64",
    bin_reader_network64_int64 =
      [0,
       Bin_prot_Read[39],
       function(_e_, _f_, _g_){
        return variant_wrong_type(cst_network64_int64, _e_, _f_, _g_);
       }],
    bin_shape_network64_int64 = Bin_prot_Shape[55],
    bin_network64_int64 =
      [0,
       bin_shape_network64_int64,
       bin_writer_network64_int64,
       bin_reader_network64_int64];
   function bin_writer_array_no_length(bin_writer_el){
    return [0,
            function(v){
             return caml_call2(Bin_prot_Size[41], bin_writer_el[1], v);
            },
            function(buf, pos, v){
             return caml_call4
                     (Bin_prot_Write[41], bin_writer_el[2], buf, pos, v);
            }];
   }
   function cnv_writer(cnv, tp_class){
    return [0,
            function(v){
             var _d_ = caml_call1(cnv, v);
             return caml_call1(tp_class[1], _d_);
            },
            function(buf, pos, v){
             var _c_ = caml_call1(cnv, v);
             return caml_call3(tp_class[2], buf, pos, _c_);
            }];
   }
   function cnv_reader(cnv, tp_class){
    return [0,
            function(buf, pos_ref){
             return caml_call1(cnv, caml_call2(tp_class[1], buf, pos_ref));
            },
            function(buf, pos_ref, vtag){
             return caml_call1
                     (cnv, caml_call3(tp_class[2], buf, pos_ref, vtag));
            }];
   }
   function cnv(for_shape, for_writer, for_reader, tp_class){
    var
     _a_ = cnv_reader(for_reader, tp_class[3]),
     _b_ = cnv_writer(for_writer, tp_class[2]);
    return [0, caml_call1(for_shape, tp_class[1]), _b_, _a_];
   }
   var
    Bin_prot_Type_class =
      [0,
       S1,
       S2,
       S3,
       bin_writer_unit,
       bin_reader_unit,
       bin_shape_unit,
       bin_unit,
       bin_writer_bool,
       bin_reader_bool,
       bin_shape_bool,
       bin_bool,
       bin_writer_string,
       bin_reader_string,
       bin_shape_string,
       bin_string,
       bin_writer_bytes,
       bin_reader_bytes,
       bin_shape_bytes,
       bin_bytes,
       bin_writer_char,
       bin_reader_char,
       bin_shape_char,
       bin_char,
       bin_writer_int,
       bin_reader_int,
       bin_shape_int,
       bin_int,
       bin_writer_float,
       bin_reader_float,
       bin_shape_float,
       bin_float,
       bin_writer_int32,
       bin_reader_int32,
       bin_shape_int32,
       bin_int32,
       bin_writer_int64,
       bin_reader_int64,
       bin_shape_int64,
       bin_int64,
       bin_writer_nativeint,
       bin_reader_nativeint,
       bin_shape_nativeint,
       bin_nativeint,
       bin_writer_nat0,
       bin_reader_nat0,
       bin_shape_nat0,
       bin_nat0,
       bin_writer_ref,
       bin_reader_ref,
       bin_shape_ref,
       bin_ref,
       bin_writer_lazy,
       bin_reader_lazy,
       bin_shape_lazy,
       bin_lazy,
       bin_writer_option,
       bin_reader_option,
       bin_shape_option,
       bin_option,
       bin_writer_pair,
       bin_reader_pair,
       bin_pair,
       bin_writer_triple,
       bin_reader_triple,
       bin_triple,
       bin_writer_list,
       bin_reader_list,
       bin_shape_list,
       bin_list,
       bin_writer_array,
       bin_reader_array,
       bin_shape_array,
       bin_array,
       bin_writer_hashtbl,
       bin_reader_hashtbl,
       bin_shape_hashtbl,
       bin_hashtbl,
       bin_writer_float32_vec,
       bin_reader_float32_vec,
       bin_shape_float32_vec,
       bin_float32_vec,
       bin_writer_float64_vec,
       bin_reader_float64_vec,
       bin_shape_float64_vec,
       bin_float64_vec,
       bin_writer_vec,
       bin_reader_vec,
       bin_shape_vec,
       bin_vec,
       bin_writer_float32_mat,
       bin_reader_float32_mat,
       bin_shape_float32_mat,
       bin_float32_mat,
       bin_writer_float64_mat,
       bin_reader_float64_mat,
       bin_shape_float64_mat,
       bin_float64_mat,
       bin_writer_mat,
       bin_reader_mat,
       bin_shape_mat,
       bin_mat,
       bin_writer_bigstring,
       bin_reader_bigstring,
       bin_shape_bigstring,
       bin_bigstring,
       bin_writer_floatarray,
       bin_reader_floatarray,
       bin_shape_floatarray,
       bin_floatarray,
       bin_writer_float_array,
       bin_reader_float_array,
       bin_shape_float_array,
       bin_float_array,
       bin_writer_variant_int,
       bin_reader_variant_int,
       bin_variant_int,
       bin_writer_int_8bit,
       bin_reader_int_8bit,
       bin_shape_int_8bit,
       bin_int_8bit,
       bin_writer_int_16bit,
       bin_reader_int_16bit,
       bin_shape_int_16bit,
       bin_int_16bit,
       bin_writer_int_32bit,
       bin_reader_int_32bit,
       bin_shape_int_32bit,
       bin_int_32bit,
       bin_writer_int_64bit,
       bin_reader_int_64bit,
       bin_shape_int_64bit,
       bin_int_64bit,
       bin_writer_int64_bits,
       bin_reader_int64_bits,
       bin_shape_int64_bits,
       bin_int64_bits,
       bin_writer_network16_int,
       bin_reader_network16_int,
       bin_shape_network16_int,
       bin_network16_int,
       bin_writer_network32_int,
       bin_reader_network32_int,
       bin_shape_network32_int,
       bin_network32_int,
       bin_writer_network32_int32,
       bin_reader_network32_int32,
       bin_shape_network32_int32,
       bin_network32_int32,
       bin_writer_network64_int,
       bin_reader_network64_int,
       bin_shape_network64_int,
       bin_network64_int,
       bin_writer_network64_int64,
       bin_reader_network64_int64,
       bin_shape_network64_int64,
       bin_network64_int64,
       bin_writer_array_no_length,
       cnv_writer,
       cnv_reader,
       cnv];
   runtime.caml_register_global
    (44, Bin_prot_Type_class, "Bin_prot__Type_class");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Binable
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Minimal = [0],
    Bin_prot_Binable = [0, Minimal];
   runtime.caml_register_global(0, Bin_prot_Binable, "Bin_prot__Binable");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Utils_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Bin_prot_Utils_intf = [0];
   runtime.caml_register_global
    (0, Bin_prot_Utils_intf, "Bin_prot__Utils_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Utils
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Size, Bin_prot__Utils_intf, Bin_prot__Write, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_bin_read_t$7 = "bin_read_t",
    cst_bin_size_t$3 = "bin_size_t",
    cst_bin_write_t$3 = "bin_write_t",
    cst_t$3 = "t";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Read = global_data.Bin_prot__Read,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    size_header_length = 8,
    bin_write_size_header = Bin_prot_Write[34],
    bin_read_size_header = Bin_prot_Read[33],
    cst_Bin_prot_Utils_bin_dump_si =
      "Bin_prot.Utils.bin_dump: size changed during writing",
    _a_ =
      [0,
       [11,
        "Bin_prot.Utils.bin_read_stream: size exceeds max_size: ",
        [4, 0, 0, 0, [11, " > ", [4, 0, 0, 0, 0]]]],
       "Bin_prot.Utils.bin_read_stream: size exceeds max_size: %d > %d"],
    _b_ =
      [0,
       [11,
        "Bin_prot.Utils.bin_read_stream: protocol lied about length of value: expected ",
        [4, 0, 0, 0, [11, ", received ", [4, 0, 0, 0, 0]]]],
       "Bin_prot.Utils.bin_read_stream: protocol lied about length of value: expected %d, received %d"],
    cst_Bin_prot_Utils_Make_binabl =
      "Bin_prot.Utils.Make_binable1.bin_reader_t",
    cst_Bin_prot_Utils_Make_binabl$0 =
      "Bin_prot.Utils.Make_binable2.bin_reader_t",
    cst_Bin_prot_Utils_Make_binabl$1 =
      "Bin_prot.Utils.Make_binable3.bin_reader_t",
    _c_ = [0, [2, 0, [12, 46, [2, 0, 0]]], "%s.%s"];
   function bin_dump(opt, writer, v){
    if(opt) var sth = opt[1], header = sth; else var header = 0;
    var pos_len = caml_call1(writer[1], v);
    if(header)
     var
      tot_len = caml_call2(Bin_prot_Common[23], pos_len, size_header_length),
      buf = caml_call1(Bin_prot_Common[1], tot_len),
      pos = caml_call3(bin_write_size_header, buf, 0, pos_len),
      pos_len$0 = caml_call2(Bin_prot_Common[23], pos, pos_len),
      pos$0 = pos,
      buf$0 = buf;
    else
     var
      buf$1 = caml_call1(Bin_prot_Common[1], pos_len),
      pos_len$0 = pos_len,
      pos$0 = 0,
      buf$0 = buf$1;
    var pos$1 = caml_call3(writer[2], buf$0, pos$0, v);
    return pos$1 === pos_len$0
            ? buf$0
            : caml_call1(Stdlib[2], cst_Bin_prot_Utils_bin_dump_si);
   }
   function bin_read_stream(max_size, read, reader){
    var buf = caml_call1(Bin_prot_Common[1], size_header_length);
    caml_call3(read, buf, 0, size_header_length);
    var
     pos_ref = [0, 0],
     len = caml_call2(bin_read_size_header, buf, pos_ref);
    if(max_size){
     var max_size$0 = max_size[1];
     if(max_size$0 < len){
      var _an_ = caml_call3(Stdlib_Printf[4], _a_, len, max_size$0);
      return caml_call1(Stdlib[2], _an_);
     }
    }
    var buf$0 = 8 < len ? caml_call1(Bin_prot_Common[1], len) : buf;
    caml_call3(read, buf$0, 0, len);
    pos_ref[1] = 0;
    var res = caml_call2(reader[1], buf$0, pos_ref);
    if(pos_ref[1] === len) return res;
    var msg = caml_call3(Stdlib_Printf[4], _b_, len, pos_ref[1]);
    return caml_call1(Stdlib[2], msg);
   }
   function Of_minimal(S){
    var
     bin_shape_t = S[1],
     bin_size_t = S[2],
     bin_write_t = S[3],
     bin_read_t = S[4],
     bin_read_t$0 = S[5],
     bin_writer_t = [0, bin_size_t, bin_write_t],
     bin_reader_t = [0, bin_read_t, bin_read_t$0],
     bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
    return [0,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function maybe_annotate_shape(maybe_uuid, shape){
    if(! maybe_uuid) return shape;
    var uuid = maybe_uuid[1];
    return caml_call2(Bin_prot_Shape[17], uuid, shape);
   }
   function Make_binable_gen(S){
    var B = S[1], bin_shape_t = maybe_annotate_shape(S[4], B[1]);
    function bin_size_t(t){
     var _am_ = caml_call1(S[2], t);
     return caml_call1(B[2], _am_);
    }
    function bin_write_t(buf, pos, t){
     var _al_ = caml_call1(S[2], t);
     return caml_call3(B[3], buf, pos, _al_);
    }
    function bin_read_t(buf, pos_ref){
     var _ak_ = caml_call2(B[4], buf, pos_ref);
     return caml_call1(S[3], _ak_);
    }
    function bin_read_t$0(buf, pos_ref, n){
     var _aj_ = caml_call3(B[5], buf, pos_ref, n);
     return caml_call1(S[3], _aj_);
    }
    var
     include =
       Of_minimal
        ([0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t, bin_read_t$0]),
     bin_size_t$0 = include[1],
     bin_write_t$0 = include[2],
     bin_read_t$1 = include[3],
     bin_read_t$2 = include[4],
     bin_shape_t$0 = include[5],
     bin_writer_t = include[6],
     bin_reader_t = include[7],
     bin_t = include[8];
    return [0,
            bin_size_t$0,
            bin_write_t$0,
            bin_read_t$1,
            bin_read_t$2,
            bin_shape_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_binable1_gen(S){
    var B = S[1];
    function bin_shape_t(bin_shape_el){
     var _ai_ = caml_call1(B[1], bin_shape_el);
     return maybe_annotate_shape(S[4], _ai_);
    }
    function bin_size_t(bin_size_el, t){
     var _ah_ = caml_call1(S[2], t);
     return caml_call2(B[2], bin_size_el, _ah_);
    }
    function bin_write_t(bin_write_el, buf, pos, t){
     var _ag_ = caml_call1(S[2], t);
     return caml_call4(B[3], bin_write_el, buf, pos, _ag_);
    }
    function bin_read_t(bin_read_el, buf, pos_ref){
     var _af_ = caml_call3(B[4], bin_read_el, buf, pos_ref);
     return caml_call1(S[3], _af_);
    }
    function bin_read_t$0(bin_read_el, buf, pos_ref, n){
     var _ae_ = caml_call4(B[5], bin_read_el, buf, pos_ref, n);
     return caml_call1(S[3], _ae_);
    }
    function bin_writer_t(bin_writer){
     return [0,
             function(v){return bin_size_t(bin_writer[1], v);},
             function(buf, pos, v){
              return bin_write_t(bin_writer[2], buf, pos, v);
             }];
    }
    function bin_reader_t(bin_reader){
     return [0,
             function(buf, pos_ref){
              return bin_read_t(bin_reader[1], buf, pos_ref);
             },
             function(buf, pos_ref, n){
              return caml_call2
                      (Bin_prot_Common[19],
                       cst_Bin_prot_Utils_Make_binabl,
                       pos_ref[1]);
             }];
    }
    function bin_t(type_class){
     var
      _ac_ = bin_reader_t(type_class[3]),
      _ad_ = bin_writer_t(type_class[2]);
     return [0, bin_shape_t(type_class[1]), _ad_, _ac_];
    }
    return [0,
            ,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_binable2_gen(S){
    var B = S[1];
    function bin_shape_t(bin_shape_el1, bin_shape_el2){
     var _ab_ = caml_call2(B[1], bin_shape_el1, bin_shape_el2);
     return maybe_annotate_shape(S[4], _ab_);
    }
    function bin_size_t(bin_size_el1, bin_size_el2, t){
     var _aa_ = caml_call1(S[2], t);
     return caml_call3(B[2], bin_size_el1, bin_size_el2, _aa_);
    }
    function bin_write_t(bin_write_el1, bin_write_el2, buf, pos, t){
     var _$_ = caml_call1(S[2], t);
     return caml_call5(B[3], bin_write_el1, bin_write_el2, buf, pos, _$_);
    }
    function bin_read_t(bin_read_el1, bin_read_el2, buf, pos_ref){
     var ___ = caml_call4(B[4], bin_read_el1, bin_read_el2, buf, pos_ref);
     return caml_call1(S[3], ___);
    }
    function bin_read_t$0(bin_read_el1, bin_read_el2, buf, pos_ref, n){
     var _Z_ = caml_call5(B[5], bin_read_el1, bin_read_el2, buf, pos_ref, n);
     return caml_call1(S[3], _Z_);
    }
    function bin_writer_t(bin_writer1, bin_writer2){
     return [0,
             function(v){
              return bin_size_t(bin_writer1[1], bin_writer2[1], v);
             },
             function(buf, pos, v){
              return bin_write_t(bin_writer1[2], bin_writer2[2], buf, pos, v);
             }];
    }
    function bin_reader_t(bin_reader1, bin_reader2){
     return [0,
             function(buf, pos_ref){
              return bin_read_t(bin_reader1[1], bin_reader2[1], buf, pos_ref);
             },
             function(buf, pos_ref, n){
              return caml_call2
                      (Bin_prot_Common[19],
                       cst_Bin_prot_Utils_Make_binabl$0,
                       pos_ref[1]);
             }];
    }
    function bin_t(type_class1, type_class2){
     var
      _X_ = bin_reader_t(type_class1[3], type_class2[3]),
      _Y_ = bin_writer_t(type_class1[2], type_class2[2]);
     return [0, bin_shape_t(type_class1[1], type_class2[1]), _Y_, _X_];
    }
    return [0,
            ,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_binable3_gen(S){
    var B = S[1];
    function bin_shape_t(bin_shape_el1, bin_shape_el2, bin_shape_el3){
     var _W_ = caml_call3(B[1], bin_shape_el1, bin_shape_el2, bin_shape_el3);
     return maybe_annotate_shape(S[4], _W_);
    }
    function bin_size_t(bin_size_el1, bin_size_el2, bin_size_el3, t){
     var _V_ = caml_call1(S[2], t);
     return caml_call4(B[2], bin_size_el1, bin_size_el2, bin_size_el3, _V_);
    }
    function bin_write_t
    (bin_write_el1, bin_write_el2, bin_write_el3, buf, pos, t){
     var _U_ = caml_call1(S[2], t);
     return caml_call6
             (B[3],
              bin_write_el1,
              bin_write_el2,
              bin_write_el3,
              buf,
              pos,
              _U_);
    }
    function bin_read_t
    (bin_read_el1, bin_read_el2, bin_read_el3, buf, pos_ref){
     var
      _T_ =
        caml_call5
         (B[4], bin_read_el1, bin_read_el2, bin_read_el3, buf, pos_ref);
     return caml_call1(S[3], _T_);
    }
    function bin_read_t$0
    (bin_read_el1, bin_read_el2, bin_read_el3, buf, pos_ref, n){
     var
      _S_ =
        caml_call6
         (B[5], bin_read_el1, bin_read_el2, bin_read_el3, buf, pos_ref, n);
     return caml_call1(S[3], _S_);
    }
    function bin_writer_t(bin_writer1, bin_writer2, bin_writer3){
     return [0,
             function(v){
              return bin_size_t
                      (bin_writer1[1], bin_writer2[1], bin_writer3[1], v);
             },
             function(buf, pos, v){
              return bin_write_t
                      (bin_writer1[2],
                       bin_writer2[2],
                       bin_writer3[2],
                       buf,
                       pos,
                       v);
             }];
    }
    function bin_reader_t(bin_reader1, bin_reader2, bin_reader3){
     return [0,
             function(buf, pos_ref){
              return bin_read_t
                      (bin_reader1[1],
                       bin_reader2[1],
                       bin_reader3[1],
                       buf,
                       pos_ref);
             },
             function(buf, pos_ref, n){
              return caml_call2
                      (Bin_prot_Common[19],
                       cst_Bin_prot_Utils_Make_binabl$1,
                       pos_ref[1]);
             }];
    }
    function bin_t(type_class1, type_class2, type_class3){
     var
      _Q_ = bin_reader_t(type_class1[3], type_class2[3], type_class3[3]),
      _R_ = bin_writer_t(type_class1[2], type_class2[2], type_class3[2]);
     return [0,
             bin_shape_t(type_class1[1], type_class2[1], type_class3[1]),
             _R_,
             _Q_];
    }
    return [0,
            ,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_binable_with_uuid(S){
    var
     Binable = S[1],
     to_binable = S[2],
     of_binable = S[3],
     maybe_caller_identity = [0, S[4]];
    return Make_binable_gen
            ([0, Binable, to_binable, of_binable, maybe_caller_identity]);
   }
   function Make_binable_without_uuid(S){
    var Binable = S[1], to_binable = S[2], of_binable = S[3];
    return Make_binable_gen([0, Binable, to_binable, of_binable, 0]);
   }
   function with_module_name(f, module_name, function_name){
    if(! module_name) return caml_call1(f, function_name);
    var module_name$0 = module_name[1];
    return caml_call4(Stdlib_Printf[10], f, _c_, module_name$0, function_name);
   }
   var
    _d_ = Bin_prot_Common[20],
    _e_ =
      caml_call2
       (Stdlib_Printf[10],
        Stdlib[2],
        [0,
         [2, 0, [11, ": tried to read more elements than available", 0]],
         "%s: tried to read more elements than available"]),
    _f_ =
      caml_call2
       (Stdlib_Printf[10],
        Stdlib[2],
        [0,
         [2, 0, [11, ": didn't read all elements", 0]],
         "%s: didn't read all elements"]),
    cst_6592371a_4994_11e6_923a_77 = "6592371a-4994-11e6-923a-7748e4182764",
    cst_bin_size_t = cst_bin_size_t$3,
    cst_bin_write_t = cst_bin_write_t$3,
    cst_bin_read_t = cst_bin_read_t$7,
    cst_bin_read_t$0 = cst_bin_read_t$7,
    cst_t = cst_t$3,
    cst_ac8a9ff4_4994_11e6_9a1b_9f = "ac8a9ff4-4994-11e6-9a1b-9fb4e933bd9d",
    cst_bin_size_t$0 = cst_bin_size_t$3,
    cst_bin_write_t$0 = cst_bin_write_t$3,
    cst_bin_read_t$1 = cst_bin_read_t$7,
    cst_bin_read_t$2 = cst_bin_read_t$7,
    cst_t$0 = cst_t$3,
    cst_b4e54ad2_4994_11e6_b8df_87 = "b4e54ad2-4994-11e6-b8df-87c2997f9f52",
    cst_bin_size_t$1 = cst_bin_size_t$3,
    cst_bin_write_t$1 = cst_bin_write_t$3,
    cst_bin_read_t$3 = cst_bin_read_t$7,
    cst_bin_read_t$4 = cst_bin_read_t$7,
    cst_t$1 = cst_t$3,
    cst_f2112eda_e7d7_11e6_bb36_07 = "f2112eda-e7d7-11e6-bb36-072e9ce159db",
    cst_bin_size_t$2 = cst_bin_size_t$3,
    cst_bin_write_t$2 = cst_bin_write_t$3,
    cst_bin_read_t$5 = cst_bin_read_t$7,
    cst_bin_read_t$6 = cst_bin_read_t$7,
    cst_t$2 = cst_t$3;
   function Make_iterable_binable1(S){
    function bin_shape_t(t){
     var
      _N_ = [0, caml_call1(S[9], t), 0],
      _O_ = caml_call1(Bin_prot_Shape[5][1], cst_ac8a9ff4_4994_11e6_9a1b_9f),
      _P_ = [0, caml_call2(Bin_prot_Shape[16], _O_, _N_), 0];
     return caml_call2(Bin_prot_Shape[16], S[1], _P_);
    }
    function bin_size_t(bin_size_a, t){
     var size_ref = [0, 0], cnt_ref = [0, 0];
     caml_call2
      (S[4],
       t,
       function(el){
        var _M_ = caml_call2(S[6], bin_size_a, el);
        size_ref[1] = caml_call2(Bin_prot_Common[23], size_ref[1], _M_);
        cnt_ref[1]++;
        return 0;
       });
     var len = caml_call1(S[3], t);
     if(cnt_ref[1] !== len)
      return with_module_name(_d_, S[2], cst_bin_size_t$0);
     var _K_ = size_ref[1], _L_ = caml_call1(Bin_prot_Size[11], len);
     return caml_call2(Bin_prot_Common[23], _L_, _K_);
    }
    function bin_write_t(bin_write_a, buf, pos, t){
     var
      plen = caml_call1(S[3], t),
      pos_ref = [0, caml_call3(Bin_prot_Write[7], buf, pos, plen)],
      cnt_ref = [0, 0];
     caml_call2
      (S[4],
       t,
       function(el){
        pos_ref[1] = caml_call4(S[7], bin_write_a, buf, pos_ref[1], el);
        cnt_ref[1]++;
        return 0;
       });
     return cnt_ref[1] === plen
             ? pos_ref[1]
             : with_module_name(_d_, S[2], cst_bin_write_t$0);
    }
    function bin_read_t(bin_read_a, buf, pos_ref){
     var len = caml_call2(Bin_prot_Read[7], buf, pos_ref), idx = [0, 0];
     function next(param){
      if(len <= idx[1]) with_module_name(_e_, S[2], cst_bin_read_t$1);
      idx[1]++;
      return caml_call3(S[8], bin_read_a, buf, pos_ref);
     }
     var result = caml_call2(S[5], len, next);
     if(idx[1] < len) with_module_name(_f_, S[2], cst_bin_read_t$2);
     return result;
    }
    function bin_read_t$0(bin_read_a, buf, pos_ref, n){
     return caml_call2(Bin_prot_Common[19], cst_t$0, pos_ref[1]);
    }
    function bin_writer_t(bin_writer){
     return [0,
             function(v){return bin_size_t(bin_writer[1], v);},
             function(buf, pos, v){
              return bin_write_t(bin_writer[2], buf, pos, v);
             }];
    }
    function bin_reader_t(bin_reader){
     return [0,
             function(buf, pos_ref){
              return bin_read_t(bin_reader[1], buf, pos_ref);
             },
             function(buf, pos_ref, n){
              return bin_read_t$0(bin_reader[1], buf, pos_ref, n);
             }];
    }
    function bin_t(type_class){
     var _I_ = bin_reader_t(type_class[3]), _J_ = bin_writer_t(type_class[2]);
     return [0, bin_shape_t(type_class[1]), _J_, _I_];
    }
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_iterable_binable2(S){
    function bin_shape_t(t1, t2){
     var
      _F_ = [0, caml_call2(S[9], t1, t2), 0],
      _G_ = caml_call1(Bin_prot_Shape[5][1], cst_b4e54ad2_4994_11e6_b8df_87),
      _H_ = [0, caml_call2(Bin_prot_Shape[16], _G_, _F_), 0];
     return caml_call2(Bin_prot_Shape[16], S[1], _H_);
    }
    function bin_size_t(bin_size_a, bin_size_b, t){
     var size_ref = [0, 0], cnt_ref = [0, 0];
     caml_call2
      (S[4],
       t,
       function(el){
        var _E_ = caml_call3(S[6], bin_size_a, bin_size_b, el);
        size_ref[1] = caml_call2(Bin_prot_Common[23], size_ref[1], _E_);
        cnt_ref[1]++;
        return 0;
       });
     var len = caml_call1(S[3], t);
     if(cnt_ref[1] !== len)
      return with_module_name(_d_, S[2], cst_bin_size_t$1);
     var _C_ = size_ref[1], _D_ = caml_call1(Bin_prot_Size[11], len);
     return caml_call2(Bin_prot_Common[23], _D_, _C_);
    }
    function bin_write_t(bin_write_a, bin_write_b, buf, pos, t){
     var
      plen = caml_call1(S[3], t),
      pos_ref = [0, caml_call3(Bin_prot_Write[7], buf, pos, plen)],
      cnt_ref = [0, 0];
     caml_call2
      (S[4],
       t,
       function(el){
        pos_ref[1] =
         caml_call5(S[7], bin_write_a, bin_write_b, buf, pos_ref[1], el);
        cnt_ref[1]++;
        return 0;
       });
     return cnt_ref[1] === plen
             ? pos_ref[1]
             : with_module_name(_d_, S[2], cst_bin_write_t$1);
    }
    function bin_read_t(bin_read_a, bin_read_b, buf, pos_ref){
     var len = caml_call2(Bin_prot_Read[7], buf, pos_ref), idx = [0, 0];
     function next(param){
      if(len <= idx[1]) with_module_name(_e_, S[2], cst_bin_read_t$3);
      idx[1]++;
      return caml_call4(S[8], bin_read_a, bin_read_b, buf, pos_ref);
     }
     var result = caml_call2(S[5], len, next);
     if(idx[1] < len) with_module_name(_f_, S[2], cst_bin_read_t$4);
     return result;
    }
    function bin_read_t$0(bin_read_a, bin_read_b, buf, pos_ref, n){return caml_call2(Bin_prot_Common[19], cst_t$1, pos_ref[1]);
    }
    function bin_writer_t(bin_writer1, bin_writer2){
     return [0,
             function(v){
              return bin_size_t(bin_writer1[1], bin_writer2[1], v);
             },
             function(buf, pos, v){
              return bin_write_t(bin_writer1[2], bin_writer2[2], buf, pos, v);
             }];
    }
    function bin_reader_t(bin_reader1, bin_reader2){
     return [0,
             function(buf, pos_ref){
              return bin_read_t(bin_reader1[1], bin_reader2[1], buf, pos_ref);
             },
             function(buf, pos_ref, n){
              return bin_read_t$0
                      (bin_reader1[1], bin_reader2[1], buf, pos_ref, n);
             }];
    }
    function bin_t(type_class1, type_class2){
     var
      _A_ = bin_reader_t(type_class1[3], type_class2[3]),
      _B_ = bin_writer_t(type_class1[2], type_class2[2]);
     return [0, bin_shape_t(type_class1[1], type_class2[1]), _B_, _A_];
    }
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   function Make_iterable_binable3(S){
    function bin_shape_t(t1, t2, t3){
     var
      _x_ = [0, caml_call3(S[9], t1, t2, t3), 0],
      _y_ = caml_call1(Bin_prot_Shape[5][1], cst_f2112eda_e7d7_11e6_bb36_07),
      _z_ = [0, caml_call2(Bin_prot_Shape[16], _y_, _x_), 0];
     return caml_call2(Bin_prot_Shape[16], S[1], _z_);
    }
    function bin_size_t(bin_size_a, bin_size_b, bin_size_c, t){
     var size_ref = [0, 0], cnt_ref = [0, 0];
     caml_call2
      (S[4],
       t,
       function(el){
        var _w_ = caml_call4(S[6], bin_size_a, bin_size_b, bin_size_c, el);
        size_ref[1] = caml_call2(Bin_prot_Common[23], size_ref[1], _w_);
        cnt_ref[1]++;
        return 0;
       });
     var len = caml_call1(S[3], t);
     if(cnt_ref[1] !== len)
      return with_module_name(_d_, S[2], cst_bin_size_t$2);
     var _u_ = size_ref[1], _v_ = caml_call1(Bin_prot_Size[11], len);
     return caml_call2(Bin_prot_Common[23], _v_, _u_);
    }
    function bin_write_t(bin_write_a, bin_write_b, bin_write_c, buf, pos, t){
     var
      plen = caml_call1(S[3], t),
      pos_ref = [0, caml_call3(Bin_prot_Write[7], buf, pos, plen)],
      cnt_ref = [0, 0];
     caml_call2
      (S[4],
       t,
       function(el){
        pos_ref[1] =
         caml_call6
          (S[7], bin_write_a, bin_write_b, bin_write_c, buf, pos_ref[1], el);
        cnt_ref[1]++;
        return 0;
       });
     return cnt_ref[1] === plen
             ? pos_ref[1]
             : with_module_name(_d_, S[2], cst_bin_write_t$2);
    }
    function bin_read_t(bin_read_a, bin_read_b, bin_read_c, buf, pos_ref){
     var len = caml_call2(Bin_prot_Read[7], buf, pos_ref), idx = [0, 0];
     function next(param){
      if(len <= idx[1]) with_module_name(_e_, S[2], cst_bin_read_t$5);
      idx[1]++;
      return caml_call5
              (S[8], bin_read_a, bin_read_b, bin_read_c, buf, pos_ref);
     }
     var result = caml_call2(S[5], len, next);
     if(idx[1] < len) with_module_name(_f_, S[2], cst_bin_read_t$6);
     return result;
    }
    function bin_read_t$0(bin_read_a, bin_read_b, bin_read_c, buf, pos_ref, n){return caml_call2(Bin_prot_Common[19], cst_t$2, pos_ref[1]);
    }
    function bin_writer_t(bin_writer1, bin_writer2, bin_writer3){
     return [0,
             function(v){
              return bin_size_t
                      (bin_writer1[1], bin_writer2[1], bin_writer3[1], v);
             },
             function(buf, pos, v){
              return bin_write_t
                      (bin_writer1[2],
                       bin_writer2[2],
                       bin_writer3[2],
                       buf,
                       pos,
                       v);
             }];
    }
    function bin_reader_t(bin_reader1, bin_reader2, bin_reader3){
     return [0,
             function(buf, pos_ref){
              return bin_read_t
                      (bin_reader1[1],
                       bin_reader2[1],
                       bin_reader3[1],
                       buf,
                       pos_ref);
             },
             function(buf, pos_ref, n){
              return bin_read_t$0
                      (bin_reader1[1],
                       bin_reader2[1],
                       bin_reader3[1],
                       buf,
                       pos_ref,
                       n);
             }];
    }
    function bin_t(type_class1, type_class2, type_class3){
     var
      _s_ = bin_reader_t(type_class1[3], type_class2[3], type_class3[3]),
      _t_ = bin_writer_t(type_class1[2], type_class2[2], type_class3[2]);
     return [0,
             bin_shape_t(type_class1[1], type_class2[1], type_class3[1]),
             _t_,
             _s_];
    }
    return [0,
            bin_shape_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_writer_t,
            bin_reader_t,
            bin_t];
   }
   var
    Bin_prot_Utils =
      [0,
       size_header_length,
       bin_read_size_header,
       bin_write_size_header,
       bin_dump,
       bin_read_stream,
       Of_minimal,
       Make_binable_with_uuid,
       function(S){
        var
         Binable = S[1],
         to_binable = S[2],
         of_binable = S[3],
         maybe_caller_identity = [0, S[4]],
         _r_ =
           Make_binable1_gen
            ([0, Binable, to_binable, of_binable, maybe_caller_identity]);
        return [0,
                _r_[2],
                _r_[3],
                _r_[4],
                _r_[5],
                _r_[6],
                _r_[7],
                _r_[8],
                _r_[9]];
       },
       function(S){
        var
         Binable = S[1],
         to_binable = S[2],
         of_binable = S[3],
         maybe_caller_identity = [0, S[4]],
         _q_ =
           Make_binable2_gen
            ([0, Binable, to_binable, of_binable, maybe_caller_identity]);
        return [0,
                _q_[2],
                _q_[3],
                _q_[4],
                _q_[5],
                _q_[6],
                _q_[7],
                _q_[8],
                _q_[9]];
       },
       function(S){
        var
         Binable = S[1],
         to_binable = S[2],
         of_binable = S[3],
         maybe_caller_identity = [0, S[4]],
         _p_ =
           Make_binable3_gen
            ([0, Binable, to_binable, of_binable, maybe_caller_identity]);
        return [0,
                _p_[2],
                _p_[3],
                _p_[4],
                _p_[5],
                _p_[6],
                _p_[7],
                _p_[8],
                _p_[9]];
       },
       Make_binable_without_uuid,
       function(S){
        var
         Binable = S[1],
         to_binable = S[2],
         of_binable = S[3],
         _o_ = Make_binable1_gen([0, Binable, to_binable, of_binable, 0]);
        return [0,
                _o_[2],
                _o_[3],
                _o_[4],
                _o_[5],
                _o_[6],
                _o_[7],
                _o_[8],
                _o_[9]];
       },
       function(S){
        var
         Binable = S[1],
         to_binable = S[2],
         of_binable = S[3],
         _n_ = Make_binable2_gen([0, Binable, to_binable, of_binable, 0]);
        return [0,
                _n_[2],
                _n_[3],
                _n_[4],
                _n_[5],
                _n_[6],
                _n_[7],
                _n_[8],
                _n_[9]];
       },
       function(S){
        var
         Binable = S[1],
         to_binable = S[2],
         of_binable = S[3],
         _m_ = Make_binable3_gen([0, Binable, to_binable, of_binable, 0]);
        return [0,
                _m_[2],
                _m_[3],
                _m_[4],
                _m_[5],
                _m_[6],
                _m_[7],
                _m_[8],
                _m_[9]];
       },
       function(S){
        var
         _g_ = [0, S[9], 0],
         _h_ =
           caml_call1(Bin_prot_Shape[5][1], cst_6592371a_4994_11e6_923a_77),
         _i_ = [0, caml_call2(Bin_prot_Shape[16], _h_, _g_), 0],
         bin_shape_t = caml_call2(Bin_prot_Shape[16], S[1], _i_);
        function bin_size_t(t){
         var size_ref = [0, 0], cnt_ref = [0, 0];
         caml_call2
          (S[4],
           t,
           function(el){
            var _l_ = caml_call1(S[6], el);
            size_ref[1] = caml_call2(Bin_prot_Common[23], size_ref[1], _l_);
            cnt_ref[1]++;
            return 0;
           });
         var len = caml_call1(S[3], t);
         if(cnt_ref[1] !== len)
          return with_module_name(_d_, S[2], cst_bin_size_t);
         var _j_ = size_ref[1], _k_ = caml_call1(Bin_prot_Size[11], len);
         return caml_call2(Bin_prot_Common[23], _k_, _j_);
        }
        function bin_write_t(buf, pos, t){
         var
          plen = caml_call1(S[3], t),
          pos_ref = [0, caml_call3(Bin_prot_Write[7], buf, pos, plen)],
          cnt_ref = [0, 0];
         caml_call2
          (S[4],
           t,
           function(el){
            pos_ref[1] = caml_call3(S[7], buf, pos_ref[1], el);
            cnt_ref[1]++;
            return 0;
           });
         return cnt_ref[1] === plen
                 ? pos_ref[1]
                 : with_module_name(_d_, S[2], cst_bin_write_t);
        }
        function bin_read_t(buf, pos_ref){
         var len = caml_call2(Bin_prot_Read[7], buf, pos_ref), idx = [0, 0];
         function next(param){
          if(len <= idx[1]) with_module_name(_e_, S[2], cst_bin_read_t);
          idx[1]++;
          return caml_call2(S[8], buf, pos_ref);
         }
         var result = caml_call2(S[5], len, next);
         if(idx[1] < len) with_module_name(_f_, S[2], cst_bin_read_t$0);
         return result;
        }
        function bin_read_t$0(buf, pos_ref, n){
         return caml_call2(Bin_prot_Common[19], cst_t, pos_ref[1]);
        }
        var
         bin_writer_t = [0, bin_size_t, bin_write_t],
         bin_reader_t = [0, bin_read_t, bin_read_t$0],
         bin_t = [0, bin_shape_t, bin_writer_t, bin_reader_t];
        return [0,
                bin_size_t,
                bin_write_t,
                bin_read_t,
                bin_read_t$0,
                bin_shape_t,
                bin_writer_t,
                bin_reader_t,
                bin_t];
       },
       Make_iterable_binable1,
       Make_iterable_binable2,
       Make_iterable_binable3];
   runtime.caml_register_global(40, Bin_prot_Utils, "Bin_prot__Utils");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Std
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Size, Bin_prot__Type_class, Bin_prot__Write
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_lazy$1 = "lazy";
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Type_class = global_data.Bin_prot__Type_class,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Read = global_data.Bin_prot__Read,
    bin_size_unit = Bin_prot_Size[1],
    bin_size_bool = Bin_prot_Size[2],
    bin_size_string = Bin_prot_Size[3],
    bin_size_bytes = Bin_prot_Size[4],
    bin_size_char = Bin_prot_Size[5],
    bin_size_int = Bin_prot_Size[6],
    bin_size_float = Bin_prot_Size[7],
    bin_size_int32 = Bin_prot_Size[8],
    bin_size_int64 = Bin_prot_Size[9],
    bin_size_nativeint = Bin_prot_Size[10],
    bin_size_nat0 = Bin_prot_Size[11],
    bin_size_ref = Bin_prot_Size[12],
    bin_size_lazy_t = Bin_prot_Size[13],
    bin_size_lazy = Bin_prot_Size[14],
    bin_size_option = Bin_prot_Size[15],
    bin_size_pair = Bin_prot_Size[16],
    bin_size_triple = Bin_prot_Size[17],
    bin_size_list = Bin_prot_Size[18],
    bin_size_array = Bin_prot_Size[19],
    bin_size_hashtbl = Bin_prot_Size[20],
    bin_size_float32_vec = Bin_prot_Size[21],
    bin_size_float64_vec = Bin_prot_Size[22],
    bin_size_vec = Bin_prot_Size[23],
    bin_size_float32_mat = Bin_prot_Size[24],
    bin_size_float64_mat = Bin_prot_Size[25],
    bin_size_mat = Bin_prot_Size[26],
    bin_size_bigstring = Bin_prot_Size[27],
    bin_size_floatarray = Bin_prot_Size[28],
    bin_size_float_array = Bin_prot_Size[29],
    bin_size_variant_int = Bin_prot_Size[30],
    bin_size_int_8bit = Bin_prot_Size[31],
    bin_size_int_16bit = Bin_prot_Size[32],
    bin_size_int_32bit = Bin_prot_Size[33],
    bin_size_int_64bit = Bin_prot_Size[34],
    bin_size_int64_bits = Bin_prot_Size[35],
    bin_size_network16_int = Bin_prot_Size[36],
    bin_size_network32_int = Bin_prot_Size[37],
    bin_size_network32_int32 = Bin_prot_Size[38],
    bin_size_network64_int = Bin_prot_Size[39],
    bin_size_network64_int64 = Bin_prot_Size[40],
    bin_size_array_no_length = Bin_prot_Size[41],
    bin_size_md5 = Bin_prot_Size[42],
    Maximum = Bin_prot_Size[43],
    Minimum = Bin_prot_Size[44],
    bin_unit = Bin_prot_Type_class[7],
    bin_shape_unit = Bin_prot_Type_class[6],
    bin_writer_unit = Bin_prot_Type_class[4],
    bin_write_unit = Bin_prot_Write[1],
    bin_reader_unit = Bin_prot_Type_class[5],
    bin_read_unit = Bin_prot_Read[1],
    cst_unit = "unit";
   function bin_read_unit$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_unit, pos_ref[1]);
   }
   var
    bin_bool = Bin_prot_Type_class[11],
    bin_shape_bool = Bin_prot_Type_class[10],
    bin_writer_bool = Bin_prot_Type_class[8],
    bin_write_bool = Bin_prot_Write[2],
    bin_reader_bool = Bin_prot_Type_class[9],
    bin_read_bool = Bin_prot_Read[2],
    cst_bool = "bool";
   function bin_read_bool$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_bool, pos_ref[1]);
   }
   var
    bin_string = Bin_prot_Type_class[15],
    bin_shape_string = Bin_prot_Type_class[14],
    bin_writer_string = Bin_prot_Type_class[12],
    bin_write_string = Bin_prot_Write[3],
    bin_reader_string = Bin_prot_Type_class[13],
    bin_read_string = Bin_prot_Read[3],
    cst_string = "string";
   function bin_read_string$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_string, pos_ref[1]);
   }
   var
    bin_bytes = Bin_prot_Type_class[19],
    bin_shape_bytes = Bin_prot_Type_class[18],
    bin_writer_bytes = Bin_prot_Type_class[16],
    bin_write_bytes = Bin_prot_Write[4],
    bin_reader_bytes = Bin_prot_Type_class[17],
    bin_read_bytes = Bin_prot_Read[4],
    cst_bytes = "bytes";
   function bin_read_bytes$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_bytes, pos_ref[1]);
   }
   var
    bin_char = Bin_prot_Type_class[23],
    bin_shape_char = Bin_prot_Type_class[22],
    bin_writer_char = Bin_prot_Type_class[20],
    bin_write_char = Bin_prot_Write[5],
    bin_reader_char = Bin_prot_Type_class[21],
    bin_read_char = Bin_prot_Read[5],
    cst_char = "char";
   function bin_read_char$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_char, pos_ref[1]);
   }
   var
    bin_int = Bin_prot_Type_class[27],
    bin_shape_int = Bin_prot_Type_class[26],
    bin_writer_int = Bin_prot_Type_class[24],
    bin_write_int = Bin_prot_Write[6],
    bin_reader_int = Bin_prot_Type_class[25],
    bin_read_int = Bin_prot_Read[6],
    cst_int = "int";
   function bin_read_int$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_int, pos_ref[1]);
   }
   var
    bin_float = Bin_prot_Type_class[31],
    bin_shape_float = Bin_prot_Type_class[30],
    bin_writer_float = Bin_prot_Type_class[28],
    bin_write_float = Bin_prot_Write[8],
    bin_reader_float = Bin_prot_Type_class[29],
    bin_read_float = Bin_prot_Read[8],
    cst_float = "float";
   function bin_read_float$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float, pos_ref[1]);
   }
   var
    bin_floatarray = Bin_prot_Type_class[109],
    bin_shape_floatarray = Bin_prot_Type_class[108],
    bin_writer_floatarray = Bin_prot_Type_class[106],
    bin_write_floatarray = Bin_prot_Write[27],
    bin_reader_floatarray = Bin_prot_Type_class[107],
    bin_read_floatarray = Bin_prot_Read[27],
    cst_floatarray = "floatarray";
   function bin_read_floatarray$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_floatarray, pos_ref[1]);
   }
   var
    bin_shape_float_array = Bin_prot_Type_class[112],
    bin_writer_float_array = Bin_prot_Type_class[110],
    bin_write_float_array = Bin_prot_Write[28],
    bin_reader_float_array = Bin_prot_Type_class[111],
    bin_read_float_array = Bin_prot_Read[28],
    cst_float_array = "float_array";
   function bin_read_float_array$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float_array, pos_ref[1]);
   }
   var
    bin_int32 = Bin_prot_Type_class[35],
    bin_shape_int32 = Bin_prot_Type_class[34],
    bin_writer_int32 = Bin_prot_Type_class[32],
    bin_write_int32 = Bin_prot_Write[9],
    bin_reader_int32 = Bin_prot_Type_class[33],
    bin_read_int32 = Bin_prot_Read[9],
    cst_int32 = "int32";
   function bin_read_int32$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_int32, pos_ref[1]);
   }
   var
    bin_int64 = Bin_prot_Type_class[39],
    bin_shape_int64 = Bin_prot_Type_class[38],
    bin_writer_int64 = Bin_prot_Type_class[36],
    bin_write_int64 = Bin_prot_Write[10],
    bin_reader_int64 = Bin_prot_Type_class[37],
    bin_read_int64 = Bin_prot_Read[10],
    cst_int64 = "int64";
   function bin_read_int64$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_int64, pos_ref[1]);
   }
   var
    bin_nativeint = Bin_prot_Type_class[43],
    bin_shape_nativeint = Bin_prot_Type_class[42],
    bin_writer_nativeint = Bin_prot_Type_class[40],
    bin_write_nativeint = Bin_prot_Write[11],
    bin_reader_nativeint = Bin_prot_Type_class[41],
    bin_read_nativeint = Bin_prot_Read[11],
    cst_nativeint = "nativeint";
   function bin_read_nativeint$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_nativeint, pos_ref[1]);
   }
   var
    bin_ref = Bin_prot_Type_class[51],
    bin_shape_ref = Bin_prot_Type_class[50],
    bin_writer_ref = Bin_prot_Type_class[48],
    bin_write_ref = Bin_prot_Write[12],
    bin_reader_ref = Bin_prot_Type_class[49],
    bin_read_ref = Bin_prot_Read[12],
    cst_ref = "ref";
   function bin_read_ref$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_ref, pos_ref[1]);
   }
   var
    bin_lazy_t = Bin_prot_Type_class[55],
    bin_shape_lazy_t = Bin_prot_Type_class[54],
    bin_writer_lazy_t = Bin_prot_Type_class[52],
    bin_write_lazy_t = Bin_prot_Write[13],
    bin_reader_lazy_t = Bin_prot_Type_class[53],
    bin_read_lazy_t = Bin_prot_Read[13],
    cst_lazy = cst_lazy$1;
   function bin_read_lazy_t$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_lazy, pos_ref[1]);
   }
   var
    bin_lazy = Bin_prot_Type_class[55],
    bin_shape_lazy = Bin_prot_Type_class[54],
    bin_writer_lazy = Bin_prot_Type_class[52],
    bin_write_lazy = Bin_prot_Write[13],
    bin_reader_lazy = Bin_prot_Type_class[53],
    bin_read_lazy = Bin_prot_Read[13],
    cst_lazy$0 = cst_lazy$1;
   function bin_read_lazy$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_lazy$0, pos_ref[1]);
   }
   var
    bin_option = Bin_prot_Type_class[59],
    bin_shape_option = Bin_prot_Type_class[58],
    bin_writer_option = Bin_prot_Type_class[56],
    bin_write_option = Bin_prot_Write[14],
    bin_reader_option = Bin_prot_Type_class[57],
    bin_read_option = Bin_prot_Read[14],
    cst_option = "option";
   function bin_read_option$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_option, pos_ref[1]);
   }
   var
    bin_list = Bin_prot_Type_class[69],
    bin_shape_list = Bin_prot_Type_class[68],
    bin_writer_list = Bin_prot_Type_class[66],
    bin_write_list = Bin_prot_Write[17],
    bin_reader_list = Bin_prot_Type_class[67],
    bin_read_list = Bin_prot_Read[17],
    cst_list = "list";
   function bin_read_list$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_list, pos_ref[1]);
   }
   var
    bin_array = Bin_prot_Type_class[73],
    bin_shape_array = Bin_prot_Type_class[72],
    bin_writer_array = Bin_prot_Type_class[70],
    bin_write_array = Bin_prot_Write[18],
    bin_reader_array = Bin_prot_Type_class[71],
    bin_read_array = Bin_prot_Read[18],
    cst_array = "array";
   function bin_read_array$0(f, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_array, pos_ref[1]);
   }
   var
    bin_hashtbl = Bin_prot_Type_class[77],
    bin_shape_hashtbl = Bin_prot_Type_class[76],
    bin_writer_hashtbl = Bin_prot_Type_class[74],
    bin_write_hashtbl = Bin_prot_Write[19],
    bin_reader_hashtbl = Bin_prot_Type_class[75],
    bin_read_hashtbl = Bin_prot_Read[19],
    cst_hashtbl = "hashtbl";
   function bin_read_hashtbl$0(f, g, buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_hashtbl, pos_ref[1]);
   }
   var
    bin_bigstring = Bin_prot_Type_class[105],
    bin_shape_bigstring = Bin_prot_Type_class[104],
    bin_writer_bigstring = Bin_prot_Type_class[102],
    bin_write_bigstring = Bin_prot_Write[26],
    bin_reader_bigstring = Bin_prot_Type_class[103],
    bin_read_bigstring = Bin_prot_Read[26],
    cst_bigstring = "bigstring";
   function bin_read_bigstring$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_bigstring, pos_ref[1]);
   }
   var
    bin_mat = Bin_prot_Type_class[101],
    bin_shape_mat = Bin_prot_Type_class[100],
    bin_writer_mat = Bin_prot_Type_class[98],
    bin_write_mat = Bin_prot_Write[25],
    bin_reader_mat = Bin_prot_Type_class[99],
    bin_read_mat = Bin_prot_Read[25],
    cst_mat = "mat";
   function bin_read_mat$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_mat, pos_ref[1]);
   }
   var
    bin_float32_mat = Bin_prot_Type_class[93],
    bin_shape_float32_mat = Bin_prot_Type_class[92],
    bin_writer_float32_mat = Bin_prot_Type_class[90],
    bin_write_float32_mat = Bin_prot_Write[23],
    bin_reader_float32_mat = Bin_prot_Type_class[91],
    bin_read_float32_mat = Bin_prot_Read[23],
    cst_float32_mat = "float32_mat";
   function bin_read_float32_mat$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float32_mat, pos_ref[1]);
   }
   var
    bin_float64_mat = Bin_prot_Type_class[97],
    bin_shape_float64_mat = Bin_prot_Type_class[96],
    bin_writer_float64_mat = Bin_prot_Type_class[94],
    bin_write_float64_mat = Bin_prot_Write[24],
    bin_reader_float64_mat = Bin_prot_Type_class[95],
    bin_read_float64_mat = Bin_prot_Read[24],
    cst_float64_mat = "float64_mat";
   function bin_read_float64_mat$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float64_mat, pos_ref[1]);
   }
   var
    bin_vec = Bin_prot_Type_class[89],
    bin_shape_vec = Bin_prot_Type_class[88],
    bin_writer_vec = Bin_prot_Type_class[86],
    bin_write_vec = Bin_prot_Write[22],
    bin_reader_vec = Bin_prot_Type_class[87],
    bin_read_vec = Bin_prot_Read[22],
    cst_vec = "vec";
   function bin_read_vec$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_vec, pos_ref[1]);
   }
   var
    bin_float32_vec = Bin_prot_Type_class[81],
    bin_shape_float32_vec = Bin_prot_Type_class[80],
    bin_writer_float32_vec = Bin_prot_Type_class[78],
    bin_write_float32_vec = Bin_prot_Write[20],
    bin_reader_float32_vec = Bin_prot_Type_class[79],
    bin_read_float32_vec = Bin_prot_Read[20],
    cst_float32_vec = "float32_vec";
   function bin_read_float32_vec$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float32_vec, pos_ref[1]);
   }
   var
    bin_float64_vec = Bin_prot_Type_class[85],
    bin_shape_float64_vec = Bin_prot_Type_class[84],
    bin_writer_float64_vec = Bin_prot_Type_class[82],
    bin_write_float64_vec = Bin_prot_Write[21],
    bin_reader_float64_vec = Bin_prot_Type_class[83],
    bin_read_float64_vec = Bin_prot_Read[21],
    cst_float64_vec = "float64_vec";
   function bin_read_float64_vec$0(buf, pos_ref, vint){
    return caml_call2(Bin_prot_Common[19], cst_float64_vec, pos_ref[1]);
   }
   var
    Bin_prot_Std =
      [0,
       bin_size_unit,
       bin_size_bool,
       bin_size_string,
       bin_size_bytes,
       bin_size_char,
       bin_size_int,
       bin_size_float,
       bin_size_int32,
       bin_size_int64,
       bin_size_nativeint,
       bin_size_nat0,
       bin_size_ref,
       bin_size_lazy_t,
       bin_size_lazy,
       bin_size_option,
       bin_size_pair,
       bin_size_triple,
       bin_size_list,
       bin_size_array,
       bin_size_hashtbl,
       bin_size_float32_vec,
       bin_size_float64_vec,
       bin_size_vec,
       bin_size_float32_mat,
       bin_size_float64_mat,
       bin_size_mat,
       bin_size_bigstring,
       bin_size_floatarray,
       bin_size_float_array,
       bin_size_variant_int,
       bin_size_int_8bit,
       bin_size_int_16bit,
       bin_size_int_32bit,
       bin_size_int_64bit,
       bin_size_int64_bits,
       bin_size_network16_int,
       bin_size_network32_int,
       bin_size_network32_int32,
       bin_size_network64_int,
       bin_size_network64_int64,
       bin_size_array_no_length,
       bin_size_md5,
       Maximum,
       Minimum,
       bin_unit,
       bin_shape_unit,
       bin_writer_unit,
       bin_write_unit,
       bin_reader_unit,
       bin_read_unit,
       bin_read_unit$0,
       bin_bool,
       bin_shape_bool,
       bin_writer_bool,
       bin_write_bool,
       bin_reader_bool,
       bin_read_bool,
       bin_read_bool$0,
       bin_string,
       bin_shape_string,
       bin_writer_string,
       bin_write_string,
       bin_reader_string,
       bin_read_string,
       bin_read_string$0,
       bin_bytes,
       bin_shape_bytes,
       bin_writer_bytes,
       bin_write_bytes,
       bin_reader_bytes,
       bin_read_bytes,
       bin_read_bytes$0,
       bin_char,
       bin_shape_char,
       bin_writer_char,
       bin_write_char,
       bin_reader_char,
       bin_read_char,
       bin_read_char$0,
       bin_int,
       bin_shape_int,
       bin_writer_int,
       bin_write_int,
       bin_reader_int,
       bin_read_int,
       bin_read_int$0,
       bin_float,
       bin_shape_float,
       bin_writer_float,
       bin_write_float,
       bin_reader_float,
       bin_read_float,
       bin_read_float$0,
       bin_floatarray,
       bin_shape_floatarray,
       bin_writer_floatarray,
       bin_write_floatarray,
       bin_reader_floatarray,
       bin_read_floatarray,
       bin_read_floatarray$0,
       bin_shape_float_array,
       bin_writer_float_array,
       bin_write_float_array,
       bin_reader_float_array,
       bin_read_float_array,
       bin_read_float_array$0,
       bin_int32,
       bin_shape_int32,
       bin_writer_int32,
       bin_write_int32,
       bin_reader_int32,
       bin_read_int32,
       bin_read_int32$0,
       bin_int64,
       bin_shape_int64,
       bin_writer_int64,
       bin_write_int64,
       bin_reader_int64,
       bin_read_int64,
       bin_read_int64$0,
       bin_nativeint,
       bin_shape_nativeint,
       bin_writer_nativeint,
       bin_write_nativeint,
       bin_reader_nativeint,
       bin_read_nativeint,
       bin_read_nativeint$0,
       bin_ref,
       bin_shape_ref,
       bin_writer_ref,
       bin_write_ref,
       bin_reader_ref,
       bin_read_ref,
       bin_read_ref$0,
       bin_lazy_t,
       bin_shape_lazy_t,
       bin_writer_lazy_t,
       bin_write_lazy_t,
       bin_reader_lazy_t,
       bin_read_lazy_t,
       bin_read_lazy_t$0,
       bin_lazy,
       bin_shape_lazy,
       bin_writer_lazy,
       bin_write_lazy,
       bin_reader_lazy,
       bin_read_lazy,
       bin_read_lazy$0,
       bin_option,
       bin_shape_option,
       bin_writer_option,
       bin_write_option,
       bin_reader_option,
       bin_read_option,
       bin_read_option$0,
       bin_list,
       bin_shape_list,
       bin_writer_list,
       bin_write_list,
       bin_reader_list,
       bin_read_list,
       bin_read_list$0,
       bin_array,
       bin_shape_array,
       bin_writer_array,
       bin_write_array,
       bin_reader_array,
       bin_read_array,
       bin_read_array$0,
       bin_hashtbl,
       bin_shape_hashtbl,
       bin_writer_hashtbl,
       bin_write_hashtbl,
       bin_reader_hashtbl,
       bin_read_hashtbl,
       bin_read_hashtbl$0,
       bin_bigstring,
       bin_shape_bigstring,
       bin_writer_bigstring,
       bin_write_bigstring,
       bin_reader_bigstring,
       bin_read_bigstring,
       bin_read_bigstring$0,
       bin_mat,
       bin_shape_mat,
       bin_writer_mat,
       bin_write_mat,
       bin_reader_mat,
       bin_read_mat,
       bin_read_mat$0,
       bin_float32_mat,
       bin_shape_float32_mat,
       bin_writer_float32_mat,
       bin_write_float32_mat,
       bin_reader_float32_mat,
       bin_read_float32_mat,
       bin_read_float32_mat$0,
       bin_float64_mat,
       bin_shape_float64_mat,
       bin_writer_float64_mat,
       bin_write_float64_mat,
       bin_reader_float64_mat,
       bin_read_float64_mat,
       bin_read_float64_mat$0,
       bin_vec,
       bin_shape_vec,
       bin_writer_vec,
       bin_write_vec,
       bin_reader_vec,
       bin_read_vec,
       bin_read_vec$0,
       bin_float32_vec,
       bin_shape_float32_vec,
       bin_writer_float32_vec,
       bin_write_float32_vec,
       bin_reader_float32_vec,
       bin_read_float32_vec,
       bin_read_float32_vec$0,
       bin_float64_vec,
       bin_shape_float64_vec,
       bin_writer_float64_vec,
       bin_write_float64_vec,
       bin_reader_float64_vec,
       bin_read_float64_vec,
       bin_read_float64_vec$0];
   runtime.caml_register_global(31, Bin_prot_Std, "Bin_prot__Std");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Md5
//# unitInfo: Requires: Bin_prot__Common, Bin_prot__Read, Bin_prot__Shape, Bin_prot__Size, Bin_prot__Write, Md5_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Md5_lib = global_data.Md5_lib,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Bin_prot_Size = global_data.Bin_prot__Size,
    Bin_prot_Write = global_data.Bin_prot__Write,
    Bin_prot_Read = global_data.Bin_prot__Read,
    compare = Md5_lib[1],
    to_binary = Md5_lib[3],
    of_binary_exn = Md5_lib[4],
    unsafe_of_binary = Md5_lib[5],
    to_hex = Md5_lib[6],
    of_hex_exn = Md5_lib[7],
    _a_ =
      caml_call1(Bin_prot_Shape[5][1], "f6bdcdd0-9f75-11e6-9a7e-d3020428efed"),
    bin_shape_t = caml_call2(Bin_prot_Shape[16], _a_, 0),
    bin_size_t = Bin_prot_Size[42],
    bin_write_t = Bin_prot_Write[29],
    bin_read_t = Bin_prot_Read[40],
    cst_Shape_Md5_t = "Shape.Md5.t";
   function bin_read_t$0(buf, pos_ref, vdigest){
    return caml_call2(Bin_prot_Common[19], cst_Shape_Md5_t, pos_ref[1]);
   }
   var
    Bin_prot_Md5 =
      [0,
       bin_shape_t,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       to_hex,
       of_hex_exn,
       compare,
       to_binary,
       of_binary_exn,
       unsafe_of_binary];
   runtime.caml_register_global(8, Bin_prot_Md5, "Bin_prot__Md5");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Bin_prot__Blob
//# unitInfo: Requires: Assert_failure, Bin_prot__Common, Bin_prot__Shape, Bin_prot__Type_class, Bin_prot__Utils, Sexplib0__Sexp_conv, Stdlib, Stdlib__Bytes, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bin_prot_Blob_Opaque_t$1 = "Bin_prot.Blob.Opaque.t",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Bin_prot_Common = global_data.Bin_prot__Common,
    Bin_prot_Utils = global_data.Bin_prot__Utils,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Bin_prot_Type_class = global_data.Bin_prot__Type_class,
    Assert_failure = global_data.Assert_failure,
    Bin_prot_Shape = global_data.Bin_prot__Shape,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    cst_85a2557e_490a_11e6_98ac_4b = "85a2557e-490a-11e6-98ac-4b8953d525fe",
    _a_ = [0, "src/blob.ml", 17, 4],
    _b_ =
      [0,
       [11,
        "Bin_prot.Blob.bin_read_t: size (",
        [4, 0, 0, 0, [11, ") <> expected (", [4, 0, 0, 0, [12, 41, 0]]]]],
       "Bin_prot.Blob.bin_read_t: size (%d) <> expected (%d)"],
    cst_Bin_prot_Blob_t = "Bin_prot.Blob.t";
   function compare(cmp_a, a_001, b_002){
    return caml_call2(cmp_a, a_001, b_002);
   }
   function sexp_of_t(of_a_003){return of_a_003;}
   function bin_shape_t(t){
    var
     _m_ = caml_call1(Bin_prot_Shape[5][1], cst_85a2557e_490a_11e6_98ac_4b);
    return caml_call2(Bin_prot_Shape[16], _m_, [0, t, 0]);
   }
   function bin_size_t(bin_size_a, a){
    var _l_ = caml_call1(bin_size_a, a);
    return caml_call2(Bin_prot_Common[23], Bin_prot_Utils[1], _l_);
   }
   function bin_write_t(bin_write_a, buf, pos, a){
    var
     start_a = caml_call2(Bin_prot_Common[23], pos, Bin_prot_Utils[1]),
     end_a = caml_call3(bin_write_a, buf, start_a, a),
     size = end_a - start_a | 0,
     written = caml_call3(Bin_prot_Utils[3], buf, pos, size);
    if(written === start_a) return end_a;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function bin_read_t(bin_read_a, buf, pos_ref){
    var
     expected_size = caml_call2(Bin_prot_Utils[2], buf, pos_ref),
     start_a = pos_ref[1],
     a = caml_call2(bin_read_a, buf, pos_ref),
     end_a = pos_ref[1];
    if((end_a - start_a | 0) !== expected_size){
     var
      _k_ =
        caml_call3(Stdlib_Printf[4], _b_, end_a - start_a | 0, expected_size);
     caml_call1(Stdlib[2], _k_);
    }
    return a;
   }
   function bin_read_t$0(param, _j_, pos_ref){
    return caml_call2(Bin_prot_Common[19], cst_Bin_prot_Blob_t, pos_ref[1]);
   }
   function of_binable(t){return t;}
   function to_binable(t){return t;}
   var
    include =
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         [0, bin_shape_t, bin_size_t, bin_write_t, bin_read_t, bin_read_t$0],
         to_binable,
         of_binable]),
    bin_shape_t$0 = include[1],
    bin_size_t$0 = include[2],
    bin_write_t$0 = include[3],
    bin_read_t$1 = include[4],
    bin_read_t$2 = include[5],
    bin_writer_t = include[6],
    bin_reader_t = include[7],
    bin_t = include[8],
    _c_ =
      caml_call1(Bin_prot_Shape[5][1], "85a1f76e-490a-11e6-86a9-5bef585f2602"),
    bin_shape_t$1 = caml_call2(Bin_prot_Shape[16], _c_, 0),
    _d_ = [0, 0],
    _e_ = [0, 0],
    cst_Bin_prot_Blob_Opaque_t = cst_Bin_prot_Blob_Opaque_t$1;
   function bin_size_t$1(t){
    var _i_ = caml_call1(Bin_prot_Common[2], t);
    return caml_call2(Bin_prot_Common[23], Bin_prot_Utils[1], _i_);
   }
   function bin_write_t$1(buf, pos, t){
    var
     size = caml_call1(Bin_prot_Common[2], t),
     pos$0 = caml_call3(Bin_prot_Utils[3], buf, pos, size);
    caml_call5(Bin_prot_Common[11], _d_, t, [0, pos$0], buf, size);
    return caml_call2(Bin_prot_Common[23], pos$0, size);
   }
   function bin_read_t$3(buf, pos_ref){
    var
     size = caml_call2(Bin_prot_Utils[2], buf, pos_ref),
     t = caml_call1(Bin_prot_Common[1], size);
    caml_call5(Bin_prot_Common[11], [0, pos_ref[1]], buf, _e_, t, size);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos_ref[1], size);
    return t;
   }
   function bin_read_t$4(param, pos_ref){
    return caml_call2
            (Bin_prot_Common[19], cst_Bin_prot_Blob_Opaque_t, pos_ref[1]);
   }
   var
    T =
      [0,
       bin_shape_t$1,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4],
    include$0 = caml_call1(Bin_prot_Utils[6], T),
    bin_size_t$2 = include$0[1],
    bin_write_t$2 = include$0[2],
    bin_read_t$5 = include$0[3],
    bin_read_t$6 = include$0[4],
    bin_shape_t$2 = include$0[5],
    bin_writer_t$0 = include$0[6],
    bin_reader_t$0 = include$0[7],
    bin_t$0 = include$0[8];
   function to_opaque(blob, bin_writer){
    return caml_call3(Bin_prot_Utils[4], 0, bin_writer, blob);
   }
   function of_opaque_exn(t, bin_reader){
    return caml_call2(bin_reader[1], t, [0, 0]);
   }
   var
    compare$0 = runtime.caml_compare,
    _f_ = [0, 0],
    _g_ = [0, 0],
    cst_Bin_prot_Blob_Opaque_t$0 = cst_Bin_prot_Blob_Opaque_t$1;
   function sexp_of_t$0(t){
    return [0, of_opaque_exn(t, Bin_prot_Type_class[13])];
   }
   function bin_size_t$3(t){
    return caml_call2
            (Bin_prot_Common[23], Bin_prot_Utils[1], caml_ml_string_length(t));
   }
   function bin_write_t$3(buf, pos, t){
    var
     size = caml_ml_string_length(t),
     pos$0 = caml_call3(Bin_prot_Utils[3], buf, pos, size);
    caml_call5(Bin_prot_Common[7], _f_, t, [0, pos$0], buf, size);
    return caml_call2(Bin_prot_Common[23], pos$0, size);
   }
   function string_of_bigstring(buf, pos, len){
    var str = runtime.caml_create_bytes(len);
    caml_call5(Bin_prot_Common[10], [0, pos], buf, _g_, str, len);
    return caml_call1(Stdlib_Bytes[48], str);
   }
   function bin_read_t$7(buf, pos_ref){
    var
     len = caml_call2(Bin_prot_Utils[2], buf, pos_ref),
     t = string_of_bigstring(buf, pos_ref[1], len);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos_ref[1], len);
    return t;
   }
   function bin_read_t$8(param, pos_ref){
    return caml_call2
            (Bin_prot_Common[19], cst_Bin_prot_Blob_Opaque_t$0, pos_ref[1]);
   }
   var
    include$1 =
      caml_call1
       (Bin_prot_Utils[6],
        [0,
         bin_shape_t$1,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8]),
    bin_size_t$4 = include$1[1],
    bin_write_t$4 = include$1[2],
    bin_read_t$9 = include$1[3],
    bin_read_t$10 = include$1[4],
    bin_shape_t$3 = include$1[5],
    bin_writer_t$1 = include$1[6],
    bin_reader_t$1 = include$1[7],
    bin_t$1 = include$1[8],
    length = caml_ml_string_length,
    _h_ =
      [0,
       [11,
        "Opaque blob has ",
        [4,
         0,
         0,
         0,
         [11, " bytes but [of_opaque_exn] read ", [4, 0, 0, 0, 0]]]],
       "Opaque blob has %d bytes but [of_opaque_exn] read %d"];
   function to_opaque$0(buf, v, bin_writer_v){
    var pos = 0, len = caml_call3(bin_writer_v[2], buf, pos, v);
    return string_of_bigstring(buf, pos, len);
   }
   function of_opaque_exn$0(buf, t, bin_reader_v){
    var len = caml_ml_string_length(t);
    caml_call5(Bin_prot_Common[7], 0, t, 0, buf, len);
    var pos_ref = [0, 0], res = caml_call2(bin_reader_v[1], buf, pos_ref);
    if(pos_ref[1] === len) return res;
    var error = caml_call3(Stdlib_Printf[4], _h_, len, pos_ref[1]);
    return caml_call1(Stdlib[2], error);
   }
   var
    compare$1 = runtime.caml_string_compare,
    sexp_of_t$1 = Sexplib0_Sexp_conv[7],
    cst_Bin_prot_Blob_Ignored_t = "Bin_prot.Blob.Ignored.t";
   function bin_size_t$5(size){
    return caml_call2(Bin_prot_Common[23], Bin_prot_Utils[1], size);
   }
   function bin_read_t$11(buf, pos_ref){
    var size = caml_call2(Bin_prot_Utils[2], buf, pos_ref);
    pos_ref[1] = caml_call2(Bin_prot_Common[23], pos_ref[1], size);
    return size;
   }
   function bin_read_t$12(param, pos_ref){
    return caml_call2
            (Bin_prot_Common[19], cst_Bin_prot_Blob_Ignored_t, pos_ref[1]);
   }
   var
    bin_reader_t$2 = [0, bin_read_t$11, bin_read_t$12],
    Ignored = [0, bin_size_t$5, bin_read_t$11, bin_read_t$12, bin_reader_t$2],
    Bin_prot_Blob =
      [0,
       compare,
       sexp_of_t,
       bin_shape_t$0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       [0,
        [0,
         compare$0,
         sexp_of_t$0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$2,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         to_opaque,
         of_opaque_exn],
        [0,
         compare$1,
         sexp_of_t$1,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$3,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         length,
         to_opaque$0,
         of_opaque_exn$0]],
       Ignored];
   runtime.caml_register_global(22, Bin_prot_Blob, "Bin_prot__Blob");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJiaW5fcHJvdC5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsibG9jJDIiLCJsb2MkMSIsImxvYyQwIiwibG9jIiwic2V4cF9vZl9wb3MiLCJ0b19zdHJpbmciLCJtYXhfbGVuIiwibGVuIiwibG9jJDMiLCJsb2MkNCIsImFyZzBfMDAxIiwicmFpc2VfcmVhZF9lcnJvciIsImVyciIsInBvcyIsInJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSIsIm5hbWUiLCJyYWlzZV9jb25jdXJyZW50X21vZGlmaWNhdGlvbiIsImFycmF5X2JvdW5kX2Vycm9yIiwiY3JlYXRlX2J1ZiIsIm4iLCJidWZfbGVuIiwiYXNzZXJ0X3BvcyIsImNoZWNrX3BvcyIsImJ1ZiIsInNhZmVfZ2V0X3BvcyIsInBvc19yZWYiLCJjaGVja19uZXh0IiwibmV4dCIsImdldF9vcHRfcG9zIiwidmFyJDAiLCJibGl0X2J1ZiIsInNyY19wb3MiLCJzcmMiLCJkc3RfcG9zIiwiZHN0Iiwic3JjX3BvcyQwIiwiZHN0X3BvcyQwIiwiYmxpdF9zdHJpbmdfYnVmIiwic3RyIiwiYmxpdF9ieXRlc19idWYiLCJibGl0X2J1Zl9ieXRlcyIsImNvcHlfaHRibF9saXN0IiwiaHRibCIsInJlc3QiLCJ2IiwiayIsInN5bWJvbCIsIm9mX2ludCIsImFyY2hfc2l4dHlmb3VyIiwiYXJjaF9iaWdfZW5kaWFuIiwidW5zYWZlX3NldDE2YmUiLCJ4IiwidW5zYWZlX3NldDMyYmUiLCJ1bnNhZmVfc2V0NjRiZSIsInVuc2FmZV9zZXQxNmxlIiwidW5zYWZlX3NldDMybGUiLCJ1bnNhZmVfc2V0NjRsZSIsImJpbl93cml0ZV91bml0IiwiYmluX3dyaXRlX2Jvb2wiLCJiIiwiYWxsX2Jpbl93cml0ZV9zbWFsbF9pbnQiLCJhbGxfYmluX3dyaXRlX2ludDE2IiwiYWxsX2Jpbl93cml0ZV9pbnQzMiIsImFsbF9iaW5fd3JpdGVfaW50NjQiLCJiaW5fd3JpdGVfY2hhciIsImMiLCJiaW5fd3JpdGVfaW50IiwiYmluX3dyaXRlX25hdDAiLCJuYXQwIiwiYmluX3dyaXRlX3N0cmluZyIsIm5ld19wb3MiLCJiaW5fd3JpdGVfYnl0ZXMiLCJiaW5fd3JpdGVfZmxvYXQiLCJiaW5fd3JpdGVfaW50MzIiLCJiaW5fd3JpdGVfaW50NjQiLCJiaW5fd3JpdGVfbmF0aXZlaW50IiwiYmluX3dyaXRlX3JlZiIsImJpbl93cml0ZV9lbCIsInIiLCJiaW5fd3JpdGVfbGF6eSIsImx2IiwiYmluX3dyaXRlX29wdGlvbiIsImJpbl93cml0ZV9wYWlyIiwiYmluX3dyaXRlX2EiLCJiaW5fd3JpdGVfYiIsImEiLCJiaW5fd3JpdGVfdHJpcGxlIiwiYmluX3dyaXRlX2MiLCJuZXh0MSIsIm5leHQyIiwiYmluX3dyaXRlX2xpc3QiLCJsc3QkMSIsImVsc19wb3MkMCIsImVsc19wb3MiLCJsc3QiLCJsc3QkMCIsImhkIiwibmV3X2Vsc19wb3MiLCJiaW5fd3JpdGVfZmxvYXRfYXJyYXlfZ2VuIiwibGVuZ3RoIiwiYmxpdCIsInBvcyQwIiwic2l6ZSIsImJpbl93cml0ZV9mbG9hdGFycmF5IiwiYmluX3dyaXRlX2Zsb2F0X2FycmF5IiwiYmluX3dyaXRlX2FycmF5X2xvb3AiLCJhciIsImVsc19wb3NfcmVmIiwiaSIsImJpbl93cml0ZV9hcnJheSIsImJpbl93cml0ZV9oYXNodGJsIiwiYmluX3dyaXRlX2tleSIsImJpbl93cml0ZV92YWwiLCJwbGVuIiwiY250X3JlZiIsImNvbGxfaHRibCIsInJlc19wb3MiLCJiaW5fd3JpdGVfZmxvYXQzMl92ZWMiLCJiaW5fd3JpdGVfZmxvYXQ2NF92ZWMiLCJiaW5fd3JpdGVfZmxvYXQzMl9tYXQiLCJtIiwibGVuMSIsImxlbjIiLCJwb3MkMSIsImJpbl93cml0ZV9mbG9hdDY0X21hdCIsImJpbl93cml0ZV9iaWdzdHJpbmciLCJzIiwiYmluX3dyaXRlX3ZhcmlhbnRfaW50IiwiYmluX3dyaXRlX2ludF84Yml0IiwiYmluX3dyaXRlX2ludF8xNmJpdCIsImJpbl93cml0ZV9pbnRfMzJiaXQiLCJiaW5fd3JpdGVfaW50XzY0Yml0IiwiYmluX3dyaXRlX2ludDY0X2JpdHMiLCJiaW5fd3JpdGVfbmV0d29yazE2X2ludCIsImJpbl93cml0ZV9uZXR3b3JrMzJfaW50IiwiYmluX3dyaXRlX25ldHdvcmszMl9pbnQzMiIsImJpbl93cml0ZV9uZXR3b3JrNjRfaW50IiwiYmluX3dyaXRlX25ldHdvcms2NF9pbnQ2NCIsImJpbl93cml0ZV9hcnJheV9ub19sZW5ndGgiLCJiaW5fd3JpdGVfbWQ1IiwieCQwIiwiYSQwIiwiYiQwIiwiZCIsIm1heF9pbnRfaW50MzIiLCJtaW5faW50X2ludDMyIiwibWF4X2ludF9pbnQ2NCIsIm1pbl9pbnRfaW50NjQiLCJzYWZlX2ludF9vZl9pbnQzMiIsInNhZmVfaW50X29mX2ludDY0Iiwic2FmZV9uYXRpdmVpbnRfb2ZfaW50NjQiLCJ1bnNhZmVfZ2V0MTZiZV91bnNpZ25lZCIsInVuc2FmZV9nZXQzMmJlIiwidW5zYWZlX2dldDY0YmUiLCJ1bnNhZmVfZ2V0MTZsZV91bnNpZ25lZCIsInVuc2FmZV9nZXQzMmxlIiwidW5zYWZlX2dldDY0bGUiLCJiaW5fcmVhZF91bml0IiwiYmluX3JlYWRfYm9vbCIsInNhZmVfYmluX3JlYWRfbmVnX2ludDgiLCJzYWZlX2Jpbl9yZWFkX2ludDE2IiwibWFza18zMmJpdCIsInNhZmVfYmluX3JlYWRfbmF0MF8zMiIsImJpbl9yZWFkX25hdDAiLCJjaCIsIm5leHQkMCIsIm4kMCIsImJpbl9yZWFkX2J5dGVzIiwic3RhcnRfcG9zIiwiYmluX3JlYWRfc3RyaW5nIiwiYmluX3JlYWRfY2hhciIsImJpbl9yZWFkX2ludCIsIm4kMSIsIm4kMiIsImJpbl9yZWFkX2Zsb2F0IiwiYmluX3JlYWRfaW50MzIiLCJiaW5fcmVhZF9pbnQ2NCIsImJpbl9yZWFkX25hdGl2ZWludCIsImJpbl9yZWFkX3JlZiIsImJpbl9yZWFkX2VsIiwiZWwiLCJiaW5fcmVhZF9sYXp5IiwiYmluX3JlYWRfb3B0aW9uIiwiYmluX3JlYWRfcGFpciIsImJpbl9yZWFkX2EiLCJiaW5fcmVhZF9iIiwiYmluX3JlYWRfdHJpcGxlIiwiYmluX3JlYWRfYyIsImJpbl9yZWFkX25fcmV2X2xpc3QiLCJhY2MiLCJhY2MkMCIsImJpbl9yZWFkX2xpc3Rfd2l0aF9tYXhfbGVuIiwicmV2X2xzdCIsImJpbl9yZWFkX2xpc3QiLCJkdW1teV9mbG9hdF9idWYiLCJtYXhfZmxvYXRfYXJyYXlfbGVuZ3RoIiwiYmluX3JlYWRfZmxvYXRfYXJyYXlfZ2VuIiwiY3JlYXRlIiwiYXJyIiwiYmluX3JlYWRfZmxvYXRhcnJheSIsImJpbl9yZWFkX2Zsb2F0X2FycmF5IiwiYmluX3JlYWRfYXJyYXkiLCJlbCQxIiwibWF5YmVfZmxvYXQiLCJlbCQwIiwiZmlyc3QiLCJyZXMiLCJiaW5fcmVhZF9oYXNodGJsIiwiYmluX3JlYWRfa2V5IiwiYmluX3JlYWRfdmFsIiwicmVhZF9rdl9wYWlyIiwiZWxzIiwiYmluX3JlYWRfZmxvYXQzMl92ZWMiLCJ2ZWMiLCJiaW5fcmVhZF9mbG9hdDY0X3ZlYyIsImJpbl9yZWFkX2Zsb2F0MzJfbWF0IiwibWF0IiwiYmluX3JlYWRfZmxvYXQ2NF9tYXQiLCJiaW5fcmVhZF9iaWdzdHJpbmciLCJiaW5fcmVhZF92YXJpYW50X2ludCIsImJpbl9yZWFkX2ludF84Yml0IiwiYmluX3JlYWRfaW50XzE2Yml0IiwiYmluX3JlYWRfaW50XzMyYml0IiwiYmluX3JlYWRfaW50XzY0Yml0IiwiYmluX3JlYWRfaW50NjRfYml0cyIsImJpbl9yZWFkX25ldHdvcmsxNl9pbnQiLCJiaW5fcmVhZF9uZXR3b3JrMzJfaW50IiwiYmluX3JlYWRfbmV0d29yazMyX2ludDMyIiwiYmluX3JlYWRfbmV0d29yazY0X2ludCIsImJpbl9yZWFkX25ldHdvcms2NF9pbnQ2NCIsImJpbl9yZWFkX21kNSIsImJpbl9zaGFwZV91bml0IiwiYmluX3NoYXBlX2Jvb2wiLCJiaW5fc2hhcGVfc3RyaW5nIiwiYmluX3NoYXBlX2J5dGVzIiwiYmluX3NoYXBlX2NoYXIiLCJiaW5fc2hhcGVfZmxvYXQiLCJiaW5fc2hhcGVfaW50IiwiYmluX3NoYXBlX2ludDMyIiwiYmluX3NoYXBlX2ludDYzIiwiYmluX3NoYXBlX2ludDY0IiwiYmluX3NoYXBlX25hdGl2ZWludCIsImJpbl9zaGFwZV9uYXQwIiwiYmluX3NoYXBlX2RpZ2VzdCIsImJpbl9zaGFwZV9mbG9hdDMyX3ZlYyIsImJpbl9zaGFwZV9mbG9hdDY0X3ZlYyIsImJpbl9zaGFwZV92ZWMiLCJiaW5fc2hhcGVfZmxvYXQzMl9tYXQiLCJiaW5fc2hhcGVfZmxvYXQ2NF9tYXQiLCJiaW5fc2hhcGVfbWF0IiwiYmluX3NoYXBlX2JpZ3N0cmluZyIsImJpbl9zaGFwZV9mbG9hdGFycmF5IiwiYmluX3NoYXBlX3ZhcmlhbnRfaW50IiwiYmluX3NoYXBlX2ludF84Yml0IiwiYmluX3NoYXBlX2ludF8xNmJpdCIsImJpbl9zaGFwZV9pbnRfMzJiaXQiLCJiaW5fc2hhcGVfaW50XzY0Yml0IiwiYmluX3NoYXBlX2ludDY0X2JpdHMiLCJiaW5fc2hhcGVfbmV0d29yazE2X2ludCIsImJpbl9zaGFwZV9uZXR3b3JrMzJfaW50IiwiYmluX3NoYXBlX25ldHdvcmszMl9pbnQzMiIsImJpbl9zaGFwZV9uZXR3b3JrNjRfaW50IiwiYmluX3NoYXBlX25ldHdvcms2NF9pbnQ2NCIsImJpbl9zaGFwZV9yZWYiLCJiaW5fc2hhcGVfb3B0aW9uIiwiYmluX3NoYXBlX2xpc3QiLCJiaW5fc2hhcGVfYXJyYXkiLCJiaW5fc2hhcGVfaGFzaHRibCIsInkiLCJiaW5fc2hhcGVfZmxvYXRfYXJyYXkiLCJiaW5fc2hhcGVfbGF6eSIsImJpbl9zaGFwZV9wYWlyIiwiYmluX3NoYXBlX3RyaXBsZSIsInoiLCJiaW5fc2l6ZV91bml0IiwiYmluX3NpemVfYm9vbCIsImJpbl9zaXplX2NoYXIiLCJiaW5fc2l6ZV9tZDUiLCJiaW5fc2l6ZV9pbnRfbmF0MCIsImJpbl9zaXplX2ludF9uZWdhdGl2ZSIsImJpbl9zaXplX2ludCIsImJpbl9zaXplX2Zsb2F0IiwiYmluX3NpemVfdmFyaWFudF9pbnQiLCJiaW5fc2l6ZV9pbnRfOGJpdCIsImJpbl9zaXplX2ludF8xNmJpdCIsImJpbl9zaXplX2ludF8zMmJpdCIsImJpbl9zaXplX2ludF82NGJpdCIsImJpbl9zaXplX2ludDY0X2JpdHMiLCJiaW5fc2l6ZV9uZXR3b3JrMTZfaW50IiwiYmluX3NpemVfbmV0d29yazMyX2ludCIsImJpbl9zaXplX25ldHdvcmszMl9pbnQzMiIsImJpbl9zaXplX25ldHdvcms2NF9pbnQiLCJiaW5fc2l6ZV9uZXR3b3JrNjRfaW50NjQiLCJiaW5fc2l6ZV9pbnQkMCIsImJpbl9zaXplX25hdDAiLCJiaW5fc2l6ZV9wYWlyIiwiYmluX3NpemVfdHJpcGxlIiwiYmluX3NpemVfbWF0IiwiYmluX3NpemVfdW5pdCQwIiwiYmluX3NpemVfYm9vbCQwIiwiYmluX3NpemVfY2hhciQwIiwiYmluX3NpemVfaW50JDEiLCJiaW5fc2l6ZV9uYXQwJDAiLCJiaW5fc2l6ZV9zdHJpbmdfb3JfYnl0ZXMiLCJzaXplX2xlbiIsImJpbl9zaXplX3N0cmluZyIsImJpbl9zaXplX2J5dGVzIiwiYmluX3NpemVfbWQ1JDEiLCJiaW5fc2l6ZV9mbG9hdCQwIiwiZiIsImJpbl9zaXplX2ludDMyIiwiYmluX3NpemVfaW50NjQiLCJiaW5fc2l6ZV9tZDUkMCIsImJpbl9zaXplX3JlZiIsImJpbl9zaXplX2xhenlfdCIsImJpbl9zaXplX29wdGlvbiIsImJpbl9zaXplX2ludDMyJDAiLCJiaW5fc2l6ZV9pbnQ2NCQwIiwiYmluX3NpemVfbmF0aXZlaW50IiwiYmluX3NpemVfcmVmJDAiLCJiaW5fc2l6ZV9lbCIsImJpbl9zaXplX2xhenlfdCQwIiwiYmluX3NpemVfb3B0aW9uJDAiLCJiaW5fc2l6ZV9wYWlyJDAiLCJiaW5fc2l6ZV9hIiwiYmluX3NpemVfYiIsImJpbl9zaXplX3RyaXBsZSQwIiwiYmluX3NpemVfYyIsImJpbl9zaXplX2xpc3QiLCJzaXplX2FjYyIsImxlbl9hY2MiLCJsZW5fYWNjJDAiLCJzaXplX2FjYyQwIiwiYmluX3NpemVfZmxvYXRhcnJheSIsImJpbl9zaXplX2Zsb2F0X2FycmF5IiwiYmluX3NpemVfYXJyYXlfbG9vcCIsInRvdGFsX2xlbiIsInRvdGFsX2xlbl9yZWYiLCJiaW5fc2l6ZV9hcnJheSIsImJpbl9zaXplX2hhc2h0YmwiLCJiaW5fc2l6ZV9rZXkiLCJiaW5fc2l6ZV92YWwiLCJiaW5fc2l6ZV9nZW5fdmVjIiwibXVsdGlwbGllciIsImJpbl9zaXplX2Zsb2F0MzJfdmVjIiwiYmluX3NpemVfZmxvYXQ2NF92ZWMiLCJiaW5fc2l6ZV9nZW5fbWF0IiwiZGltMSIsImRpbTIiLCJiaW5fc2l6ZV9mbG9hdDMyX21hdCIsImJpbl9zaXplX2Zsb2F0NjRfbWF0IiwiYmluX3NpemVfYmlnc3RyaW5nIiwiYmluX3NpemVfdmFyaWFudF9pbnQkMCIsImJpbl9zaXplX2ludF84Yml0JDAiLCJiaW5fc2l6ZV9pbnRfMTZiaXQkMCIsImJpbl9zaXplX2ludF8zMmJpdCQwIiwiYmluX3NpemVfaW50XzY0Yml0JDAiLCJiaW5fc2l6ZV9pbnQ2NF9iaXRzJDAiLCJiaW5fc2l6ZV9uZXR3b3JrMTZfaW50JDAiLCJiaW5fc2l6ZV9uZXR3b3JrMzJfaW50JDAiLCJiaW5fc2l6ZV9uZXR3b3JrMzJfaW50MzIkMCIsImJpbl9zaXplX25ldHdvcms2NF9pbnQkMCIsImJpbl9zaXplX25ldHdvcms2NF9pbnQ2NCQwIiwiYmluX3NpemVfYXJyYXlfbm9fbGVuZ3RoIiwidmFyaWFudF93cm9uZ190eXBlIiwiYmluX3dyaXRlcl91bml0IiwiYmluX3JlYWRlcl91bml0IiwiYmluX3VuaXQiLCJiaW5fd3JpdGVyX2Jvb2wiLCJiaW5fcmVhZGVyX2Jvb2wiLCJiaW5fYm9vbCIsImJpbl93cml0ZXJfc3RyaW5nIiwiYmluX3JlYWRlcl9zdHJpbmciLCJiaW5fc3RyaW5nIiwiYmluX3dyaXRlcl9ieXRlcyIsImJpbl9yZWFkZXJfYnl0ZXMiLCJiaW5fYnl0ZXMiLCJiaW5fd3JpdGVyX2NoYXIiLCJiaW5fcmVhZGVyX2NoYXIiLCJiaW5fY2hhciIsImJpbl93cml0ZXJfaW50IiwiYmluX3JlYWRlcl9pbnQiLCJiaW5faW50IiwiYmluX3dyaXRlcl9mbG9hdCIsImJpbl9yZWFkZXJfZmxvYXQiLCJiaW5fZmxvYXQiLCJiaW5fd3JpdGVyX2ludDMyIiwiYmluX3JlYWRlcl9pbnQzMiIsImJpbl9pbnQzMiIsImJpbl93cml0ZXJfaW50NjQiLCJiaW5fcmVhZGVyX2ludDY0IiwiYmluX2ludDY0IiwiYmluX3dyaXRlcl9uYXRpdmVpbnQiLCJiaW5fcmVhZGVyX25hdGl2ZWludCIsImJpbl9uYXRpdmVpbnQiLCJiaW5fd3JpdGVyX25hdDAiLCJiaW5fcmVhZGVyX25hdDAiLCJiaW5fbmF0MCIsImJpbl93cml0ZXJfcmVmIiwiYmluX3dyaXRlcl9lbCIsImJpbl9yZWFkZXJfcmVmIiwiYmluX3JlYWRlcl9lbCIsIngxIiwiYmluX3JlZiIsImJpbl9lbCIsImJpbl93cml0ZXJfbGF6eSIsImJpbl9yZWFkZXJfbGF6eSIsImJpbl9sYXp5IiwiYmluX3dyaXRlcl9vcHRpb24iLCJiaW5fcmVhZGVyX29wdGlvbiIsImJpbl9vcHRpb24iLCJiaW5fd3JpdGVyX3BhaXIiLCJiaW5fd3JpdGVyX2VsMSIsImJpbl93cml0ZXJfZWwyIiwiYmluX3JlYWRlcl9wYWlyIiwiYmluX3JlYWRlcl9lbDEiLCJiaW5fcmVhZGVyX2VsMiIsImJpbl9wYWlyIiwiYmluX2VsMSIsImJpbl9lbDIiLCJ4MiIsImJpbl93cml0ZXJfdHJpcGxlIiwiYmluX3dyaXRlcl9lbDMiLCJiaW5fcmVhZGVyX3RyaXBsZSIsImJpbl9yZWFkZXJfZWwzIiwiYmluX3RyaXBsZSIsImJpbl9lbDMiLCJ4MyIsImJpbl93cml0ZXJfbGlzdCIsImJpbl9yZWFkZXJfbGlzdCIsImJpbl9saXN0IiwiYmluX3dyaXRlcl9hcnJheSIsImJpbl9yZWFkZXJfYXJyYXkiLCJiaW5fYXJyYXkiLCJiaW5fd3JpdGVyX2hhc2h0YmwiLCJiaW5fcmVhZGVyX2hhc2h0YmwiLCJiaW5faGFzaHRibCIsImJpbl93cml0ZXJfZmxvYXQzMl92ZWMiLCJiaW5fcmVhZGVyX2Zsb2F0MzJfdmVjIiwiYmluX2Zsb2F0MzJfdmVjIiwiYmluX3dyaXRlcl9mbG9hdDY0X3ZlYyIsImJpbl9yZWFkZXJfZmxvYXQ2NF92ZWMiLCJiaW5fZmxvYXQ2NF92ZWMiLCJiaW5fd3JpdGVyX3ZlYyIsImJpbl9yZWFkZXJfdmVjIiwiYmluX3ZlYyIsImJpbl93cml0ZXJfZmxvYXQzMl9tYXQiLCJiaW5fcmVhZGVyX2Zsb2F0MzJfbWF0IiwiYmluX2Zsb2F0MzJfbWF0IiwiYmluX3dyaXRlcl9mbG9hdDY0X21hdCIsImJpbl9yZWFkZXJfZmxvYXQ2NF9tYXQiLCJiaW5fZmxvYXQ2NF9tYXQiLCJiaW5fd3JpdGVyX21hdCIsImJpbl9yZWFkZXJfbWF0IiwiYmluX21hdCIsImJpbl93cml0ZXJfYmlnc3RyaW5nIiwiYmluX3JlYWRlcl9iaWdzdHJpbmciLCJiaW5fYmlnc3RyaW5nIiwiYmluX3dyaXRlcl9mbG9hdGFycmF5IiwiYmluX3JlYWRlcl9mbG9hdGFycmF5IiwiYmluX2Zsb2F0YXJyYXkiLCJiaW5fd3JpdGVyX2Zsb2F0X2FycmF5IiwiYmluX3JlYWRlcl9mbG9hdF9hcnJheSIsImJpbl9mbG9hdF9hcnJheSIsImJpbl93cml0ZXJfdmFyaWFudF9pbnQiLCJiaW5fcmVhZGVyX3ZhcmlhbnRfaW50IiwiYmluX3ZhcmlhbnRfaW50IiwiYmluX3dyaXRlcl9pbnRfOGJpdCIsImJpbl9yZWFkZXJfaW50XzhiaXQiLCJiaW5faW50XzhiaXQiLCJiaW5fd3JpdGVyX2ludF8xNmJpdCIsImJpbl9yZWFkZXJfaW50XzE2Yml0IiwiYmluX2ludF8xNmJpdCIsImJpbl93cml0ZXJfaW50XzMyYml0IiwiYmluX3JlYWRlcl9pbnRfMzJiaXQiLCJiaW5faW50XzMyYml0IiwiYmluX3dyaXRlcl9pbnRfNjRiaXQiLCJiaW5fcmVhZGVyX2ludF82NGJpdCIsImJpbl9pbnRfNjRiaXQiLCJiaW5fd3JpdGVyX2ludDY0X2JpdHMiLCJiaW5fcmVhZGVyX2ludDY0X2JpdHMiLCJiaW5faW50NjRfYml0cyIsImJpbl93cml0ZXJfbmV0d29yazE2X2ludCIsImJpbl9yZWFkZXJfbmV0d29yazE2X2ludCIsImJpbl9uZXR3b3JrMTZfaW50IiwiYmluX3dyaXRlcl9uZXR3b3JrMzJfaW50IiwiYmluX3JlYWRlcl9uZXR3b3JrMzJfaW50IiwiYmluX25ldHdvcmszMl9pbnQiLCJiaW5fd3JpdGVyX25ldHdvcmszMl9pbnQzMiIsImJpbl9yZWFkZXJfbmV0d29yazMyX2ludDMyIiwiYmluX25ldHdvcmszMl9pbnQzMiIsImJpbl93cml0ZXJfbmV0d29yazY0X2ludCIsImJpbl9yZWFkZXJfbmV0d29yazY0X2ludCIsImJpbl9uZXR3b3JrNjRfaW50IiwiYmluX3dyaXRlcl9uZXR3b3JrNjRfaW50NjQiLCJiaW5fcmVhZGVyX25ldHdvcms2NF9pbnQ2NCIsImJpbl9uZXR3b3JrNjRfaW50NjQiLCJiaW5fd3JpdGVyX2FycmF5X25vX2xlbmd0aCIsImNudl93cml0ZXIiLCJjbnYiLCJ0cF9jbGFzcyIsImNudl9yZWFkZXIiLCJ2dGFnIiwiZm9yX3NoYXBlIiwiZm9yX3dyaXRlciIsImZvcl9yZWFkZXIiLCJzaXplX2hlYWRlcl9sZW5ndGgiLCJiaW5fd3JpdGVfc2l6ZV9oZWFkZXIiLCJiaW5fcmVhZF9zaXplX2hlYWRlciIsImJpbl9kdW1wIiwib3B0Iiwid3JpdGVyIiwic3RoIiwiaGVhZGVyIiwicG9zX2xlbiIsInRvdF9sZW4iLCJwb3NfbGVuJDAiLCJidWYkMCIsImJ1ZiQxIiwiYmluX3JlYWRfc3RyZWFtIiwibWF4X3NpemUiLCJyZWFkIiwicmVhZGVyIiwibWF4X3NpemUkMCIsIm1zZyIsImJpbl93cml0ZXJfdCIsImJpbl9yZWFkZXJfdCIsImJpbl90IiwibWF5YmVfYW5ub3RhdGVfc2hhcGUiLCJtYXliZV91dWlkIiwic2hhcGUiLCJ1dWlkIiwiYmluX3NoYXBlX3QiLCJiaW5fc2l6ZV90IiwidCIsImJpbl93cml0ZV90IiwiYmluX3JlYWRfdCIsImJpbl9yZWFkX3QkMCIsImJpbl9zaXplX3QkMCIsImJpbl93cml0ZV90JDAiLCJiaW5fcmVhZF90JDEiLCJiaW5fcmVhZF90JDIiLCJiaW5fc2hhcGVfdCQwIiwiYmluX3NoYXBlX2VsIiwiYmluX3dyaXRlciIsImJpbl9yZWFkZXIiLCJ0eXBlX2NsYXNzIiwiYmluX3NoYXBlX2VsMSIsImJpbl9zaGFwZV9lbDIiLCJiaW5fc2l6ZV9lbDEiLCJiaW5fc2l6ZV9lbDIiLCJiaW5fd3JpdGVfZWwxIiwiYmluX3dyaXRlX2VsMiIsImJpbl9yZWFkX2VsMSIsImJpbl9yZWFkX2VsMiIsImJpbl93cml0ZXIxIiwiYmluX3dyaXRlcjIiLCJiaW5fcmVhZGVyMSIsImJpbl9yZWFkZXIyIiwidHlwZV9jbGFzczEiLCJ0eXBlX2NsYXNzMiIsImJpbl9zaGFwZV9lbDMiLCJiaW5fc2l6ZV9lbDMiLCJiaW5fd3JpdGVfZWwzIiwiYmluX3JlYWRfZWwzIiwiYmluX3dyaXRlcjMiLCJiaW5fcmVhZGVyMyIsInR5cGVfY2xhc3MzIiwibWF5YmVfY2FsbGVyX2lkZW50aXR5Iiwid2l0aF9tb2R1bGVfbmFtZSIsIm1vZHVsZV9uYW1lIiwiZnVuY3Rpb25fbmFtZSIsIm1vZHVsZV9uYW1lJDAiLCJzaXplX3JlZiIsImlkeCIsInJlc3VsdCIsInQxIiwidDIiLCJ0MyIsImJpbl9yZWFkX3VuaXQkMCIsInZpbnQiLCJiaW5fcmVhZF9ib29sJDAiLCJiaW5fcmVhZF9zdHJpbmckMCIsImJpbl9yZWFkX2J5dGVzJDAiLCJiaW5fcmVhZF9jaGFyJDAiLCJiaW5fcmVhZF9pbnQkMCIsImJpbl9yZWFkX2Zsb2F0JDAiLCJiaW5fcmVhZF9mbG9hdGFycmF5JDAiLCJiaW5fcmVhZF9mbG9hdF9hcnJheSQwIiwiYmluX3JlYWRfaW50MzIkMCIsImJpbl9yZWFkX2ludDY0JDAiLCJiaW5fcmVhZF9uYXRpdmVpbnQkMCIsImJpbl9yZWFkX3JlZiQwIiwiYmluX2xhenlfdCIsImJpbl9zaGFwZV9sYXp5X3QiLCJiaW5fd3JpdGVyX2xhenlfdCIsImJpbl93cml0ZV9sYXp5X3QiLCJiaW5fcmVhZGVyX2xhenlfdCIsImJpbl9yZWFkX2xhenlfdCIsImJpbl9yZWFkX2xhenlfdCQwIiwiYmluX3JlYWRfbGF6eSQwIiwiYmluX3JlYWRfb3B0aW9uJDAiLCJiaW5fcmVhZF9saXN0JDAiLCJiaW5fcmVhZF9hcnJheSQwIiwiYmluX3JlYWRfaGFzaHRibCQwIiwiZyIsImJpbl9yZWFkX2JpZ3N0cmluZyQwIiwiYmluX3dyaXRlX21hdCIsImJpbl9yZWFkX21hdCIsImJpbl9yZWFkX21hdCQwIiwiYmluX3JlYWRfZmxvYXQzMl9tYXQkMCIsImJpbl9yZWFkX2Zsb2F0NjRfbWF0JDAiLCJiaW5fd3JpdGVfdmVjIiwiYmluX3JlYWRfdmVjIiwiYmluX3JlYWRfdmVjJDAiLCJiaW5fcmVhZF9mbG9hdDMyX3ZlYyQwIiwiYmluX3JlYWRfZmxvYXQ2NF92ZWMkMCIsInZkaWdlc3QiLCJjb21wYXJlIiwiY21wX2EiLCJhXzAwMSIsImJfMDAyIiwic2V4cF9vZl90Iiwib2ZfYV8wMDMiLCJzdGFydF9hIiwiZW5kX2EiLCJ3cml0dGVuIiwiZXhwZWN0ZWRfc2l6ZSIsIm9mX2JpbmFibGUiLCJ0b19iaW5hYmxlIiwiYmluX3NoYXBlX3QkMSIsImJpbl9zaXplX3QkMSIsImJpbl93cml0ZV90JDEiLCJiaW5fcmVhZF90JDMiLCJiaW5fcmVhZF90JDQiLCJ0b19vcGFxdWUiLCJibG9iIiwib2Zfb3BhcXVlX2V4biIsImNvbXBhcmUkMCIsInNleHBfb2ZfdCQwIiwiYmluX3NpemVfdCQzIiwiYmluX3dyaXRlX3QkMyIsInN0cmluZ19vZl9iaWdzdHJpbmciLCJiaW5fcmVhZF90JDciLCJiaW5fcmVhZF90JDgiLCJ0b19vcGFxdWUkMCIsImJpbl93cml0ZXJfdiIsIm9mX29wYXF1ZV9leG4kMCIsImJpbl9yZWFkZXJfdiIsImVycm9yIiwiY29tcGFyZSQxIiwic2V4cF9vZl90JDEiLCJiaW5fc2l6ZV90JDUiLCJiaW5fcmVhZF90JDExIiwiYmluX3JlYWRfdCQxMiIsImJpbl9yZWFkZXJfdCQyIl0sInNvdXJjZXMiOlsiL1VzZXJzL3J1c3NlbGxyb3plbmJhdW0vLm9wYW0vZGl5LWhhemVsbnV0L2xpYi9iaW5fcHJvdC9jb21tb24ubWwiLCIvVXNlcnMvcnVzc2VsbHJvemVuYmF1bS8ub3BhbS9kaXktaGF6ZWxudXQvbGliL2Jpbl9wcm90L25hdDAubWwiLCIvVXNlcnMvcnVzc2VsbHJvemVuYmF1bS8ub3BhbS9kaXktaGF6ZWxudXQvbGliL2Jpbl9wcm90L3dyaXRlLm1sIiwiL1VzZXJzL3J1c3NlbGxyb3plbmJhdW0vLm9wYW0vZGl5LWhhemVsbnV0L2xpYi9iaW5fcHJvdC9yZWFkLm1sIiwiL1VzZXJzL3J1c3NlbGxyb3plbmJhdW0vLm9wYW0vZGl5LWhhemVsbnV0L2xpYi9iaW5fcHJvdC9zaGFwZS5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvYmluX3Byb3Qvc2l6ZS5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvYmluX3Byb3QvdHlwZV9jbGFzcy5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvYmluX3Byb3QvYmluYWJsZS5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvYmluX3Byb3QvdXRpbHMubWwiLCIvVXNlcnMvcnVzc2VsbHJvemVuYmF1bS8ub3BhbS9kaXktaGF6ZWxudXQvbGliL2Jpbl9wcm90L3N0ZC5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvYmluX3Byb3QvbWQ1Lm1sIiwiL1VzZXJzL3J1c3NlbGxyb3plbmJhdW0vLm9wYW0vZGl5LWhhemVsbnV0L2xpYi9iaW5fcHJvdC9ibG9iLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0U7Ozs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0dBTUE7O0lBZ05N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Z0NBRk9BLFlBQ2Q2RTtJQUVKLE9BRklBO0dBRUE7WUFHRndpQixxQkFBa0JybkI7SUFDcEI7K0RBRG9CQTtHQUN1QztHQUcxQztJQUFmc25CLHFCQVZBRixlQU1BQztJQWRXLGNBTVhGLGNBRUFDLGVBTUFDLGVBSUFDOzs7T0ExTEpyQztPQUFBSTs7Ozs7Ozs7Ozs7U0ErRk1nQjtTQUVBQzs7Ozs7Ozs7O1NBTkFKO1NBQ0FFOztTQXVFQWE7U0FDQUM7Ozs7Ozs7OztTQTNCQXhpQjtTQUVBa2lCO1NBTUFFOzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBDb21tb246IGNvbW1vbiBkZWZpbml0aW9ucyB1c2VkIGJ5IGJpbmFyeSBwcm90b2NvbCBjb252ZXJ0ZXJzICopXG5cbm9wZW4gQmFzZVxub3BlbiBQcmludGZcbm9wZW4gQmlnYXJyYXlcblxudHlwZSBwb3MgPSBpbnQgW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxuKCogRXJyb3JzIGFuZCBleGNlcHRpb25zICopXG5cbmV4Y2VwdGlvbiBCdWZmZXJfc2hvcnRcbmV4Y2VwdGlvbiBOb192YXJpYW50X21hdGNoXG5cbm1vZHVsZSBSZWFkRXJyb3IgPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICB8IE5lZ19pbnQ4XG4gICAgfCBJbnRfY29kZVxuICAgIHwgSW50X292ZXJmbG93XG4gICAgfCBOYXQwX2NvZGVcbiAgICB8IE5hdDBfb3ZlcmZsb3dcbiAgICB8IEludDMyX2NvZGVcbiAgICB8IEludDY0X2NvZGVcbiAgICB8IE5hdGl2ZWludF9jb2RlXG4gICAgfCBVbml0X2NvZGVcbiAgICB8IEJvb2xfY29kZVxuICAgIHwgT3B0aW9uX2NvZGVcbiAgICB8IFN0cmluZ190b29fbG9uZ1xuICAgIHwgVmFyaWFudF90YWdcbiAgICB8IEFycmF5X3Rvb19sb25nXG4gICAgfCBMaXN0X3Rvb19sb25nIG9mXG4gICAgICAgIHsgbGVuIDogaW50XG4gICAgICAgIDsgbWF4X2xlbiA6IGludFxuICAgICAgICB9XG4gICAgfCBIYXNodGJsX3Rvb19sb25nXG4gICAgfCBTdW1fdGFnIG9mIHN0cmluZ1xuICAgIHwgVmFyaWFudCBvZiBzdHJpbmdcbiAgICB8IFBvbHlfcmVjX2JvdW5kIG9mIHN0cmluZ1xuICAgIHwgVmFyaWFudF93cm9uZ190eXBlIG9mIHN0cmluZ1xuICAgIHwgU2lsbHlfdHlwZSBvZiBzdHJpbmdcbiAgICB8IEVtcHR5X3R5cGUgb2Ygc3RyaW5nXG5cbiAgbGV0IHRvX3N0cmluZyA9IGZ1bmN0aW9uXG4gICAgfCBOZWdfaW50OCAtPiBcIk5lZ19pbnQ4XCJcbiAgICB8IEludF9jb2RlIC0+IFwiSW50X2NvZGVcIlxuICAgIHwgSW50X292ZXJmbG93IC0+IFwiSW50X292ZXJmbG93XCJcbiAgICB8IE5hdDBfY29kZSAtPiBcIk5hdDBfY29kZVwiXG4gICAgfCBOYXQwX292ZXJmbG93IC0+IFwiTmF0MF9vdmVyZmxvd1wiXG4gICAgfCBJbnQzMl9jb2RlIC0+IFwiSW50MzJfY29kZVwiXG4gICAgfCBJbnQ2NF9jb2RlIC0+IFwiSW50NjRfY29kZVwiXG4gICAgfCBOYXRpdmVpbnRfY29kZSAtPiBcIk5hdGl2ZWludF9jb2RlXCJcbiAgICB8IFVuaXRfY29kZSAtPiBcIlVuaXRfY29kZVwiXG4gICAgfCBCb29sX2NvZGUgLT4gXCJCb29sX2NvZGVcIlxuICAgIHwgT3B0aW9uX2NvZGUgLT4gXCJPcHRpb25fY29kZVwiXG4gICAgfCBTdHJpbmdfdG9vX2xvbmcgLT4gXCJTdHJpbmdfdG9vX2xvbmdcIlxuICAgIHwgVmFyaWFudF90YWcgLT4gXCJWYXJpYW50X3RhZ1wiXG4gICAgfCBBcnJheV90b29fbG9uZyAtPiBcIkFycmF5X3Rvb19sb25nXCJcbiAgICB8IExpc3RfdG9vX2xvbmcgeyBsZW47IG1heF9sZW4gfSAtPiBzcHJpbnRmIFwiTGlzdF90b29fbG9uZyAvICVkIChtYXggJWQpXCIgbGVuIG1heF9sZW5cbiAgICB8IEhhc2h0YmxfdG9vX2xvbmcgLT4gXCJIYXNodGJsX3Rvb19sb25nXCJcbiAgICB8IFN1bV90YWcgbG9jIC0+IFwiU3VtX3RhZyAvIFwiIF4gbG9jXG4gICAgfCBWYXJpYW50IGxvYyAtPiBcIlZhcmlhbnQgLyBcIiBeIGxvY1xuICAgIHwgUG9seV9yZWNfYm91bmQgbG9jIC0+IFwiUG9seV9yZWNfYm91bmQgLyBcIiBeIGxvY1xuICAgIHwgVmFyaWFudF93cm9uZ190eXBlIGxvYyAtPiBcIlZhcmlhbnRfd3JvbmdfdHlwZSAvIFwiIF4gbG9jXG4gICAgfCBTaWxseV90eXBlIGxvYyAtPiBcIlNpbGx5X3R5cGUgLyBcIiBeIGxvY1xuICAgIHwgRW1wdHlfdHlwZSBsb2MgLT4gXCJFbXB0eV90eXBlIC8gXCIgXiBsb2NcbiAgOztcblxuICBsZXQgc2V4cF9vZl90IHQgPSBTZXhwLkF0b20gKHRvX3N0cmluZyB0KVxuZW5kXG5cbmV4Y2VwdGlvbiBSZWFkX2Vycm9yIG9mIFJlYWRFcnJvci50ICogcG9zIFtAQGRlcml2aW5nIHNleHBfb2ZdXG5leGNlcHRpb24gUG9seV9yZWNfd3JpdGUgb2Ygc3RyaW5nXG5leGNlcHRpb24gRW1wdHlfdHlwZSBvZiBzdHJpbmdcblxubGV0IHJhaXNlX3JlYWRfZXJyb3IgZXJyIHBvcyA9IHJhaXNlIChSZWFkX2Vycm9yIChlcnIsIHBvcykpXG5cbmxldCByYWlzZV92YXJpYW50X3dyb25nX3R5cGUgbmFtZSBwb3MgPVxuICByYWlzZSAoUmVhZF9lcnJvciAoUmVhZEVycm9yLlZhcmlhbnRfd3JvbmdfdHlwZSBuYW1lLCBwb3MpKVxuOztcblxubGV0IHJhaXNlX2NvbmN1cnJlbnRfbW9kaWZpY2F0aW9uIGxvYyA9IGZhaWx3aXRoIChsb2MgXiBcIjogY29uY3VycmVudCBtb2RpZmljYXRpb25cIilcbmxldCBhcnJheV9ib3VuZF9lcnJvciAoKSA9IGludmFsaWRfYXJnIFwiaW5kZXggb3V0IG9mIGJvdW5kc1wiXG5cbigqIEJ1ZmZlcnMgKilcblxudHlwZSBwb3NfcmVmID0gcG9zIHJlZlxudHlwZSBidWYgPSAoY2hhciwgaW50OF91bnNpZ25lZF9lbHQsIGNfbGF5b3V0KSBBcnJheTEudFxuXG5sZXQgY3JlYXRlX2J1ZiBuID0gQXJyYXkxLmNyZWF0ZSBCaWdhcnJheS5jaGFyIGNfbGF5b3V0IG5cbmxldCBidWZfbGVuIGJ1ZiA9IEFycmF5MS5kaW0gYnVmXG5sZXQgYXNzZXJ0X3BvcyBwb3MgPSBpZiBwb3MgPCAwIHRoZW4gYXJyYXlfYm91bmRfZXJyb3IgKClcbmxldCBjaGVja19wb3MgKGJ1ZiA6IGJ1ZikgcG9zID0gaWYgcG9zID49IEFycmF5MS5kaW0gYnVmIHRoZW4gcmFpc2UgQnVmZmVyX3Nob3J0XG5cbmxldCBzYWZlX2dldF9wb3MgYnVmIHBvc19yZWYgPVxuICBsZXQgcG9zID0gIXBvc19yZWYgaW5cbiAgY2hlY2tfcG9zIGJ1ZiBwb3M7XG4gIHBvc1xuOztcblxubGV0IGNoZWNrX25leHQgKGJ1ZiA6IGJ1ZikgbmV4dCA9IGlmIG5leHQgPiBBcnJheTEuZGltIGJ1ZiB0aGVuIHJhaXNlIEJ1ZmZlcl9zaG9ydFxuXG5sZXQgZ2V0X29wdF9wb3MgfmxvYyB+dmFyID0gZnVuY3Rpb25cbiAgfCBTb21lIHBvcyAtPlxuICAgIGlmIHBvcyA8IDAgdGhlbiBpbnZhbGlkX2FyZyAoc3ByaW50ZiBcIkJpbl9wcm90LkNvbW1vbi4lczogJXMgPCAwXCIgbG9jIHZhcik7XG4gICAgcG9zXG4gIHwgTm9uZSAtPiAwXG47O1xuXG5leHRlcm5hbCB1bnNhZmVfYmxpdF9idWZcbiAgOiAgc3JjX3BvczppbnRcbiAgLT4gc3JjOmJ1ZlxuICAtPiBkc3RfcG9zOmludFxuICAtPiBkc3Q6YnVmXG4gIC0+IGxlbjppbnRcbiAgLT4gdW5pdFxuICA9IFwiYmluX3Byb3RfYmxpdF9idWZfc3R1YlwiXG5cbmxldCBibGl0X2J1ZiA/c3JjX3BvcyB+c3JjID9kc3RfcG9zIH5kc3QgbGVuID1cbiAgbGV0IGxvYyA9IFwiYmxpdF9idWZcIiBpblxuICBsZXQgc3JjX3BvcyA9IGdldF9vcHRfcG9zIH5sb2MgfnZhcjpcInNyY19wb3NcIiBzcmNfcG9zIGluXG4gIGxldCBkc3RfcG9zID0gZ2V0X29wdF9wb3MgfmxvYyB+dmFyOlwiZHN0X3Bvc1wiIGRzdF9wb3MgaW5cbiAgaWYgbGVuIDwgMFxuICB0aGVuIGludmFsaWRfYXJnIFwiQmluX3Byb3QuQ29tbW9uLmJsaXRfYnVmOiBsZW4gPCAwXCJcbiAgZWxzZSBpZiBsZW4gPSAwXG4gIHRoZW4gKFxuICAgIGlmIHNyY19wb3MgPiBBcnJheTEuZGltIHNyY1xuICAgIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9idWY6IHNyY19wb3MgPiBzcmNfbGVuXCI7XG4gICAgaWYgZHN0X3BvcyA+IEFycmF5MS5kaW0gZHN0XG4gICAgdGhlbiBpbnZhbGlkX2FyZyBcIkJpbl9wcm90LkNvbW1vbi5ibGl0X2J1ZjogZHN0X3BvcyA+IGRzdF9sZW5cIilcbiAgZWxzZSBpZiBzcmNfcG9zICsgbGVuID4gQXJyYXkxLmRpbSBzcmNcbiAgdGhlbiBpbnZhbGlkX2FyZyBcIkJpbl9wcm90LkNvbW1vbi5ibGl0X2J1Zjogc3JjX3BvcyArIGxlbiA+IHNyY19sZW5cIlxuICBlbHNlIGlmIGRzdF9wb3MgKyBsZW4gPiBBcnJheTEuZGltIGRzdFxuICB0aGVuIGludmFsaWRfYXJnIFwiQmluX3Byb3QuQ29tbW9uLmJsaXRfYnVmOiBkc3RfcG9zICsgbGVuID4gZHN0X2xlblwiXG4gIGVsc2UgdW5zYWZlX2JsaXRfYnVmIH5zcmNfcG9zIH5zcmMgfmRzdF9wb3MgfmRzdCB+bGVuXG47O1xuXG5leHRlcm5hbCB1bnNhZmVfYmxpdF9zdHJpbmdfYnVmXG4gIDogIHNyY19wb3M6aW50XG4gIC0+IHN0cmluZ1xuICAtPiBkc3RfcG9zOmludFxuICAtPiBidWZcbiAgLT4gbGVuOmludFxuICAtPiB1bml0XG4gID0gXCJiaW5fcHJvdF9ibGl0X3N0cmluZ19idWZfc3R1YlwiXG5bQEBub2FsbG9jXVxuXG5leHRlcm5hbCB1bnNhZmVfYmxpdF9ieXRlc19idWZcbiAgOiAgc3JjX3BvczppbnRcbiAgLT4gYnl0ZXNcbiAgLT4gZHN0X3BvczppbnRcbiAgLT4gYnVmXG4gIC0+IGxlbjppbnRcbiAgLT4gdW5pdFxuICA9IFwiYmluX3Byb3RfYmxpdF9ieXRlc19idWZfc3R1YlwiXG5bQEBub2FsbG9jXVxuXG5sZXQgYmxpdF9zdHJpbmdfYnVmID9zcmNfcG9zIHN0ciA/ZHN0X3BvcyBidWYgfmxlbiA9XG4gIGxldCBsb2MgPSBcImJsaXRfc3RyaW5nX2J1ZlwiIGluXG4gIGxldCBzcmNfcG9zID0gZ2V0X29wdF9wb3MgfmxvYyB+dmFyOlwic3JjX3Bvc1wiIHNyY19wb3MgaW5cbiAgbGV0IGRzdF9wb3MgPSBnZXRfb3B0X3BvcyB+bG9jIH52YXI6XCJkc3RfcG9zXCIgZHN0X3BvcyBpblxuICBpZiBsZW4gPCAwXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9zdHJpbmdfYnVmOiBsZW4gPCAwXCJcbiAgZWxzZSBpZiBsZW4gPSAwXG4gIHRoZW4gKFxuICAgIGlmIHNyY19wb3MgPiBTdHJpbmcubGVuZ3RoIHN0clxuICAgIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9zdHJpbmdfYnVmOiBzcmNfcG9zID4gc3RyX2xlblwiO1xuICAgIGlmIGRzdF9wb3MgPiBBcnJheTEuZGltIGJ1ZlxuICAgIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9zdHJpbmdfYnVmOiBzcmNfcG9zID4gYnVmXCIpXG4gIGVsc2UgaWYgc3JjX3BvcyArIGxlbiA+IFN0cmluZy5sZW5ndGggc3RyXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9zdHJpbmdfYnVmOiBzcmNfcG9zICsgbGVuID4gc3RyX2xlblwiXG4gIGVsc2UgaWYgZHN0X3BvcyArIGxlbiA+IEFycmF5MS5kaW0gYnVmXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9zdHJpbmdfYnVmOiBzcmNfcG9zICsgbGVuID4gYnVmXCJcbiAgZWxzZSB1bnNhZmVfYmxpdF9zdHJpbmdfYnVmIH5zcmNfcG9zIHN0ciB+ZHN0X3BvcyBidWYgfmxlblxuOztcblxubGV0IGJsaXRfYnl0ZXNfYnVmID9zcmNfcG9zIHN0ciA/ZHN0X3BvcyBidWYgfmxlbiA9XG4gIGxldCBsb2MgPSBcImJsaXRfYnl0ZXNfYnVmXCIgaW5cbiAgbGV0IHNyY19wb3MgPSBnZXRfb3B0X3BvcyB+bG9jIH52YXI6XCJzcmNfcG9zXCIgc3JjX3BvcyBpblxuICBsZXQgZHN0X3BvcyA9IGdldF9vcHRfcG9zIH5sb2MgfnZhcjpcImRzdF9wb3NcIiBkc3RfcG9zIGluXG4gIGlmIGxlbiA8IDBcbiAgdGhlbiBpbnZhbGlkX2FyZyBcIkJpbl9wcm90LkNvbW1vbi5ibGl0X2J5dGVzX2J1ZjogbGVuIDwgMFwiXG4gIGVsc2UgaWYgbGVuID0gMFxuICB0aGVuIChcbiAgICBpZiBzcmNfcG9zID4gQnl0ZXMubGVuZ3RoIHN0clxuICAgIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9ieXRlc19idWY6IHNyY19wb3MgPiBzdHJfbGVuXCI7XG4gICAgaWYgZHN0X3BvcyA+IEFycmF5MS5kaW0gYnVmXG4gICAgdGhlbiBpbnZhbGlkX2FyZyBcIkJpbl9wcm90LkNvbW1vbi5ibGl0X2J5dGVzX2J1Zjogc3JjX3BvcyA+IGJ1ZlwiKVxuICBlbHNlIGlmIHNyY19wb3MgKyBsZW4gPiBCeXRlcy5sZW5ndGggc3RyXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9ieXRlc19idWY6IHNyY19wb3MgKyBsZW4gPiBzdHJfbGVuXCJcbiAgZWxzZSBpZiBkc3RfcG9zICsgbGVuID4gQXJyYXkxLmRpbSBidWZcbiAgdGhlbiBpbnZhbGlkX2FyZyBcIkJpbl9wcm90LkNvbW1vbi5ibGl0X2J5dGVzX2J1Zjogc3JjX3BvcyArIGxlbiA+IGJ1ZlwiXG4gIGVsc2UgdW5zYWZlX2JsaXRfYnl0ZXNfYnVmIH5zcmNfcG9zIHN0ciB+ZHN0X3BvcyBidWYgfmxlblxuOztcblxuZXh0ZXJuYWwgdW5zYWZlX2JsaXRfYnVmX3N0cmluZ1xuICA6ICBzcmNfcG9zOmludFxuICAtPiBidWZcbiAgLT4gZHN0X3BvczppbnRcbiAgLT4gYnl0ZXNcbiAgLT4gbGVuOmludFxuICAtPiB1bml0XG4gID0gXCJiaW5fcHJvdF9ibGl0X2J1Zl9ieXRlc19zdHViXCJcbltAQG5vYWxsb2NdXG5cbmV4dGVybmFsIHVuc2FmZV9ibGl0X2J1Zl9ieXRlc1xuICA6ICBzcmNfcG9zOmludFxuICAtPiBidWZcbiAgLT4gZHN0X3BvczppbnRcbiAgLT4gYnl0ZXNcbiAgLT4gbGVuOmludFxuICAtPiB1bml0XG4gID0gXCJiaW5fcHJvdF9ibGl0X2J1Zl9ieXRlc19zdHViXCJcbltAQG5vYWxsb2NdXG5cbmxldCBibGl0X2J1Zl9ieXRlcyA/c3JjX3BvcyBidWYgP2RzdF9wb3Mgc3RyIH5sZW4gPVxuICBsZXQgbG9jID0gXCJibGl0X2J1Zl9zdHJpbmdcIiBpblxuICBsZXQgc3JjX3BvcyA9IGdldF9vcHRfcG9zIH5sb2MgfnZhcjpcInNyY19wb3NcIiBzcmNfcG9zIGluXG4gIGxldCBkc3RfcG9zID0gZ2V0X29wdF9wb3MgfmxvYyB+dmFyOlwiZHN0X3Bvc1wiIGRzdF9wb3MgaW5cbiAgaWYgbGVuIDwgMFxuICB0aGVuIGludmFsaWRfYXJnIFwiQmluX3Byb3QuQ29tbW9uLmJsaXRfYnVmX3N0cmluZzogbGVuIDwgMFwiXG4gIGVsc2UgaWYgbGVuID0gMFxuICB0aGVuIChcbiAgICBpZiBzcmNfcG9zID4gQXJyYXkxLmRpbSBidWZcbiAgICB0aGVuIGludmFsaWRfYXJnIFwiQmluX3Byb3QuQ29tbW9uLmJsaXRfYnVmX3N0cmluZzogc3JjX3BvcyA+IGJ1Zl9sZW5cIjtcbiAgICBpZiBkc3RfcG9zID4gQnl0ZXMubGVuZ3RoIHN0clxuICAgIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9idWZfc3RyaW5nOiBzcmNfcG9zID4gc3RyX2xlblwiKVxuICBlbHNlIGlmIHNyY19wb3MgKyBsZW4gPiBBcnJheTEuZGltIGJ1ZlxuICB0aGVuIGludmFsaWRfYXJnIFwiQmluX3Byb3QuQ29tbW9uLmJsaXRfYnVmX3N0cmluZzogc3JjX3BvcyArIGxlbiA+IGJ1Zl9sZW5cIlxuICBlbHNlIGlmIGRzdF9wb3MgKyBsZW4gPiBCeXRlcy5sZW5ndGggc3RyXG4gIHRoZW4gaW52YWxpZF9hcmcgXCJCaW5fcHJvdC5Db21tb24uYmxpdF9idWZfc3RyaW5nOiBzcmNfcG9zICsgbGVuID4gc3RyX2xlblwiXG4gIGVsc2UgdW5zYWZlX2JsaXRfYnVmX2J5dGVzIH5zcmNfcG9zIGJ1ZiB+ZHN0X3BvcyBzdHIgfmxlblxuOztcblxubGV0IGJsaXRfYnVmX3N0cmluZyA9IGJsaXRfYnVmX2J5dGVzXG5cbigqIE1pc2NlbGxhbmVvdXMgKilcblxubGV0IHJlYyBjb3B5X2h0YmxfbGlzdCBodGJsID0gZnVuY3Rpb25cbiAgfCBbXSAtPiBodGJsXG4gIHwgKGssIHYpIDo6IHJlc3QgLT5cbiAgICBDYW1sLkhhc2h0YmwuYWRkIGh0YmwgayB2O1xuICAgIGNvcHlfaHRibF9saXN0IGh0YmwgcmVzdFxuOztcblxuKCogQmlnYXJyYXlzICopXG5cbnR5cGUgdmVjMzIgPSAoZmxvYXQsIGZsb2F0MzJfZWx0LCBmb3J0cmFuX2xheW91dCkgQXJyYXkxLnRcbnR5cGUgdmVjNjQgPSAoZmxvYXQsIGZsb2F0NjRfZWx0LCBmb3J0cmFuX2xheW91dCkgQXJyYXkxLnRcbnR5cGUgdmVjID0gdmVjNjRcbnR5cGUgbWF0MzIgPSAoZmxvYXQsIGZsb2F0MzJfZWx0LCBmb3J0cmFuX2xheW91dCkgQXJyYXkyLnRcbnR5cGUgbWF0NjQgPSAoZmxvYXQsIGZsb2F0NjRfZWx0LCBmb3J0cmFuX2xheW91dCkgQXJyYXkyLnRcbnR5cGUgbWF0ID0gbWF0NjRcblxuKCogRmxvYXQgYXJyYXlzICopXG5cbmV4dGVybmFsIHVuc2FmZV9ibGl0X2Zsb2F0X2FycmF5X2J1ZlxuICA6ICBzcmNfcG9zOmludFxuICAtPiBmbG9hdCBhcnJheVxuICAtPiBkc3RfcG9zOmludFxuICAtPiBidWZcbiAgLT4gbGVuOmludFxuICAtPiB1bml0XG4gID0gXCJiaW5fcHJvdF9ibGl0X2Zsb2F0X2FycmF5X2J1Zl9zdHViXCJcbltAQG5vYWxsb2NdXG5cbmV4dGVybmFsIHVuc2FmZV9ibGl0X2J1Zl9mbG9hdF9hcnJheVxuICA6ICBzcmNfcG9zOmludFxuICAtPiBidWZcbiAgLT4gZHN0X3BvczppbnRcbiAgLT4gZmxvYXQgYXJyYXlcbiAgLT4gbGVuOmludFxuICAtPiB1bml0XG4gID0gXCJiaW5fcHJvdF9ibGl0X2J1Zl9mbG9hdF9hcnJheV9zdHViXCJcbltAQG5vYWxsb2NdXG5cbmV4dGVybmFsIHVuc2FmZV9ibGl0X2Zsb2F0YXJyYXlfYnVmXG4gIDogIHNyY19wb3M6aW50XG4gIC0+IGZsb2F0YXJyYXlcbiAgLT4gZHN0X3BvczppbnRcbiAgLT4gYnVmXG4gIC0+IGxlbjppbnRcbiAgLT4gdW5pdFxuICA9IFwiYmluX3Byb3RfYmxpdF9mbG9hdF9hcnJheV9idWZfc3R1YlwiXG5bQEBub2FsbG9jXVxuXG5leHRlcm5hbCB1bnNhZmVfYmxpdF9idWZfZmxvYXRhcnJheVxuICA6ICBzcmNfcG9zOmludFxuICAtPiBidWZcbiAgLT4gZHN0X3BvczppbnRcbiAgLT4gZmxvYXRhcnJheVxuICAtPiBsZW46aW50XG4gIC0+IHVuaXRcbiAgPSBcImJpbl9wcm90X2JsaXRfYnVmX2Zsb2F0X2FycmF5X3N0dWJcIlxuW0BAbm9hbGxvY11cblxuKCoqKilcblxubGV0ICggKyApID0gKCArIClcbiIsIigqIE5hdDA6IG5hdHVyYWwgbnVtYmVycyAoaW5jbHVkaW5nIHplcm8pICopXG5cbnR5cGUgdCA9IGludFxuXG5sZXQgb2ZfaW50IG4gPVxuICBpZiBuIDwgMCB0aGVuIGZhaWx3aXRoIFwiQmluX3Byb3QuTmF0MC5vZl9pbnQ6IG4gPCAwXCI7XG4gIG5cbjs7XG5cbmV4dGVybmFsIHVuc2FmZV9vZl9pbnQgOiBpbnQgLT4gdCA9IFwiJWlkZW50aXR5XCJcbiIsIigqIFdyaXRlX21sOiB3cml0aW5nIHZhbHVlcyB0byB0aGUgYmluYXJ5IHByb3RvY29sIHVzaW5nIChtb3N0bHkpIE9DYW1sLiAqKVxuXG4oKiBOb3RlOiB0aGUgY29kZSBpcyB0aGlzIGZpbGUgaXMgY2FyZWZ1bGx5IHdyaXR0ZW4gdG8gYXZvaWQgdW5uZWNlc3NhcnkgYWxsb2NhdGlvbnMuIFdoZW5cbiAgIHRvdWNoaW5nIHRoaXMgY29kZSwgYmUgc3VyZSB0byBydW4gdGhlIGJlbmNobWFya3MgdG8gY2hlY2sgZm9yIHJlZ3Jlc3Npb25zLiAqKVxuXG5vcGVuIEJpZ2FycmF5XG5vcGVuIENvbW1vblxuXG50eXBlICdhIHdyaXRlciA9IGJ1ZiAtPiBwb3M6cG9zIC0+ICdhIC0+IHBvc1xudHlwZSAoJ2EsICdiKSB3cml0ZXIxID0gJ2Egd3JpdGVyIC0+ICdiIHdyaXRlclxudHlwZSAoJ2EsICdiLCAnYykgd3JpdGVyMiA9ICdhIHdyaXRlciAtPiAoJ2IsICdjKSB3cml0ZXIxXG50eXBlICgnYSwgJ2IsICdjLCAnZCkgd3JpdGVyMyA9ICdhIHdyaXRlciAtPiAoJ2IsICdjLCAnZCkgd3JpdGVyMlxuXG5leHRlcm5hbCB1bnNhZmVfc2V0IDogYnVmIC0+IGludCAtPiBjaGFyIC0+IHVuaXQgPSBcIiVjYW1sX2JhX3Vuc2FmZV9zZXRfMVwiXG5leHRlcm5hbCB1bnNhZmVfc2V0OCA6IGJ1ZiAtPiBpbnQgLT4gaW50IC0+IHVuaXQgPSBcIiVjYW1sX2JhX3Vuc2FmZV9zZXRfMVwiXG5leHRlcm5hbCB1bnNhZmVfc2V0MTYgOiBidWYgLT4gaW50IC0+IGludCAtPiB1bml0ID0gXCIlY2FtbF9iaWdzdHJpbmdfc2V0MTZ1XCJcbmV4dGVybmFsIHVuc2FmZV9zZXQzMiA6IGJ1ZiAtPiBpbnQgLT4gaW50MzIgLT4gdW5pdCA9IFwiJWNhbWxfYmlnc3RyaW5nX3NldDMydVwiXG5leHRlcm5hbCB1bnNhZmVfc2V0NjQgOiBidWYgLT4gaW50IC0+IGludDY0IC0+IHVuaXQgPSBcIiVjYW1sX2JpZ3N0cmluZ19zZXQ2NHVcIlxuZXh0ZXJuYWwgYnN3YXAxNiA6IGludCAtPiBpbnQgPSBcIiVic3dhcDE2XCJcbmV4dGVybmFsIGJzd2FwMzIgOiBpbnQzMiAtPiBpbnQzMiA9IFwiJWJzd2FwX2ludDMyXCJcbmV4dGVybmFsIGJzd2FwNjQgOiBpbnQ2NCAtPiBpbnQ2NCA9IFwiJWJzd2FwX2ludDY0XCJcblxuKCokIG9wZW4gQmluX3Byb3RfY2luYXBzICQqKVxuXG5sZXQgY29kZV9ORUdfSU5UOCA9ICgqJCBDb2RlLmNoYXIgTkVHX0lOVDggKikgJ1xceGZmJyAoKiQqKVxuXG5sZXQgY29kZV9JTlQxNiA9ICgqJCBDb2RlLmNoYXIgSU5UMTYgKikgJ1xceGZlJyAoKiQqKVxuXG5sZXQgY29kZV9JTlQzMiA9ICgqJCBDb2RlLmNoYXIgSU5UMzIgKikgJ1xceGZkJyAoKiQqKVxuXG5sZXQgY29kZV9JTlQ2NCA9ICgqJCBDb2RlLmNoYXIgSU5UNjQgKikgJ1xceGZjJyAoKiQqKVxuXG5sZXQgYXJjaF9zaXh0eWZvdXIgPSBTeXMud29yZF9zaXplID0gNjRcbmxldCBhcmNoX2JpZ19lbmRpYW4gPSBTeXMuYmlnX2VuZGlhblxuXG5sZXQgdW5zYWZlX3NldDE2YmUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW5cbiAgdGhlbiB1bnNhZmVfc2V0MTZcbiAgZWxzZSBmdW4gYnVmIHBvcyB4IC0+IHVuc2FmZV9zZXQxNiBidWYgcG9zIChic3dhcDE2IHgpXG47O1xuXG5sZXQgdW5zYWZlX3NldDMyYmUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW5cbiAgdGhlbiB1bnNhZmVfc2V0MzJcbiAgZWxzZSBmdW4gYnVmIHBvcyB4IC0+IHVuc2FmZV9zZXQzMiBidWYgcG9zIChic3dhcDMyIHgpXG47O1xuXG5sZXQgdW5zYWZlX3NldDY0YmUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW5cbiAgdGhlbiB1bnNhZmVfc2V0NjRcbiAgZWxzZSBmdW4gYnVmIHBvcyB4IC0+IHVuc2FmZV9zZXQ2NCBidWYgcG9zIChic3dhcDY0IHgpXG47O1xuXG5sZXQgdW5zYWZlX3NldDE2bGUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW5cbiAgdGhlbiBmdW4gYnVmIHBvcyB4IC0+IHVuc2FmZV9zZXQxNiBidWYgcG9zIChic3dhcDE2IHgpXG4gIGVsc2UgdW5zYWZlX3NldDE2XG47O1xuXG5sZXQgdW5zYWZlX3NldDMybGUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW5cbiAgdGhlbiBmdW4gYnVmIHBvcyB4IC0+IHVuc2FmZV9zZXQzMiBidWYgcG9zIChic3dhcDMyIHgpXG4gIGVsc2UgdW5zYWZlX3NldDMyXG47O1xuXG5sZXQgdW5zYWZlX3NldDY0bGUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW5cbiAgdGhlbiBmdW4gYnVmIHBvcyB4IC0+IHVuc2FmZV9zZXQ2NCBidWYgcG9zIChic3dhcDY0IHgpXG4gIGVsc2UgdW5zYWZlX3NldDY0XG47O1xuXG5sZXQgYmluX3dyaXRlX3VuaXQgYnVmIH5wb3MgKCkgPVxuICBhc3NlcnRfcG9zIHBvcztcbiAgY2hlY2tfcG9zIGJ1ZiBwb3M7XG4gIHVuc2FmZV9zZXQgYnVmIHBvcyAnXFwwMDAnO1xuICBwb3MgKyAxXG47O1xuXG5sZXQgYmluX3dyaXRlX2Jvb2wgYnVmIH5wb3MgYiA9XG4gIGFzc2VydF9wb3MgcG9zO1xuICBjaGVja19wb3MgYnVmIHBvcztcbiAgdW5zYWZlX3NldCBidWYgcG9zIChpZiBiIHRoZW4gJ1xcMDAxJyBlbHNlICdcXDAwMCcpO1xuICBwb3MgKyAxXG47O1xuXG5sZXQgYWxsX2Jpbl93cml0ZV9zbWFsbF9pbnQgYnVmIHBvcyBuID1cbiAgY2hlY2tfcG9zIGJ1ZiBwb3M7XG4gIHVuc2FmZV9zZXQ4IGJ1ZiBwb3MgbjtcbiAgcG9zICsgMVxuOztcblxubGV0IGFsbF9iaW5fd3JpdGVfbmVnX2ludDggYnVmIHBvcyBuID1cbiAgbGV0IG5leHQgPSBwb3MgKyAyIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHVuc2FmZV9zZXQgYnVmIHBvcyBjb2RlX05FR19JTlQ4O1xuICB1bnNhZmVfc2V0OCBidWYgKHBvcyArIDEpIG47XG4gIG5leHRcbjs7XG5cbmxldCBhbGxfYmluX3dyaXRlX2ludDE2IGJ1ZiBwb3MgbiA9XG4gIGxldCBuZXh0ID0gcG9zICsgMyBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICB1bnNhZmVfc2V0IGJ1ZiBwb3MgY29kZV9JTlQxNjtcbiAgdW5zYWZlX3NldDE2bGUgYnVmIChwb3MgKyAxKSBuO1xuICBuZXh0XG47O1xuXG5sZXQgYWxsX2Jpbl93cml0ZV9pbnQzMiBidWYgcG9zIG4gPVxuICBsZXQgbmV4dCA9IHBvcyArIDUgaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgdW5zYWZlX3NldCBidWYgcG9zIGNvZGVfSU5UMzI7XG4gIHVuc2FmZV9zZXQzMmxlIGJ1ZiAocG9zICsgMSkgbjtcbiAgbmV4dFxuW0BAaW5saW5lXVxuOztcblxubGV0IGFsbF9iaW5fd3JpdGVfaW50NjQgYnVmIHBvcyBuID1cbiAgbGV0IG5leHQgPSBwb3MgKyA5IGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHVuc2FmZV9zZXQgYnVmIHBvcyBjb2RlX0lOVDY0O1xuICB1bnNhZmVfc2V0NjRsZSBidWYgKHBvcyArIDEpIG47XG4gIG5leHRcbltAQGlubGluZV1cbjs7XG5cbmxldCBiaW5fd3JpdGVfY2hhciBidWYgfnBvcyBjID1cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGNoZWNrX3BvcyBidWYgcG9zO1xuICB1bnNhZmVfc2V0IGJ1ZiBwb3MgYztcbiAgcG9zICsgMVxuOztcblxubGV0IGJpbl93cml0ZV9pbnQgYnVmIH5wb3MgbiA9XG4gIGFzc2VydF9wb3MgcG9zO1xuICBpZiBuID49IDBcbiAgdGhlblxuICAgIGlmIG4gPCAweDAwMDAwMDgwXG4gICAgdGhlbiBhbGxfYmluX3dyaXRlX3NtYWxsX2ludCBidWYgcG9zIG5cbiAgICBlbHNlIGlmIG4gPCAweDAwMDA4MDAwXG4gICAgdGhlbiBhbGxfYmluX3dyaXRlX2ludDE2IGJ1ZiBwb3MgblxuICAgIGVsc2UgaWYgYXJjaF9zaXh0eWZvdXIgJiYgbiA+PSAxIGxzbCAzMVxuICAgIHRoZW4gYWxsX2Jpbl93cml0ZV9pbnQ2NCBidWYgcG9zIChJbnQ2NC5vZl9pbnQgbilcbiAgICBlbHNlIGFsbF9iaW5fd3JpdGVfaW50MzIgYnVmIHBvcyAoSW50MzIub2ZfaW50IG4pXG4gIGVsc2UgaWYgbiA+PSAtMHgwMDAwMDA4MFxuICB0aGVuIGFsbF9iaW5fd3JpdGVfbmVnX2ludDggYnVmIHBvcyBuXG4gIGVsc2UgaWYgbiA+PSAtMHgwMDAwODAwMFxuICB0aGVuIGFsbF9iaW5fd3JpdGVfaW50MTYgYnVmIHBvcyBuXG4gIGVsc2UgaWYgYXJjaF9zaXh0eWZvdXIgJiYgbiA8IC0oMSBsc2wgMzEpXG4gIHRoZW4gYWxsX2Jpbl93cml0ZV9pbnQ2NCBidWYgcG9zIChJbnQ2NC5vZl9pbnQgbilcbiAgZWxzZSBhbGxfYmluX3dyaXRlX2ludDMyIGJ1ZiBwb3MgKEludDMyLm9mX2ludCBuKVxuOztcblxubGV0IGJpbl93cml0ZV9uYXQwIGJ1ZiB+cG9zIG5hdDAgPVxuICBhc3NlcnRfcG9zIHBvcztcbiAgbGV0IG4gPSAobmF0MCA6IE5hdDAudCA6PiBpbnQpIGluXG4gIGlmIG4gPCAweDAwMDAwMDgwXG4gIHRoZW4gYWxsX2Jpbl93cml0ZV9zbWFsbF9pbnQgYnVmIHBvcyBuXG4gIGVsc2UgaWYgbiA8IDB4MDAwMTAwMDBcbiAgdGhlbiBhbGxfYmluX3dyaXRlX2ludDE2IGJ1ZiBwb3MgblxuICBlbHNlIGlmIGFyY2hfc2l4dHlmb3VyICYmIG4gPj0gMSBsc2wgMzJcbiAgdGhlbiBhbGxfYmluX3dyaXRlX2ludDY0IGJ1ZiBwb3MgKEludDY0Lm9mX2ludCBuKVxuICBlbHNlIGFsbF9iaW5fd3JpdGVfaW50MzIgYnVmIHBvcyAoSW50MzIub2ZfaW50IG4pXG47O1xuXG5sZXQgYmluX3dyaXRlX3N0cmluZyBidWYgfnBvcyBzdHIgPVxuICBsZXQgbGVuID0gU3RyaW5nLmxlbmd0aCBzdHIgaW5cbiAgbGV0IHBsZW4gPSBOYXQwLnVuc2FmZV9vZl9pbnQgbGVuIGluXG4gIGxldCBuZXdfcG9zID0gYmluX3dyaXRlX25hdDAgYnVmIH5wb3MgcGxlbiBpblxuICBsZXQgbmV4dCA9IG5ld19wb3MgKyBsZW4gaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgKCogVE9ETzogb3B0aW1pemUgZm9yIHNtYWxsIHN0cmluZ3MgKilcbiAgdW5zYWZlX2JsaXRfc3RyaW5nX2J1ZiB+c3JjX3BvczowIHN0ciB+ZHN0X3BvczpuZXdfcG9zIGJ1ZiB+bGVuO1xuICBuZXh0XG47O1xuXG5sZXQgYmluX3dyaXRlX2J5dGVzIGJ1ZiB+cG9zIHN0ciA9XG4gIGxldCBsZW4gPSBCeXRlcy5sZW5ndGggc3RyIGluXG4gIGxldCBwbGVuID0gTmF0MC51bnNhZmVfb2ZfaW50IGxlbiBpblxuICBsZXQgbmV3X3BvcyA9IGJpbl93cml0ZV9uYXQwIGJ1ZiB+cG9zIHBsZW4gaW5cbiAgbGV0IG5leHQgPSBuZXdfcG9zICsgbGVuIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gICgqIFRPRE86IG9wdGltaXplIGZvciBzbWFsbCBieXRlcyAqKVxuICB1bnNhZmVfYmxpdF9ieXRlc19idWYgfnNyY19wb3M6MCBzdHIgfmRzdF9wb3M6bmV3X3BvcyBidWYgfmxlbjtcbiAgbmV4dFxuOztcblxubGV0IGJpbl93cml0ZV9mbG9hdCBidWYgfnBvcyB4ID1cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgOCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICB1bnNhZmVfc2V0NjRsZSBidWYgcG9zIChJbnQ2NC5iaXRzX29mX2Zsb2F0IHgpO1xuICBuZXh0XG5bQEBpbmxpbmVdXG47O1xuXG5sZXQgYmluX3dyaXRlX2ludDMyID1cbiAgaWYgYXJjaF9zaXh0eWZvdXJcbiAgdGhlbiBmdW4gW0BpbmxpbmVdIGJ1ZiB+cG9zIG4gLT4gYmluX3dyaXRlX2ludCBidWYgfnBvcyAoSW50MzIudG9faW50IG4pXG4gIGVsc2VcbiAgICBmdW4gW0BpbmxpbmVdIGJ1ZiB+cG9zIG4gLT5cbiAgICAgIGlmIG4gPj0gMHgwMDAwODAwMGwgfHwgbiA8IC0weDAwMDA4MDAwbFxuICAgICAgdGhlbiAoXG4gICAgICAgIGFzc2VydF9wb3MgcG9zO1xuICAgICAgICBhbGxfYmluX3dyaXRlX2ludDMyIGJ1ZiBwb3MgbilcbiAgICAgIGVsc2UgYmluX3dyaXRlX2ludCBidWYgfnBvcyAoSW50MzIudG9faW50IG4pXG47O1xuXG5sZXQgYmluX3dyaXRlX2ludDY0IGJ1ZiB+cG9zIG4gPVxuICBpZiBuID49IDB4ODAwMDAwMDBMIHx8IG4gPCAtMHg4MDAwMDAwMExcbiAgdGhlbiAoXG4gICAgYXNzZXJ0X3BvcyBwb3M7XG4gICAgYWxsX2Jpbl93cml0ZV9pbnQ2NCBidWYgcG9zIG4pXG4gIGVsc2UgaWYgYXJjaF9zaXh0eWZvdXJcbiAgdGhlbiBiaW5fd3JpdGVfaW50IGJ1ZiB+cG9zIChJbnQ2NC50b19pbnQgbilcbiAgZWxzZSBpZiBuID49IDB4MDAwMDgwMDBMIHx8IG4gPCAtMHgwMDAwODAwMExcbiAgdGhlbiAoXG4gICAgYXNzZXJ0X3BvcyBwb3M7XG4gICAgYWxsX2Jpbl93cml0ZV9pbnQzMiBidWYgcG9zIChJbnQ2NC50b19pbnQzMiBuKSlcbiAgZWxzZSBiaW5fd3JpdGVfaW50IGJ1ZiB+cG9zIChJbnQ2NC50b19pbnQgbilcbltAQGlubGluZV1cbjs7XG5cbmxldCBiaW5fd3JpdGVfbmF0aXZlaW50IGJ1ZiB+cG9zIG4gPVxuICBpZiBhcmNoX3NpeHR5Zm91clxuICAmJiAobiA+PSAoKiAweDgwMDAwMDAwbiAqKSBOYXRpdmVpbnQuc2hpZnRfbGVmdCAxbiAzMVxuICAgICAgfHwgbiA8ICgqIC0weDgwMDAwMDAwbiAqKSBOYXRpdmVpbnQubmVnIChOYXRpdmVpbnQuc2hpZnRfbGVmdCAxbiAzMSkpXG4gIHRoZW4gKFxuICAgIGFzc2VydF9wb3MgcG9zO1xuICAgIGFsbF9iaW5fd3JpdGVfaW50NjQgYnVmIHBvcyAoSW50NjQub2ZfbmF0aXZlaW50IG4pKVxuICBlbHNlIGlmICgobm90IGFyY2hfc2l4dHlmb3VyKSAmJiBuID49IDB4ODAwMG4pIHx8IG4gPCAtMHg4MDAwblxuICB0aGVuIChcbiAgICBhc3NlcnRfcG9zIHBvcztcbiAgICBhbGxfYmluX3dyaXRlX2ludDMyIGJ1ZiBwb3MgKE5hdGl2ZWludC50b19pbnQzMiBuKSlcbiAgZWxzZSBiaW5fd3JpdGVfaW50IGJ1ZiB+cG9zIChOYXRpdmVpbnQudG9faW50IG4pXG5bQEBpbmxpbmVdXG47O1xuXG5sZXQgYmluX3dyaXRlX3JlZiBiaW5fd3JpdGVfZWwgYnVmIH5wb3MgciA9IGJpbl93cml0ZV9lbCBidWYgfnBvcyAhclxuXG5sZXQgYmluX3dyaXRlX2xhenkgYmluX3dyaXRlX2VsIGJ1ZiB+cG9zIGx2ID1cbiAgbGV0IHYgPSBMYXp5LmZvcmNlIGx2IGluXG4gIGJpbl93cml0ZV9lbCBidWYgfnBvcyB2XG47O1xuXG5sZXQgYmluX3dyaXRlX29wdGlvbiBiaW5fd3JpdGVfZWwgYnVmIH5wb3MgPSBmdW5jdGlvblxuICB8IE5vbmUgLT4gYmluX3dyaXRlX2Jvb2wgYnVmIH5wb3MgZmFsc2VcbiAgfCBTb21lIHYgLT5cbiAgICBsZXQgbmV4dCA9IGJpbl93cml0ZV9ib29sIGJ1ZiB+cG9zIHRydWUgaW5cbiAgICBiaW5fd3JpdGVfZWwgYnVmIH5wb3M6bmV4dCB2XG47O1xuXG5sZXQgYmluX3dyaXRlX3BhaXIgYmluX3dyaXRlX2EgYmluX3dyaXRlX2IgYnVmIH5wb3MgKGEsIGIpID1cbiAgbGV0IG5leHQgPSBiaW5fd3JpdGVfYSBidWYgfnBvcyBhIGluXG4gIGJpbl93cml0ZV9iIGJ1ZiB+cG9zOm5leHQgYlxuOztcblxubGV0IGJpbl93cml0ZV90cmlwbGUgYmluX3dyaXRlX2EgYmluX3dyaXRlX2IgYmluX3dyaXRlX2MgYnVmIH5wb3MgKGEsIGIsIGMpID1cbiAgbGV0IG5leHQxID0gYmluX3dyaXRlX2EgYnVmIH5wb3MgYSBpblxuICBsZXQgbmV4dDIgPSBiaW5fd3JpdGVfYiBidWYgfnBvczpuZXh0MSBiIGluXG4gIGJpbl93cml0ZV9jIGJ1ZiB+cG9zOm5leHQyIGNcbjs7XG5cbmxldCBiaW5fd3JpdGVfbGlzdCA9XG4gIGxldCByZWMgbG9vcCB+YmluX3dyaXRlX2VsIH5idWYgfmVsc19wb3MgbHN0ID1cbiAgICBtYXRjaCBsc3Qgd2l0aFxuICAgIHwgW10gLT4gZWxzX3Bvc1xuICAgIHwgaGQgOjogdGwgLT5cbiAgICAgIGxldCBuZXdfZWxzX3BvcyA9IGJpbl93cml0ZV9lbCBidWYgfnBvczplbHNfcG9zIGhkIGluXG4gICAgICBsb29wIH5iaW5fd3JpdGVfZWwgfmJ1ZiB+ZWxzX3BvczpuZXdfZWxzX3BvcyB0bFxuICBpblxuICBmdW4gYmluX3dyaXRlX2VsIGJ1ZiB+cG9zIGxzdCAtPlxuICAgIGxldCBsZW4gPSBOYXQwLnVuc2FmZV9vZl9pbnQgKExpc3QubGVuZ3RoIGxzdCkgaW5cbiAgICBsZXQgZWxzX3BvcyA9IGJpbl93cml0ZV9uYXQwIGJ1ZiB+cG9zIGxlbiBpblxuICAgIGxvb3AgfmJpbl93cml0ZV9lbCB+YnVmIH5lbHNfcG9zIGxzdFxuOztcblxubGV0W0BpbmxpbmUgYWx3YXlzXSBiaW5fd3JpdGVfZmxvYXRfYXJyYXlfZ2VuIH5sZW5ndGggfmJsaXQgYnVmIH5wb3MgYSA9XG4gIGxldCBsZW4gPSBsZW5ndGggYSBpblxuICBsZXQgcGxlbiA9IE5hdDAudW5zYWZlX29mX2ludCBsZW4gaW5cbiAgbGV0IHBvcyA9IGJpbl93cml0ZV9uYXQwIGJ1ZiB+cG9zIHBsZW4gaW5cbiAgbGV0IHNpemUgPSBsZW4gKiA4IGluXG4gIGxldCBuZXh0ID0gcG9zICsgc2l6ZSBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBibGl0IH5zcmNfcG9zOjAgYSB+ZHN0X3Bvczpwb3MgYnVmIH5sZW47XG4gIG5leHRcbjs7XG5cbmxldCBiaW5fd3JpdGVfZmxvYXRhcnJheSBidWYgfnBvcyBhID1cbiAgYmluX3dyaXRlX2Zsb2F0X2FycmF5X2dlblxuICAgIH5sZW5ndGg6RmxvYXQuQXJyYXkubGVuZ3RoXG4gICAgfmJsaXQ6dW5zYWZlX2JsaXRfZmxvYXRhcnJheV9idWZcbiAgICBidWZcbiAgICB+cG9zXG4gICAgYVxuOztcblxubGV0IGJpbl93cml0ZV9mbG9hdF9hcnJheSBidWYgfnBvcyBhID1cbiAgYmluX3dyaXRlX2Zsb2F0X2FycmF5X2dlblxuICAgIH5sZW5ndGg6QXJyYXkubGVuZ3RoXG4gICAgfmJsaXQ6dW5zYWZlX2JsaXRfZmxvYXRfYXJyYXlfYnVmXG4gICAgYnVmXG4gICAgfnBvc1xuICAgIGFcbjs7XG5cbmxldCBiaW5fd3JpdGVfYXJyYXlfbG9vcCBiaW5fd3JpdGVfZWwgYnVmIH5lbHNfcG9zIH5uIGFyID1cbiAgbGV0IGVsc19wb3NfcmVmID0gcmVmIGVsc19wb3MgaW5cbiAgZm9yIGkgPSAwIHRvIG4gLSAxIGRvXG4gICAgZWxzX3Bvc19yZWYgOj0gYmluX3dyaXRlX2VsIGJ1ZiB+cG9zOiFlbHNfcG9zX3JlZiAoQXJyYXkudW5zYWZlX2dldCBhciBpKVxuICBkb25lO1xuICAhZWxzX3Bvc19yZWZcbjs7XG5cbmxldCBiaW5fd3JpdGVfYXJyYXkgKHR5cGUgYSkgYmluX3dyaXRlX2VsIGJ1ZiB+cG9zIGFyID1cbiAgaWYgKE9iai5tYWdpYyAoYmluX3dyaXRlX2VsIDogYSB3cml0ZXIpIDogZmxvYXQgd3JpdGVyKSA9PSBiaW5fd3JpdGVfZmxvYXRcbiAgdGhlbiBiaW5fd3JpdGVfZmxvYXRfYXJyYXkgYnVmIH5wb3MgKE9iai5tYWdpYyAoYXIgOiBhIGFycmF5KSA6IGZsb2F0IGFycmF5KVxuICBlbHNlIChcbiAgICBsZXQgbiA9IEFycmF5Lmxlbmd0aCBhciBpblxuICAgIGxldCBwbiA9IE5hdDAudW5zYWZlX29mX2ludCBuIGluXG4gICAgbGV0IGVsc19wb3MgPSBiaW5fd3JpdGVfbmF0MCBidWYgfnBvcyBwbiBpblxuICAgIGJpbl93cml0ZV9hcnJheV9sb29wIGJpbl93cml0ZV9lbCBidWYgfmVsc19wb3Mgfm4gYXIpXG47O1xuXG5sZXQgYmluX3dyaXRlX2hhc2h0YmwgYmluX3dyaXRlX2tleSBiaW5fd3JpdGVfdmFsIGJ1ZiB+cG9zIGh0YmwgPVxuICBsZXQgbGVuID0gSGFzaHRibC5sZW5ndGggaHRibCBpblxuICBsZXQgcGxlbiA9IE5hdDAudW5zYWZlX29mX2ludCBsZW4gaW5cbiAgbGV0IGVsc19wb3MgPSBiaW5fd3JpdGVfbmF0MCBidWYgfnBvcyBwbGVuIGluXG4gIGxldCBjbnRfcmVmID0gcmVmIDAgaW5cbiAgbGV0IGNvbGxfaHRibCBrIHYgZWxzX3BvcyA9XG4gICAgaW5jciBjbnRfcmVmO1xuICAgIGxldCBuZXdfZWxzX3BvcyA9IGJpbl93cml0ZV9rZXkgYnVmIH5wb3M6ZWxzX3BvcyBrIGluXG4gICAgYmluX3dyaXRlX3ZhbCBidWYgfnBvczpuZXdfZWxzX3BvcyB2XG4gIGluXG4gIGxldCByZXNfcG9zID0gSGFzaHRibC5mb2xkIGNvbGxfaHRibCBodGJsIGVsc19wb3MgaW5cbiAgaWYgIWNudF9yZWYgPD4gbGVuIHRoZW4gcmFpc2VfY29uY3VycmVudF9tb2RpZmljYXRpb24gXCJiaW5fd3JpdGVfaGFzaHRibFwiO1xuICByZXNfcG9zXG47O1xuXG5leHRlcm5hbCBidWZfb2ZfdmVjMzIgOiB2ZWMzMiAtPiBidWYgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCBidWZfb2ZfdmVjNjQgOiB2ZWM2NCAtPiBidWYgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCBidWZfb2ZfbWF0MzIgOiBtYXQzMiAtPiBidWYgPSBcIiVpZGVudGl0eVwiXG5leHRlcm5hbCBidWZfb2ZfbWF0NjQgOiBtYXQ2NCAtPiBidWYgPSBcIiVpZGVudGl0eVwiXG5cbmxldCBiaW5fd3JpdGVfZmxvYXQzMl92ZWMgYnVmIH5wb3MgdiA9XG4gIGxldCBsZW4gPSBBcnJheTEuZGltIHYgaW5cbiAgbGV0IHBsZW4gPSBOYXQwLnVuc2FmZV9vZl9pbnQgbGVuIGluXG4gIGxldCBwb3MgPSBiaW5fd3JpdGVfbmF0MCBidWYgfnBvcyBwbGVuIGluXG4gIGxldCBzaXplID0gbGVuICogNCBpblxuICBsZXQgbmV4dCA9IHBvcyArIHNpemUgaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgdW5zYWZlX2JsaXRfYnVmIH5zcmM6KGJ1Zl9vZl92ZWMzMiB2KSB+c3JjX3BvczowIH5kc3Q6YnVmIH5kc3RfcG9zOnBvcyB+bGVuOnNpemU7XG4gIG5leHRcbjs7XG5cbmxldCBiaW5fd3JpdGVfZmxvYXQ2NF92ZWMgYnVmIH5wb3MgdiA9XG4gIGxldCBsZW4gPSBBcnJheTEuZGltIHYgaW5cbiAgbGV0IHBsZW4gPSBOYXQwLnVuc2FmZV9vZl9pbnQgbGVuIGluXG4gIGxldCBwb3MgPSBiaW5fd3JpdGVfbmF0MCBidWYgfnBvcyBwbGVuIGluXG4gIGxldCBzaXplID0gbGVuICogOCBpblxuICBsZXQgbmV4dCA9IHBvcyArIHNpemUgaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgdW5zYWZlX2JsaXRfYnVmIH5zcmM6KGJ1Zl9vZl92ZWM2NCB2KSB+c3JjX3BvczowIH5kc3Q6YnVmIH5kc3RfcG9zOnBvcyB+bGVuOnNpemU7XG4gIG5leHRcbjs7XG5cbmxldCBiaW5fd3JpdGVfdmVjID0gYmluX3dyaXRlX2Zsb2F0NjRfdmVjXG5cbmxldCBiaW5fd3JpdGVfZmxvYXQzMl9tYXQgYnVmIH5wb3MgbSA9XG4gIGxldCBsZW4xID0gQXJyYXkyLmRpbTEgbSBpblxuICBsZXQgbGVuMiA9IEFycmF5Mi5kaW0yIG0gaW5cbiAgbGV0IHBvcyA9IGJpbl93cml0ZV9uYXQwIGJ1ZiB+cG9zIChOYXQwLnVuc2FmZV9vZl9pbnQgbGVuMSkgaW5cbiAgbGV0IHBvcyA9IGJpbl93cml0ZV9uYXQwIGJ1ZiB+cG9zIChOYXQwLnVuc2FmZV9vZl9pbnQgbGVuMikgaW5cbiAgbGV0IHNpemUgPSBsZW4xICogbGVuMiAqIDQgaW5cbiAgbGV0IG5leHQgPSBwb3MgKyBzaXplIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHVuc2FmZV9ibGl0X2J1ZiB+c3JjOihidWZfb2ZfbWF0MzIgbSkgfnNyY19wb3M6MCB+ZHN0OmJ1ZiB+ZHN0X3Bvczpwb3MgfmxlbjpzaXplO1xuICBuZXh0XG47O1xuXG5sZXQgYmluX3dyaXRlX2Zsb2F0NjRfbWF0IGJ1ZiB+cG9zIG0gPVxuICBsZXQgbGVuMSA9IEFycmF5Mi5kaW0xIG0gaW5cbiAgbGV0IGxlbjIgPSBBcnJheTIuZGltMiBtIGluXG4gIGxldCBwb3MgPSBiaW5fd3JpdGVfbmF0MCBidWYgfnBvcyAoTmF0MC51bnNhZmVfb2ZfaW50IGxlbjEpIGluXG4gIGxldCBwb3MgPSBiaW5fd3JpdGVfbmF0MCBidWYgfnBvcyAoTmF0MC51bnNhZmVfb2ZfaW50IGxlbjIpIGluXG4gIGxldCBzaXplID0gbGVuMSAqIGxlbjIgKiA4IGluXG4gIGxldCBuZXh0ID0gcG9zICsgc2l6ZSBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICB1bnNhZmVfYmxpdF9idWYgfnNyYzooYnVmX29mX21hdDY0IG0pIH5zcmNfcG9zOjAgfmRzdDpidWYgfmRzdF9wb3M6cG9zIH5sZW46c2l6ZTtcbiAgbmV4dFxuOztcblxubGV0IGJpbl93cml0ZV9tYXQgPSBiaW5fd3JpdGVfZmxvYXQ2NF9tYXRcblxubGV0IGJpbl93cml0ZV9iaWdzdHJpbmcgYnVmIH5wb3MgcyA9XG4gIGxldCBsZW4gPSBBcnJheTEuZGltIHMgaW5cbiAgbGV0IHBsZW4gPSBOYXQwLnVuc2FmZV9vZl9pbnQgbGVuIGluXG4gIGxldCBwb3MgPSBiaW5fd3JpdGVfbmF0MCBidWYgfnBvcyBwbGVuIGluXG4gIGxldCBuZXh0ID0gcG9zICsgbGVuIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHVuc2FmZV9ibGl0X2J1ZiB+c3JjOnMgfnNyY19wb3M6MCB+ZHN0OmJ1ZiB+ZHN0X3Bvczpwb3MgfmxlbjtcbiAgbmV4dFxuOztcblxubGV0IGJpbl93cml0ZV92YXJpYW50X2ludCBidWYgfnBvcyB4ID1cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgNCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICB1bnNhZmVfc2V0MzJsZSBidWYgcG9zIChJbnQzMi5sb2dvciAoSW50MzIuc2hpZnRfbGVmdCAoSW50MzIub2ZfaW50IHgpIDEpIDFsKTtcbiAgbmV4dFxuOztcblxubGV0IGJpbl93cml0ZV9pbnRfOGJpdCBidWYgfnBvcyBuID1cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGNoZWNrX3BvcyBidWYgcG9zO1xuICB1bnNhZmVfc2V0OCBidWYgcG9zIG47XG4gIHBvcyArIDFcbjs7XG5cbmxldCBiaW5fd3JpdGVfaW50XzE2Yml0IGJ1ZiB+cG9zIG4gPVxuICBhc3NlcnRfcG9zIHBvcztcbiAgbGV0IG5leHQgPSBwb3MgKyAyIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHVuc2FmZV9zZXQxNmxlIGJ1ZiBwb3MgbjtcbiAgbmV4dFxuOztcblxubGV0IGJpbl93cml0ZV9pbnRfMzJiaXQgYnVmIH5wb3MgbiA9XG4gIGFzc2VydF9wb3MgcG9zO1xuICBsZXQgbmV4dCA9IHBvcyArIDQgaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgdW5zYWZlX3NldDMybGUgYnVmIHBvcyAoSW50MzIub2ZfaW50IG4pO1xuICBuZXh0XG47O1xuXG5sZXQgYmluX3dyaXRlX2ludF82NGJpdCBidWYgfnBvcyBuID1cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgOCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICB1bnNhZmVfc2V0NjRsZSBidWYgcG9zIChJbnQ2NC5vZl9pbnQgbik7XG4gIG5leHRcbjs7XG5cbmxldCBiaW5fd3JpdGVfaW50NjRfYml0cyBidWYgfnBvcyBuID1cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgOCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICB1bnNhZmVfc2V0NjRsZSBidWYgcG9zIG47XG4gIG5leHRcbjs7XG5cbmxldCBiaW5fd3JpdGVfbmV0d29yazE2X2ludCBidWYgfnBvcyBuID1cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgMiBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICB1bnNhZmVfc2V0MTZiZSBidWYgcG9zIG47XG4gIG5leHRcbjs7XG5cbmxldCBiaW5fd3JpdGVfbmV0d29yazMyX2ludCBidWYgfnBvcyBuID1cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgNCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICB1bnNhZmVfc2V0MzJiZSBidWYgcG9zIChJbnQzMi5vZl9pbnQgbik7XG4gIG5leHRcbjs7XG5cbmxldCBiaW5fd3JpdGVfbmV0d29yazMyX2ludDMyIGJ1ZiB+cG9zIG4gPVxuICBhc3NlcnRfcG9zIHBvcztcbiAgbGV0IG5leHQgPSBwb3MgKyA0IGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHVuc2FmZV9zZXQzMmJlIGJ1ZiBwb3MgbjtcbiAgbmV4dFxuOztcblxubGV0IGJpbl93cml0ZV9uZXR3b3JrNjRfaW50IGJ1ZiB+cG9zIG4gPVxuICBhc3NlcnRfcG9zIHBvcztcbiAgbGV0IG5leHQgPSBwb3MgKyA4IGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHVuc2FmZV9zZXQ2NGJlIGJ1ZiBwb3MgKEludDY0Lm9mX2ludCBuKTtcbiAgbmV4dFxuOztcblxubGV0IGJpbl93cml0ZV9uZXR3b3JrNjRfaW50NjQgYnVmIH5wb3MgbiA9XG4gIGFzc2VydF9wb3MgcG9zO1xuICBsZXQgbmV4dCA9IHBvcyArIDggaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgdW5zYWZlX3NldDY0YmUgYnVmIHBvcyBuO1xuICBuZXh0XG47O1xuXG5sZXQgYmluX3dyaXRlX2FycmF5X25vX2xlbmd0aCBiaW5fd3JpdGVfZWwgYnVmIH5wb3MgYXIgPVxuICBiaW5fd3JpdGVfYXJyYXlfbG9vcCBiaW5fd3JpdGVfZWwgYnVmIH5lbHNfcG9zOnBvcyB+bjooQXJyYXkubGVuZ3RoIGFyKSBhclxuOztcblxuZXh0ZXJuYWwgdW5zYWZlX3N0cmluZ19nZXQzMiA6IHN0cmluZyAtPiBpbnQgLT4gaW50MzIgPSBcIiVjYW1sX3N0cmluZ19nZXQzMnVcIlxuZXh0ZXJuYWwgdW5zYWZlX3N0cmluZ19nZXQ2NCA6IHN0cmluZyAtPiBpbnQgLT4gaW50NjQgPSBcIiVjYW1sX3N0cmluZ19nZXQ2NHVcIlxuXG5sZXQgYmluX3dyaXRlX21kNSBidWYgfnBvcyB4ID1cbiAgbGV0IHggPSBNZDVfbGliLnRvX2JpbmFyeSB4IGluXG4gIGFzc2VydCAoU3RyaW5nLmxlbmd0aCB4ID0gMTYpO1xuICBhc3NlcnRfcG9zIHBvcztcbiAgbGV0IG5leHQgPSBwb3MgKyAxNiBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBpZiBhcmNoX3NpeHR5Zm91clxuICB0aGVuIChcbiAgICBsZXQgYSA9IHVuc2FmZV9zdHJpbmdfZ2V0NjQgeCAwIGluXG4gICAgbGV0IGIgPSB1bnNhZmVfc3RyaW5nX2dldDY0IHggOCBpblxuICAgIHVuc2FmZV9zZXQ2NCBidWYgcG9zIGE7XG4gICAgdW5zYWZlX3NldDY0IGJ1ZiAocG9zICsgOCkgYilcbiAgZWxzZSAoXG4gICAgbGV0IGEgPSB1bnNhZmVfc3RyaW5nX2dldDMyIHggMCBpblxuICAgIGxldCBiID0gdW5zYWZlX3N0cmluZ19nZXQzMiB4IDQgaW5cbiAgICBsZXQgYyA9IHVuc2FmZV9zdHJpbmdfZ2V0MzIgeCA4IGluXG4gICAgbGV0IGQgPSB1bnNhZmVfc3RyaW5nX2dldDMyIHggMTIgaW5cbiAgICB1bnNhZmVfc2V0MzIgYnVmIHBvcyBhO1xuICAgIHVuc2FmZV9zZXQzMiBidWYgKHBvcyArIDQpIGI7XG4gICAgdW5zYWZlX3NldDMyIGJ1ZiAocG9zICsgOCkgYztcbiAgICB1bnNhZmVfc2V0MzIgYnVmIChwb3MgKyAxMikgZCk7XG4gIG5leHRcbjs7XG4iLCIoKiBSZWFkX21sOiByZWFkaW5nIHZhbHVlcyBmcm9tIHRoZSBiaW5hcnkgcHJvdG9jb2wgdXNpbmcgKG1vc3RseSkgT0NhbWwuICopXG5cbigqIE5vdGU6IHRoZSBjb2RlIGlzIHRoaXMgZmlsZSBpcyBjYXJlZnVsbHkgd3JpdHRlbiB0byBhdm9pZCB1bm5lY2Vzc2FyeSBhbGxvY2F0aW9ucy4gV2hlblxuICAgdG91Y2hpbmcgdGhpcyBjb2RlLCBiZSBzdXJlIHRvIHJ1biB0aGUgYmVuY2htYXJrcyB0byBjaGVjayBmb3IgcmVncmVzc2lvbnMuICopXG5cbm9wZW4gQmlnYXJyYXlcbm9wZW4gQ29tbW9uXG5cbnR5cGUgJ2EgcmVhZGVyID0gYnVmIC0+IHBvc19yZWY6cG9zX3JlZiAtPiAnYVxudHlwZSAoJ2EsICdiKSByZWFkZXIxID0gJ2EgcmVhZGVyIC0+ICdiIHJlYWRlclxudHlwZSAoJ2EsICdiLCAnYykgcmVhZGVyMiA9ICdhIHJlYWRlciAtPiAoJ2IsICdjKSByZWFkZXIxXG50eXBlICgnYSwgJ2IsICdjLCAnZCkgcmVhZGVyMyA9ICdhIHJlYWRlciAtPiAoJ2IsICdjLCAnZCkgcmVhZGVyMlxuXG5leHRlcm5hbCB1bnNhZmVfZ2V0IDogYnVmIC0+IGludCAtPiBjaGFyID0gXCIlY2FtbF9iYV91bnNhZmVfcmVmXzFcIlxuZXh0ZXJuYWwgdW5zYWZlX2dldDggOiBidWYgLT4gaW50IC0+IGludCA9IFwiJWNhbWxfYmFfdW5zYWZlX3JlZl8xXCJcblxubGV0IHVuc2FmZV9nZXQ4X3NpZ25lZCBidWYgcG9zID1cbiAgbGV0IGMgPSB1bnNhZmVfZ2V0OCBidWYgcG9zIGluXG4gIGlmIGMgPj0gMTI4IHRoZW4gYyAtIDI1NiBlbHNlIGNcbjs7XG5cbigqJCBvcGVuIEJpbl9wcm90X2NpbmFwcyAkKilcblxubGV0IGFyY2hfc2l4dHlmb3VyID0gU3lzLndvcmRfc2l6ZSA9IDY0XG5sZXQgYXJjaF9iaWdfZW5kaWFuID0gU3lzLmJpZ19lbmRpYW5cbmxldCBtYXhfaW50X2ludDMyID0gaWYgYXJjaF9zaXh0eWZvdXIgdGhlbiBJbnQzMi5tYXhfaW50IGVsc2UgSW50MzIub2ZfaW50IG1heF9pbnRcbmxldCBtaW5faW50X2ludDMyID0gaWYgYXJjaF9zaXh0eWZvdXIgdGhlbiBJbnQzMi5tYXhfaW50IGVsc2UgSW50MzIub2ZfaW50IG1pbl9pbnRcbmxldCBtYXhfaW50X2ludDY0ID0gSW50NjQub2ZfaW50IG1heF9pbnRcbmxldCBtaW5faW50X2ludDY0ID0gSW50NjQub2ZfaW50IG1pbl9pbnRcblxubGV0W0BpbmxpbmUgYWx3YXlzXSBzYWZlX2ludF9vZl9pbnQzMiBwb3MgeCA9XG4gIGlmIGFyY2hfc2l4dHlmb3VyXG4gIHRoZW4gSW50MzIudG9faW50IHhcbiAgZWxzZSBpZiB4ID49IG1pbl9pbnRfaW50MzIgJiYgeCA8PSBtYXhfaW50X2ludDMyXG4gIHRoZW4gSW50MzIudG9faW50IHhcbiAgZWxzZSByYWlzZV9yZWFkX2Vycm9yIFJlYWRFcnJvci5JbnRfb3ZlcmZsb3cgcG9zXG47O1xuXG5sZXRbQGlubGluZSBhbHdheXNdIHNhZmVfaW50X29mX2ludDY0IHBvcyB4ID1cbiAgaWYgeCA+PSBtaW5faW50X2ludDY0ICYmIHggPD0gbWF4X2ludF9pbnQ2NFxuICB0aGVuIEludDY0LnRvX2ludCB4XG4gIGVsc2UgcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuSW50X292ZXJmbG93IHBvc1xuOztcblxubGV0IHNhZmVfbmF0aXZlaW50X29mX2ludDY0ID1cbiAgaWYgYXJjaF9zaXh0eWZvdXJcbiAgdGhlbiBmdW4gX3BvcyB4IC0+IEludDY0LnRvX25hdGl2ZWludCB4XG4gIGVsc2VcbiAgICBmdW4gW0BpbmxpbmUgYWx3YXlzXSBwb3MgeCAtPlxuICAgICAgaWYgeCA+PSBJbnQ2NC5vZl9uYXRpdmVpbnQgTmF0aXZlaW50Lm1pbl9pbnRcbiAgICAgICYmIHggPD0gSW50NjQub2ZfbmF0aXZlaW50IE5hdGl2ZWludC5tYXhfaW50XG4gICAgICB0aGVuIEludDY0LnRvX25hdGl2ZWludCB4XG4gICAgICBlbHNlIHJhaXNlX3JlYWRfZXJyb3IgUmVhZEVycm9yLkludF9vdmVyZmxvdyBwb3Ncbjs7XG5cbmV4dGVybmFsIHVuc2FmZV9nZXQxNiA6IGJ1ZiAtPiBpbnQgLT4gaW50ID0gXCIlY2FtbF9iaWdzdHJpbmdfZ2V0MTZ1XCJcbmV4dGVybmFsIHVuc2FmZV9nZXQzMiA6IGJ1ZiAtPiBpbnQgLT4gaW50MzIgPSBcIiVjYW1sX2JpZ3N0cmluZ19nZXQzMnVcIlxuZXh0ZXJuYWwgdW5zYWZlX2dldDY0IDogYnVmIC0+IGludCAtPiBpbnQ2NCA9IFwiJWNhbWxfYmlnc3RyaW5nX2dldDY0dVwiXG5leHRlcm5hbCBic3dhcDE2IDogaW50IC0+IGludCA9IFwiJWJzd2FwMTZcIlxuZXh0ZXJuYWwgYnN3YXAzMiA6IGludDMyIC0+IGludDMyID0gXCIlYnN3YXBfaW50MzJcIlxuZXh0ZXJuYWwgYnN3YXA2NCA6IGludDY0IC0+IGludDY0ID0gXCIlYnN3YXBfaW50NjRcIlxuXG5sZXQgdW5zYWZlX2dldDE2YmVfdW5zaWduZWQgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW4gdGhlbiB1bnNhZmVfZ2V0MTYgZWxzZSBmdW4gYnVmIHBvcyAtPiB1bnNhZmVfZ2V0MTYgYnVmIHBvcyB8PiBic3dhcDE2XG47O1xuXG5sZXQgdW5zYWZlX2dldDMyYmUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW4gdGhlbiB1bnNhZmVfZ2V0MzIgZWxzZSBmdW4gYnVmIHBvcyAtPiB1bnNhZmVfZ2V0MzIgYnVmIHBvcyB8PiBic3dhcDMyXG47O1xuXG5sZXQgdW5zYWZlX2dldDY0YmUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW4gdGhlbiB1bnNhZmVfZ2V0NjQgZWxzZSBmdW4gYnVmIHBvcyAtPiB1bnNhZmVfZ2V0NjQgYnVmIHBvcyB8PiBic3dhcDY0XG47O1xuXG5sZXQgdW5zYWZlX2dldDE2bGVfdW5zaWduZWQgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW4gdGhlbiBmdW4gYnVmIHBvcyAtPiB1bnNhZmVfZ2V0MTYgYnVmIHBvcyB8PiBic3dhcDE2IGVsc2UgdW5zYWZlX2dldDE2XG47O1xuXG5sZXQgdW5zYWZlX2dldDMybGUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW4gdGhlbiBmdW4gYnVmIHBvcyAtPiB1bnNhZmVfZ2V0MzIgYnVmIHBvcyB8PiBic3dhcDMyIGVsc2UgdW5zYWZlX2dldDMyXG47O1xuXG5sZXQgdW5zYWZlX2dldDY0bGUgPVxuICBpZiBhcmNoX2JpZ19lbmRpYW4gdGhlbiBmdW4gYnVmIHBvcyAtPiB1bnNhZmVfZ2V0NjQgYnVmIHBvcyB8PiBic3dhcDY0IGVsc2UgdW5zYWZlX2dldDY0XG47O1xuXG5sZXQgdW5zYWZlX2dldDE2bGVfc2lnbmVkIGJ1ZiBwb3MgPVxuICBsZXQgeCA9IHVuc2FmZV9nZXQxNmxlX3Vuc2lnbmVkIGJ1ZiBwb3MgaW5cbiAgaWYgeCA+IDMyNzY3IHRoZW4geCAtIDY1NTM2IGVsc2UgeFxuOztcblxubGV0IGJpbl9yZWFkX3VuaXQgYnVmIH5wb3NfcmVmID1cbiAgbGV0IHBvcyA9IHNhZmVfZ2V0X3BvcyBidWYgcG9zX3JlZiBpblxuICBhc3NlcnRfcG9zIHBvcztcbiAgaWYgdW5zYWZlX2dldCBidWYgcG9zID0gJ1xcMDAwJ1xuICB0aGVuIHBvc19yZWYgOj0gcG9zICsgMVxuICBlbHNlIHJhaXNlX3JlYWRfZXJyb3IgUmVhZEVycm9yLlVuaXRfY29kZSBwb3Ncbjs7XG5cbmxldCBiaW5fcmVhZF9ib29sIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSBzYWZlX2dldF9wb3MgYnVmIHBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIG1hdGNoIHVuc2FmZV9nZXQgYnVmIHBvcyB3aXRoXG4gIHwgJ1xcMDAwJyAtPlxuICAgIHBvc19yZWYgOj0gcG9zICsgMTtcbiAgICBmYWxzZVxuICB8ICdcXDAwMScgLT5cbiAgICBwb3NfcmVmIDo9IHBvcyArIDE7XG4gICAgdHJ1ZVxuICB8IF8gLT4gcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuQm9vbF9jb2RlIHBvc1xuOztcblxubGV0IHNhZmVfYmluX3JlYWRfbmVnX2ludDggYnVmIH5wb3NfcmVmIH5wb3MgPVxuICBsZXQgbmV4dCA9IHBvcyArIDEgaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgbGV0IG4gPSB1bnNhZmVfZ2V0OF9zaWduZWQgYnVmIHBvcyBpblxuICBpZiBuID49IDAgdGhlbiByYWlzZV9yZWFkX2Vycm9yIFJlYWRFcnJvci5OZWdfaW50OCAhcG9zX3JlZjtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICBuXG47O1xuXG5sZXQgc2FmZV9iaW5fcmVhZF9pbnQxNiBidWYgfnBvc19yZWYgfnBvcyA9XG4gIGxldCBuZXh0ID0gcG9zICsgMiBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gICgqIENhbiBiZSBhYm92ZSBuZXh0IGxpbmUgKG5vIGVycm9ycyBwb3NzaWJsZSB3aXRoIDE2Yml0KS5cbiAgICAgVGhpcyBzaG91bGQgaW1wcm92ZSB0aGUgZ2VuZXJhdGVkIGNvZGUuICopXG4gIHVuc2FmZV9nZXQxNmxlX3NpZ25lZCBidWYgcG9zXG47O1xuXG5sZXQgc2FmZV9iaW5fcmVhZF9pbnQzMiBidWYgfnBvc19yZWYgfnBvcyA9XG4gIGxldCBuZXh0ID0gcG9zICsgNCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gICgqIE5vIGVycm9yIHBvc3NpYmxlIGVpdGhlci4gKilcbiAgdW5zYWZlX2dldDMybGUgYnVmIHBvc1xuOztcblxubGV0IHNhZmVfYmluX3JlYWRfaW50NjQgYnVmIH5wb3NfcmVmIH5wb3MgPVxuICBsZXQgbmV4dCA9IHBvcyArIDggaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICAoKiBObyBlcnJvciBwb3NzaWJsZSBlaXRoZXIuICopXG4gIHVuc2FmZV9nZXQ2NGxlIGJ1ZiBwb3Ncbjs7XG5cbmxldCBzYWZlX2Jpbl9yZWFkX2ludDMyX2FzX2ludCBidWYgfnBvc19yZWYgfnBvcyA9XG4gIGxldCBuZXh0ID0gcG9zICsgNCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBsZXQgbiA9IHVuc2FmZV9nZXQzMmxlIGJ1ZiBwb3MgaW5cbiAgbGV0IG4gPSBzYWZlX2ludF9vZl9pbnQzMiAhcG9zX3JlZiBuIGluXG4gIHBvc19yZWYgOj0gbmV4dDtcbiAgblxuOztcblxubGV0IHNhZmVfYmluX3JlYWRfaW50NjRfYXNfaW50IGJ1ZiB+cG9zX3JlZiB+cG9zID1cbiAgbGV0IG5leHQgPSBwb3MgKyA4IGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIGxldCBuID0gdW5zYWZlX2dldDY0bGUgYnVmIHBvcyBpblxuICBsZXQgbiA9IHNhZmVfaW50X29mX2ludDY0ICFwb3NfcmVmIG4gaW5cbiAgcG9zX3JlZiA6PSBuZXh0O1xuICBuXG47O1xuXG5sZXQgc2FmZV9iaW5fcmVhZF9pbnQzMl9hc19pbnQ2NCBidWYgfnBvc19yZWYgfnBvcyA9XG4gIGxldCBuZXh0ID0gcG9zICsgNCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gIGxldCBuID0gdW5zYWZlX2dldDMybGUgYnVmIHBvcyBpblxuICBJbnQ2NC5vZl9pbnQzMiBuXG47O1xuXG5sZXQgc2FmZV9iaW5fcmVhZF9pbnQzMl9hc19uYXRpdmVpbnQgYnVmIH5wb3NfcmVmIH5wb3MgPVxuICBsZXQgbmV4dCA9IHBvcyArIDQgaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICBsZXQgbiA9IHVuc2FmZV9nZXQzMmxlIGJ1ZiBwb3MgaW5cbiAgTmF0aXZlaW50Lm9mX2ludDMyIG5cbjs7XG5cbmxldCBzYWZlX2Jpbl9yZWFkX2ludDY0X2FzX25hdGl2ZWludCBidWYgfnBvc19yZWYgfnBvcyA9XG4gIGxldCBuZXh0ID0gcG9zICsgOCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBsZXQgbiA9IHVuc2FmZV9nZXQ2NGxlIGJ1ZiBwb3MgaW5cbiAgbGV0IG4gPSBzYWZlX25hdGl2ZWludF9vZl9pbnQ2NCBwb3MgbiBpblxuICBwb3NfcmVmIDo9IG5leHQ7XG4gIG5cbjs7XG5cbmxldCBzYWZlX2Jpbl9yZWFkX25hdDBfMTYgYnVmIH5wb3NfcmVmIH5wb3MgPVxuICBsZXQgbmV4dCA9IHBvcyArIDIgaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICBOYXQwLnVuc2FmZV9vZl9pbnQgKHVuc2FmZV9nZXQxNmxlX3Vuc2lnbmVkIGJ1ZiBwb3MpXG47O1xuXG5sZXQgc2FmZV9iaW5fcmVhZF9uYXQwXzMyID1cbiAgaWYgYXJjaF9zaXh0eWZvdXJcbiAgdGhlbiAoXG4gICAgbGV0IG1hc2tfMzJiaXQgPSBJbnQ2NC50b19pbnQgMHhmZmZmX2ZmZmZMIGluXG4gICAgZnVuIGJ1ZiB+cG9zX3JlZiB+cG9zIC0+XG4gICAgICBsZXQgbmV4dCA9IHBvcyArIDQgaW5cbiAgICAgIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gICAgICBwb3NfcmVmIDo9IG5leHQ7XG4gICAgICBsZXQgbiA9IEludDMyLnRvX2ludCAodW5zYWZlX2dldDMybGUgYnVmIHBvcykgaW5cbiAgICAgIGlmIG4gPj0gMFxuICAgICAgdGhlbiBOYXQwLnVuc2FmZV9vZl9pbnQgblxuICAgICAgZWxzZVxuICAgICAgICAoKiBFcmFzZSB0aGUgdXBwZXIgYml0cyB0aGF0IHdlcmUgc2V0IHRvIDEgZHVyaW5nIHRoZSBpbnQzMiAtPiBpbnQgY29udmVyc2lvbi4gKilcbiAgICAgICAgTmF0MC51bnNhZmVfb2ZfaW50IChuIGxhbmQgbWFza18zMmJpdCkpXG4gIGVsc2VcbiAgICBmdW4gYnVmIH5wb3NfcmVmIH5wb3MgLT5cbiAgICAgIGxldCBuZXh0ID0gcG9zICsgNCBpblxuICAgICAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgICAgIGxldCBuID0gdW5zYWZlX2dldDMybGUgYnVmIHBvcyBpblxuICAgICAgaWYgbiA+PSAwbCAmJiBuIDw9IG1heF9pbnRfaW50MzJcbiAgICAgIHRoZW4gKFxuICAgICAgICBsZXQgbiA9IE5hdDAudW5zYWZlX29mX2ludCAoSW50MzIudG9faW50IG4pIGluXG4gICAgICAgIHBvc19yZWYgOj0gbmV4dDtcbiAgICAgICAgbilcbiAgICAgIGVsc2UgcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuTmF0MF9vdmVyZmxvdyAhcG9zX3JlZlxuOztcblxubGV0IHNhZmVfYmluX3JlYWRfbmF0MF82NCBidWYgfnBvc19yZWYgfnBvcyA9XG4gIGxldCBuZXh0ID0gcG9zICsgOCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBsZXQgbiA9IHVuc2FmZV9nZXQ2NGxlIGJ1ZiBwb3MgaW5cbiAgaWYgbiA+PSAwTCAmJiBuIDw9IG1heF9pbnRfaW50NjRcbiAgdGhlbiAoXG4gICAgbGV0IG4gPSBOYXQwLnVuc2FmZV9vZl9pbnQgKEludDY0LnRvX2ludCBuKSBpblxuICAgIHBvc19yZWYgOj0gbmV4dDtcbiAgICBuKVxuICBlbHNlIHJhaXNlX3JlYWRfZXJyb3IgUmVhZEVycm9yLk5hdDBfb3ZlcmZsb3cgIXBvc19yZWZcbjs7XG5cbmxldCBiaW5fcmVhZF9uYXQwIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSBzYWZlX2dldF9wb3MgYnVmIHBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIG1hdGNoIHVuc2FmZV9nZXQgYnVmIHBvcyB3aXRoXG4gIHwgJ1xceDAwJy4uJ1xceDdmJyBhcyBjaCAtPlxuICAgIHBvc19yZWYgOj0gcG9zICsgMTtcbiAgICBOYXQwLnVuc2FmZV9vZl9pbnQgKENoYXIuY29kZSBjaClcbiAgfCAoKiQgQ29kZS5jaGFyIElOVDE2ICopJ1xceGZlJygqJCopIC0+XG4gICAgc2FmZV9iaW5fcmVhZF9uYXQwXzE2IGJ1ZiB+cG9zX3JlZiB+cG9zOihwb3MgKyAxKVxuICB8ICgqJCBDb2RlLmNoYXIgSU5UMzIgKiknXFx4ZmQnKCokKikgLT5cbiAgICBzYWZlX2Jpbl9yZWFkX25hdDBfMzIgYnVmIH5wb3NfcmVmIH5wb3M6KHBvcyArIDEpXG4gIHwgKCokIENvZGUuY2hhciBJTlQ2NCAqKSdcXHhmYycoKiQqKSAtPlxuICAgIGlmIGFyY2hfc2l4dHlmb3VyIHRoZW5cbiAgICAgIHNhZmVfYmluX3JlYWRfbmF0MF82NCBidWYgfnBvc19yZWYgfnBvczoocG9zICsgMSlcbiAgICBlbHNlXG4gICAgICByYWlzZV9yZWFkX2Vycm9yIFJlYWRFcnJvci5OYXQwX292ZXJmbG93IHBvc1xuICB8IF8gLT5cbiAgICByYWlzZV9yZWFkX2Vycm9yIFJlYWRFcnJvci5OYXQwX2NvZGUgcG9zXG5bQEBvY2FtbGZvcm1hdCBcImRpc2FibGVcIl1cblxubGV0IGJpbl9yZWFkX2J5dGVzIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBzdGFydF9wb3MgPSAhcG9zX3JlZiBpblxuICBsZXQgbGVuID0gKGJpbl9yZWFkX25hdDAgYnVmIH5wb3NfcmVmIDo+IGludCkgaW5cbiAgaWYgbGVuID4gU3lzLm1heF9zdHJpbmdfbGVuZ3RoIHRoZW4gcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuU3RyaW5nX3Rvb19sb25nIHN0YXJ0X3BvcztcbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGxldCBuZXh0ID0gcG9zICsgbGVuIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHBvc19yZWYgOj0gbmV4dDtcbiAgbGV0IHN0ciA9IEJ5dGVzLmNyZWF0ZSBsZW4gaW5cbiAgdW5zYWZlX2JsaXRfYnVmX2J5dGVzIH5zcmNfcG9zOnBvcyBidWYgfmRzdF9wb3M6MCBzdHIgfmxlbjtcbiAgc3RyXG47O1xuXG5sZXQgYmluX3JlYWRfc3RyaW5nIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBzdHIgPSBiaW5fcmVhZF9ieXRlcyBidWYgfnBvc19yZWYgaW5cbiAgQnl0ZXMudW5zYWZlX3RvX3N0cmluZyBzdHJcbjs7XG5cbmxldCBiaW5fcmVhZF9jaGFyIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSBzYWZlX2dldF9wb3MgYnVmIHBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIHBvc19yZWYgOj0gcG9zICsgMTtcbiAgdW5zYWZlX2dldCBidWYgcG9zXG47O1xuXG5sZXQgYmluX3JlYWRfaW50IGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSBzYWZlX2dldF9wb3MgYnVmIHBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIG1hdGNoIHVuc2FmZV9nZXQgYnVmIHBvcyB3aXRoXG4gIHwgJ1xceDAwJy4uJ1xceDdmJyBhcyBjaCAtPlxuICAgIHBvc19yZWYgOj0gcG9zICsgMTtcbiAgICBDaGFyLmNvZGUgY2hcbiAgfCAoKiQgQ29kZS5jaGFyIE5FR19JTlQ4ICopJ1xceGZmJygqJCopIC0+XG4gICAgc2FmZV9iaW5fcmVhZF9uZWdfaW50OCBidWYgfnBvc19yZWYgfnBvczoocG9zICsgMSlcbiAgfCAoKiQgQ29kZS5jaGFyIElOVDE2ICopJ1xceGZlJygqJCopIC0+XG4gICAgc2FmZV9iaW5fcmVhZF9pbnQxNiBidWYgfnBvc19yZWYgfnBvczoocG9zICsgMSlcbiAgfCAoKiQgQ29kZS5jaGFyIElOVDMyICopJ1xceGZkJygqJCopIC0+XG4gICAgc2FmZV9iaW5fcmVhZF9pbnQzMl9hc19pbnQgYnVmIH5wb3NfcmVmIH5wb3M6KHBvcyArIDEpXG4gIHwgKCokIENvZGUuY2hhciBJTlQ2NCAqKSdcXHhmYycoKiQqKSAtPlxuICAgIGlmIGFyY2hfc2l4dHlmb3VyIHRoZW5cbiAgICAgIHNhZmVfYmluX3JlYWRfaW50NjRfYXNfaW50IGJ1ZiB+cG9zX3JlZiB+cG9zOihwb3MgKyAxKVxuICAgIGVsc2VcbiAgICAgIHJhaXNlX3JlYWRfZXJyb3IgUmVhZEVycm9yLkludF9vdmVyZmxvdyBwb3NcbiAgfCBfIC0+XG4gICAgcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuSW50X2NvZGUgcG9zXG5bQEBvY2FtbGZvcm1hdCBcImRpc2FibGVcIl1cblxubGV0IGJpbl9yZWFkX2Zsb2F0IGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSBzYWZlX2dldF9wb3MgYnVmIHBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgOCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gICgqIE5vIGVycm9yIHBvc3NpYmxlIGVpdGhlci4gKilcbiAgSW50NjQuZmxvYXRfb2ZfYml0cyAodW5zYWZlX2dldDY0bGUgYnVmIHBvcylcbjs7XG5cbmxldCBiaW5fcmVhZF9pbnQzMiBidWYgfnBvc19yZWYgPVxuICBsZXQgcG9zID0gc2FmZV9nZXRfcG9zIGJ1ZiBwb3NfcmVmIGluXG4gIGFzc2VydF9wb3MgcG9zO1xuICBtYXRjaCB1bnNhZmVfZ2V0IGJ1ZiBwb3Mgd2l0aFxuICB8ICdcXHgwMCcuLidcXHg3ZicgYXMgY2ggLT5cbiAgICBwb3NfcmVmIDo9IHBvcyArIDE7XG4gICAgSW50MzIub2ZfaW50IChDaGFyLmNvZGUgY2gpXG4gIHwgKCokIENvZGUuY2hhciBORUdfSU5UOCAqKSdcXHhmZicoKiQqKSAtPlxuICAgIEludDMyLm9mX2ludCAoc2FmZV9iaW5fcmVhZF9uZWdfaW50OCBidWYgfnBvc19yZWYgfnBvczoocG9zICsgMSkpXG4gIHwgKCokIENvZGUuY2hhciBJTlQxNiAqKSdcXHhmZScoKiQqKSAtPlxuICAgIEludDMyLm9mX2ludCAoc2FmZV9iaW5fcmVhZF9pbnQxNiBidWYgfnBvc19yZWYgfnBvczoocG9zICsgMSkpXG4gIHwgKCokIENvZGUuY2hhciBJTlQzMiAqKSdcXHhmZCcoKiQqKSAtPlxuICAgIHNhZmVfYmluX3JlYWRfaW50MzIgYnVmIH5wb3NfcmVmIH5wb3M6KHBvcyArIDEpXG4gIHwgXyAtPlxuICAgIHJhaXNlX3JlYWRfZXJyb3IgUmVhZEVycm9yLkludDMyX2NvZGUgcG9zXG5bQEBvY2FtbGZvcm1hdCBcImRpc2FibGVcIl1cblxubGV0IGJpbl9yZWFkX2ludDY0IGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSBzYWZlX2dldF9wb3MgYnVmIHBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIG1hdGNoIHVuc2FmZV9nZXQgYnVmIHBvcyB3aXRoXG4gIHwgJ1xceDAwJy4uJ1xceDdmJyBhcyBjaCAtPlxuICAgIHBvc19yZWYgOj0gcG9zICsgMTtcbiAgICBJbnQ2NC5vZl9pbnQgKENoYXIuY29kZSBjaClcbiAgfCAoKiQgQ29kZS5jaGFyIE5FR19JTlQ4ICopJ1xceGZmJygqJCopIC0+XG4gICAgSW50NjQub2ZfaW50IChzYWZlX2Jpbl9yZWFkX25lZ19pbnQ4IGJ1ZiB+cG9zX3JlZiB+cG9zOihwb3MgKyAxKSlcbiAgfCAoKiQgQ29kZS5jaGFyIElOVDE2ICopJ1xceGZlJygqJCopIC0+XG4gICAgSW50NjQub2ZfaW50IChzYWZlX2Jpbl9yZWFkX2ludDE2IGJ1ZiB+cG9zX3JlZiB+cG9zOihwb3MgKyAxKSlcbiAgfCAoKiQgQ29kZS5jaGFyIElOVDMyICopJ1xceGZkJygqJCopIC0+XG4gICAgc2FmZV9iaW5fcmVhZF9pbnQzMl9hc19pbnQ2NCBidWYgfnBvc19yZWYgfnBvczoocG9zICsgMSlcbiAgfCAoKiQgQ29kZS5jaGFyIElOVDY0ICopJ1xceGZjJygqJCopIC0+XG4gICAgc2FmZV9iaW5fcmVhZF9pbnQ2NCBidWYgfnBvc19yZWYgfnBvczoocG9zICsgMSlcbiAgfCBfIC0+XG4gICAgcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuSW50NjRfY29kZSBwb3NcbltAQG9jYW1sZm9ybWF0IFwiZGlzYWJsZVwiXVxuXG5sZXQgYmluX3JlYWRfbmF0aXZlaW50IGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSBzYWZlX2dldF9wb3MgYnVmIHBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIG1hdGNoIHVuc2FmZV9nZXQgYnVmIHBvcyB3aXRoXG4gIHwgJ1xceDAwJy4uJ1xceDdmJyBhcyBjaCAtPlxuICAgIHBvc19yZWYgOj0gcG9zICsgMTtcbiAgICBOYXRpdmVpbnQub2ZfaW50IChDaGFyLmNvZGUgY2gpXG4gIHwgKCokIENvZGUuY2hhciBORUdfSU5UOCAqKSdcXHhmZicoKiQqKSAtPlxuICAgIE5hdGl2ZWludC5vZl9pbnQgKHNhZmVfYmluX3JlYWRfbmVnX2ludDggYnVmIH5wb3NfcmVmIH5wb3M6KHBvcyArIDEpKVxuICB8ICgqJCBDb2RlLmNoYXIgSU5UMTYgKiknXFx4ZmUnKCokKikgLT5cbiAgICBOYXRpdmVpbnQub2ZfaW50IChzYWZlX2Jpbl9yZWFkX2ludDE2IGJ1ZiB+cG9zX3JlZiB+cG9zOihwb3MgKyAxKSlcbiAgfCAoKiQgQ29kZS5jaGFyIElOVDMyICopJ1xceGZkJygqJCopIC0+XG4gICAgc2FmZV9iaW5fcmVhZF9pbnQzMl9hc19uYXRpdmVpbnQgYnVmIH5wb3NfcmVmIH5wb3M6KHBvcyArIDEpXG4gIHwgKCokIENvZGUuY2hhciBJTlQ2NCAqKSdcXHhmYycoKiQqKSB3aGVuIGFyY2hfc2l4dHlmb3VyIC0+XG4gICAgc2FmZV9iaW5fcmVhZF9pbnQ2NF9hc19uYXRpdmVpbnQgYnVmIH5wb3NfcmVmIH5wb3M6KHBvcyArIDEpXG4gIHwgXyAtPlxuICAgIHJhaXNlX3JlYWRfZXJyb3IgUmVhZEVycm9yLk5hdGl2ZWludF9jb2RlIHBvc1xuW0BAb2NhbWxmb3JtYXQgXCJkaXNhYmxlXCJdXG5cbmxldCBiaW5fcmVhZF9yZWYgYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmID1cbiAgbGV0IGVsID0gYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmIGluXG4gIHJlZiBlbFxuOztcblxubGV0IGJpbl9yZWFkX2xhenkgYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmID1cbiAgbGV0IGVsID0gYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmIGluXG4gIExhenkuZnJvbV92YWwgZWxcbjs7XG5cbmxldCBiaW5fcmVhZF9vcHRpb24gYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmID1cbiAgbGV0IHBvcyA9IHNhZmVfZ2V0X3BvcyBidWYgcG9zX3JlZiBpblxuICBhc3NlcnRfcG9zIHBvcztcbiAgbWF0Y2ggdW5zYWZlX2dldCBidWYgcG9zIHdpdGhcbiAgfCAnXFwwMDAnIC0+XG4gICAgcG9zX3JlZiA6PSBwb3MgKyAxO1xuICAgIE5vbmVcbiAgfCAnXFwwMDEnIC0+XG4gICAgcG9zX3JlZiA6PSBwb3MgKyAxO1xuICAgIGxldCBlbCA9IGJpbl9yZWFkX2VsIGJ1ZiB+cG9zX3JlZiBpblxuICAgIFNvbWUgZWxcbiAgfCBfIC0+IHJhaXNlX3JlYWRfZXJyb3IgUmVhZEVycm9yLk9wdGlvbl9jb2RlIHBvc1xuOztcblxubGV0IGJpbl9yZWFkX3BhaXIgYmluX3JlYWRfYSBiaW5fcmVhZF9iIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBhID0gYmluX3JlYWRfYSBidWYgfnBvc19yZWYgaW5cbiAgbGV0IGIgPSBiaW5fcmVhZF9iIGJ1ZiB+cG9zX3JlZiBpblxuICBhLCBiXG47O1xuXG5sZXQgYmluX3JlYWRfdHJpcGxlIGJpbl9yZWFkX2EgYmluX3JlYWRfYiBiaW5fcmVhZF9jIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBhID0gYmluX3JlYWRfYSBidWYgfnBvc19yZWYgaW5cbiAgbGV0IGIgPSBiaW5fcmVhZF9iIGJ1ZiB+cG9zX3JlZiBpblxuICBsZXQgYyA9IGJpbl9yZWFkX2MgYnVmIH5wb3NfcmVmIGluXG4gIGEsIGIsIGNcbjs7XG5cbmxldCBiaW5fcmVhZF9uX3Jldl9saXN0IGJpbl9yZWFkX2VsIGJ1ZiB+cG9zX3JlZiBsZW4gPVxuICBsZXQgcmVjIGxvb3AgbiBhY2MgPVxuICAgIGlmIG4gPSAwIHRoZW4gYWNjIGVsc2UgbG9vcCAobiAtIDEpIChiaW5fcmVhZF9lbCBidWYgfnBvc19yZWYgOjogYWNjKVxuICBpblxuICBsb29wIGxlbiBbXVxuOztcblxubGV0IGJpbl9yZWFkX2xpc3Rfd2l0aF9tYXhfbGVuIH5tYXhfbGVuIGJpbl9yZWFkX2VsIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBsZW4gPSAoYmluX3JlYWRfbmF0MCBidWYgfnBvc19yZWYgOj4gaW50KSBpblxuICBpZiBsZW4gPiBtYXhfbGVuIHRoZW4gcmFpc2VfcmVhZF9lcnJvciAoTGlzdF90b29fbG9uZyB7IGxlbjsgbWF4X2xlbiB9KSAhcG9zX3JlZjtcbiAgbGV0IHJldl9sc3QgPSBiaW5fcmVhZF9uX3Jldl9saXN0IGJpbl9yZWFkX2VsIGJ1ZiB+cG9zX3JlZiBsZW4gaW5cbiAgTGlzdC5yZXYgcmV2X2xzdFxuOztcblxubGV0IGJpbl9yZWFkX2xpc3QgYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmID1cbiAgYmluX3JlYWRfbGlzdF93aXRoX21heF9sZW4gfm1heF9sZW46bWF4X2ludCBiaW5fcmVhZF9lbCBidWYgfnBvc19yZWZcbjs7XG5cbmxldCBkdW1teV9mbG9hdF9idWYgPSBjcmVhdGVfYnVmIDhcbmxldCAoKSA9IGlnbm9yZSAoV3JpdGUuYmluX3dyaXRlX2Zsb2F0IGR1bW15X2Zsb2F0X2J1ZiB+cG9zOjAgMy4xKVxuXG5sZXQgbWF4X2Zsb2F0X2FycmF5X2xlbmd0aCA9XG4gIGlmIGFyY2hfc2l4dHlmb3VyIHRoZW4gU3lzLm1heF9hcnJheV9sZW5ndGggZWxzZSBTeXMubWF4X2FycmF5X2xlbmd0aCAvIDJcbjs7XG5cbmxldFtAaW5saW5lIGFsd2F5c10gYmluX3JlYWRfZmxvYXRfYXJyYXlfZ2VuIH5jcmVhdGUgfmJsaXQgYnVmIH5wb3NfcmVmID1cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGxldCBsZW4gPSAoYmluX3JlYWRfbmF0MCBidWYgfnBvc19yZWYgOj4gaW50KSBpblxuICBpZiBsZW4gPiBtYXhfZmxvYXRfYXJyYXlfbGVuZ3RoIHRoZW4gcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuQXJyYXlfdG9vX2xvbmcgcG9zO1xuICBsZXQgc2l6ZSA9IGxlbiAqIDggaW5cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGxldCBuZXh0ID0gcG9zICsgc2l6ZSBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBsZXQgYXJyID0gY3JlYXRlIGxlbiBpblxuICBibGl0IH5zcmNfcG9zOnBvcyBidWYgfmRzdF9wb3M6MCBhcnIgfmxlbjtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICBhcnJcbjs7XG5cbmxldCBiaW5fcmVhZF9mbG9hdGFycmF5IGJ1ZiB+cG9zX3JlZiA9XG4gIGJpbl9yZWFkX2Zsb2F0X2FycmF5X2dlblxuICAgIH5jcmVhdGU6RmxvYXQuQXJyYXkuY3JlYXRlXG4gICAgfmJsaXQ6dW5zYWZlX2JsaXRfYnVmX2Zsb2F0YXJyYXlcbiAgICBidWZcbiAgICB+cG9zX3JlZlxuOztcblxubGV0IGJpbl9yZWFkX2Zsb2F0X2FycmF5IGJ1ZiB+cG9zX3JlZiA9XG4gIGJpbl9yZWFkX2Zsb2F0X2FycmF5X2dlblxuICAgIH5jcmVhdGU6QXJyYXkuY3JlYXRlX2Zsb2F0XG4gICAgfmJsaXQ6dW5zYWZlX2JsaXRfYnVmX2Zsb2F0X2FycmF5XG4gICAgYnVmXG4gICAgfnBvc19yZWZcbjs7XG5cbmxldCBiaW5fcmVhZF9hcnJheSAodHlwZSBhKSBiaW5fcmVhZF9lbCBidWYgfnBvc19yZWYgPVxuICBpZiAoT2JqLm1hZ2ljIChiaW5fcmVhZF9lbCA6IGEgcmVhZGVyKSA6IGZsb2F0IHJlYWRlcikgPT0gYmluX3JlYWRfZmxvYXRcbiAgdGhlbiAoT2JqLm1hZ2ljIChiaW5fcmVhZF9mbG9hdF9hcnJheSBidWYgfnBvc19yZWYgOiBmbG9hdCBhcnJheSkgOiBhIGFycmF5KVxuICBlbHNlIChcbiAgICBsZXQgc3RhcnRfcG9zID0gIXBvc19yZWYgaW5cbiAgICBsZXQgbGVuID0gKGJpbl9yZWFkX25hdDAgYnVmIH5wb3NfcmVmIDo+IGludCkgaW5cbiAgICBpZiBsZW4gPSAwXG4gICAgdGhlbiBbfHxdXG4gICAgZWxzZSAoXG4gICAgICBpZiBhcmNoX3NpeHR5Zm91clxuICAgICAgdGhlbiAoXG4gICAgICAgIGlmIGxlbiA+IFN5cy5tYXhfYXJyYXlfbGVuZ3RoXG4gICAgICAgIHRoZW4gcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuQXJyYXlfdG9vX2xvbmcgc3RhcnRfcG9zKVxuICAgICAgZWxzZSBpZiBsZW4gPiBTeXMubWF4X2FycmF5X2xlbmd0aCAvIDJcbiAgICAgIHRoZW4gKFxuICAgICAgICBsZXQgbWF5YmVfZmxvYXQgPVxuICAgICAgICAgIHRyeVxuICAgICAgICAgICAgbGV0IGVsID0gYmluX3JlYWRfZWwgZHVtbXlfZmxvYXRfYnVmIH5wb3NfcmVmOihyZWYgMCkgaW5cbiAgICAgICAgICAgIFNvbWUgZWxcbiAgICAgICAgICB3aXRoXG4gICAgICAgICAgfCBfIC0+IE5vbmVcbiAgICAgICAgaW5cbiAgICAgICAgbWF0Y2ggbWF5YmVfZmxvYXQgd2l0aFxuICAgICAgICB8IE5vbmUgLT5cbiAgICAgICAgICBpZiBsZW4gPiBTeXMubWF4X2FycmF5X2xlbmd0aFxuICAgICAgICAgIHRoZW4gcmFpc2VfcmVhZF9lcnJvciBSZWFkRXJyb3IuQXJyYXlfdG9vX2xvbmcgc3RhcnRfcG9zXG4gICAgICAgIHwgU29tZSBlbCAtPlxuICAgICAgICAgIGlmIE9iai50YWcgKE9iai5yZXByIGVsKSA9IE9iai5kb3VibGVfdGFnIHx8IGxlbiA+IFN5cy5tYXhfYXJyYXlfbGVuZ3RoXG4gICAgICAgICAgdGhlbiByYWlzZV9yZWFkX2Vycm9yIFJlYWRFcnJvci5BcnJheV90b29fbG9uZyBzdGFydF9wb3MpO1xuICAgICAgbGV0IGZpcnN0ID0gYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmIGluXG4gICAgICBsZXQgcmVzID0gQXJyYXkubWFrZSBsZW4gZmlyc3QgaW5cbiAgICAgIGZvciBpID0gMSB0byBsZW4gLSAxIGRvXG4gICAgICAgIGxldCBlbCA9IGJpbl9yZWFkX2VsIGJ1ZiB+cG9zX3JlZiBpblxuICAgICAgICBBcnJheS51bnNhZmVfc2V0IHJlcyBpIGVsXG4gICAgICBkb25lO1xuICAgICAgcmVzKSlcbjs7XG5cbmxldCBiaW5fcmVhZF9oYXNodGJsIGJpbl9yZWFkX2tleSBiaW5fcmVhZF92YWwgYnVmIH5wb3NfcmVmID1cbiAgbGV0IGxlbiA9IChiaW5fcmVhZF9uYXQwIGJ1ZiB+cG9zX3JlZiA6PiBpbnQpIGluXG4gIGxldCBodGJsID0gSGFzaHRibC5jcmVhdGUgbGVuIGluXG4gIGxldCByZWFkX2t2X3BhaXIgPSBiaW5fcmVhZF9wYWlyIGJpbl9yZWFkX2tleSBiaW5fcmVhZF92YWwgaW5cbiAgbGV0IGVscyA9IGJpbl9yZWFkX25fcmV2X2xpc3QgcmVhZF9rdl9wYWlyIGJ1ZiB+cG9zX3JlZiBsZW4gaW5cbiAgY29weV9odGJsX2xpc3QgaHRibCBlbHNcbjs7XG5cbmV4dGVybmFsIGJ1Zl9vZl92ZWMzMiA6IHZlYzMyIC0+IGJ1ZiA9IFwiJWlkZW50aXR5XCJcbmV4dGVybmFsIGJ1Zl9vZl92ZWM2NCA6IHZlYzY0IC0+IGJ1ZiA9IFwiJWlkZW50aXR5XCJcbmV4dGVybmFsIGJ1Zl9vZl9tYXQzMiA6IG1hdDMyIC0+IGJ1ZiA9IFwiJWlkZW50aXR5XCJcbmV4dGVybmFsIGJ1Zl9vZl9tYXQ2NCA6IG1hdDY0IC0+IGJ1ZiA9IFwiJWlkZW50aXR5XCJcblxubGV0IGJpbl9yZWFkX2Zsb2F0MzJfdmVjIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBsZW4gPSAoYmluX3JlYWRfbmF0MCBidWYgfnBvc19yZWYgOj4gaW50KSBpblxuICBsZXQgc2l6ZSA9IGxlbiAqIDQgaW5cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGxldCBuZXh0ID0gcG9zICsgc2l6ZSBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBsZXQgdmVjID0gQXJyYXkxLmNyZWF0ZSBmbG9hdDMyIGZvcnRyYW5fbGF5b3V0IGxlbiBpblxuICB1bnNhZmVfYmxpdF9idWYgfnNyYzpidWYgfnNyY19wb3M6cG9zIH5kc3Q6KGJ1Zl9vZl92ZWMzMiB2ZWMpIH5kc3RfcG9zOjAgfmxlbjpzaXplO1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gIHZlY1xuOztcblxubGV0IGJpbl9yZWFkX2Zsb2F0NjRfdmVjIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBsZW4gPSAoYmluX3JlYWRfbmF0MCBidWYgfnBvc19yZWYgOj4gaW50KSBpblxuICBsZXQgc2l6ZSA9IGxlbiAqIDggaW5cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGxldCBuZXh0ID0gcG9zICsgc2l6ZSBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBsZXQgdmVjID0gQXJyYXkxLmNyZWF0ZSBmbG9hdDY0IGZvcnRyYW5fbGF5b3V0IGxlbiBpblxuICB1bnNhZmVfYmxpdF9idWYgfnNyYzpidWYgfnNyY19wb3M6cG9zIH5kc3Q6KGJ1Zl9vZl92ZWM2NCB2ZWMpIH5kc3RfcG9zOjAgfmxlbjpzaXplO1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gIHZlY1xuOztcblxubGV0IGJpbl9yZWFkX3ZlYyA9IGJpbl9yZWFkX2Zsb2F0NjRfdmVjXG5cbmxldCBiaW5fcmVhZF9mbG9hdDMyX21hdCBidWYgfnBvc19yZWYgPVxuICBsZXQgbGVuMSA9IChiaW5fcmVhZF9uYXQwIGJ1ZiB+cG9zX3JlZiA6PiBpbnQpIGluXG4gIGxldCBsZW4yID0gKGJpbl9yZWFkX25hdDAgYnVmIH5wb3NfcmVmIDo+IGludCkgaW5cbiAgbGV0IHNpemUgPSBsZW4xICogbGVuMiAqIDQgaW5cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGxldCBuZXh0ID0gcG9zICsgc2l6ZSBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBsZXQgbWF0ID0gQXJyYXkyLmNyZWF0ZSBmbG9hdDMyIGZvcnRyYW5fbGF5b3V0IGxlbjEgbGVuMiBpblxuICB1bnNhZmVfYmxpdF9idWYgfnNyYzpidWYgfnNyY19wb3M6cG9zIH5kc3Q6KGJ1Zl9vZl9tYXQzMiBtYXQpIH5kc3RfcG9zOjAgfmxlbjpzaXplO1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gIG1hdFxuOztcblxubGV0IGJpbl9yZWFkX2Zsb2F0NjRfbWF0IGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBsZW4xID0gKGJpbl9yZWFkX25hdDAgYnVmIH5wb3NfcmVmIDo+IGludCkgaW5cbiAgbGV0IGxlbjIgPSAoYmluX3JlYWRfbmF0MCBidWYgfnBvc19yZWYgOj4gaW50KSBpblxuICBsZXQgc2l6ZSA9IGxlbjEgKiBsZW4yICogOCBpblxuICBsZXQgcG9zID0gIXBvc19yZWYgaW5cbiAgbGV0IG5leHQgPSBwb3MgKyBzaXplIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIGxldCBtYXQgPSBBcnJheTIuY3JlYXRlIGZsb2F0NjQgZm9ydHJhbl9sYXlvdXQgbGVuMSBsZW4yIGluXG4gIHVuc2FmZV9ibGl0X2J1ZiB+c3JjOmJ1ZiB+c3JjX3Bvczpwb3MgfmRzdDooYnVmX29mX21hdDY0IG1hdCkgfmRzdF9wb3M6MCB+bGVuOnNpemU7XG4gIHBvc19yZWYgOj0gbmV4dDtcbiAgbWF0XG47O1xuXG5sZXQgYmluX3JlYWRfbWF0ID0gYmluX3JlYWRfZmxvYXQ2NF9tYXRcblxubGV0IGJpbl9yZWFkX2JpZ3N0cmluZyBidWYgfnBvc19yZWYgPVxuICBsZXQgbGVuID0gKGJpbl9yZWFkX25hdDAgYnVmIH5wb3NfcmVmIDo+IGludCkgaW5cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGxldCBuZXh0ID0gcG9zICsgbGVuIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIGxldCBzdHIgPSBjcmVhdGVfYnVmIGxlbiBpblxuICB1bnNhZmVfYmxpdF9idWYgfnNyYzpidWYgfnNyY19wb3M6cG9zIH5kc3Q6c3RyIH5kc3RfcG9zOjAgfmxlbjtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICBzdHJcbjs7XG5cbmxldCBiaW5fcmVhZF92YXJpYW50X2ludCBidWYgfnBvc19yZWYgPVxuICBsZXQgcG9zID0gIXBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgNCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBsZXQgbiA9IHVuc2FmZV9nZXQzMmxlIGJ1ZiBwb3MgaW5cbiAgKCogW25dIG11c3QgY29udGFpbiBhbiBpbnRlZ2VyIGFscmVhZHkgZW5jb2RlZCwgaS5lLiBbbiA9IDIgKiBrICsgMV0uICopXG4gIGlmIEludDMyLmxvZ2FuZCBuIDFsID0gMGxcbiAgdGhlbiByYWlzZSAoUmVhZF9lcnJvciAoUmVhZEVycm9yLlZhcmlhbnRfdGFnLCBwb3MpKVxuICBlbHNlIChcbiAgICAoKiBXZSBzaGlmdCBpdCBieSBvbmUgYml0IHRvIHRoZSByaWdodCBzZSB3ZSBnZXQgYmFjayBbMiAqIGsgKyAxXSBpbiB0aGUgZW5kLiAqKVxuICAgIHBvc19yZWYgOj0gbmV4dDtcbiAgICBJbnQzMi50b19pbnQgKEludDMyLnNoaWZ0X3JpZ2h0IG4gMSkpXG47O1xuXG5sZXQgYmluX3JlYWRfaW50XzhiaXQgYnVmIH5wb3NfcmVmID1cbiAgbGV0IHBvcyA9IHNhZmVfZ2V0X3BvcyBidWYgcG9zX3JlZiBpblxuICBhc3NlcnRfcG9zIHBvcztcbiAgcG9zX3JlZiA6PSBwb3MgKyAxO1xuICB1bnNhZmVfZ2V0OCBidWYgcG9zXG47O1xuXG5sZXQgYmluX3JlYWRfaW50XzE2Yml0IGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSAhcG9zX3JlZiBpblxuICBhc3NlcnRfcG9zIHBvcztcbiAgbGV0IG5leHQgPSBwb3MgKyAyIGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHBvc19yZWYgOj0gbmV4dDtcbiAgdW5zYWZlX2dldDE2bGVfdW5zaWduZWQgYnVmIHBvc1xuOztcblxubGV0IGJpbl9yZWFkX2ludF8zMmJpdCBidWYgfnBvc19yZWYgPVxuICBsZXQgcG9zID0gIXBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgNCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gIGxldCBuID0gdW5zYWZlX2dldDMybGUgYnVmIHBvcyBpblxuICBzYWZlX2ludF9vZl9pbnQzMiBwb3MgblxuOztcblxubGV0IGJpbl9yZWFkX2ludF82NGJpdCBidWYgfnBvc19yZWYgPVxuICBsZXQgcG9zID0gIXBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgOCBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gIGxldCBuID0gdW5zYWZlX2dldDY0bGUgYnVmIHBvcyBpblxuICBzYWZlX2ludF9vZl9pbnQ2NCBwb3MgblxuOztcblxubGV0IGJpbl9yZWFkX2ludDY0X2JpdHMgYnVmIH5wb3NfcmVmID1cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGFzc2VydF9wb3MgcG9zO1xuICBsZXQgbmV4dCA9IHBvcyArIDggaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICB1bnNhZmVfZ2V0NjRsZSBidWYgcG9zXG47O1xuXG5sZXQgYmluX3JlYWRfbmV0d29yazE2X2ludCBidWYgfnBvc19yZWYgPVxuICBsZXQgcG9zID0gIXBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgMiBpblxuICBjaGVja19uZXh0IGJ1ZiBuZXh0O1xuICBwb3NfcmVmIDo9IG5leHQ7XG4gIHVuc2FmZV9nZXQxNmJlX3Vuc2lnbmVkIGJ1ZiBwb3Ncbjs7XG5cbmxldCBiaW5fcmVhZF9uZXR3b3JrMzJfaW50IGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSAhcG9zX3JlZiBpblxuICBhc3NlcnRfcG9zIHBvcztcbiAgbGV0IG5leHQgPSBwb3MgKyA0IGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHBvc19yZWYgOj0gbmV4dDtcbiAgbGV0IG4gPSB1bnNhZmVfZ2V0MzJiZSBidWYgcG9zIGluXG4gIHNhZmVfaW50X29mX2ludDMyIHBvcyBuXG47O1xuXG5sZXQgYmluX3JlYWRfbmV0d29yazMyX2ludDMyIGJ1ZiB+cG9zX3JlZiA9XG4gIGxldCBwb3MgPSAhcG9zX3JlZiBpblxuICBhc3NlcnRfcG9zIHBvcztcbiAgbGV0IG5leHQgPSBwb3MgKyA0IGluXG4gIGNoZWNrX25leHQgYnVmIG5leHQ7XG4gIHBvc19yZWYgOj0gbmV4dDtcbiAgdW5zYWZlX2dldDMyYmUgYnVmIHBvc1xuOztcblxubGV0IGJpbl9yZWFkX25ldHdvcms2NF9pbnQgYnVmIH5wb3NfcmVmID1cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGFzc2VydF9wb3MgcG9zO1xuICBsZXQgbmV4dCA9IHBvcyArIDggaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICBsZXQgbiA9IHVuc2FmZV9nZXQ2NGJlIGJ1ZiBwb3MgaW5cbiAgc2FmZV9pbnRfb2ZfaW50NjQgcG9zIG5cbjs7XG5cbmxldCBiaW5fcmVhZF9uZXR3b3JrNjRfaW50NjQgYnVmIH5wb3NfcmVmID1cbiAgbGV0IHBvcyA9ICFwb3NfcmVmIGluXG4gIGFzc2VydF9wb3MgcG9zO1xuICBsZXQgbmV4dCA9IHBvcyArIDggaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICB1bnNhZmVfZ2V0NjRiZSBidWYgcG9zXG47O1xuXG5bJSVpZiBvY2FtbF92ZXJzaW9uIDwgKDQsIDA3LCAwKV1cblxuZXh0ZXJuYWwgdW5zYWZlX2J5dGVzX3NldDMyIDogYnl0ZXMgLT4gaW50IC0+IGludDMyIC0+IHVuaXQgPSBcIiVjYW1sX3N0cmluZ19zZXQzMnVcIlxuZXh0ZXJuYWwgdW5zYWZlX2J5dGVzX3NldDY0IDogYnl0ZXMgLT4gaW50IC0+IGludDY0IC0+IHVuaXQgPSBcIiVjYW1sX3N0cmluZ19zZXQ2NHVcIlxuXG5bJSVlbHNlXVxuXG5leHRlcm5hbCB1bnNhZmVfYnl0ZXNfc2V0MzIgOiBieXRlcyAtPiBpbnQgLT4gaW50MzIgLT4gdW5pdCA9IFwiJWNhbWxfYnl0ZXNfc2V0MzJ1XCJcbmV4dGVybmFsIHVuc2FmZV9ieXRlc19zZXQ2NCA6IGJ5dGVzIC0+IGludCAtPiBpbnQ2NCAtPiB1bml0ID0gXCIlY2FtbF9ieXRlc19zZXQ2NHVcIlxuXG5bJSVlbmRpZl1cblxubGV0IGJpbl9yZWFkX21kNSBidWYgfnBvc19yZWYgPVxuICBsZXQgcG9zID0gIXBvc19yZWYgaW5cbiAgYXNzZXJ0X3BvcyBwb3M7XG4gIGxldCBuZXh0ID0gcG9zICsgMTYgaW5cbiAgY2hlY2tfbmV4dCBidWYgbmV4dDtcbiAgcG9zX3JlZiA6PSBuZXh0O1xuICBsZXQgcmVzID0gQnl0ZXMuY3JlYXRlIDE2IGluXG4gIGlmIGFyY2hfc2l4dHlmb3VyXG4gIHRoZW4gKFxuICAgIGxldCBhID0gdW5zYWZlX2dldDY0IGJ1ZiBwb3MgaW5cbiAgICBsZXQgYiA9IHVuc2FmZV9nZXQ2NCBidWYgKHBvcyArIDgpIGluXG4gICAgdW5zYWZlX2J5dGVzX3NldDY0IHJlcyAwIGE7XG4gICAgdW5zYWZlX2J5dGVzX3NldDY0IHJlcyA4IGIpXG4gIGVsc2UgKFxuICAgIGxldCBhID0gdW5zYWZlX2dldDMyIGJ1ZiBwb3MgaW5cbiAgICBsZXQgYiA9IHVuc2FmZV9nZXQzMiBidWYgKHBvcyArIDQpIGluXG4gICAgbGV0IGMgPSB1bnNhZmVfZ2V0MzIgYnVmIChwb3MgKyA4KSBpblxuICAgIGxldCBkID0gdW5zYWZlX2dldDMyIGJ1ZiAocG9zICsgMTIpIGluXG4gICAgdW5zYWZlX2J5dGVzX3NldDMyIHJlcyAwIGE7XG4gICAgdW5zYWZlX2J5dGVzX3NldDMyIHJlcyA0IGI7XG4gICAgdW5zYWZlX2J5dGVzX3NldDMyIHJlcyA4IGM7XG4gICAgdW5zYWZlX2J5dGVzX3NldDMyIHJlcyAxMiBkKTtcbiAgTWQ1X2xpYi51bnNhZmVfb2ZfYmluYXJ5IChCeXRlcy51bnNhZmVfdG9fc3RyaW5nIHJlcylcbjs7XG4iLCJpbmNsdWRlIEJpbl9zaGFwZV9saWIuU3RkLlNoYXBlXG5cbigqIG5ldyBiYXNlIHNoYXBlcyAqKVxubGV0IGJpbl9zaGFwZV91bml0ID0gYmFzZXR5cGUgKFV1aWQub2Zfc3RyaW5nIFwidW5pdFwiKSBbXVxubGV0IGJpbl9zaGFwZV9ib29sID0gYmFzZXR5cGUgKFV1aWQub2Zfc3RyaW5nIFwiYm9vbFwiKSBbXVxubGV0IGJpbl9zaGFwZV9zdHJpbmcgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJzdHJpbmdcIikgW11cbmxldCBiaW5fc2hhcGVfYnl0ZXMgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJieXRlc1wiKSBbXVxubGV0IGJpbl9zaGFwZV9jaGFyID0gYmFzZXR5cGUgKFV1aWQub2Zfc3RyaW5nIFwiY2hhclwiKSBbXVxubGV0IGJpbl9zaGFwZV9mbG9hdCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcImZsb2F0XCIpIFtdXG5sZXQgYmluX3NoYXBlX2ludCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcImludFwiKSBbXVxubGV0IGJpbl9zaGFwZV9pbnQzMiA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcImludDMyXCIpIFtdXG5sZXQgYmluX3NoYXBlX2ludDYzID0gYmFzZXR5cGUgKFV1aWQub2Zfc3RyaW5nIFwiaW50NjNcIikgW11cbmxldCBiaW5fc2hhcGVfaW50NjQgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJpbnQ2NFwiKSBbXVxubGV0IGJpbl9zaGFwZV9uYXRpdmVpbnQgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJuYXRpdmVpbnRcIikgW11cbmxldCBiaW5fc2hhcGVfbmF0MCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcIm5hdDBcIikgW11cbmxldCBiaW5fc2hhcGVfZGlnZXN0ID0gYmFzZXR5cGUgKFV1aWQub2Zfc3RyaW5nIFwiZGlnZXN0XCIpIFtdXG5sZXQgYmluX3NoYXBlX2Zsb2F0MzJfdmVjID0gYmFzZXR5cGUgKFV1aWQub2Zfc3RyaW5nIFwiZmxvYXQzMl92ZWNcIikgW11cbmxldCBiaW5fc2hhcGVfZmxvYXQ2NF92ZWMgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJmbG9hdDY0X3ZlY1wiKSBbXVxubGV0IGJpbl9zaGFwZV92ZWMgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJ2ZWNcIikgW11cbmxldCBiaW5fc2hhcGVfZmxvYXQzMl9tYXQgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJmbG9hdDMyX21hdFwiKSBbXVxubGV0IGJpbl9zaGFwZV9mbG9hdDY0X21hdCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcImZsb2F0NjRfbWF0XCIpIFtdXG5sZXQgYmluX3NoYXBlX21hdCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcIm1hdFwiKSBbXVxubGV0IGJpbl9zaGFwZV9iaWdzdHJpbmcgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJiaWdzdHJpbmdcIikgW11cbmxldCBiaW5fc2hhcGVfZmxvYXRhcnJheSA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcImZsb2F0YXJyYXlcIikgW11cbmxldCBiaW5fc2hhcGVfdmFyaWFudF9pbnQgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJ2YXJpYW50X2ludFwiKSBbXVxubGV0IGJpbl9zaGFwZV9pbnRfOGJpdCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcImludF84Yml0XCIpIFtdXG5sZXQgYmluX3NoYXBlX2ludF8xNmJpdCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcImludF8xNmJpdFwiKSBbXVxubGV0IGJpbl9zaGFwZV9pbnRfMzJiaXQgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJpbnRfMzJiaXRcIikgW11cbmxldCBiaW5fc2hhcGVfaW50XzY0Yml0ID0gYmFzZXR5cGUgKFV1aWQub2Zfc3RyaW5nIFwiaW50XzY0Yml0XCIpIFtdXG5sZXQgYmluX3NoYXBlX2ludDY0X2JpdHMgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJpbnQ2NF9iaXRzXCIpIFtdXG5sZXQgYmluX3NoYXBlX25ldHdvcmsxNl9pbnQgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJuZXR3b3JrMTZfaW50XCIpIFtdXG5sZXQgYmluX3NoYXBlX25ldHdvcmszMl9pbnQgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJuZXR3b3JrMzJfaW50XCIpIFtdXG5sZXQgYmluX3NoYXBlX25ldHdvcmszMl9pbnQzMiA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcIm5ldHdvcmszMl9pbnQzMlwiKSBbXVxubGV0IGJpbl9zaGFwZV9uZXR3b3JrNjRfaW50ID0gYmFzZXR5cGUgKFV1aWQub2Zfc3RyaW5nIFwibmV0d29yazY0X2ludFwiKSBbXVxubGV0IGJpbl9zaGFwZV9uZXR3b3JrNjRfaW50NjQgPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJuZXR3b3JrNjRfaW50NjRcIikgW11cblxuKCogbmV3IHNoYXBlIGNvbnN0cnVjdG9ycyAqKVxubGV0IGJpbl9zaGFwZV9yZWYgeCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcInJlZlwiKSBbIHggXVxubGV0IGJpbl9zaGFwZV9vcHRpb24geCA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcIm9wdGlvblwiKSBbIHggXVxubGV0IGJpbl9zaGFwZV9saXN0IHggPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJsaXN0XCIpIFsgeCBdXG5sZXQgYmluX3NoYXBlX2FycmF5IHggPSBiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCJhcnJheVwiKSBbIHggXVxubGV0IGJpbl9zaGFwZV9oYXNodGJsIHggeSA9IGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcImhhc2h0YmxcIikgWyB4OyB5IF1cblxuKCogc2hhcGUgYWxpYXMgKilcbmxldCBiaW5fc2hhcGVfZmxvYXRfYXJyYXkgPSBiaW5fc2hhcGVfYXJyYXkgYmluX3NoYXBlX2Zsb2F0XG5bQEBvY2FtbC5kZXByZWNhdGVkXG4gIFwiW3NpbmNlIDIwMjEtMDldIHVzZSBwcHhfYmluX3Byb3Qgd2l0aCB0eXBlIFtmbG9hdCBhcnJheV0gb3IgW2Zsb2F0YXJyYXldIG9yIHRoZSBcXFxuICAgJ2Zsb2F0YXJyYXknIGZ1bmN0aW9uc1wiXVxuOztcblxuKCogc2hhcGUtY29uc3RydWN0b3IgYWxpYXNlcyAqKVxubGV0IGJpbl9zaGFwZV9sYXp5IHggPSB4XG5sZXQgYmluX3NoYXBlX3BhaXIgeCB5ID0gdHVwbGUgWyB4OyB5IF1cbmxldCBiaW5fc2hhcGVfdHJpcGxlIHggeSB6ID0gdHVwbGUgWyB4OyB5OyB6IF1cbiIsIigqIFNpemU6IGNvbXB1dGUgc2l6ZSBvZiB2YWx1ZXMgaW4gdGhlIGJpbmFyeSBwcm90b2NvbC4gKilcblxub3BlbiBCaWdhcnJheVxuXG5sZXQgYXJjaF9zaXh0eWZvdXIgPSBTeXMud29yZF9zaXplID0gNjRcblxub3BlbiBDb21tb25cblxubW9kdWxlIE1heGltdW0gPSBzdHJ1Y3RcbiAgbGV0IGJpbl9zaXplX3VuaXQgPSAxXG4gIGxldCBiaW5fc2l6ZV9ib29sID0gMVxuICBsZXQgYmluX3NpemVfY2hhciA9IDFcbiAgbGV0IGJpbl9zaXplX21kNSA9IDE2XG4gIGxldCBiaW5fc2l6ZV9pbnRfbmF0MCA9IGlmIGFyY2hfc2l4dHlmb3VyIHRoZW4gOSBlbHNlIDVcbiAgbGV0IGJpbl9zaXplX2ludF9uZWdhdGl2ZSA9IGlmIGFyY2hfc2l4dHlmb3VyIHRoZW4gOSBlbHNlIDVcbiAgbGV0IGJpbl9zaXplX2ludCA9IG1heCBiaW5fc2l6ZV9pbnRfbmF0MCBiaW5fc2l6ZV9pbnRfbmVnYXRpdmVcbiAgbGV0IGJpbl9zaXplX2Zsb2F0ID0gOFxuICBsZXQgYmluX3NpemVfaW50MzIgPSA1XG4gIGxldCBiaW5fc2l6ZV9pbnQ2NCA9IDlcbiAgbGV0IGJpbl9zaXplX25hdGl2ZWludCA9IGJpbl9zaXplX2ludFxuICBsZXQgYmluX3NpemVfbmF0MCA9IGJpbl9zaXplX2ludF9uYXQwXG4gIGxldCBiaW5fc2l6ZV92YXJpYW50X2ludCA9IDRcbiAgbGV0IGJpbl9zaXplX2ludF84Yml0ID0gMVxuICBsZXQgYmluX3NpemVfaW50XzE2Yml0ID0gMlxuICBsZXQgYmluX3NpemVfaW50XzMyYml0ID0gNFxuICBsZXQgYmluX3NpemVfaW50XzY0Yml0ID0gOFxuICBsZXQgYmluX3NpemVfaW50NjRfYml0cyA9IDhcbiAgbGV0IGJpbl9zaXplX25ldHdvcmsxNl9pbnQgPSAyXG4gIGxldCBiaW5fc2l6ZV9uZXR3b3JrMzJfaW50ID0gNFxuICBsZXQgYmluX3NpemVfbmV0d29yazMyX2ludDMyID0gNFxuICBsZXQgYmluX3NpemVfbmV0d29yazY0X2ludCA9IDhcbiAgbGV0IGJpbl9zaXplX25ldHdvcms2NF9pbnQ2NCA9IDhcbmVuZFxuXG5tb2R1bGUgTWluaW11bSA9IHN0cnVjdFxuICBsZXQgYmluX3NpemVfdW5pdCA9IE1heGltdW0uYmluX3NpemVfdW5pdFxuICBsZXQgYmluX3NpemVfYm9vbCA9IE1heGltdW0uYmluX3NpemVfYm9vbFxuICBsZXQgYmluX3NpemVfY2hhciA9IE1heGltdW0uYmluX3NpemVfY2hhclxuICBsZXQgYmluX3NpemVfbWQ1ID0gMTZcbiAgbGV0IGJpbl9zaXplX2ludF9uYXQwID0gMVxuICBsZXQgYmluX3NpemVfaW50X25lZ2F0aXZlID0gMlxuICBsZXQgYmluX3NpemVfaW50ID0gbWluIGJpbl9zaXplX2ludF9uYXQwIGJpbl9zaXplX2ludF9uZWdhdGl2ZVxuICBsZXQgYmluX3NpemVfZmxvYXQgPSBNYXhpbXVtLmJpbl9zaXplX2Zsb2F0XG4gIGxldCBiaW5fc2l6ZV9pbnQzMiA9IGJpbl9zaXplX2ludFxuICBsZXQgYmluX3NpemVfaW50NjQgPSBiaW5fc2l6ZV9pbnRcbiAgbGV0IGJpbl9zaXplX25hdGl2ZWludCA9IGJpbl9zaXplX2ludFxuICBsZXQgYmluX3NpemVfbmF0MCA9IDFcbiAgbGV0IGJpbl9zaXplX3JlZiA9IDFcbiAgbGV0IGJpbl9zaXplX2xhenlfdCA9IDFcbiAgbGV0IGJpbl9zaXplX29wdGlvbiA9IDFcbiAgbGV0IGJpbl9zaXplX3BhaXIgPSAxICsgMVxuICBsZXQgYmluX3NpemVfdHJpcGxlID0gMSArIDEgKyAxXG4gIGxldCBiaW5fc2l6ZV9sZW4gPSBiaW5fc2l6ZV9uYXQwXG4gIGxldCBiaW5fc2l6ZV9saXN0ID0gYmluX3NpemVfbGVuXG4gIGxldCBiaW5fc2l6ZV9hcnJheSA9IGJpbl9zaXplX2xlblxuICBsZXQgYmluX3NpemVfaGFzaHRibCA9IGJpbl9zaXplX2xlblxuICBsZXQgYmluX3NpemVfc3RyaW5nID0gYmluX3NpemVfbGVuXG4gIGxldCBiaW5fc2l6ZV9ieXRlcyA9IGJpbl9zaXplX2xlblxuICBsZXQgYmluX3NpemVfdmVjID0gYmluX3NpemVfbGVuXG4gIGxldCBiaW5fc2l6ZV9mbG9hdDMyX3ZlYyA9IGJpbl9zaXplX3ZlY1xuICBsZXQgYmluX3NpemVfZmxvYXQ2NF92ZWMgPSBiaW5fc2l6ZV92ZWNcbiAgbGV0IGJpbl9zaXplX21hdCA9IGJpbl9zaXplX2xlbiArIGJpbl9zaXplX2xlblxuICBsZXQgYmluX3NpemVfZmxvYXQzMl9tYXQgPSBiaW5fc2l6ZV9tYXRcbiAgbGV0IGJpbl9zaXplX2Zsb2F0NjRfbWF0ID0gYmluX3NpemVfbWF0XG4gIGxldCBiaW5fc2l6ZV9iaWdzdHJpbmcgPSBiaW5fc2l6ZV9sZW5cbiAgbGV0IGJpbl9zaXplX2Zsb2F0YXJyYXkgPSBiaW5fc2l6ZV9sZW5cbiAgbGV0IGJpbl9zaXplX2Zsb2F0X2FycmF5ID0gYmluX3NpemVfbGVuXG4gIGxldCBiaW5fc2l6ZV92YXJpYW50X2ludCA9IE1heGltdW0uYmluX3NpemVfdmFyaWFudF9pbnRcbiAgbGV0IGJpbl9zaXplX2ludF84Yml0ID0gTWF4aW11bS5iaW5fc2l6ZV9pbnRfOGJpdFxuICBsZXQgYmluX3NpemVfaW50XzE2Yml0ID0gTWF4aW11bS5iaW5fc2l6ZV9pbnRfMTZiaXRcbiAgbGV0IGJpbl9zaXplX2ludF8zMmJpdCA9IE1heGltdW0uYmluX3NpemVfaW50XzMyYml0XG4gIGxldCBiaW5fc2l6ZV9pbnRfNjRiaXQgPSBNYXhpbXVtLmJpbl9zaXplX2ludF82NGJpdFxuICBsZXQgYmluX3NpemVfaW50NjRfYml0cyA9IE1heGltdW0uYmluX3NpemVfaW50NjRfYml0c1xuICBsZXQgYmluX3NpemVfbmV0d29yazE2X2ludCA9IE1heGltdW0uYmluX3NpemVfbmV0d29yazE2X2ludFxuICBsZXQgYmluX3NpemVfbmV0d29yazMyX2ludCA9IE1heGltdW0uYmluX3NpemVfbmV0d29yazMyX2ludFxuICBsZXQgYmluX3NpemVfbmV0d29yazMyX2ludDMyID0gTWF4aW11bS5iaW5fc2l6ZV9uZXR3b3JrMzJfaW50MzJcbiAgbGV0IGJpbl9zaXplX25ldHdvcms2NF9pbnQgPSBNYXhpbXVtLmJpbl9zaXplX25ldHdvcms2NF9pbnRcbiAgbGV0IGJpbl9zaXplX25ldHdvcms2NF9pbnQ2NCA9IE1heGltdW0uYmluX3NpemVfbmV0d29yazY0X2ludDY0XG5lbmRcblxudHlwZSAnYSBzaXplciA9ICdhIC0+IGludFxudHlwZSAoJ2EsICdiKSBzaXplcjEgPSAnYSBzaXplciAtPiAnYiBzaXplclxudHlwZSAoJ2EsICdiLCAnYykgc2l6ZXIyID0gJ2Egc2l6ZXIgLT4gKCdiLCAnYykgc2l6ZXIxXG50eXBlICgnYSwgJ2IsICdjLCAnZCkgc2l6ZXIzID0gJ2Egc2l6ZXIgLT4gKCdiLCAnYywgJ2QpIHNpemVyMlxuXG5sZXQgYmluX3NpemVfdW5pdCAoKSA9IDFcbmxldCBiaW5fc2l6ZV9ib29sIF8gPSAxXG5cbmxldCBiaW5fc2l6ZV9pbnRfbmF0MCBuID1cbiAgaWYgbiA8IDB4MDAwMDAwODBcbiAgdGhlbiAxXG4gIGVsc2UgaWYgbiA8IDB4MDAwMDgwMDBcbiAgdGhlbiAzXG4gIGVsc2UgaWYgYXJjaF9zaXh0eWZvdXIgJiYgbiA+PSAoKiAweDgwMDAwMDAwICopIDEgbHNsIDMxXG4gIHRoZW4gOVxuICBlbHNlIDVcbjs7XG5cbmxldCBiaW5fc2l6ZV9pbnRfbmVnYXRpdmUgbiA9XG4gIGlmIG4gPj0gLTB4MDAwMDAwODBcbiAgdGhlbiAyXG4gIGVsc2UgaWYgbiA+PSAtMHgwMDAwODAwMFxuICB0aGVuIDNcbiAgZWxzZSBpZiBhcmNoX3NpeHR5Zm91ciAmJiBuIDwgKCogLTB4ODAwMDAwMDAgKikgLSgxIGxzbCAzMSlcbiAgdGhlbiA5XG4gIGVsc2UgNVxuOztcblxubGV0IGJpbl9zaXplX2NoYXIgXyA9IDFcbmxldCBiaW5fc2l6ZV9pbnQgbiA9IGlmIG4gPj0gMCB0aGVuIGJpbl9zaXplX2ludF9uYXQwIG4gZWxzZSBiaW5fc2l6ZV9pbnRfbmVnYXRpdmUgblxuXG5sZXQgYmluX3NpemVfbmF0MCBuYXQwID1cbiAgbGV0IG4gPSAobmF0MCA6IE5hdDAudCA6PiBpbnQpIGluXG4gIGlmIG4gPCAweDAwMDAwMDgwXG4gIHRoZW4gMVxuICBlbHNlIGlmIG4gPCAweDAwMDEwMDAwXG4gIHRoZW4gM1xuICBlbHNlIGlmIGFyY2hfc2l4dHlmb3VyICYmIG4gPj0gKCogMHgxMDAwMDAwMDAgKikgMSBsc2wgMzJcbiAgdGhlbiA5XG4gIGVsc2UgNVxuOztcblxubGV0IGJpbl9zaXplX3N0cmluZ19vcl9ieXRlcyBsZW4gPVxuICBsZXQgcGxlbiA9IE5hdDAudW5zYWZlX29mX2ludCBsZW4gaW5cbiAgbGV0IHNpemVfbGVuID0gYmluX3NpemVfbmF0MCBwbGVuIGluXG4gIHNpemVfbGVuICsgbGVuXG47O1xuXG5sZXQgYmluX3NpemVfc3RyaW5nIHN0ciA9IGJpbl9zaXplX3N0cmluZ19vcl9ieXRlcyAoU3RyaW5nLmxlbmd0aCBzdHIpXG5sZXQgYmluX3NpemVfYnl0ZXMgc3RyID0gYmluX3NpemVfc3RyaW5nX29yX2J5dGVzIChCeXRlcy5sZW5ndGggc3RyKVxubGV0IGJpbl9zaXplX21kNSBfID0gMTZcblxubGV0IGJpbl9zaXplX2Zsb2F0IGYgPVxuICAoKiBJZiB3ZSBqdXN0IGlnbm9yZSB0aGUgYXJndW1lbnQgdGhlIGNvbXBpbGVyIHdpbGwgc3RpbGwgcmVxdWlyZSBpdCB0byBleGlzdCBhbmQgYmVcbiAgICAgYm94ZWQuIFRoaXMgbWVhbnMgdGhhdCBpZiBmb3IgaW5zdGFuY2Ugd2UgY2FsbCB0aGlzIGZvciBhIGZpZWxkIG9mIGEgZmxvYXQgcmVjb3JkLFxuICAgICB0aGUgY29tcGlsZXIgd2lsbCBhbGxvY2F0ZSB0aGUgZmxvYXQgZm9yIG5vdGhpbmcuXG5cbiAgICAgV2l0aCB0aGlzIGxpbmUgdGhlIGNvbXBpbGVyIHJlYWxseSBpZ25vcmVzIHRoZSBmbG9hdC4gKilcbiAgaWdub3JlICh0cnVuY2F0ZSBmKTtcbiAgOFxuOztcblxubGV0IGJpbl9zaXplX2ludDMyID1cbiAgaWYgYXJjaF9zaXh0eWZvdXJcbiAgdGhlbiBmdW4gbiAtPiBiaW5fc2l6ZV9pbnQgKEludDMyLnRvX2ludCBuKVxuICBlbHNlXG4gICAgZnVuIG4gLT5cbiAgICAgIGlmIG4gPj0gMHgwMDAwODAwMGwgfHwgbiA8IC0weDAwMDA4MDAwbCB0aGVuIDUgZWxzZSBiaW5fc2l6ZV9pbnQgKEludDMyLnRvX2ludCBuKVxuOztcblxubGV0IGJpbl9zaXplX2ludDY0ID1cbiAgaWYgYXJjaF9zaXh0eWZvdXJcbiAgdGhlblxuICAgIGZ1biBuIC0+XG4gICAgICBpZiBuID49IDB4ODAwMDAwMDBMIHx8IG4gPCAtMHg4MDAwMDAwMEwgdGhlbiA5IGVsc2UgYmluX3NpemVfaW50IChJbnQ2NC50b19pbnQgbilcbiAgZWxzZVxuICAgIGZ1biBuIC0+XG4gICAgICBpZiBuID49IDB4ODAwMDAwMDBMIHx8IG4gPCAtMHg4MDAwMDAwMEwgdGhlbiA5IGVsc2UgYmluX3NpemVfaW50MzIgKEludDY0LnRvX2ludDMyIG4pXG47O1xuXG5sZXQgYmluX3NpemVfbmF0aXZlaW50ID1cbiAgaWYgYXJjaF9zaXh0eWZvdXJcbiAgdGhlbiBmdW4gbiAtPiBiaW5fc2l6ZV9pbnQ2NCAoSW50NjQub2ZfbmF0aXZlaW50IG4pXG4gIGVsc2UgZnVuIG4gLT4gYmluX3NpemVfaW50MzIgKE5hdGl2ZWludC50b19pbnQzMiBuKVxuOztcblxubGV0IGJpbl9zaXplX3JlZiBiaW5fc2l6ZV9lbCByID0gYmluX3NpemVfZWwgIXJcbmxldCBiaW5fc2l6ZV9sYXp5X3QgYmluX3NpemVfZWwgbHYgPSBiaW5fc2l6ZV9lbCAoTGF6eS5mb3JjZSBsdilcbmxldCBiaW5fc2l6ZV9sYXp5ID0gYmluX3NpemVfbGF6eV90XG5cbmxldCBiaW5fc2l6ZV9vcHRpb24gYmluX3NpemVfZWwgPSBmdW5jdGlvblxuICB8IE5vbmUgLT4gMVxuICB8IFNvbWUgdiAtPiAxICsgYmluX3NpemVfZWwgdlxuOztcblxubGV0IGJpbl9zaXplX3BhaXIgYmluX3NpemVfYSBiaW5fc2l6ZV9iIChhLCBiKSA9IGJpbl9zaXplX2EgYSArIGJpbl9zaXplX2IgYlxuXG5sZXQgYmluX3NpemVfdHJpcGxlIGJpbl9zaXplX2EgYmluX3NpemVfYiBiaW5fc2l6ZV9jIChhLCBiLCBjKSA9XG4gIGJpbl9zaXplX2EgYSArIGJpbl9zaXplX2IgYiArIGJpbl9zaXplX2MgY1xuOztcblxubGV0IGJpbl9zaXplX2xpc3QgPVxuICBsZXQgcmVjIGxvb3AgfmJpbl9zaXplX2VsIH5zaXplX2FjYyB+bGVuX2FjYyBsc3QgPVxuICAgIG1hdGNoIGxzdCB3aXRoXG4gICAgfCBbXSAtPiBzaXplX2FjYyArIGJpbl9zaXplX25hdDAgKE5hdDAudW5zYWZlX29mX2ludCBsZW5fYWNjKVxuICAgIHwgaGQgOjogdGwgLT5cbiAgICAgIGxvb3AgfmJpbl9zaXplX2VsIH5zaXplX2FjYzooc2l6ZV9hY2MgKyBiaW5fc2l6ZV9lbCBoZCkgfmxlbl9hY2M6KGxlbl9hY2MgKyAxKSB0bFxuICBpblxuICBmdW4gYmluX3NpemVfZWwgbHN0IC0+IGxvb3AgfmJpbl9zaXplX2VsIH5zaXplX2FjYzowIH5sZW5fYWNjOjAgbHN0XG47O1xuXG5sZXQgYmluX3NpemVfbGVuIGxlbiA9XG4gIGxldCBwbGVuID0gTmF0MC51bnNhZmVfb2ZfaW50IGxlbiBpblxuICBiaW5fc2l6ZV9uYXQwIHBsZW5cbjs7XG5cbmxldCBiaW5fc2l6ZV9mbG9hdGFycmF5IGFyID1cbiAgbGV0IGxlbiA9IEZsb2F0LkFycmF5Lmxlbmd0aCBhciBpblxuICBiaW5fc2l6ZV9sZW4gbGVuICsgKDggKiBsZW4pXG47O1xuXG5sZXQgYmluX3NpemVfZmxvYXRfYXJyYXkgYXIgPVxuICBsZXQgbGVuID0gQXJyYXkubGVuZ3RoIGFyIGluXG4gIGJpbl9zaXplX2xlbiBsZW4gKyAoOCAqIGxlbilcbjs7XG5cbmxldCBiaW5fc2l6ZV9hcnJheV9sb29wIGJpbl9zaXplX2VsIGFyIH50b3RhbF9sZW4gfm4gPVxuICBsZXQgdG90YWxfbGVuX3JlZiA9IHJlZiB0b3RhbF9sZW4gaW5cbiAgZm9yIGkgPSAwIHRvIG4gLSAxIGRvXG4gICAgbGV0IGVsID0gQXJyYXkudW5zYWZlX2dldCBhciBpIGluXG4gICAgdG90YWxfbGVuX3JlZiA6PSAhdG90YWxfbGVuX3JlZiArIGJpbl9zaXplX2VsIGVsXG4gIGRvbmU7XG4gICF0b3RhbF9sZW5fcmVmXG47O1xuXG5sZXQgYmluX3NpemVfYXJyYXkgKHR5cGUgYSkgYmluX3NpemVfZWwgYXIgPVxuICBpZiAoT2JqLm1hZ2ljIChiaW5fc2l6ZV9lbCA6IGEgc2l6ZXIpIDogZmxvYXQgc2l6ZXIpID09IGJpbl9zaXplX2Zsb2F0XG4gIHRoZW4gYmluX3NpemVfZmxvYXRfYXJyYXkgKE9iai5tYWdpYyAoYXIgOiBhIGFycmF5KSA6IGZsb2F0IGFycmF5KVxuICBlbHNlIChcbiAgICBsZXQgbiA9IEFycmF5Lmxlbmd0aCBhciBpblxuICAgIGxldCB0b3RhbF9sZW4gPSBiaW5fc2l6ZV9sZW4gbiBpblxuICAgIGJpbl9zaXplX2FycmF5X2xvb3AgYmluX3NpemVfZWwgYXIgfnRvdGFsX2xlbiB+bilcbjs7XG5cbmxldCBiaW5fc2l6ZV9oYXNodGJsIGJpbl9zaXplX2tleSBiaW5fc2l6ZV92YWwgaHRibCA9XG4gIGxldCBjbnRfcmVmID0gcmVmIDAgaW5cbiAgbGV0IGNvbGxfaHRibCBrIHYgdG90YWxfbGVuID1cbiAgICBpbmNyIGNudF9yZWY7XG4gICAgdG90YWxfbGVuICsgYmluX3NpemVfa2V5IGsgKyBiaW5fc2l6ZV92YWwgdlxuICBpblxuICBsZXQgbGVuID0gSGFzaHRibC5sZW5ndGggaHRibCBpblxuICBsZXQgdG90YWxfbGVuID0gSGFzaHRibC5mb2xkIGNvbGxfaHRibCBodGJsIChiaW5fc2l6ZV9sZW4gbGVuKSBpblxuICBpZiAhY250X3JlZiA8PiBsZW4gdGhlbiByYWlzZV9jb25jdXJyZW50X21vZGlmaWNhdGlvbiBcImJpbl9zaXplX2hhc2h0YmxcIjtcbiAgdG90YWxfbGVuXG47O1xuXG5sZXQgYmluX3NpemVfZ2VuX3ZlYyB2ZWMgbXVsdGlwbGllciA9XG4gIGxldCBsZW4gPSBBcnJheTEuZGltIHZlYyBpblxuICBiaW5fc2l6ZV9sZW4gbGVuICsgKG11bHRpcGxpZXIgKiBsZW4pXG47O1xuXG5sZXQgYmluX3NpemVfZmxvYXQzMl92ZWMgdmVjID0gYmluX3NpemVfZ2VuX3ZlYyB2ZWMgNFxubGV0IGJpbl9zaXplX2Zsb2F0NjRfdmVjIHZlYyA9IGJpbl9zaXplX2dlbl92ZWMgdmVjIDhcbmxldCBiaW5fc2l6ZV92ZWMgPSBiaW5fc2l6ZV9mbG9hdDY0X3ZlY1xuXG5sZXQgYmluX3NpemVfZ2VuX21hdCBtYXQgbXVsdGlwbGllciA9XG4gIGxldCBkaW0xID0gQXJyYXkyLmRpbTEgbWF0IGluXG4gIGxldCBkaW0yID0gQXJyYXkyLmRpbTIgbWF0IGluXG4gIGxldCBzaXplID0gZGltMSAqIGRpbTIgaW5cbiAgYmluX3NpemVfbGVuIGRpbTEgKyBiaW5fc2l6ZV9sZW4gZGltMiArIChtdWx0aXBsaWVyICogc2l6ZSlcbjs7XG5cbmxldCBiaW5fc2l6ZV9mbG9hdDMyX21hdCBtYXQgPSBiaW5fc2l6ZV9nZW5fbWF0IG1hdCA0XG5sZXQgYmluX3NpemVfZmxvYXQ2NF9tYXQgbWF0ID0gYmluX3NpemVfZ2VuX21hdCBtYXQgOFxubGV0IGJpbl9zaXplX21hdCA9IGJpbl9zaXplX2Zsb2F0NjRfbWF0XG5sZXQgYmluX3NpemVfYmlnc3RyaW5nIGJ1ZiA9IGJpbl9zaXplX2dlbl92ZWMgYnVmIDFcbmxldCBiaW5fc2l6ZV92YXJpYW50X2ludCBfID0gNFxubGV0IGJpbl9zaXplX2ludF84Yml0IF8gPSAxXG5sZXQgYmluX3NpemVfaW50XzE2Yml0IF8gPSAyXG5sZXQgYmluX3NpemVfaW50XzMyYml0IF8gPSA0XG5sZXQgYmluX3NpemVfaW50XzY0Yml0IF8gPSA4XG5sZXQgYmluX3NpemVfaW50NjRfYml0cyBfID0gOFxubGV0IGJpbl9zaXplX25ldHdvcmsxNl9pbnQgXyA9IDJcbmxldCBiaW5fc2l6ZV9uZXR3b3JrMzJfaW50IF8gPSA0XG5sZXQgYmluX3NpemVfbmV0d29yazMyX2ludDMyIF8gPSA0XG5sZXQgYmluX3NpemVfbmV0d29yazY0X2ludCBfID0gOFxubGV0IGJpbl9zaXplX25ldHdvcms2NF9pbnQ2NCBfID0gOFxuXG5sZXQgYmluX3NpemVfYXJyYXlfbm9fbGVuZ3RoIGJpbl9zaXplX2VsIGFyID1cbiAgYmluX3NpemVfYXJyYXlfbG9vcCBiaW5fc2l6ZV9lbCBhciB+dG90YWxfbGVuOjAgfm46KEFycmF5Lmxlbmd0aCBhcilcbjs7XG4iLCIoKiBUcF9jbGFzczogc2l6ZXJzLCB3cml0ZXJzLCBhbmQgcmVhZGVycyBpbiByZWNvcmRzICopXG5cbnR5cGUgJ2Egd3JpdGVyID1cbiAgeyBzaXplIDogJ2EgU2l6ZS5zaXplclxuICA7IHdyaXRlIDogJ2EgV3JpdGUud3JpdGVyXG4gIH1cblxudHlwZSAnYSByZWFkZXIgPVxuICB7IHJlYWQgOiAnYSBSZWFkLnJlYWRlclxuICA7IHZ0YWdfcmVhZCA6IChpbnQgLT4gJ2EpIFJlYWQucmVhZGVyXG4gIH1cblxudHlwZSAnYSB0ID1cbiAgeyBzaGFwZSA6IFNoYXBlLnRcbiAgOyB3cml0ZXIgOiAnYSB3cml0ZXJcbiAgOyByZWFkZXIgOiAnYSByZWFkZXJcbiAgfVxuXG50eXBlICdhIHdyaXRlcjAgPSAnYSB3cml0ZXJcbnR5cGUgJ2EgcmVhZGVyMCA9ICdhIHJlYWRlclxudHlwZSAnYSB0MCA9ICdhIHRcblxubW9kdWxlIFMxID0gc3RydWN0XG4gIHR5cGUgKCdhLCAnYikgd3JpdGVyID0gJ2Egd3JpdGVyMCAtPiAnYiB3cml0ZXIwXG4gIHR5cGUgKCdhLCAnYikgcmVhZGVyID0gJ2EgcmVhZGVyMCAtPiAnYiByZWFkZXIwXG4gIHR5cGUgKCdhLCAnYikgdCA9ICdhIHQwIC0+ICdiIHQwXG5lbmRcblxubW9kdWxlIFMyID0gc3RydWN0XG4gIHR5cGUgKCdhLCAnYiwgJ2MpIHdyaXRlciA9ICdhIHdyaXRlcjAgLT4gKCdiLCAnYykgUzEud3JpdGVyXG4gIHR5cGUgKCdhLCAnYiwgJ2MpIHJlYWRlciA9ICdhIHJlYWRlcjAgLT4gKCdiLCAnYykgUzEucmVhZGVyXG4gIHR5cGUgKCdhLCAnYiwgJ2MpIHQgPSAnYSB0MCAtPiAoJ2IsICdjKSBTMS50XG5lbmRcblxubW9kdWxlIFMzID0gc3RydWN0XG4gIHR5cGUgKCdhLCAnYiwgJ2MsICdkKSB3cml0ZXIgPSAnYSB3cml0ZXIwIC0+ICgnYiwgJ2MsICdkKSBTMi53cml0ZXJcbiAgdHlwZSAoJ2EsICdiLCAnYywgJ2QpIHJlYWRlciA9ICdhIHJlYWRlcjAgLT4gKCdiLCAnYywgJ2QpIFMyLnJlYWRlclxuICB0eXBlICgnYSwgJ2IsICdjLCAnZCkgdCA9ICdhIHQwIC0+ICgnYiwgJ2MsICdkKSBTMi50XG5lbmRcblxubGV0IHZhcmlhbnRfd3JvbmdfdHlwZSBuYW1lIF9idWYgfnBvc19yZWYgX3ggPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIG5hbWUgIXBvc19yZWZcbjs7XG5cbigqJCBvcGVuIEJpbl9wcm90X2NpbmFwcy5TdHIgKilcbigqJCBta19iYXNlIFwidW5pdFwiICopXG5sZXQgYmluX3dyaXRlcl91bml0ID0geyBzaXplID0gU2l6ZS5iaW5fc2l6ZV91bml0OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV91bml0IH1cbmxldCBiaW5fcmVhZGVyX3VuaXQgPSB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX3VuaXQ7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcInVuaXRcIiB9XG5sZXQgYmluX3NoYXBlX3VuaXQgPSBTaGFwZS5iaW5fc2hhcGVfdW5pdFxuXG5sZXQgYmluX3VuaXQgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX3VuaXQ7IHdyaXRlciA9IGJpbl93cml0ZXJfdW5pdDsgcmVhZGVyID0gYmluX3JlYWRlcl91bml0IH1cbjs7XG5cbigqJCBta19iYXNlIFwiYm9vbFwiICopXG5sZXQgYmluX3dyaXRlcl9ib29sID0geyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9ib29sOyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9ib29sIH1cbmxldCBiaW5fcmVhZGVyX2Jvb2wgPSB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX2Jvb2w7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcImJvb2xcIiB9XG5sZXQgYmluX3NoYXBlX2Jvb2wgPSBTaGFwZS5iaW5fc2hhcGVfYm9vbFxuXG5sZXQgYmluX2Jvb2wgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX2Jvb2w7IHdyaXRlciA9IGJpbl93cml0ZXJfYm9vbDsgcmVhZGVyID0gYmluX3JlYWRlcl9ib29sIH1cbjs7XG5cbigqJCBta19iYXNlIFwic3RyaW5nXCIgKilcbmxldCBiaW5fd3JpdGVyX3N0cmluZyA9IHsgc2l6ZSA9IFNpemUuYmluX3NpemVfc3RyaW5nOyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9zdHJpbmcgfVxuXG5sZXQgYmluX3JlYWRlcl9zdHJpbmcgPVxuICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX3N0cmluZzsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwic3RyaW5nXCIgfVxuOztcblxubGV0IGJpbl9zaGFwZV9zdHJpbmcgPSBTaGFwZS5iaW5fc2hhcGVfc3RyaW5nXG5cbmxldCBiaW5fc3RyaW5nID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9zdHJpbmc7IHdyaXRlciA9IGJpbl93cml0ZXJfc3RyaW5nOyByZWFkZXIgPSBiaW5fcmVhZGVyX3N0cmluZyB9XG47O1xuXG4oKiQgbWtfYmFzZSBcImJ5dGVzXCIgKilcbmxldCBiaW5fd3JpdGVyX2J5dGVzID0geyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9ieXRlczsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfYnl0ZXMgfVxuXG5sZXQgYmluX3JlYWRlcl9ieXRlcyA9XG4gIHsgcmVhZCA9IFJlYWQuYmluX3JlYWRfYnl0ZXM7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcImJ5dGVzXCIgfVxuOztcblxubGV0IGJpbl9zaGFwZV9ieXRlcyA9IFNoYXBlLmJpbl9zaGFwZV9ieXRlc1xuXG5sZXQgYmluX2J5dGVzID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9ieXRlczsgd3JpdGVyID0gYmluX3dyaXRlcl9ieXRlczsgcmVhZGVyID0gYmluX3JlYWRlcl9ieXRlcyB9XG47O1xuXG4oKiQgbWtfYmFzZSBcImNoYXJcIiAqKVxubGV0IGJpbl93cml0ZXJfY2hhciA9IHsgc2l6ZSA9IFNpemUuYmluX3NpemVfY2hhcjsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfY2hhciB9XG5sZXQgYmluX3JlYWRlcl9jaGFyID0geyByZWFkID0gUmVhZC5iaW5fcmVhZF9jaGFyOyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJjaGFyXCIgfVxubGV0IGJpbl9zaGFwZV9jaGFyID0gU2hhcGUuYmluX3NoYXBlX2NoYXJcblxubGV0IGJpbl9jaGFyID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9jaGFyOyB3cml0ZXIgPSBiaW5fd3JpdGVyX2NoYXI7IHJlYWRlciA9IGJpbl9yZWFkZXJfY2hhciB9XG47O1xuXG4oKiQgbWtfYmFzZSBcImludFwiICopXG5sZXQgYmluX3dyaXRlcl9pbnQgPSB7IHNpemUgPSBTaXplLmJpbl9zaXplX2ludDsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfaW50IH1cbmxldCBiaW5fcmVhZGVyX2ludCA9IHsgcmVhZCA9IFJlYWQuYmluX3JlYWRfaW50OyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJpbnRcIiB9XG5sZXQgYmluX3NoYXBlX2ludCA9IFNoYXBlLmJpbl9zaGFwZV9pbnRcbmxldCBiaW5faW50ID0geyBzaGFwZSA9IGJpbl9zaGFwZV9pbnQ7IHdyaXRlciA9IGJpbl93cml0ZXJfaW50OyByZWFkZXIgPSBiaW5fcmVhZGVyX2ludCB9XG5cbigqJCBta19iYXNlIFwiZmxvYXRcIiAqKVxubGV0IGJpbl93cml0ZXJfZmxvYXQgPSB7IHNpemUgPSBTaXplLmJpbl9zaXplX2Zsb2F0OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9mbG9hdCB9XG5cbmxldCBiaW5fcmVhZGVyX2Zsb2F0ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9mbG9hdDsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwiZmxvYXRcIiB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2Zsb2F0ID0gU2hhcGUuYmluX3NoYXBlX2Zsb2F0XG5cbmxldCBiaW5fZmxvYXQgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX2Zsb2F0OyB3cml0ZXIgPSBiaW5fd3JpdGVyX2Zsb2F0OyByZWFkZXIgPSBiaW5fcmVhZGVyX2Zsb2F0IH1cbjs7XG5cbigqJCBta19iYXNlIFwiaW50MzJcIiAqKVxubGV0IGJpbl93cml0ZXJfaW50MzIgPSB7IHNpemUgPSBTaXplLmJpbl9zaXplX2ludDMyOyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9pbnQzMiB9XG5cbmxldCBiaW5fcmVhZGVyX2ludDMyID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9pbnQzMjsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwiaW50MzJcIiB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2ludDMyID0gU2hhcGUuYmluX3NoYXBlX2ludDMyXG5cbmxldCBiaW5faW50MzIgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX2ludDMyOyB3cml0ZXIgPSBiaW5fd3JpdGVyX2ludDMyOyByZWFkZXIgPSBiaW5fcmVhZGVyX2ludDMyIH1cbjs7XG5cbigqJCBta19iYXNlIFwiaW50NjRcIiAqKVxubGV0IGJpbl93cml0ZXJfaW50NjQgPSB7IHNpemUgPSBTaXplLmJpbl9zaXplX2ludDY0OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9pbnQ2NCB9XG5cbmxldCBiaW5fcmVhZGVyX2ludDY0ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9pbnQ2NDsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwiaW50NjRcIiB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2ludDY0ID0gU2hhcGUuYmluX3NoYXBlX2ludDY0XG5cbmxldCBiaW5faW50NjQgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX2ludDY0OyB3cml0ZXIgPSBiaW5fd3JpdGVyX2ludDY0OyByZWFkZXIgPSBiaW5fcmVhZGVyX2ludDY0IH1cbjs7XG5cbigqJCBta19iYXNlIFwibmF0aXZlaW50XCIgKilcbmxldCBiaW5fd3JpdGVyX25hdGl2ZWludCA9XG4gIHsgc2l6ZSA9IFNpemUuYmluX3NpemVfbmF0aXZlaW50OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9uYXRpdmVpbnQgfVxuOztcblxubGV0IGJpbl9yZWFkZXJfbmF0aXZlaW50ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9uYXRpdmVpbnQ7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcIm5hdGl2ZWludFwiIH1cbjs7XG5cbmxldCBiaW5fc2hhcGVfbmF0aXZlaW50ID0gU2hhcGUuYmluX3NoYXBlX25hdGl2ZWludFxuXG5sZXQgYmluX25hdGl2ZWludCA9XG4gIHsgc2hhcGUgPSBiaW5fc2hhcGVfbmF0aXZlaW50XG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9uYXRpdmVpbnRcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX25hdGl2ZWludFxuICB9XG47O1xuXG4oKiQgbWtfYmFzZSBcIm5hdDBcIiAqKVxubGV0IGJpbl93cml0ZXJfbmF0MCA9IHsgc2l6ZSA9IFNpemUuYmluX3NpemVfbmF0MDsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfbmF0MCB9XG5sZXQgYmluX3JlYWRlcl9uYXQwID0geyByZWFkID0gUmVhZC5iaW5fcmVhZF9uYXQwOyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJuYXQwXCIgfVxubGV0IGJpbl9zaGFwZV9uYXQwID0gU2hhcGUuYmluX3NoYXBlX25hdDBcblxubGV0IGJpbl9uYXQwID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9uYXQwOyB3cml0ZXIgPSBiaW5fd3JpdGVyX25hdDA7IHJlYWRlciA9IGJpbl9yZWFkZXJfbmF0MCB9XG47O1xuXG4oKiQgbWtfYmFzZTEgXCJyZWZcIiAqKVxubGV0IGJpbl93cml0ZXJfcmVmIGJpbl93cml0ZXJfZWwgPVxuICB7IHNpemUgPSAoZnVuIHYgLT4gU2l6ZS5iaW5fc2l6ZV9yZWYgYmluX3dyaXRlcl9lbC5zaXplIHYpXG4gIDsgd3JpdGUgPSAoZnVuIGJ1ZiB+cG9zIHYgLT4gV3JpdGUuYmluX3dyaXRlX3JlZiBiaW5fd3JpdGVyX2VsLndyaXRlIGJ1ZiB+cG9zIHYpXG4gIH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX3JlZiBiaW5fcmVhZGVyX2VsID1cbiAgeyByZWFkID0gKGZ1biBidWYgfnBvc19yZWYgLT4gUmVhZC5iaW5fcmVhZF9yZWYgYmluX3JlYWRlcl9lbC5yZWFkIGJ1ZiB+cG9zX3JlZilcbiAgOyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJyZWZcIlxuICB9XG47O1xuXG5sZXQgYmluX3NoYXBlX3JlZiB4MSA9IFNoYXBlLmJpbl9zaGFwZV9yZWYgeDFcblxubGV0IGJpbl9yZWYgYmluX2VsID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9yZWYgYmluX2VsLnNoYXBlXG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9yZWYgYmluX2VsLndyaXRlclxuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfcmVmIGJpbl9lbC5yZWFkZXJcbiAgfVxuOztcblxuKCokIG1rX2Jhc2UxIFwibGF6eVwiICopXG5sZXQgYmluX3dyaXRlcl9sYXp5IGJpbl93cml0ZXJfZWwgPVxuICB7IHNpemUgPSAoZnVuIHYgLT4gU2l6ZS5iaW5fc2l6ZV9sYXp5IGJpbl93cml0ZXJfZWwuc2l6ZSB2KVxuICA7IHdyaXRlID0gKGZ1biBidWYgfnBvcyB2IC0+IFdyaXRlLmJpbl93cml0ZV9sYXp5IGJpbl93cml0ZXJfZWwud3JpdGUgYnVmIH5wb3MgdilcbiAgfVxuOztcblxubGV0IGJpbl9yZWFkZXJfbGF6eSBiaW5fcmVhZGVyX2VsID1cbiAgeyByZWFkID0gKGZ1biBidWYgfnBvc19yZWYgLT4gUmVhZC5iaW5fcmVhZF9sYXp5IGJpbl9yZWFkZXJfZWwucmVhZCBidWYgfnBvc19yZWYpXG4gIDsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwibGF6eVwiXG4gIH1cbjs7XG5cbmxldCBiaW5fc2hhcGVfbGF6eSB4MSA9IFNoYXBlLmJpbl9zaGFwZV9sYXp5IHgxXG5cbmxldCBiaW5fbGF6eSBiaW5fZWwgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX2xhenkgYmluX2VsLnNoYXBlXG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9sYXp5IGJpbl9lbC53cml0ZXJcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX2xhenkgYmluX2VsLnJlYWRlclxuICB9XG47O1xuXG4oKiQgbWtfYmFzZTEgXCJvcHRpb25cIiAqKVxubGV0IGJpbl93cml0ZXJfb3B0aW9uIGJpbl93cml0ZXJfZWwgPVxuICB7IHNpemUgPSAoZnVuIHYgLT4gU2l6ZS5iaW5fc2l6ZV9vcHRpb24gYmluX3dyaXRlcl9lbC5zaXplIHYpXG4gIDsgd3JpdGUgPSAoZnVuIGJ1ZiB+cG9zIHYgLT4gV3JpdGUuYmluX3dyaXRlX29wdGlvbiBiaW5fd3JpdGVyX2VsLndyaXRlIGJ1ZiB+cG9zIHYpXG4gIH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX29wdGlvbiBiaW5fcmVhZGVyX2VsID1cbiAgeyByZWFkID0gKGZ1biBidWYgfnBvc19yZWYgLT4gUmVhZC5iaW5fcmVhZF9vcHRpb24gYmluX3JlYWRlcl9lbC5yZWFkIGJ1ZiB+cG9zX3JlZilcbiAgOyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJvcHRpb25cIlxuICB9XG47O1xuXG5sZXQgYmluX3NoYXBlX29wdGlvbiB4MSA9IFNoYXBlLmJpbl9zaGFwZV9vcHRpb24geDFcblxubGV0IGJpbl9vcHRpb24gYmluX2VsID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9vcHRpb24gYmluX2VsLnNoYXBlXG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9vcHRpb24gYmluX2VsLndyaXRlclxuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfb3B0aW9uIGJpbl9lbC5yZWFkZXJcbiAgfVxuOztcblxuKCokIG1rX2Jhc2UyIFwicGFpclwiICopXG5sZXQgYmluX3dyaXRlcl9wYWlyIGJpbl93cml0ZXJfZWwxIGJpbl93cml0ZXJfZWwyID1cbiAgeyBzaXplID0gKGZ1biB2IC0+IFNpemUuYmluX3NpemVfcGFpciBiaW5fd3JpdGVyX2VsMS5zaXplIGJpbl93cml0ZXJfZWwyLnNpemUgdilcbiAgOyB3cml0ZSA9XG4gICAgICAoZnVuIGJ1ZiB+cG9zIHYgLT5cbiAgICAgICAgIFdyaXRlLmJpbl93cml0ZV9wYWlyIGJpbl93cml0ZXJfZWwxLndyaXRlIGJpbl93cml0ZXJfZWwyLndyaXRlIGJ1ZiB+cG9zIHYpXG4gIH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX3BhaXIgYmluX3JlYWRlcl9lbDEgYmluX3JlYWRlcl9lbDIgPVxuICB7IHJlYWQgPVxuICAgICAgKGZ1biBidWYgfnBvc19yZWYgLT5cbiAgICAgICAgIFJlYWQuYmluX3JlYWRfcGFpciBiaW5fcmVhZGVyX2VsMS5yZWFkIGJpbl9yZWFkZXJfZWwyLnJlYWQgYnVmIH5wb3NfcmVmKVxuICA7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcInBhaXJcIlxuICB9XG47O1xuXG5sZXQgYmluX3NoYXBlX3BhaXIgeDEgeDIgPSBTaGFwZS5iaW5fc2hhcGVfcGFpciB4MSB4MlxuXG5sZXQgYmluX3BhaXIgYmluX2VsMSBiaW5fZWwyID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9wYWlyIGJpbl9lbDEuc2hhcGUgYmluX2VsMi5zaGFwZVxuICA7IHdyaXRlciA9IGJpbl93cml0ZXJfcGFpciBiaW5fZWwxLndyaXRlciBiaW5fZWwyLndyaXRlclxuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfcGFpciBiaW5fZWwxLnJlYWRlciBiaW5fZWwyLnJlYWRlclxuICB9XG47O1xuXG4oKiQgbWtfYmFzZTMgXCJ0cmlwbGVcIiAqKVxubGV0IGJpbl93cml0ZXJfdHJpcGxlIGJpbl93cml0ZXJfZWwxIGJpbl93cml0ZXJfZWwyIGJpbl93cml0ZXJfZWwzID1cbiAgeyBzaXplID1cbiAgICAgIChmdW4gdiAtPlxuICAgICAgICAgU2l6ZS5iaW5fc2l6ZV90cmlwbGUgYmluX3dyaXRlcl9lbDEuc2l6ZSBiaW5fd3JpdGVyX2VsMi5zaXplIGJpbl93cml0ZXJfZWwzLnNpemUgdilcbiAgOyB3cml0ZSA9XG4gICAgICAoZnVuIGJ1ZiB+cG9zIHYgLT5cbiAgICAgICAgIFdyaXRlLmJpbl93cml0ZV90cmlwbGVcbiAgICAgICAgICAgYmluX3dyaXRlcl9lbDEud3JpdGVcbiAgICAgICAgICAgYmluX3dyaXRlcl9lbDIud3JpdGVcbiAgICAgICAgICAgYmluX3dyaXRlcl9lbDMud3JpdGVcbiAgICAgICAgICAgYnVmXG4gICAgICAgICAgIH5wb3NcbiAgICAgICAgICAgdilcbiAgfVxuOztcblxubGV0IGJpbl9yZWFkZXJfdHJpcGxlIGJpbl9yZWFkZXJfZWwxIGJpbl9yZWFkZXJfZWwyIGJpbl9yZWFkZXJfZWwzID1cbiAgeyByZWFkID1cbiAgICAgIChmdW4gYnVmIH5wb3NfcmVmIC0+XG4gICAgICAgICBSZWFkLmJpbl9yZWFkX3RyaXBsZVxuICAgICAgICAgICBiaW5fcmVhZGVyX2VsMS5yZWFkXG4gICAgICAgICAgIGJpbl9yZWFkZXJfZWwyLnJlYWRcbiAgICAgICAgICAgYmluX3JlYWRlcl9lbDMucmVhZFxuICAgICAgICAgICBidWZcbiAgICAgICAgICAgfnBvc19yZWYpXG4gIDsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwidHJpcGxlXCJcbiAgfVxuOztcblxubGV0IGJpbl9zaGFwZV90cmlwbGUgeDEgeDIgeDMgPSBTaGFwZS5iaW5fc2hhcGVfdHJpcGxlIHgxIHgyIHgzXG5cbmxldCBiaW5fdHJpcGxlIGJpbl9lbDEgYmluX2VsMiBiaW5fZWwzID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV90cmlwbGUgYmluX2VsMS5zaGFwZSBiaW5fZWwyLnNoYXBlIGJpbl9lbDMuc2hhcGVcbiAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX3RyaXBsZSBiaW5fZWwxLndyaXRlciBiaW5fZWwyLndyaXRlciBiaW5fZWwzLndyaXRlclxuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfdHJpcGxlIGJpbl9lbDEucmVhZGVyIGJpbl9lbDIucmVhZGVyIGJpbl9lbDMucmVhZGVyXG4gIH1cbjs7XG5cbigqJCBta19iYXNlMSBcImxpc3RcIiAqKVxubGV0IGJpbl93cml0ZXJfbGlzdCBiaW5fd3JpdGVyX2VsID1cbiAgeyBzaXplID0gKGZ1biB2IC0+IFNpemUuYmluX3NpemVfbGlzdCBiaW5fd3JpdGVyX2VsLnNpemUgdilcbiAgOyB3cml0ZSA9IChmdW4gYnVmIH5wb3MgdiAtPiBXcml0ZS5iaW5fd3JpdGVfbGlzdCBiaW5fd3JpdGVyX2VsLndyaXRlIGJ1ZiB+cG9zIHYpXG4gIH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX2xpc3QgYmluX3JlYWRlcl9lbCA9XG4gIHsgcmVhZCA9IChmdW4gYnVmIH5wb3NfcmVmIC0+IFJlYWQuYmluX3JlYWRfbGlzdCBiaW5fcmVhZGVyX2VsLnJlYWQgYnVmIH5wb3NfcmVmKVxuICA7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcImxpc3RcIlxuICB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2xpc3QgeDEgPSBTaGFwZS5iaW5fc2hhcGVfbGlzdCB4MVxuXG5sZXQgYmluX2xpc3QgYmluX2VsID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9saXN0IGJpbl9lbC5zaGFwZVxuICA7IHdyaXRlciA9IGJpbl93cml0ZXJfbGlzdCBiaW5fZWwud3JpdGVyXG4gIDsgcmVhZGVyID0gYmluX3JlYWRlcl9saXN0IGJpbl9lbC5yZWFkZXJcbiAgfVxuOztcblxuKCokIG1rX2Jhc2UxIFwiYXJyYXlcIiAqKVxubGV0IGJpbl93cml0ZXJfYXJyYXkgYmluX3dyaXRlcl9lbCA9XG4gIHsgc2l6ZSA9IChmdW4gdiAtPiBTaXplLmJpbl9zaXplX2FycmF5IGJpbl93cml0ZXJfZWwuc2l6ZSB2KVxuICA7IHdyaXRlID0gKGZ1biBidWYgfnBvcyB2IC0+IFdyaXRlLmJpbl93cml0ZV9hcnJheSBiaW5fd3JpdGVyX2VsLndyaXRlIGJ1ZiB+cG9zIHYpXG4gIH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX2FycmF5IGJpbl9yZWFkZXJfZWwgPVxuICB7IHJlYWQgPSAoZnVuIGJ1ZiB+cG9zX3JlZiAtPiBSZWFkLmJpbl9yZWFkX2FycmF5IGJpbl9yZWFkZXJfZWwucmVhZCBidWYgfnBvc19yZWYpXG4gIDsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwiYXJyYXlcIlxuICB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2FycmF5IHgxID0gU2hhcGUuYmluX3NoYXBlX2FycmF5IHgxXG5cbmxldCBiaW5fYXJyYXkgYmluX2VsID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9hcnJheSBiaW5fZWwuc2hhcGVcbiAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX2FycmF5IGJpbl9lbC53cml0ZXJcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX2FycmF5IGJpbl9lbC5yZWFkZXJcbiAgfVxuOztcblxuKCokIG1rX2Jhc2UyIFwiaGFzaHRibFwiICopXG5sZXQgYmluX3dyaXRlcl9oYXNodGJsIGJpbl93cml0ZXJfZWwxIGJpbl93cml0ZXJfZWwyID1cbiAgeyBzaXplID0gKGZ1biB2IC0+IFNpemUuYmluX3NpemVfaGFzaHRibCBiaW5fd3JpdGVyX2VsMS5zaXplIGJpbl93cml0ZXJfZWwyLnNpemUgdilcbiAgOyB3cml0ZSA9XG4gICAgICAoZnVuIGJ1ZiB+cG9zIHYgLT5cbiAgICAgICAgIFdyaXRlLmJpbl93cml0ZV9oYXNodGJsIGJpbl93cml0ZXJfZWwxLndyaXRlIGJpbl93cml0ZXJfZWwyLndyaXRlIGJ1ZiB+cG9zIHYpXG4gIH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX2hhc2h0YmwgYmluX3JlYWRlcl9lbDEgYmluX3JlYWRlcl9lbDIgPVxuICB7IHJlYWQgPVxuICAgICAgKGZ1biBidWYgfnBvc19yZWYgLT5cbiAgICAgICAgIFJlYWQuYmluX3JlYWRfaGFzaHRibCBiaW5fcmVhZGVyX2VsMS5yZWFkIGJpbl9yZWFkZXJfZWwyLnJlYWQgYnVmIH5wb3NfcmVmKVxuICA7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcImhhc2h0YmxcIlxuICB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2hhc2h0YmwgeDEgeDIgPSBTaGFwZS5iaW5fc2hhcGVfaGFzaHRibCB4MSB4MlxuXG5sZXQgYmluX2hhc2h0YmwgYmluX2VsMSBiaW5fZWwyID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9oYXNodGJsIGJpbl9lbDEuc2hhcGUgYmluX2VsMi5zaGFwZVxuICA7IHdyaXRlciA9IGJpbl93cml0ZXJfaGFzaHRibCBiaW5fZWwxLndyaXRlciBiaW5fZWwyLndyaXRlclxuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfaGFzaHRibCBiaW5fZWwxLnJlYWRlciBiaW5fZWwyLnJlYWRlclxuICB9XG47O1xuXG4oKiQgbWtfYmFzZSBcImZsb2F0MzJfdmVjXCIgKilcbmxldCBiaW5fd3JpdGVyX2Zsb2F0MzJfdmVjID1cbiAgeyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9mbG9hdDMyX3ZlYzsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfZmxvYXQzMl92ZWMgfVxuOztcblxubGV0IGJpbl9yZWFkZXJfZmxvYXQzMl92ZWMgPVxuICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX2Zsb2F0MzJfdmVjOyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJmbG9hdDMyX3ZlY1wiIH1cbjs7XG5cbmxldCBiaW5fc2hhcGVfZmxvYXQzMl92ZWMgPSBTaGFwZS5iaW5fc2hhcGVfZmxvYXQzMl92ZWNcblxubGV0IGJpbl9mbG9hdDMyX3ZlYyA9XG4gIHsgc2hhcGUgPSBiaW5fc2hhcGVfZmxvYXQzMl92ZWNcbiAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX2Zsb2F0MzJfdmVjXG4gIDsgcmVhZGVyID0gYmluX3JlYWRlcl9mbG9hdDMyX3ZlY1xuICB9XG47O1xuXG4oKiQgbWtfYmFzZSBcImZsb2F0NjRfdmVjXCIgKilcbmxldCBiaW5fd3JpdGVyX2Zsb2F0NjRfdmVjID1cbiAgeyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9mbG9hdDY0X3ZlYzsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfZmxvYXQ2NF92ZWMgfVxuOztcblxubGV0IGJpbl9yZWFkZXJfZmxvYXQ2NF92ZWMgPVxuICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX2Zsb2F0NjRfdmVjOyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJmbG9hdDY0X3ZlY1wiIH1cbjs7XG5cbmxldCBiaW5fc2hhcGVfZmxvYXQ2NF92ZWMgPSBTaGFwZS5iaW5fc2hhcGVfZmxvYXQ2NF92ZWNcblxubGV0IGJpbl9mbG9hdDY0X3ZlYyA9XG4gIHsgc2hhcGUgPSBiaW5fc2hhcGVfZmxvYXQ2NF92ZWNcbiAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX2Zsb2F0NjRfdmVjXG4gIDsgcmVhZGVyID0gYmluX3JlYWRlcl9mbG9hdDY0X3ZlY1xuICB9XG47O1xuXG4oKiQgbWtfYmFzZSBcInZlY1wiICopXG5sZXQgYmluX3dyaXRlcl92ZWMgPSB7IHNpemUgPSBTaXplLmJpbl9zaXplX3ZlYzsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfdmVjIH1cbmxldCBiaW5fcmVhZGVyX3ZlYyA9IHsgcmVhZCA9IFJlYWQuYmluX3JlYWRfdmVjOyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJ2ZWNcIiB9XG5sZXQgYmluX3NoYXBlX3ZlYyA9IFNoYXBlLmJpbl9zaGFwZV92ZWNcbmxldCBiaW5fdmVjID0geyBzaGFwZSA9IGJpbl9zaGFwZV92ZWM7IHdyaXRlciA9IGJpbl93cml0ZXJfdmVjOyByZWFkZXIgPSBiaW5fcmVhZGVyX3ZlYyB9XG5cbigqJCBta19iYXNlIFwiZmxvYXQzMl9tYXRcIiAqKVxubGV0IGJpbl93cml0ZXJfZmxvYXQzMl9tYXQgPVxuICB7IHNpemUgPSBTaXplLmJpbl9zaXplX2Zsb2F0MzJfbWF0OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9mbG9hdDMyX21hdCB9XG47O1xuXG5sZXQgYmluX3JlYWRlcl9mbG9hdDMyX21hdCA9XG4gIHsgcmVhZCA9IFJlYWQuYmluX3JlYWRfZmxvYXQzMl9tYXQ7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcImZsb2F0MzJfbWF0XCIgfVxuOztcblxubGV0IGJpbl9zaGFwZV9mbG9hdDMyX21hdCA9IFNoYXBlLmJpbl9zaGFwZV9mbG9hdDMyX21hdFxuXG5sZXQgYmluX2Zsb2F0MzJfbWF0ID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9mbG9hdDMyX21hdFxuICA7IHdyaXRlciA9IGJpbl93cml0ZXJfZmxvYXQzMl9tYXRcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX2Zsb2F0MzJfbWF0XG4gIH1cbjs7XG5cbigqJCBta19iYXNlIFwiZmxvYXQ2NF9tYXRcIiAqKVxubGV0IGJpbl93cml0ZXJfZmxvYXQ2NF9tYXQgPVxuICB7IHNpemUgPSBTaXplLmJpbl9zaXplX2Zsb2F0NjRfbWF0OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9mbG9hdDY0X21hdCB9XG47O1xuXG5sZXQgYmluX3JlYWRlcl9mbG9hdDY0X21hdCA9XG4gIHsgcmVhZCA9IFJlYWQuYmluX3JlYWRfZmxvYXQ2NF9tYXQ7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcImZsb2F0NjRfbWF0XCIgfVxuOztcblxubGV0IGJpbl9zaGFwZV9mbG9hdDY0X21hdCA9IFNoYXBlLmJpbl9zaGFwZV9mbG9hdDY0X21hdFxuXG5sZXQgYmluX2Zsb2F0NjRfbWF0ID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9mbG9hdDY0X21hdFxuICA7IHdyaXRlciA9IGJpbl93cml0ZXJfZmxvYXQ2NF9tYXRcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX2Zsb2F0NjRfbWF0XG4gIH1cbjs7XG5cbigqJCBta19iYXNlIFwibWF0XCIgKilcbmxldCBiaW5fd3JpdGVyX21hdCA9IHsgc2l6ZSA9IFNpemUuYmluX3NpemVfbWF0OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9tYXQgfVxubGV0IGJpbl9yZWFkZXJfbWF0ID0geyByZWFkID0gUmVhZC5iaW5fcmVhZF9tYXQ7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcIm1hdFwiIH1cbmxldCBiaW5fc2hhcGVfbWF0ID0gU2hhcGUuYmluX3NoYXBlX21hdFxubGV0IGJpbl9tYXQgPSB7IHNoYXBlID0gYmluX3NoYXBlX21hdDsgd3JpdGVyID0gYmluX3dyaXRlcl9tYXQ7IHJlYWRlciA9IGJpbl9yZWFkZXJfbWF0IH1cblxuKCokIG1rX2Jhc2UgXCJiaWdzdHJpbmdcIiAqKVxubGV0IGJpbl93cml0ZXJfYmlnc3RyaW5nID1cbiAgeyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9iaWdzdHJpbmc7IHdyaXRlID0gV3JpdGUuYmluX3dyaXRlX2JpZ3N0cmluZyB9XG47O1xuXG5sZXQgYmluX3JlYWRlcl9iaWdzdHJpbmcgPVxuICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX2JpZ3N0cmluZzsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwiYmlnc3RyaW5nXCIgfVxuOztcblxubGV0IGJpbl9zaGFwZV9iaWdzdHJpbmcgPSBTaGFwZS5iaW5fc2hhcGVfYmlnc3RyaW5nXG5cbmxldCBiaW5fYmlnc3RyaW5nID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9iaWdzdHJpbmdcbiAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX2JpZ3N0cmluZ1xuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfYmlnc3RyaW5nXG4gIH1cbjs7XG5cbigqJCBta19iYXNlIFwiZmxvYXRhcnJheVwiICopXG5sZXQgYmluX3dyaXRlcl9mbG9hdGFycmF5ID1cbiAgeyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9mbG9hdGFycmF5OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9mbG9hdGFycmF5IH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX2Zsb2F0YXJyYXkgPVxuICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX2Zsb2F0YXJyYXk7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcImZsb2F0YXJyYXlcIiB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2Zsb2F0YXJyYXkgPSBTaGFwZS5iaW5fc2hhcGVfZmxvYXRhcnJheVxuXG5sZXQgYmluX2Zsb2F0YXJyYXkgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX2Zsb2F0YXJyYXlcbiAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX2Zsb2F0YXJyYXlcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX2Zsb2F0YXJyYXlcbiAgfVxuOztcblxuKCokKilcblxudHlwZSBmbG9hdF9hcnJheSA9IGZsb2F0IGFycmF5XG5cbmluY2x1ZGUgc3RydWN0XG4gICgqJCBta19iYXNlIFwiZmxvYXRfYXJyYXlcIiAqKVxuICBsZXQgYmluX3dyaXRlcl9mbG9hdF9hcnJheSA9XG4gICAgeyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9mbG9hdF9hcnJheTsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfZmxvYXRfYXJyYXkgfVxuICA7O1xuXG4gIGxldCBiaW5fcmVhZGVyX2Zsb2F0X2FycmF5ID1cbiAgICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX2Zsb2F0X2FycmF5OyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJmbG9hdF9hcnJheVwiIH1cbiAgOztcblxuICBsZXQgYmluX3NoYXBlX2Zsb2F0X2FycmF5ID0gU2hhcGUuYmluX3NoYXBlX2Zsb2F0X2FycmF5XG5cbiAgbGV0IGJpbl9mbG9hdF9hcnJheSA9XG4gICAgeyBzaGFwZSA9IGJpbl9zaGFwZV9mbG9hdF9hcnJheVxuICAgIDsgd3JpdGVyID0gYmluX3dyaXRlcl9mbG9hdF9hcnJheVxuICAgIDsgcmVhZGVyID0gYmluX3JlYWRlcl9mbG9hdF9hcnJheVxuICAgIH1cbiAgOztcbiAgKCokKilcbmVuZCBbQGFsZXJ0IFwiLWRlcHJlY2F0ZWRcIl1cblxuKCokIG1rX2Jhc2UgXCJ2YXJpYW50X2ludFwiICopXG5sZXQgYmluX3dyaXRlcl92YXJpYW50X2ludCA9XG4gIHsgc2l6ZSA9IFNpemUuYmluX3NpemVfdmFyaWFudF9pbnQ7IHdyaXRlID0gV3JpdGUuYmluX3dyaXRlX3ZhcmlhbnRfaW50IH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX3ZhcmlhbnRfaW50ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF92YXJpYW50X2ludDsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwidmFyaWFudF9pbnRcIiB9XG47O1xuXG5sZXQgYmluX3NoYXBlX3ZhcmlhbnRfaW50ID0gU2hhcGUuYmluX3NoYXBlX3ZhcmlhbnRfaW50XG5cbmxldCBiaW5fdmFyaWFudF9pbnQgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX3ZhcmlhbnRfaW50XG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl92YXJpYW50X2ludFxuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfdmFyaWFudF9pbnRcbiAgfVxuOztcblxuKCokIG1rX2Jhc2UgXCJpbnRfOGJpdFwiICopXG5sZXQgYmluX3dyaXRlcl9pbnRfOGJpdCA9XG4gIHsgc2l6ZSA9IFNpemUuYmluX3NpemVfaW50XzhiaXQ7IHdyaXRlID0gV3JpdGUuYmluX3dyaXRlX2ludF84Yml0IH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX2ludF84Yml0ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9pbnRfOGJpdDsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwiaW50XzhiaXRcIiB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2ludF84Yml0ID0gU2hhcGUuYmluX3NoYXBlX2ludF84Yml0XG5cbmxldCBiaW5faW50XzhiaXQgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX2ludF84Yml0XG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9pbnRfOGJpdFxuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfaW50XzhiaXRcbiAgfVxuOztcblxuKCokIG1rX2Jhc2UgXCJpbnRfMTZiaXRcIiAqKVxubGV0IGJpbl93cml0ZXJfaW50XzE2Yml0ID1cbiAgeyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9pbnRfMTZiaXQ7IHdyaXRlID0gV3JpdGUuYmluX3dyaXRlX2ludF8xNmJpdCB9XG47O1xuXG5sZXQgYmluX3JlYWRlcl9pbnRfMTZiaXQgPVxuICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX2ludF8xNmJpdDsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwiaW50XzE2Yml0XCIgfVxuOztcblxubGV0IGJpbl9zaGFwZV9pbnRfMTZiaXQgPSBTaGFwZS5iaW5fc2hhcGVfaW50XzE2Yml0XG5cbmxldCBiaW5faW50XzE2Yml0ID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9pbnRfMTZiaXRcbiAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX2ludF8xNmJpdFxuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfaW50XzE2Yml0XG4gIH1cbjs7XG5cbigqJCBta19iYXNlIFwiaW50XzMyYml0XCIgKilcbmxldCBiaW5fd3JpdGVyX2ludF8zMmJpdCA9XG4gIHsgc2l6ZSA9IFNpemUuYmluX3NpemVfaW50XzMyYml0OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9pbnRfMzJiaXQgfVxuOztcblxubGV0IGJpbl9yZWFkZXJfaW50XzMyYml0ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9pbnRfMzJiaXQ7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcImludF8zMmJpdFwiIH1cbjs7XG5cbmxldCBiaW5fc2hhcGVfaW50XzMyYml0ID0gU2hhcGUuYmluX3NoYXBlX2ludF8zMmJpdFxuXG5sZXQgYmluX2ludF8zMmJpdCA9XG4gIHsgc2hhcGUgPSBiaW5fc2hhcGVfaW50XzMyYml0XG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9pbnRfMzJiaXRcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX2ludF8zMmJpdFxuICB9XG47O1xuXG4oKiQgbWtfYmFzZSBcImludF82NGJpdFwiICopXG5sZXQgYmluX3dyaXRlcl9pbnRfNjRiaXQgPVxuICB7IHNpemUgPSBTaXplLmJpbl9zaXplX2ludF82NGJpdDsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfaW50XzY0Yml0IH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX2ludF82NGJpdCA9XG4gIHsgcmVhZCA9IFJlYWQuYmluX3JlYWRfaW50XzY0Yml0OyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJpbnRfNjRiaXRcIiB9XG47O1xuXG5sZXQgYmluX3NoYXBlX2ludF82NGJpdCA9IFNoYXBlLmJpbl9zaGFwZV9pbnRfNjRiaXRcblxubGV0IGJpbl9pbnRfNjRiaXQgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX2ludF82NGJpdFxuICA7IHdyaXRlciA9IGJpbl93cml0ZXJfaW50XzY0Yml0XG4gIDsgcmVhZGVyID0gYmluX3JlYWRlcl9pbnRfNjRiaXRcbiAgfVxuOztcblxuKCokIG1rX2Jhc2UgXCJpbnQ2NF9iaXRzXCIgKilcbmxldCBiaW5fd3JpdGVyX2ludDY0X2JpdHMgPVxuICB7IHNpemUgPSBTaXplLmJpbl9zaXplX2ludDY0X2JpdHM7IHdyaXRlID0gV3JpdGUuYmluX3dyaXRlX2ludDY0X2JpdHMgfVxuOztcblxubGV0IGJpbl9yZWFkZXJfaW50NjRfYml0cyA9XG4gIHsgcmVhZCA9IFJlYWQuYmluX3JlYWRfaW50NjRfYml0czsgdnRhZ19yZWFkID0gdmFyaWFudF93cm9uZ190eXBlIFwiaW50NjRfYml0c1wiIH1cbjs7XG5cbmxldCBiaW5fc2hhcGVfaW50NjRfYml0cyA9IFNoYXBlLmJpbl9zaGFwZV9pbnQ2NF9iaXRzXG5cbmxldCBiaW5faW50NjRfYml0cyA9XG4gIHsgc2hhcGUgPSBiaW5fc2hhcGVfaW50NjRfYml0c1xuICA7IHdyaXRlciA9IGJpbl93cml0ZXJfaW50NjRfYml0c1xuICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfaW50NjRfYml0c1xuICB9XG47O1xuXG4oKiQgbWtfYmFzZSBcIm5ldHdvcmsxNl9pbnRcIiAqKVxubGV0IGJpbl93cml0ZXJfbmV0d29yazE2X2ludCA9XG4gIHsgc2l6ZSA9IFNpemUuYmluX3NpemVfbmV0d29yazE2X2ludDsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfbmV0d29yazE2X2ludCB9XG47O1xuXG5sZXQgYmluX3JlYWRlcl9uZXR3b3JrMTZfaW50ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9uZXR3b3JrMTZfaW50OyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJuZXR3b3JrMTZfaW50XCIgfVxuOztcblxubGV0IGJpbl9zaGFwZV9uZXR3b3JrMTZfaW50ID0gU2hhcGUuYmluX3NoYXBlX25ldHdvcmsxNl9pbnRcblxubGV0IGJpbl9uZXR3b3JrMTZfaW50ID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9uZXR3b3JrMTZfaW50XG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9uZXR3b3JrMTZfaW50XG4gIDsgcmVhZGVyID0gYmluX3JlYWRlcl9uZXR3b3JrMTZfaW50XG4gIH1cbjs7XG5cbigqJCBta19iYXNlIFwibmV0d29yazMyX2ludFwiICopXG5sZXQgYmluX3dyaXRlcl9uZXR3b3JrMzJfaW50ID1cbiAgeyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9uZXR3b3JrMzJfaW50OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9uZXR3b3JrMzJfaW50IH1cbjs7XG5cbmxldCBiaW5fcmVhZGVyX25ldHdvcmszMl9pbnQgPVxuICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX25ldHdvcmszMl9pbnQ7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcIm5ldHdvcmszMl9pbnRcIiB9XG47O1xuXG5sZXQgYmluX3NoYXBlX25ldHdvcmszMl9pbnQgPSBTaGFwZS5iaW5fc2hhcGVfbmV0d29yazMyX2ludFxuXG5sZXQgYmluX25ldHdvcmszMl9pbnQgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX25ldHdvcmszMl9pbnRcbiAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX25ldHdvcmszMl9pbnRcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX25ldHdvcmszMl9pbnRcbiAgfVxuOztcblxuKCokIG1rX2Jhc2UgXCJuZXR3b3JrMzJfaW50MzJcIiAqKVxubGV0IGJpbl93cml0ZXJfbmV0d29yazMyX2ludDMyID1cbiAgeyBzaXplID0gU2l6ZS5iaW5fc2l6ZV9uZXR3b3JrMzJfaW50MzI7IHdyaXRlID0gV3JpdGUuYmluX3dyaXRlX25ldHdvcmszMl9pbnQzMiB9XG47O1xuXG5sZXQgYmluX3JlYWRlcl9uZXR3b3JrMzJfaW50MzIgPVxuICB7IHJlYWQgPSBSZWFkLmJpbl9yZWFkX25ldHdvcmszMl9pbnQzMlxuICA7IHZ0YWdfcmVhZCA9IHZhcmlhbnRfd3JvbmdfdHlwZSBcIm5ldHdvcmszMl9pbnQzMlwiXG4gIH1cbjs7XG5cbmxldCBiaW5fc2hhcGVfbmV0d29yazMyX2ludDMyID0gU2hhcGUuYmluX3NoYXBlX25ldHdvcmszMl9pbnQzMlxuXG5sZXQgYmluX25ldHdvcmszMl9pbnQzMiA9XG4gIHsgc2hhcGUgPSBiaW5fc2hhcGVfbmV0d29yazMyX2ludDMyXG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9uZXR3b3JrMzJfaW50MzJcbiAgOyByZWFkZXIgPSBiaW5fcmVhZGVyX25ldHdvcmszMl9pbnQzMlxuICB9XG47O1xuXG4oKiQgbWtfYmFzZSBcIm5ldHdvcms2NF9pbnRcIiAqKVxubGV0IGJpbl93cml0ZXJfbmV0d29yazY0X2ludCA9XG4gIHsgc2l6ZSA9IFNpemUuYmluX3NpemVfbmV0d29yazY0X2ludDsgd3JpdGUgPSBXcml0ZS5iaW5fd3JpdGVfbmV0d29yazY0X2ludCB9XG47O1xuXG5sZXQgYmluX3JlYWRlcl9uZXR3b3JrNjRfaW50ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9uZXR3b3JrNjRfaW50OyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJuZXR3b3JrNjRfaW50XCIgfVxuOztcblxubGV0IGJpbl9zaGFwZV9uZXR3b3JrNjRfaW50ID0gU2hhcGUuYmluX3NoYXBlX25ldHdvcms2NF9pbnRcblxubGV0IGJpbl9uZXR3b3JrNjRfaW50ID1cbiAgeyBzaGFwZSA9IGJpbl9zaGFwZV9uZXR3b3JrNjRfaW50XG4gIDsgd3JpdGVyID0gYmluX3dyaXRlcl9uZXR3b3JrNjRfaW50XG4gIDsgcmVhZGVyID0gYmluX3JlYWRlcl9uZXR3b3JrNjRfaW50XG4gIH1cbjs7XG5cbigqJCBta19iYXNlIFwibmV0d29yazY0X2ludDY0XCIgKilcbmxldCBiaW5fd3JpdGVyX25ldHdvcms2NF9pbnQ2NCA9XG4gIHsgc2l6ZSA9IFNpemUuYmluX3NpemVfbmV0d29yazY0X2ludDY0OyB3cml0ZSA9IFdyaXRlLmJpbl93cml0ZV9uZXR3b3JrNjRfaW50NjQgfVxuOztcblxubGV0IGJpbl9yZWFkZXJfbmV0d29yazY0X2ludDY0ID1cbiAgeyByZWFkID0gUmVhZC5iaW5fcmVhZF9uZXR3b3JrNjRfaW50NjRcbiAgOyB2dGFnX3JlYWQgPSB2YXJpYW50X3dyb25nX3R5cGUgXCJuZXR3b3JrNjRfaW50NjRcIlxuICB9XG47O1xuXG5sZXQgYmluX3NoYXBlX25ldHdvcms2NF9pbnQ2NCA9IFNoYXBlLmJpbl9zaGFwZV9uZXR3b3JrNjRfaW50NjRcblxubGV0IGJpbl9uZXR3b3JrNjRfaW50NjQgPVxuICB7IHNoYXBlID0gYmluX3NoYXBlX25ldHdvcms2NF9pbnQ2NFxuICA7IHdyaXRlciA9IGJpbl93cml0ZXJfbmV0d29yazY0X2ludDY0XG4gIDsgcmVhZGVyID0gYmluX3JlYWRlcl9uZXR3b3JrNjRfaW50NjRcbiAgfVxuOztcblxuKCokKilcbmxldCBiaW5fd3JpdGVyX2FycmF5X25vX2xlbmd0aCBiaW5fd3JpdGVyX2VsID1cbiAgeyBzaXplID0gKGZ1biB2IC0+IChTaXplLmJpbl9zaXplX2FycmF5X25vX2xlbmd0aCBbQHdhcm5pbmcgXCItM1wiXSkgYmluX3dyaXRlcl9lbC5zaXplIHYpXG4gIDsgd3JpdGUgPVxuICAgICAgKGZ1biBidWYgfnBvcyB2IC0+XG4gICAgICAgICAoV3JpdGUuYmluX3dyaXRlX2FycmF5X25vX2xlbmd0aCBbQHdhcm5pbmcgXCItM1wiXSkgYmluX3dyaXRlcl9lbC53cml0ZSBidWYgfnBvcyB2KVxuICB9XG47O1xuXG4oKiBDb252ZXJzaW9uIG9mIGJpbmFibGUgdHlwZXMgKilcblxubGV0IGNudl93cml0ZXIgY252IHRwX2NsYXNzID1cbiAgeyBzaXplID0gKGZ1biB2IC0+IHRwX2NsYXNzLnNpemUgKGNudiB2KSlcbiAgOyB3cml0ZSA9IChmdW4gYnVmIH5wb3MgdiAtPiB0cF9jbGFzcy53cml0ZSBidWYgfnBvcyAoY252IHYpKVxuICB9XG47O1xuXG5sZXQgY252X3JlYWRlciBjbnYgdHBfY2xhc3MgPVxuICB7IHJlYWQgPSAoZnVuIGJ1ZiB+cG9zX3JlZiAtPiBjbnYgKHRwX2NsYXNzLnJlYWQgYnVmIH5wb3NfcmVmKSlcbiAgOyB2dGFnX3JlYWQgPSAoZnVuIGJ1ZiB+cG9zX3JlZiB2dGFnIC0+IGNudiAodHBfY2xhc3MudnRhZ19yZWFkIGJ1ZiB+cG9zX3JlZiB2dGFnKSlcbiAgfVxuOztcblxubGV0IGNudiBmb3Jfc2hhcGUgZm9yX3dyaXRlciBmb3JfcmVhZGVyIHRwX2NsYXNzID1cbiAgeyBzaGFwZSA9IGZvcl9zaGFwZSB0cF9jbGFzcy5zaGFwZVxuICA7IHdyaXRlciA9IGNudl93cml0ZXIgZm9yX3dyaXRlciB0cF9jbGFzcy53cml0ZXJcbiAgOyByZWFkZXIgPSBjbnZfcmVhZGVyIGZvcl9yZWFkZXIgdHBfY2xhc3MucmVhZGVyXG4gIH1cbjs7XG4iLCIoKiBCaW5hYmxlOiBzaWduYXR1cmVzIGRlZmluaW5nIGdlbmVyYXRlZCBmdW5jdGlvbnMgZm9yIHRoZSBiaW5hcnkgcHJvdG9jb2wuXG4gICBbUywgUzEsIGV0Y10gYXJlIHRoZSBzaWduYXR1cmVzIHNhdGlzZmllZCBieSB0aGUgZ2VuZXJhdGVkIGNvZGUgYW5kXG4gICBbTWluaW1hbC5TLCBNaW5pbWFsLlMxLCBldGNdIGFyZSB0aGUgc2lnbmF0dXJlcyB0aGF0IGdlbmVyYXRlZCBjb2RlIHVzZXMuICopXG5cbigqIHRoZSBzdWJzZXQgb2YgUyBjb250YWluaW5nIG9ubHkgZnVuY3Rpb25zLCBzbyB0aGF0IG9uZSBjYW4gcmVjdXJzaXZlbHkgZGVmaW5lIG1vZHVsZXNcbiAgIGltcGxlbWVudGluZyB0aGlzIGludGVyZmFjZSAqKVxubW9kdWxlIHR5cGUgU19vbmx5X2Z1bmN0aW9ucyA9IHNpZ1xuICB0eXBlIHRcblxuICB2YWwgYmluX3NpemVfdCA6IHQgU2l6ZS5zaXplclxuICB2YWwgYmluX3dyaXRlX3QgOiB0IFdyaXRlLndyaXRlclxuICB2YWwgYmluX3JlYWRfdCA6IHQgUmVhZC5yZWFkZXJcblxuICAoKipcbiAgICAgVGhpcyBmdW5jdGlvbiBvbmx5IG5lZWRzIGltcGxlbWVudGF0aW9uIGlmIFt0XSBleHBvc2VkIHRvIGJlIGEgcG9seW1vcnBoaWMgdmFyaWFudC5cbiAgICAgRGVzcGl0ZSB3aGF0IHRoZSB0eXBlIHJlYWRzLCB0aGlzIGRvZXMgKm5vdCogcHJvZHVjZSBhIGZ1bmN0aW9uIGFmdGVyIHJlYWRpbmc7XG4gICAgIGluc3RlYWQgaXQgdGFrZXMgdGhlIGNvbnN0cnVjdG9yIHRhZyAoaW50KSBiZWZvcmUgcmVhZGluZyBhbmQgcmVhZHMgdGhlIHJlc3Qgb2YgdGhlXG4gICAgIHZhcmlhbnQgW3RdIGFmdGVyd2FyZHMuXG4gICopXG4gIHZhbCBfX2Jpbl9yZWFkX3RfXyA6IChpbnQgLT4gdCkgUmVhZC5yZWFkZXJcbmVuZFxuXG5tb2R1bGUgdHlwZSBTID0gc2lnXG4gIHR5cGUgdFxuXG4gIGluY2x1ZGUgU19vbmx5X2Z1bmN0aW9ucyB3aXRoIHR5cGUgdCA6PSB0XG5cbiAgdmFsIGJpbl9zaGFwZV90IDogU2hhcGUudFxuICB2YWwgYmluX3dyaXRlcl90IDogdCBUeXBlX2NsYXNzLndyaXRlclxuICB2YWwgYmluX3JlYWRlcl90IDogdCBUeXBlX2NsYXNzLnJlYWRlclxuICB2YWwgYmluX3QgOiB0IFR5cGVfY2xhc3MudFxuZW5kXG5cbm1vZHVsZSB0eXBlIFMxID0gc2lnXG4gIHR5cGUgJ2EgdFxuXG4gIHZhbCBiaW5fc2hhcGVfdCA6IFNoYXBlLnQgLT4gU2hhcGUudFxuICB2YWwgYmluX3NpemVfdCA6ICgnYSwgJ2EgdCkgU2l6ZS5zaXplcjFcbiAgdmFsIGJpbl93cml0ZV90IDogKCdhLCAnYSB0KSBXcml0ZS53cml0ZXIxXG4gIHZhbCBiaW5fcmVhZF90IDogKCdhLCAnYSB0KSBSZWFkLnJlYWRlcjFcbiAgdmFsIF9fYmluX3JlYWRfdF9fIDogKCdhLCBpbnQgLT4gJ2EgdCkgUmVhZC5yZWFkZXIxXG4gIHZhbCBiaW5fd3JpdGVyX3QgOiAoJ2EsICdhIHQpIFR5cGVfY2xhc3MuUzEud3JpdGVyXG4gIHZhbCBiaW5fcmVhZGVyX3QgOiAoJ2EsICdhIHQpIFR5cGVfY2xhc3MuUzEucmVhZGVyXG4gIHZhbCBiaW5fdCA6ICgnYSwgJ2EgdCkgVHlwZV9jbGFzcy5TMS50XG5lbmRcblxubW9kdWxlIHR5cGUgUzIgPSBzaWdcbiAgdHlwZSAoJ2EsICdiKSB0XG5cbiAgdmFsIGJpbl9zaGFwZV90IDogU2hhcGUudCAtPiBTaGFwZS50IC0+IFNoYXBlLnRcbiAgdmFsIGJpbl9zaXplX3QgOiAoJ2EsICdiLCAoJ2EsICdiKSB0KSBTaXplLnNpemVyMlxuICB2YWwgYmluX3dyaXRlX3QgOiAoJ2EsICdiLCAoJ2EsICdiKSB0KSBXcml0ZS53cml0ZXIyXG4gIHZhbCBiaW5fcmVhZF90IDogKCdhLCAnYiwgKCdhLCAnYikgdCkgUmVhZC5yZWFkZXIyXG4gIHZhbCBfX2Jpbl9yZWFkX3RfXyA6ICgnYSwgJ2IsIGludCAtPiAoJ2EsICdiKSB0KSBSZWFkLnJlYWRlcjJcbiAgdmFsIGJpbl93cml0ZXJfdCA6ICgnYSwgJ2IsICgnYSwgJ2IpIHQpIFR5cGVfY2xhc3MuUzIud3JpdGVyXG4gIHZhbCBiaW5fcmVhZGVyX3QgOiAoJ2EsICdiLCAoJ2EsICdiKSB0KSBUeXBlX2NsYXNzLlMyLnJlYWRlclxuICB2YWwgYmluX3QgOiAoJ2EsICdiLCAoJ2EsICdiKSB0KSBUeXBlX2NsYXNzLlMyLnRcbmVuZFxuXG5tb2R1bGUgdHlwZSBTMyA9IHNpZ1xuICB0eXBlICgnYSwgJ2IsICdjKSB0XG5cbiAgdmFsIGJpbl9zaGFwZV90IDogU2hhcGUudCAtPiBTaGFwZS50IC0+IFNoYXBlLnQgLT4gU2hhcGUudFxuICB2YWwgYmluX3NpemVfdCA6ICgnYSwgJ2IsICdjLCAoJ2EsICdiLCAnYykgdCkgU2l6ZS5zaXplcjNcbiAgdmFsIGJpbl93cml0ZV90IDogKCdhLCAnYiwgJ2MsICgnYSwgJ2IsICdjKSB0KSBXcml0ZS53cml0ZXIzXG4gIHZhbCBiaW5fcmVhZF90IDogKCdhLCAnYiwgJ2MsICgnYSwgJ2IsICdjKSB0KSBSZWFkLnJlYWRlcjNcbiAgdmFsIF9fYmluX3JlYWRfdF9fIDogKCdhLCAnYiwgJ2MsIGludCAtPiAoJ2EsICdiLCAnYykgdCkgUmVhZC5yZWFkZXIzXG4gIHZhbCBiaW5fd3JpdGVyX3QgOiAoJ2EsICdiLCAnYywgKCdhLCAnYiwgJ2MpIHQpIFR5cGVfY2xhc3MuUzMud3JpdGVyXG4gIHZhbCBiaW5fcmVhZGVyX3QgOiAoJ2EsICdiLCAnYywgKCdhLCAnYiwgJ2MpIHQpIFR5cGVfY2xhc3MuUzMucmVhZGVyXG4gIHZhbCBiaW5fdCA6ICgnYSwgJ2IsICdjLCAoJ2EsICdiLCAnYykgdCkgVHlwZV9jbGFzcy5TMy50XG5lbmRcblxubW9kdWxlIE1pbmltYWwgPSBzdHJ1Y3RcbiAgbW9kdWxlIHR5cGUgUyA9IHNpZ1xuICAgIHR5cGUgdFxuXG4gICAgdmFsIGJpbl9zaGFwZV90IDogU2hhcGUudFxuICAgIHZhbCBiaW5fc2l6ZV90IDogdCBTaXplLnNpemVyXG4gICAgdmFsIGJpbl93cml0ZV90IDogdCBXcml0ZS53cml0ZXJcbiAgICB2YWwgYmluX3JlYWRfdCA6IHQgUmVhZC5yZWFkZXJcbiAgICB2YWwgX19iaW5fcmVhZF90X18gOiAoaW50IC0+IHQpIFJlYWQucmVhZGVyXG4gIGVuZFxuXG4gIG1vZHVsZSB0eXBlIFMxID0gc2lnXG4gICAgdHlwZSAnYSB0XG5cbiAgICB2YWwgYmluX3NoYXBlX3QgOiBTaGFwZS50IC0+IFNoYXBlLnRcbiAgICB2YWwgYmluX3NpemVfdCA6ICgnYSwgJ2EgdCkgU2l6ZS5zaXplcjFcbiAgICB2YWwgYmluX3dyaXRlX3QgOiAoJ2EsICdhIHQpIFdyaXRlLndyaXRlcjFcbiAgICB2YWwgYmluX3JlYWRfdCA6ICgnYSwgJ2EgdCkgUmVhZC5yZWFkZXIxXG4gICAgdmFsIF9fYmluX3JlYWRfdF9fIDogKCdhLCBpbnQgLT4gJ2EgdCkgUmVhZC5yZWFkZXIxXG4gIGVuZFxuXG4gIG1vZHVsZSB0eXBlIFMyID0gc2lnXG4gICAgdHlwZSAoJ2EsICdiKSB0XG5cbiAgICB2YWwgYmluX3NoYXBlX3QgOiBTaGFwZS50IC0+IFNoYXBlLnQgLT4gU2hhcGUudFxuICAgIHZhbCBiaW5fc2l6ZV90IDogKCdhLCAnYiwgKCdhLCAnYikgdCkgU2l6ZS5zaXplcjJcbiAgICB2YWwgYmluX3dyaXRlX3QgOiAoJ2EsICdiLCAoJ2EsICdiKSB0KSBXcml0ZS53cml0ZXIyXG4gICAgdmFsIGJpbl9yZWFkX3QgOiAoJ2EsICdiLCAoJ2EsICdiKSB0KSBSZWFkLnJlYWRlcjJcbiAgICB2YWwgX19iaW5fcmVhZF90X18gOiAoJ2EsICdiLCBpbnQgLT4gKCdhLCAnYikgdCkgUmVhZC5yZWFkZXIyXG4gIGVuZFxuXG4gIG1vZHVsZSB0eXBlIFMzID0gc2lnXG4gICAgdHlwZSAoJ2EsICdiLCAnYykgdFxuXG4gICAgdmFsIGJpbl9zaGFwZV90IDogU2hhcGUudCAtPiBTaGFwZS50IC0+IFNoYXBlLnQgLT4gU2hhcGUudFxuICAgIHZhbCBiaW5fc2l6ZV90IDogKCdhLCAnYiwgJ2MsICgnYSwgJ2IsICdjKSB0KSBTaXplLnNpemVyM1xuICAgIHZhbCBiaW5fd3JpdGVfdCA6ICgnYSwgJ2IsICdjLCAoJ2EsICdiLCAnYykgdCkgV3JpdGUud3JpdGVyM1xuICAgIHZhbCBiaW5fcmVhZF90IDogKCdhLCAnYiwgJ2MsICgnYSwgJ2IsICdjKSB0KSBSZWFkLnJlYWRlcjNcbiAgICB2YWwgX19iaW5fcmVhZF90X18gOiAoJ2EsICdiLCAnYywgaW50IC0+ICgnYSwgJ2IsICdjKSB0KSBSZWFkLnJlYWRlcjNcbiAgZW5kXG5lbmRcbiIsIigqIFV0aWxzOiB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgdXNlciBjb252ZW5pZW5jZSAqKVxuXG5vcGVuIENvbW1vblxub3BlbiBTaXplXG5vcGVuIFR5cGVfY2xhc3NcbmluY2x1ZGUgVXRpbHNfaW50ZlxuXG5sZXQgc2l6ZV9oZWFkZXJfbGVuZ3RoID0gOFxubGV0IGJpbl93cml0ZV9zaXplX2hlYWRlciA9IFdyaXRlLmJpbl93cml0ZV9pbnRfNjRiaXRcbmxldCBiaW5fcmVhZF9zaXplX2hlYWRlciA9IFJlYWQuYmluX3JlYWRfaW50XzY0Yml0XG5cbmxldCBiaW5fZHVtcCA/KGhlYWRlciA9IGZhbHNlKSB3cml0ZXIgdiA9XG4gIGxldCBidWYsIHBvcywgcG9zX2xlbiA9XG4gICAgbGV0IHZfbGVuID0gd3JpdGVyLnNpemUgdiBpblxuICAgIGlmIGhlYWRlclxuICAgIHRoZW4gKFxuICAgICAgbGV0IHRvdF9sZW4gPSB2X2xlbiArIHNpemVfaGVhZGVyX2xlbmd0aCBpblxuICAgICAgbGV0IGJ1ZiA9IGNyZWF0ZV9idWYgdG90X2xlbiBpblxuICAgICAgbGV0IHBvcyA9IGJpbl93cml0ZV9zaXplX2hlYWRlciBidWYgfnBvczowIHZfbGVuIGluXG4gICAgICBidWYsIHBvcywgcG9zICsgdl9sZW4pXG4gICAgZWxzZSAoXG4gICAgICBsZXQgYnVmID0gY3JlYXRlX2J1ZiB2X2xlbiBpblxuICAgICAgYnVmLCAwLCB2X2xlbilcbiAgaW5cbiAgbGV0IHBvcyA9IHdyaXRlci53cml0ZSBidWYgfnBvcyB2IGluXG4gIGlmIHBvcyA9IHBvc19sZW5cbiAgdGhlbiBidWZcbiAgZWxzZSBmYWlsd2l0aCBcIkJpbl9wcm90LlV0aWxzLmJpbl9kdW1wOiBzaXplIGNoYW5nZWQgZHVyaW5nIHdyaXRpbmdcIlxuOztcblxuKCogUmVhZGluZyBmcm9tIHN0cmVhbXMgKilcblxubGV0IGJpbl9yZWFkX3N0cmVhbSA/bWF4X3NpemUgfnJlYWQgcmVhZGVyID1cbiAgbGV0IGJ1ZiA9IGNyZWF0ZV9idWYgc2l6ZV9oZWFkZXJfbGVuZ3RoIGluXG4gIHJlYWQgYnVmIH5wb3M6MCB+bGVuOnNpemVfaGVhZGVyX2xlbmd0aDtcbiAgbGV0IHBvc19yZWYgPSByZWYgMCBpblxuICBsZXQgbGVuID0gYmluX3JlYWRfc2l6ZV9oZWFkZXIgYnVmIH5wb3NfcmVmIGluXG4gIG1hdGNoIG1heF9zaXplIHdpdGhcbiAgfCBTb21lIG1heF9zaXplIHdoZW4gbGVuID4gbWF4X3NpemUgLT5cbiAgICBmYWlsd2l0aFxuICAgICAgKFByaW50Zi5zcHJpbnRmXG4gICAgICAgICBcIkJpbl9wcm90LlV0aWxzLmJpbl9yZWFkX3N0cmVhbTogc2l6ZSBleGNlZWRzIG1heF9zaXplOiAlZCA+ICVkXCJcbiAgICAgICAgIGxlblxuICAgICAgICAgbWF4X3NpemUpXG4gIHwgXyAtPlxuICAgIGxldCBidWYgPSBpZiBsZW4gPiBzaXplX2hlYWRlcl9sZW5ndGggdGhlbiBjcmVhdGVfYnVmIGxlbiBlbHNlIGJ1ZiBpblxuICAgIHJlYWQgYnVmIH5wb3M6MCB+bGVuO1xuICAgIHBvc19yZWYgOj0gMDtcbiAgICBsZXQgcmVzID0gcmVhZGVyLnJlYWQgYnVmIH5wb3NfcmVmIGluXG4gICAgaWYgIXBvc19yZWYgPSBsZW5cbiAgICB0aGVuIHJlc1xuICAgIGVsc2UgKFxuICAgICAgbGV0IG1zZyA9XG4gICAgICAgIFByaW50Zi5zcHJpbnRmXG4gICAgICAgICAgXCJCaW5fcHJvdC5VdGlscy5iaW5fcmVhZF9zdHJlYW06IHByb3RvY29sIGxpZWQgYWJvdXQgbGVuZ3RoIG9mIHZhbHVlOiBleHBlY3RlZCBcXFxuICAgICAgICAgICAlZCwgcmVjZWl2ZWQgJWRcIlxuICAgICAgICAgIGxlblxuICAgICAgICAgICFwb3NfcmVmXG4gICAgICBpblxuICAgICAgZmFpbHdpdGggbXNnKVxuOztcblxuKCogQ29udmVyc2lvbiBvZiBiaW5hYmxlIHR5cGVzICopXG5cbm1vZHVsZSBPZl9taW5pbWFsIChTIDogQmluYWJsZS5NaW5pbWFsLlMpIDogQmluYWJsZS5TIHdpdGggdHlwZSB0IDo9IFMudCA9IHN0cnVjdFxuICBpbmNsdWRlIFNcblxuICBsZXQgYmluX3dyaXRlcl90ID0geyBzaXplID0gYmluX3NpemVfdDsgd3JpdGUgPSBiaW5fd3JpdGVfdCB9XG4gIGxldCBiaW5fcmVhZGVyX3QgPSB7IHJlYWQgPSBiaW5fcmVhZF90OyB2dGFnX3JlYWQgPSBfX2Jpbl9yZWFkX3RfXyB9XG4gIGxldCBiaW5fdCA9IHsgc2hhcGUgPSBiaW5fc2hhcGVfdDsgd3JpdGVyID0gYmluX3dyaXRlcl90OyByZWFkZXIgPSBiaW5fcmVhZGVyX3QgfVxuZW5kXG5cbmxldCBtYXliZV9hbm5vdGF0ZV9zaGFwZSBtYXliZV91dWlkIHNoYXBlID1cbiAgbWF0Y2ggbWF5YmVfdXVpZCB3aXRoXG4gIHwgTm9uZSAtPiBzaGFwZVxuICB8IFNvbWUgdXVpZCAtPiBTaGFwZS5hbm5vdGF0ZSB1dWlkIHNoYXBlXG47O1xuXG5tb2R1bGUgTWFrZV9iaW5hYmxlX2dlbiAoUyA6IHNpZ1xuICAgIGluY2x1ZGUgTWFrZV9iaW5hYmxlX3dpdGhvdXRfdXVpZF9zcGVjXG5cbiAgICB2YWwgbWF5YmVfY2FsbGVyX2lkZW50aXR5IDogU2hhcGUuVXVpZC50IG9wdGlvblxuICBlbmQpID1cbnN0cnVjdFxuICBpbmNsdWRlIE9mX21pbmltYWwgKHN0cnVjdFxuICAgICAgbW9kdWxlIEIgPSBTLkJpbmFibGVcblxuICAgICAgdHlwZSB0ID0gUy50XG5cbiAgICAgIGxldCBiaW5fc2hhcGVfdCA9IG1heWJlX2Fubm90YXRlX3NoYXBlIFMubWF5YmVfY2FsbGVyX2lkZW50aXR5IEIuYmluX3NoYXBlX3RcbiAgICAgIGxldCBiaW5fc2l6ZV90IHQgPSBCLmJpbl9zaXplX3QgKFMudG9fYmluYWJsZSB0KVxuICAgICAgbGV0IGJpbl93cml0ZV90IGJ1ZiB+cG9zIHQgPSBCLmJpbl93cml0ZV90IGJ1ZiB+cG9zIChTLnRvX2JpbmFibGUgdClcbiAgICAgIGxldCBiaW5fcmVhZF90IGJ1ZiB+cG9zX3JlZiA9IFMub2ZfYmluYWJsZSAoQi5iaW5fcmVhZF90IGJ1ZiB+cG9zX3JlZilcbiAgICAgIGxldCBfX2Jpbl9yZWFkX3RfXyBidWYgfnBvc19yZWYgbiA9IFMub2ZfYmluYWJsZSAoQi5fX2Jpbl9yZWFkX3RfXyBidWYgfnBvc19yZWYgbilcbiAgICBlbmQpXG5lbmRcblxubW9kdWxlIE1ha2VfYmluYWJsZTFfZ2VuIChTIDogc2lnXG4gICAgaW5jbHVkZSBNYWtlX2JpbmFibGUxX3dpdGhvdXRfdXVpZF9zcGVjXG5cbiAgICB2YWwgbWF5YmVfY2FsbGVyX2lkZW50aXR5IDogU2hhcGUuVXVpZC50IG9wdGlvblxuICBlbmQpID1cbnN0cnVjdFxuICBtb2R1bGUgQiA9IFMuQmluYWJsZVxuXG4gIGxldCBiaW5fc2hhcGVfdCBiaW5fc2hhcGVfZWwgPVxuICAgIG1heWJlX2Fubm90YXRlX3NoYXBlIFMubWF5YmVfY2FsbGVyX2lkZW50aXR5IChCLmJpbl9zaGFwZV90IGJpbl9zaGFwZV9lbClcbiAgOztcblxuICBsZXQgYmluX3NpemVfdCBiaW5fc2l6ZV9lbCB0ID0gQi5iaW5fc2l6ZV90IGJpbl9zaXplX2VsIChTLnRvX2JpbmFibGUgdClcblxuICBsZXQgYmluX3dyaXRlX3QgYmluX3dyaXRlX2VsIGJ1ZiB+cG9zIHQgPVxuICAgIEIuYmluX3dyaXRlX3QgYmluX3dyaXRlX2VsIGJ1ZiB+cG9zIChTLnRvX2JpbmFibGUgdClcbiAgOztcblxuICBsZXQgYmluX3JlYWRfdCBiaW5fcmVhZF9lbCBidWYgfnBvc19yZWYgPVxuICAgIFMub2ZfYmluYWJsZSAoQi5iaW5fcmVhZF90IGJpbl9yZWFkX2VsIGJ1ZiB+cG9zX3JlZilcbiAgOztcblxuICBsZXQgX19iaW5fcmVhZF90X18gYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmIG4gPVxuICAgIFMub2ZfYmluYWJsZSAoQi5fX2Jpbl9yZWFkX3RfXyBiaW5fcmVhZF9lbCBidWYgfnBvc19yZWYgbilcbiAgOztcblxuICBsZXQgYmluX3dyaXRlcl90IGJpbl93cml0ZXIgPVxuICAgIHsgc2l6ZSA9IChmdW4gdiAtPiBiaW5fc2l6ZV90IGJpbl93cml0ZXIuc2l6ZSB2KVxuICAgIDsgd3JpdGUgPSAoZnVuIGJ1ZiB+cG9zIHYgLT4gYmluX3dyaXRlX3QgYmluX3dyaXRlci53cml0ZSBidWYgfnBvcyB2KVxuICAgIH1cbiAgOztcblxuICBsZXQgYmluX3JlYWRlcl90IGJpbl9yZWFkZXIgPVxuICAgIHsgcmVhZCA9IChmdW4gYnVmIH5wb3NfcmVmIC0+IGJpbl9yZWFkX3QgYmluX3JlYWRlci5yZWFkIGJ1ZiB+cG9zX3JlZilcbiAgICA7IHZ0YWdfcmVhZCA9XG4gICAgICAgIChmdW4gX2J1ZiB+cG9zX3JlZiBfbiAtPlxuICAgICAgICAgICByYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJCaW5fcHJvdC5VdGlscy5NYWtlX2JpbmFibGUxLmJpbl9yZWFkZXJfdFwiICFwb3NfcmVmKVxuICAgIH1cbiAgOztcblxuICBsZXQgYmluX3QgdHlwZV9jbGFzcyA9XG4gICAgeyBzaGFwZSA9IGJpbl9zaGFwZV90IHR5cGVfY2xhc3Muc2hhcGVcbiAgICA7IHdyaXRlciA9IGJpbl93cml0ZXJfdCB0eXBlX2NsYXNzLndyaXRlclxuICAgIDsgcmVhZGVyID0gYmluX3JlYWRlcl90IHR5cGVfY2xhc3MucmVhZGVyXG4gICAgfVxuICA7O1xuZW5kXG5cbm1vZHVsZSBNYWtlX2JpbmFibGUyX2dlbiAoUyA6IHNpZ1xuICAgIGluY2x1ZGUgTWFrZV9iaW5hYmxlMl93aXRob3V0X3V1aWRfc3BlY1xuXG4gICAgdmFsIG1heWJlX2NhbGxlcl9pZGVudGl0eSA6IFNoYXBlLlV1aWQudCBvcHRpb25cbiAgZW5kKSA9XG5zdHJ1Y3RcbiAgbW9kdWxlIEIgPSBTLkJpbmFibGVcblxuICBsZXQgYmluX3NoYXBlX3QgYmluX3NoYXBlX2VsMSBiaW5fc2hhcGVfZWwyID1cbiAgICBtYXliZV9hbm5vdGF0ZV9zaGFwZVxuICAgICAgUy5tYXliZV9jYWxsZXJfaWRlbnRpdHlcbiAgICAgIChCLmJpbl9zaGFwZV90IGJpbl9zaGFwZV9lbDEgYmluX3NoYXBlX2VsMilcbiAgOztcblxuICBsZXQgYmluX3NpemVfdCBiaW5fc2l6ZV9lbDEgYmluX3NpemVfZWwyIHQgPVxuICAgIEIuYmluX3NpemVfdCBiaW5fc2l6ZV9lbDEgYmluX3NpemVfZWwyIChTLnRvX2JpbmFibGUgdClcbiAgOztcblxuICBsZXQgYmluX3dyaXRlX3QgYmluX3dyaXRlX2VsMSBiaW5fd3JpdGVfZWwyIGJ1ZiB+cG9zIHQgPVxuICAgIEIuYmluX3dyaXRlX3QgYmluX3dyaXRlX2VsMSBiaW5fd3JpdGVfZWwyIGJ1ZiB+cG9zIChTLnRvX2JpbmFibGUgdClcbiAgOztcblxuICBsZXQgYmluX3JlYWRfdCBiaW5fcmVhZF9lbDEgYmluX3JlYWRfZWwyIGJ1ZiB+cG9zX3JlZiA9XG4gICAgUy5vZl9iaW5hYmxlIChCLmJpbl9yZWFkX3QgYmluX3JlYWRfZWwxIGJpbl9yZWFkX2VsMiBidWYgfnBvc19yZWYpXG4gIDs7XG5cbiAgbGV0IF9fYmluX3JlYWRfdF9fIGJpbl9yZWFkX2VsMSBiaW5fcmVhZF9lbDIgYnVmIH5wb3NfcmVmIG4gPVxuICAgIFMub2ZfYmluYWJsZSAoQi5fX2Jpbl9yZWFkX3RfXyBiaW5fcmVhZF9lbDEgYmluX3JlYWRfZWwyIGJ1ZiB+cG9zX3JlZiBuKVxuICA7O1xuXG4gIGxldCBiaW5fd3JpdGVyX3QgYmluX3dyaXRlcjEgYmluX3dyaXRlcjIgPVxuICAgIHsgc2l6ZSA9IChmdW4gdiAtPiBiaW5fc2l6ZV90IGJpbl93cml0ZXIxLnNpemUgYmluX3dyaXRlcjIuc2l6ZSB2KVxuICAgIDsgd3JpdGUgPVxuICAgICAgICAoZnVuIGJ1ZiB+cG9zIHYgLT4gYmluX3dyaXRlX3QgYmluX3dyaXRlcjEud3JpdGUgYmluX3dyaXRlcjIud3JpdGUgYnVmIH5wb3MgdilcbiAgICB9XG4gIDs7XG5cbiAgbGV0IGJpbl9yZWFkZXJfdCBiaW5fcmVhZGVyMSBiaW5fcmVhZGVyMiA9XG4gICAgeyByZWFkID1cbiAgICAgICAgKGZ1biBidWYgfnBvc19yZWYgLT4gYmluX3JlYWRfdCBiaW5fcmVhZGVyMS5yZWFkIGJpbl9yZWFkZXIyLnJlYWQgYnVmIH5wb3NfcmVmKVxuICAgIDsgdnRhZ19yZWFkID1cbiAgICAgICAgKGZ1biBfYnVmIH5wb3NfcmVmIF9uIC0+XG4gICAgICAgICAgIHJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcIkJpbl9wcm90LlV0aWxzLk1ha2VfYmluYWJsZTIuYmluX3JlYWRlcl90XCIgIXBvc19yZWYpXG4gICAgfVxuICA7O1xuXG4gIGxldCBiaW5fdCB0eXBlX2NsYXNzMSB0eXBlX2NsYXNzMiA9XG4gICAgeyBzaGFwZSA9IGJpbl9zaGFwZV90IHR5cGVfY2xhc3MxLnNoYXBlIHR5cGVfY2xhc3MyLnNoYXBlXG4gICAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX3QgdHlwZV9jbGFzczEud3JpdGVyIHR5cGVfY2xhc3MyLndyaXRlclxuICAgIDsgcmVhZGVyID0gYmluX3JlYWRlcl90IHR5cGVfY2xhc3MxLnJlYWRlciB0eXBlX2NsYXNzMi5yZWFkZXJcbiAgICB9XG4gIDs7XG5lbmRcblxubW9kdWxlIE1ha2VfYmluYWJsZTNfZ2VuIChTIDogc2lnXG4gICAgaW5jbHVkZSBNYWtlX2JpbmFibGUzX3dpdGhvdXRfdXVpZF9zcGVjXG5cbiAgICB2YWwgbWF5YmVfY2FsbGVyX2lkZW50aXR5IDogU2hhcGUuVXVpZC50IG9wdGlvblxuICBlbmQpID1cbnN0cnVjdFxuICBtb2R1bGUgQiA9IFMuQmluYWJsZVxuXG4gIGxldCBiaW5fc2hhcGVfdCBiaW5fc2hhcGVfZWwxIGJpbl9zaGFwZV9lbDIgYmluX3NoYXBlX2VsMyA9XG4gICAgbWF5YmVfYW5ub3RhdGVfc2hhcGVcbiAgICAgIFMubWF5YmVfY2FsbGVyX2lkZW50aXR5XG4gICAgICAoQi5iaW5fc2hhcGVfdCBiaW5fc2hhcGVfZWwxIGJpbl9zaGFwZV9lbDIgYmluX3NoYXBlX2VsMylcbiAgOztcblxuICBsZXQgYmluX3NpemVfdCBiaW5fc2l6ZV9lbDEgYmluX3NpemVfZWwyIGJpbl9zaXplX2VsMyB0ID1cbiAgICBCLmJpbl9zaXplX3QgYmluX3NpemVfZWwxIGJpbl9zaXplX2VsMiBiaW5fc2l6ZV9lbDMgKFMudG9fYmluYWJsZSB0KVxuICA7O1xuXG4gIGxldCBiaW5fd3JpdGVfdCBiaW5fd3JpdGVfZWwxIGJpbl93cml0ZV9lbDIgYmluX3dyaXRlX2VsMyBidWYgfnBvcyB0ID1cbiAgICBCLmJpbl93cml0ZV90IGJpbl93cml0ZV9lbDEgYmluX3dyaXRlX2VsMiBiaW5fd3JpdGVfZWwzIGJ1ZiB+cG9zIChTLnRvX2JpbmFibGUgdClcbiAgOztcblxuICBsZXQgYmluX3JlYWRfdCBiaW5fcmVhZF9lbDEgYmluX3JlYWRfZWwyIGJpbl9yZWFkX2VsMyBidWYgfnBvc19yZWYgPVxuICAgIFMub2ZfYmluYWJsZSAoQi5iaW5fcmVhZF90IGJpbl9yZWFkX2VsMSBiaW5fcmVhZF9lbDIgYmluX3JlYWRfZWwzIGJ1ZiB+cG9zX3JlZilcbiAgOztcblxuICBsZXQgX19iaW5fcmVhZF90X18gYmluX3JlYWRfZWwxIGJpbl9yZWFkX2VsMiBiaW5fcmVhZF9lbDMgYnVmIH5wb3NfcmVmIG4gPVxuICAgIFMub2ZfYmluYWJsZSAoQi5fX2Jpbl9yZWFkX3RfXyBiaW5fcmVhZF9lbDEgYmluX3JlYWRfZWwyIGJpbl9yZWFkX2VsMyBidWYgfnBvc19yZWYgbilcbiAgOztcblxuICBsZXQgYmluX3dyaXRlcl90IGJpbl93cml0ZXIxIGJpbl93cml0ZXIyIGJpbl93cml0ZXIzID1cbiAgICB7IHNpemUgPSAoZnVuIHYgLT4gYmluX3NpemVfdCBiaW5fd3JpdGVyMS5zaXplIGJpbl93cml0ZXIyLnNpemUgYmluX3dyaXRlcjMuc2l6ZSB2KVxuICAgIDsgd3JpdGUgPVxuICAgICAgICAoZnVuIGJ1ZiB+cG9zIHYgLT5cbiAgICAgICAgICAgYmluX3dyaXRlX3QgYmluX3dyaXRlcjEud3JpdGUgYmluX3dyaXRlcjIud3JpdGUgYmluX3dyaXRlcjMud3JpdGUgYnVmIH5wb3MgdilcbiAgICB9XG4gIDs7XG5cbiAgbGV0IGJpbl9yZWFkZXJfdCBiaW5fcmVhZGVyMSBiaW5fcmVhZGVyMiBiaW5fcmVhZGVyMyA9XG4gICAgeyByZWFkID1cbiAgICAgICAgKGZ1biBidWYgfnBvc19yZWYgLT5cbiAgICAgICAgICAgYmluX3JlYWRfdCBiaW5fcmVhZGVyMS5yZWFkIGJpbl9yZWFkZXIyLnJlYWQgYmluX3JlYWRlcjMucmVhZCBidWYgfnBvc19yZWYpXG4gICAgOyB2dGFnX3JlYWQgPVxuICAgICAgICAoZnVuIF9idWYgfnBvc19yZWYgX24gLT5cbiAgICAgICAgICAgcmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiQmluX3Byb3QuVXRpbHMuTWFrZV9iaW5hYmxlMy5iaW5fcmVhZGVyX3RcIiAhcG9zX3JlZilcbiAgICB9XG4gIDs7XG5cbiAgbGV0IGJpbl90IHR5cGVfY2xhc3MxIHR5cGVfY2xhc3MyIHR5cGVfY2xhc3MzID1cbiAgICB7IHNoYXBlID0gYmluX3NoYXBlX3QgdHlwZV9jbGFzczEuc2hhcGUgdHlwZV9jbGFzczIuc2hhcGUgdHlwZV9jbGFzczMuc2hhcGVcbiAgICA7IHdyaXRlciA9IGJpbl93cml0ZXJfdCB0eXBlX2NsYXNzMS53cml0ZXIgdHlwZV9jbGFzczIud3JpdGVyIHR5cGVfY2xhc3MzLndyaXRlclxuICAgIDsgcmVhZGVyID0gYmluX3JlYWRlcl90IHR5cGVfY2xhc3MxLnJlYWRlciB0eXBlX2NsYXNzMi5yZWFkZXIgdHlwZV9jbGFzczMucmVhZGVyXG4gICAgfVxuICA7O1xuZW5kXG5cbm1vZHVsZSBNYWtlX2JpbmFibGVfd2l0aF91dWlkIChTIDogTWFrZV9iaW5hYmxlX3dpdGhfdXVpZF9zcGVjKSA9IE1ha2VfYmluYWJsZV9nZW4gKHN0cnVjdFxuICAgIGluY2x1ZGUgU1xuXG4gICAgbGV0IG1heWJlX2NhbGxlcl9pZGVudGl0eSA9IFNvbWUgUy5jYWxsZXJfaWRlbnRpdHlcbiAgZW5kKVxuXG5tb2R1bGUgTWFrZV9iaW5hYmxlMV93aXRoX3V1aWQgKFMgOiBNYWtlX2JpbmFibGUxX3dpdGhfdXVpZF9zcGVjKSA9XG4gIE1ha2VfYmluYWJsZTFfZ2VuIChzdHJ1Y3RcbiAgICBpbmNsdWRlIFNcblxuICAgIGxldCBtYXliZV9jYWxsZXJfaWRlbnRpdHkgPSBTb21lIFMuY2FsbGVyX2lkZW50aXR5XG4gIGVuZClcblxubW9kdWxlIE1ha2VfYmluYWJsZTJfd2l0aF91dWlkIChTIDogTWFrZV9iaW5hYmxlMl93aXRoX3V1aWRfc3BlYykgPVxuICBNYWtlX2JpbmFibGUyX2dlbiAoc3RydWN0XG4gICAgaW5jbHVkZSBTXG5cbiAgICBsZXQgbWF5YmVfY2FsbGVyX2lkZW50aXR5ID0gU29tZSBTLmNhbGxlcl9pZGVudGl0eVxuICBlbmQpXG5cbm1vZHVsZSBNYWtlX2JpbmFibGUzX3dpdGhfdXVpZCAoUyA6IE1ha2VfYmluYWJsZTNfd2l0aF91dWlkX3NwZWMpID1cbiAgTWFrZV9iaW5hYmxlM19nZW4gKHN0cnVjdFxuICAgIGluY2x1ZGUgU1xuXG4gICAgbGV0IG1heWJlX2NhbGxlcl9pZGVudGl0eSA9IFNvbWUgUy5jYWxsZXJfaWRlbnRpdHlcbiAgZW5kKVxuXG5tb2R1bGUgTWFrZV9iaW5hYmxlX3dpdGhvdXRfdXVpZCAoUyA6IE1ha2VfYmluYWJsZV93aXRob3V0X3V1aWRfc3BlYykgPVxuICBNYWtlX2JpbmFibGVfZ2VuIChzdHJ1Y3RcbiAgICBpbmNsdWRlIFNcblxuICAgIGxldCBtYXliZV9jYWxsZXJfaWRlbnRpdHkgPSBOb25lXG4gIGVuZClcblxubW9kdWxlIE1ha2VfYmluYWJsZTFfd2l0aG91dF91dWlkIChTIDogTWFrZV9iaW5hYmxlMV93aXRob3V0X3V1aWRfc3BlYykgPVxuICBNYWtlX2JpbmFibGUxX2dlbiAoc3RydWN0XG4gICAgaW5jbHVkZSBTXG5cbiAgICBsZXQgbWF5YmVfY2FsbGVyX2lkZW50aXR5ID0gTm9uZVxuICBlbmQpXG5cbm1vZHVsZSBNYWtlX2JpbmFibGUyX3dpdGhvdXRfdXVpZCAoUyA6IE1ha2VfYmluYWJsZTJfd2l0aG91dF91dWlkX3NwZWMpID1cbiAgTWFrZV9iaW5hYmxlMl9nZW4gKHN0cnVjdFxuICAgIGluY2x1ZGUgU1xuXG4gICAgbGV0IG1heWJlX2NhbGxlcl9pZGVudGl0eSA9IE5vbmVcbiAgZW5kKVxuXG5tb2R1bGUgTWFrZV9iaW5hYmxlM193aXRob3V0X3V1aWQgKFMgOiBNYWtlX2JpbmFibGUzX3dpdGhvdXRfdXVpZF9zcGVjKSA9XG4gIE1ha2VfYmluYWJsZTNfZ2VuIChzdHJ1Y3RcbiAgICBpbmNsdWRlIFNcblxuICAgIGxldCBtYXliZV9jYWxsZXJfaWRlbnRpdHkgPSBOb25lXG4gIGVuZClcblxubW9kdWxlIE1ha2VfYmluYWJsZSA9IE1ha2VfYmluYWJsZV93aXRob3V0X3V1aWRcbm1vZHVsZSBNYWtlX2JpbmFibGUxID0gTWFrZV9iaW5hYmxlMV93aXRob3V0X3V1aWRcbm1vZHVsZSBNYWtlX2JpbmFibGUyID0gTWFrZV9iaW5hYmxlMl93aXRob3V0X3V1aWRcbm1vZHVsZSBNYWtlX2JpbmFibGUzID0gTWFrZV9iaW5hYmxlM193aXRob3V0X3V1aWRcblxubGV0IHdpdGhfbW9kdWxlX25hbWUgZiB+bW9kdWxlX25hbWUgZnVuY3Rpb25fbmFtZSA9XG4gIG1hdGNoIG1vZHVsZV9uYW1lIHdpdGhcbiAgfCBOb25lIC0+IGYgZnVuY3Rpb25fbmFtZVxuICB8IFNvbWUgbW9kdWxlX25hbWUgLT4gUHJpbnRmLmtzcHJpbnRmIGYgXCIlcy4lc1wiIG1vZHVsZV9uYW1lIGZ1bmN0aW9uX25hbWVcbjs7XG5cbmxldCByYWlzZV9jb25jdXJyZW50X21vZGlmaWNhdGlvbiA9IHdpdGhfbW9kdWxlX25hbWUgcmFpc2VfY29uY3VycmVudF9tb2RpZmljYXRpb25cblxubGV0IHJhaXNlX3JlYWRfdG9vX211Y2ggPVxuICB3aXRoX21vZHVsZV9uYW1lXG4gICAgKFByaW50Zi5rc3ByaW50ZiBmYWlsd2l0aCBcIiVzOiB0cmllZCB0byByZWFkIG1vcmUgZWxlbWVudHMgdGhhbiBhdmFpbGFibGVcIilcbjs7XG5cbmxldCByYWlzZV9yZWFkX25vdF9lbm91Z2ggPVxuICB3aXRoX21vZHVsZV9uYW1lIChQcmludGYua3NwcmludGYgZmFpbHdpdGggXCIlczogZGlkbid0IHJlYWQgYWxsIGVsZW1lbnRzXCIpXG47O1xuXG5tb2R1bGUgTWFrZV9pdGVyYWJsZV9iaW5hYmxlIChTIDogTWFrZV9pdGVyYWJsZV9iaW5hYmxlX3NwZWMpID0gc3RydWN0XG4gIG9wZW4gU1xuXG4gIGxldCBiaW5fc2hhcGVfdCA9XG4gICAgU2hhcGUuKFxuICAgICAgYmFzZXR5cGVcbiAgICAgICAgY2FsbGVyX2lkZW50aXR5XG4gICAgICAgIFsgYmFzZXR5cGVcbiAgICAgICAgICAgIChVdWlkLm9mX3N0cmluZyBcIjY1OTIzNzFhLTQ5OTQtMTFlNi05MjNhLTc3NDhlNDE4Mjc2NFwiKVxuICAgICAgICAgICAgWyBTLmJpbl9zaGFwZV9lbCBdXG4gICAgICAgIF0pXG4gIDs7XG5cbiAgbGV0IGJpbl9zaXplX3QgdCA9XG4gICAgbGV0IHNpemVfcmVmID0gcmVmIDAgaW5cbiAgICBsZXQgY250X3JlZiA9IHJlZiAwIGluXG4gICAgaXRlciB0IH5mOihmdW4gZWwgLT5cbiAgICAgIHNpemVfcmVmIDo9ICFzaXplX3JlZiArIGJpbl9zaXplX2VsIGVsO1xuICAgICAgaW5jciBjbnRfcmVmKTtcbiAgICBsZXQgbGVuID0gbGVuZ3RoIHQgaW5cbiAgICBpZiAhY250X3JlZiA9IGxlblxuICAgIHRoZW4gYmluX3NpemVfbmF0MCAoTmF0MC51bnNhZmVfb2ZfaW50IGxlbikgKyAhc2l6ZV9yZWZcbiAgICBlbHNlIHJhaXNlX2NvbmN1cnJlbnRfbW9kaWZpY2F0aW9uIH5tb2R1bGVfbmFtZSBcImJpbl9zaXplX3RcIlxuICA7O1xuXG4gIGxldCBiaW5fd3JpdGVfdCBidWYgfnBvcyB0ID1cbiAgICBsZXQgbGVuID0gbGVuZ3RoIHQgaW5cbiAgICBsZXQgcGxlbiA9IE5hdDAudW5zYWZlX29mX2ludCBsZW4gaW5cbiAgICBsZXQgcG9zX3JlZiA9IHJlZiAoV3JpdGUuYmluX3dyaXRlX25hdDAgYnVmIH5wb3MgcGxlbikgaW5cbiAgICBsZXQgY250X3JlZiA9IHJlZiAwIGluXG4gICAgaXRlciB0IH5mOihmdW4gZWwgLT5cbiAgICAgIHBvc19yZWYgOj0gYmluX3dyaXRlX2VsIGJ1ZiB+cG9zOiFwb3NfcmVmIGVsO1xuICAgICAgaW5jciBjbnRfcmVmKTtcbiAgICBpZiAhY250X3JlZiA9IGxlblxuICAgIHRoZW4gIXBvc19yZWZcbiAgICBlbHNlIHJhaXNlX2NvbmN1cnJlbnRfbW9kaWZpY2F0aW9uIH5tb2R1bGVfbmFtZSBcImJpbl93cml0ZV90XCJcbiAgOztcblxuICBsZXQgYmluX3JlYWRfdCBidWYgfnBvc19yZWYgPVxuICAgIGxldCBsZW4gPSAoUmVhZC5iaW5fcmVhZF9uYXQwIGJ1ZiB+cG9zX3JlZiA6PiBpbnQpIGluXG4gICAgbGV0IGlkeCA9IHJlZiAwIGluXG4gICAgbGV0IG5leHQgKCkgPVxuICAgICAgaWYgIWlkeCA+PSBsZW4gdGhlbiByYWlzZV9yZWFkX3Rvb19tdWNoIH5tb2R1bGVfbmFtZSBcImJpbl9yZWFkX3RcIjtcbiAgICAgIGluY3IgaWR4O1xuICAgICAgYmluX3JlYWRfZWwgYnVmIH5wb3NfcmVmXG4gICAgaW5cbiAgICBsZXQgcmVzdWx0ID0gaW5pdCB+bGVuIH5uZXh0IGluXG4gICAgaWYgIWlkeCA8IGxlbiB0aGVuIHJhaXNlX3JlYWRfbm90X2Vub3VnaCB+bW9kdWxlX25hbWUgXCJiaW5fcmVhZF90XCI7XG4gICAgcmVzdWx0XG4gIDs7XG5cbiAgbGV0IF9fYmluX3JlYWRfdF9fIF9idWYgfnBvc19yZWYgX24gPSByYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJ0XCIgIXBvc19yZWZcbiAgbGV0IGJpbl93cml0ZXJfdCA9IHsgc2l6ZSA9IGJpbl9zaXplX3Q7IHdyaXRlID0gYmluX3dyaXRlX3QgfVxuICBsZXQgYmluX3JlYWRlcl90ID0geyByZWFkID0gYmluX3JlYWRfdDsgdnRhZ19yZWFkID0gX19iaW5fcmVhZF90X18gfVxuICBsZXQgYmluX3QgPSB7IHNoYXBlID0gYmluX3NoYXBlX3Q7IHdyaXRlciA9IGJpbl93cml0ZXJfdDsgcmVhZGVyID0gYmluX3JlYWRlcl90IH1cbmVuZFxuXG5tb2R1bGUgTWFrZV9pdGVyYWJsZV9iaW5hYmxlMSAoUyA6IE1ha2VfaXRlcmFibGVfYmluYWJsZTFfc3BlYykgPSBzdHJ1Y3RcbiAgb3BlbiBTXG5cbiAgbGV0IGJpbl9zaGFwZV90IHQgPVxuICAgIFNoYXBlLihcbiAgICAgIGJhc2V0eXBlXG4gICAgICAgIGNhbGxlcl9pZGVudGl0eVxuICAgICAgICBbIGJhc2V0eXBlXG4gICAgICAgICAgICAoVXVpZC5vZl9zdHJpbmcgXCJhYzhhOWZmNC00OTk0LTExZTYtOWExYi05ZmI0ZTkzM2JkOWRcIilcbiAgICAgICAgICAgIFsgUy5iaW5fc2hhcGVfZWwgdCBdXG4gICAgICAgIF0pXG4gIDs7XG5cbiAgbGV0IGJpbl9zaXplX3QgYmluX3NpemVfYSB0ID1cbiAgICBsZXQgc2l6ZV9yZWYgPSByZWYgMCBpblxuICAgIGxldCBjbnRfcmVmID0gcmVmIDAgaW5cbiAgICBpdGVyIHQgfmY6KGZ1biBlbCAtPlxuICAgICAgc2l6ZV9yZWYgOj0gIXNpemVfcmVmICsgYmluX3NpemVfZWwgYmluX3NpemVfYSBlbDtcbiAgICAgIGluY3IgY250X3JlZik7XG4gICAgbGV0IGxlbiA9IGxlbmd0aCB0IGluXG4gICAgaWYgIWNudF9yZWYgPSBsZW5cbiAgICB0aGVuIGJpbl9zaXplX25hdDAgKE5hdDAudW5zYWZlX29mX2ludCBsZW4pICsgIXNpemVfcmVmXG4gICAgZWxzZSByYWlzZV9jb25jdXJyZW50X21vZGlmaWNhdGlvbiB+bW9kdWxlX25hbWUgXCJiaW5fc2l6ZV90XCJcbiAgOztcblxuICBsZXQgYmluX3dyaXRlX3QgYmluX3dyaXRlX2EgYnVmIH5wb3MgdCA9XG4gICAgbGV0IGxlbiA9IGxlbmd0aCB0IGluXG4gICAgbGV0IHBsZW4gPSBOYXQwLnVuc2FmZV9vZl9pbnQgbGVuIGluXG4gICAgbGV0IHBvc19yZWYgPSByZWYgKFdyaXRlLmJpbl93cml0ZV9uYXQwIGJ1ZiB+cG9zIHBsZW4pIGluXG4gICAgbGV0IGNudF9yZWYgPSByZWYgMCBpblxuICAgIGl0ZXIgdCB+ZjooZnVuIGVsIC0+XG4gICAgICBwb3NfcmVmIDo9IGJpbl93cml0ZV9lbCBiaW5fd3JpdGVfYSBidWYgfnBvczohcG9zX3JlZiBlbDtcbiAgICAgIGluY3IgY250X3JlZik7XG4gICAgaWYgIWNudF9yZWYgPSBsZW5cbiAgICB0aGVuICFwb3NfcmVmXG4gICAgZWxzZSByYWlzZV9jb25jdXJyZW50X21vZGlmaWNhdGlvbiB+bW9kdWxlX25hbWUgXCJiaW5fd3JpdGVfdFwiXG4gIDs7XG5cbiAgbGV0IGJpbl9yZWFkX3QgYmluX3JlYWRfYSBidWYgfnBvc19yZWYgPVxuICAgIGxldCBsZW4gPSAoUmVhZC5iaW5fcmVhZF9uYXQwIGJ1ZiB+cG9zX3JlZiA6PiBpbnQpIGluXG4gICAgbGV0IGlkeCA9IHJlZiAwIGluXG4gICAgbGV0IG5leHQgKCkgPVxuICAgICAgaWYgIWlkeCA+PSBsZW4gdGhlbiByYWlzZV9yZWFkX3Rvb19tdWNoIH5tb2R1bGVfbmFtZSBcImJpbl9yZWFkX3RcIjtcbiAgICAgIGluY3IgaWR4O1xuICAgICAgYmluX3JlYWRfZWwgYmluX3JlYWRfYSBidWYgfnBvc19yZWZcbiAgICBpblxuICAgIGxldCByZXN1bHQgPSBpbml0IH5sZW4gfm5leHQgaW5cbiAgICBpZiAhaWR4IDwgbGVuIHRoZW4gcmFpc2VfcmVhZF9ub3RfZW5vdWdoIH5tb2R1bGVfbmFtZSBcImJpbl9yZWFkX3RcIjtcbiAgICByZXN1bHRcbiAgOztcblxuICBsZXQgX19iaW5fcmVhZF90X18gX2Jpbl9yZWFkX2EgX2J1ZiB+cG9zX3JlZiBfbiA9IHJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcInRcIiAhcG9zX3JlZlxuXG4gIGxldCBiaW5fd3JpdGVyX3QgYmluX3dyaXRlciA9XG4gICAgeyBzaXplID0gKGZ1biB2IC0+IGJpbl9zaXplX3QgYmluX3dyaXRlci5zaXplIHYpXG4gICAgOyB3cml0ZSA9IChmdW4gYnVmIH5wb3MgdiAtPiBiaW5fd3JpdGVfdCBiaW5fd3JpdGVyLndyaXRlIGJ1ZiB+cG9zIHYpXG4gICAgfVxuICA7O1xuXG4gIGxldCBiaW5fcmVhZGVyX3QgYmluX3JlYWRlciA9XG4gICAgeyByZWFkID0gKGZ1biBidWYgfnBvc19yZWYgLT4gYmluX3JlYWRfdCBiaW5fcmVhZGVyLnJlYWQgYnVmIH5wb3NfcmVmKVxuICAgIDsgdnRhZ19yZWFkID0gKGZ1biBidWYgfnBvc19yZWYgX24gLT4gX19iaW5fcmVhZF90X18gYmluX3JlYWRlci5yZWFkIGJ1ZiB+cG9zX3JlZiBfbilcbiAgICB9XG4gIDs7XG5cbiAgbGV0IGJpbl90IHR5cGVfY2xhc3MgPVxuICAgIHsgc2hhcGUgPSBiaW5fc2hhcGVfdCB0eXBlX2NsYXNzLnNoYXBlXG4gICAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX3QgdHlwZV9jbGFzcy53cml0ZXJcbiAgICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfdCB0eXBlX2NsYXNzLnJlYWRlclxuICAgIH1cbiAgOztcbmVuZFxuXG5tb2R1bGUgTWFrZV9pdGVyYWJsZV9iaW5hYmxlMiAoUyA6IE1ha2VfaXRlcmFibGVfYmluYWJsZTJfc3BlYykgPSBzdHJ1Y3RcbiAgb3BlbiBTXG5cbiAgbGV0IGJpbl9zaGFwZV90IHQxIHQyID1cbiAgICBTaGFwZS4oXG4gICAgICBiYXNldHlwZVxuICAgICAgICBjYWxsZXJfaWRlbnRpdHlcbiAgICAgICAgWyBiYXNldHlwZVxuICAgICAgICAgICAgKFV1aWQub2Zfc3RyaW5nIFwiYjRlNTRhZDItNDk5NC0xMWU2LWI4ZGYtODdjMjk5N2Y5ZjUyXCIpXG4gICAgICAgICAgICBbIFMuYmluX3NoYXBlX2VsIHQxIHQyIF1cbiAgICAgICAgXSlcbiAgOztcblxuICBsZXQgYmluX3NpemVfdCBiaW5fc2l6ZV9hIGJpbl9zaXplX2IgdCA9XG4gICAgbGV0IHNpemVfcmVmID0gcmVmIDAgaW5cbiAgICBsZXQgY250X3JlZiA9IHJlZiAwIGluXG4gICAgaXRlciB0IH5mOihmdW4gZWwgLT5cbiAgICAgIHNpemVfcmVmIDo9ICFzaXplX3JlZiArIGJpbl9zaXplX2VsIGJpbl9zaXplX2EgYmluX3NpemVfYiBlbDtcbiAgICAgIGluY3IgY250X3JlZik7XG4gICAgbGV0IGxlbiA9IGxlbmd0aCB0IGluXG4gICAgaWYgIWNudF9yZWYgPSBsZW5cbiAgICB0aGVuIGJpbl9zaXplX25hdDAgKE5hdDAudW5zYWZlX29mX2ludCBsZW4pICsgIXNpemVfcmVmXG4gICAgZWxzZSByYWlzZV9jb25jdXJyZW50X21vZGlmaWNhdGlvbiB+bW9kdWxlX25hbWUgXCJiaW5fc2l6ZV90XCJcbiAgOztcblxuICBsZXQgYmluX3dyaXRlX3QgYmluX3dyaXRlX2EgYmluX3dyaXRlX2IgYnVmIH5wb3MgdCA9XG4gICAgbGV0IGxlbiA9IGxlbmd0aCB0IGluXG4gICAgbGV0IHBsZW4gPSBOYXQwLnVuc2FmZV9vZl9pbnQgbGVuIGluXG4gICAgbGV0IHBvc19yZWYgPSByZWYgKFdyaXRlLmJpbl93cml0ZV9uYXQwIGJ1ZiB+cG9zIHBsZW4pIGluXG4gICAgbGV0IGNudF9yZWYgPSByZWYgMCBpblxuICAgIGl0ZXIgdCB+ZjooZnVuIGVsIC0+XG4gICAgICBwb3NfcmVmIDo9IGJpbl93cml0ZV9lbCBiaW5fd3JpdGVfYSBiaW5fd3JpdGVfYiBidWYgfnBvczohcG9zX3JlZiBlbDtcbiAgICAgIGluY3IgY250X3JlZik7XG4gICAgaWYgIWNudF9yZWYgPSBsZW5cbiAgICB0aGVuICFwb3NfcmVmXG4gICAgZWxzZSByYWlzZV9jb25jdXJyZW50X21vZGlmaWNhdGlvbiB+bW9kdWxlX25hbWUgXCJiaW5fd3JpdGVfdFwiXG4gIDs7XG5cbiAgbGV0IGJpbl9yZWFkX3QgYmluX3JlYWRfYSBiaW5fcmVhZF9iIGJ1ZiB+cG9zX3JlZiA9XG4gICAgbGV0IGxlbiA9IChSZWFkLmJpbl9yZWFkX25hdDAgYnVmIH5wb3NfcmVmIDo+IGludCkgaW5cbiAgICBsZXQgaWR4ID0gcmVmIDAgaW5cbiAgICBsZXQgbmV4dCAoKSA9XG4gICAgICBpZiAhaWR4ID49IGxlbiB0aGVuIHJhaXNlX3JlYWRfdG9vX211Y2ggfm1vZHVsZV9uYW1lIFwiYmluX3JlYWRfdFwiO1xuICAgICAgaW5jciBpZHg7XG4gICAgICBiaW5fcmVhZF9lbCBiaW5fcmVhZF9hIGJpbl9yZWFkX2IgYnVmIH5wb3NfcmVmXG4gICAgaW5cbiAgICBsZXQgcmVzdWx0ID0gaW5pdCB+bGVuIH5uZXh0IGluXG4gICAgaWYgIWlkeCA8IGxlbiB0aGVuIHJhaXNlX3JlYWRfbm90X2Vub3VnaCB+bW9kdWxlX25hbWUgXCJiaW5fcmVhZF90XCI7XG4gICAgcmVzdWx0XG4gIDs7XG5cbiAgbGV0IF9fYmluX3JlYWRfdF9fIF9iaW5fcmVhZF9hIF9iaW5fcmVhZF9iIF9idWYgfnBvc19yZWYgX24gPVxuICAgIHJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcInRcIiAhcG9zX3JlZlxuICA7O1xuXG4gIGxldCBiaW5fd3JpdGVyX3QgYmluX3dyaXRlcjEgYmluX3dyaXRlcjIgPVxuICAgIHsgc2l6ZSA9IChmdW4gdiAtPiBiaW5fc2l6ZV90IGJpbl93cml0ZXIxLnNpemUgYmluX3dyaXRlcjIuc2l6ZSB2KVxuICAgIDsgd3JpdGUgPVxuICAgICAgICAoZnVuIGJ1ZiB+cG9zIHYgLT4gYmluX3dyaXRlX3QgYmluX3dyaXRlcjEud3JpdGUgYmluX3dyaXRlcjIud3JpdGUgYnVmIH5wb3MgdilcbiAgICB9XG4gIDs7XG5cbiAgbGV0IGJpbl9yZWFkZXJfdCBiaW5fcmVhZGVyMSBiaW5fcmVhZGVyMiA9XG4gICAgeyByZWFkID1cbiAgICAgICAgKGZ1biBidWYgfnBvc19yZWYgLT4gYmluX3JlYWRfdCBiaW5fcmVhZGVyMS5yZWFkIGJpbl9yZWFkZXIyLnJlYWQgYnVmIH5wb3NfcmVmKVxuICAgIDsgdnRhZ19yZWFkID1cbiAgICAgICAgKGZ1biBidWYgfnBvc19yZWYgbiAtPlxuICAgICAgICAgICBfX2Jpbl9yZWFkX3RfXyBiaW5fcmVhZGVyMS5yZWFkIGJpbl9yZWFkZXIyLnJlYWQgYnVmIH5wb3NfcmVmIG4pXG4gICAgfVxuICA7O1xuXG4gIGxldCBiaW5fdCB0eXBlX2NsYXNzMSB0eXBlX2NsYXNzMiA9XG4gICAgeyBzaGFwZSA9IGJpbl9zaGFwZV90IHR5cGVfY2xhc3MxLnNoYXBlIHR5cGVfY2xhc3MyLnNoYXBlXG4gICAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX3QgdHlwZV9jbGFzczEud3JpdGVyIHR5cGVfY2xhc3MyLndyaXRlclxuICAgIDsgcmVhZGVyID0gYmluX3JlYWRlcl90IHR5cGVfY2xhc3MxLnJlYWRlciB0eXBlX2NsYXNzMi5yZWFkZXJcbiAgICB9XG4gIDs7XG5lbmRcblxubW9kdWxlIE1ha2VfaXRlcmFibGVfYmluYWJsZTMgKFMgOiBNYWtlX2l0ZXJhYmxlX2JpbmFibGUzX3NwZWMpID0gc3RydWN0XG4gIG9wZW4gU1xuXG4gIGxldCBiaW5fc2hhcGVfdCB0MSB0MiB0MyA9XG4gICAgU2hhcGUuKFxuICAgICAgYmFzZXR5cGVcbiAgICAgICAgY2FsbGVyX2lkZW50aXR5XG4gICAgICAgIFsgYmFzZXR5cGVcbiAgICAgICAgICAgIChVdWlkLm9mX3N0cmluZyBcImYyMTEyZWRhLWU3ZDctMTFlNi1iYjM2LTA3MmU5Y2UxNTlkYlwiKVxuICAgICAgICAgICAgWyBTLmJpbl9zaGFwZV9lbCB0MSB0MiB0MyBdXG4gICAgICAgIF0pXG4gIDs7XG5cbiAgbGV0IGJpbl9zaXplX3QgYmluX3NpemVfYSBiaW5fc2l6ZV9iIGJpbl9zaXplX2MgdCA9XG4gICAgbGV0IHNpemVfcmVmID0gcmVmIDAgaW5cbiAgICBsZXQgY250X3JlZiA9IHJlZiAwIGluXG4gICAgaXRlciB0IH5mOihmdW4gZWwgLT5cbiAgICAgIHNpemVfcmVmIDo9ICFzaXplX3JlZiArIGJpbl9zaXplX2VsIGJpbl9zaXplX2EgYmluX3NpemVfYiBiaW5fc2l6ZV9jIGVsO1xuICAgICAgaW5jciBjbnRfcmVmKTtcbiAgICBsZXQgbGVuID0gbGVuZ3RoIHQgaW5cbiAgICBpZiAhY250X3JlZiA9IGxlblxuICAgIHRoZW4gYmluX3NpemVfbmF0MCAoTmF0MC51bnNhZmVfb2ZfaW50IGxlbikgKyAhc2l6ZV9yZWZcbiAgICBlbHNlIHJhaXNlX2NvbmN1cnJlbnRfbW9kaWZpY2F0aW9uIH5tb2R1bGVfbmFtZSBcImJpbl9zaXplX3RcIlxuICA7O1xuXG4gIGxldCBiaW5fd3JpdGVfdCBiaW5fd3JpdGVfYSBiaW5fd3JpdGVfYiBiaW5fd3JpdGVfYyBidWYgfnBvcyB0ID1cbiAgICBsZXQgbGVuID0gbGVuZ3RoIHQgaW5cbiAgICBsZXQgcGxlbiA9IE5hdDAudW5zYWZlX29mX2ludCBsZW4gaW5cbiAgICBsZXQgcG9zX3JlZiA9IHJlZiAoV3JpdGUuYmluX3dyaXRlX25hdDAgYnVmIH5wb3MgcGxlbikgaW5cbiAgICBsZXQgY250X3JlZiA9IHJlZiAwIGluXG4gICAgaXRlciB0IH5mOihmdW4gZWwgLT5cbiAgICAgIHBvc19yZWYgOj0gYmluX3dyaXRlX2VsIGJpbl93cml0ZV9hIGJpbl93cml0ZV9iIGJpbl93cml0ZV9jIGJ1ZiB+cG9zOiFwb3NfcmVmIGVsO1xuICAgICAgaW5jciBjbnRfcmVmKTtcbiAgICBpZiAhY250X3JlZiA9IGxlblxuICAgIHRoZW4gIXBvc19yZWZcbiAgICBlbHNlIHJhaXNlX2NvbmN1cnJlbnRfbW9kaWZpY2F0aW9uIH5tb2R1bGVfbmFtZSBcImJpbl93cml0ZV90XCJcbiAgOztcblxuICBsZXQgYmluX3JlYWRfdCBiaW5fcmVhZF9hIGJpbl9yZWFkX2IgYmluX3JlYWRfYyBidWYgfnBvc19yZWYgPVxuICAgIGxldCBsZW4gPSAoUmVhZC5iaW5fcmVhZF9uYXQwIGJ1ZiB+cG9zX3JlZiA6PiBpbnQpIGluXG4gICAgbGV0IGlkeCA9IHJlZiAwIGluXG4gICAgbGV0IG5leHQgKCkgPVxuICAgICAgaWYgIWlkeCA+PSBsZW4gdGhlbiByYWlzZV9yZWFkX3Rvb19tdWNoIH5tb2R1bGVfbmFtZSBcImJpbl9yZWFkX3RcIjtcbiAgICAgIGluY3IgaWR4O1xuICAgICAgYmluX3JlYWRfZWwgYmluX3JlYWRfYSBiaW5fcmVhZF9iIGJpbl9yZWFkX2MgYnVmIH5wb3NfcmVmXG4gICAgaW5cbiAgICBsZXQgcmVzdWx0ID0gaW5pdCB+bGVuIH5uZXh0IGluXG4gICAgaWYgIWlkeCA8IGxlbiB0aGVuIHJhaXNlX3JlYWRfbm90X2Vub3VnaCB+bW9kdWxlX25hbWUgXCJiaW5fcmVhZF90XCI7XG4gICAgcmVzdWx0XG4gIDs7XG5cbiAgbGV0IF9fYmluX3JlYWRfdF9fIF9iaW5fcmVhZF9hIF9iaW5fcmVhZF9iIF9iaW5fcmVhZF9jIF9idWYgfnBvc19yZWYgX24gPVxuICAgIHJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcInRcIiAhcG9zX3JlZlxuICA7O1xuXG4gIGxldCBiaW5fd3JpdGVyX3QgYmluX3dyaXRlcjEgYmluX3dyaXRlcjIgYmluX3dyaXRlcjMgPVxuICAgIHsgc2l6ZSA9IChmdW4gdiAtPiBiaW5fc2l6ZV90IGJpbl93cml0ZXIxLnNpemUgYmluX3dyaXRlcjIuc2l6ZSBiaW5fd3JpdGVyMy5zaXplIHYpXG4gICAgOyB3cml0ZSA9XG4gICAgICAgIChmdW4gYnVmIH5wb3MgdiAtPlxuICAgICAgICAgICBiaW5fd3JpdGVfdCBiaW5fd3JpdGVyMS53cml0ZSBiaW5fd3JpdGVyMi53cml0ZSBiaW5fd3JpdGVyMy53cml0ZSBidWYgfnBvcyB2KVxuICAgIH1cbiAgOztcblxuICBsZXQgYmluX3JlYWRlcl90IGJpbl9yZWFkZXIxIGJpbl9yZWFkZXIyIGJpbl9yZWFkZXIzID1cbiAgICB7IHJlYWQgPVxuICAgICAgICAoZnVuIGJ1ZiB+cG9zX3JlZiAtPlxuICAgICAgICAgICBiaW5fcmVhZF90IGJpbl9yZWFkZXIxLnJlYWQgYmluX3JlYWRlcjIucmVhZCBiaW5fcmVhZGVyMy5yZWFkIGJ1ZiB+cG9zX3JlZilcbiAgICA7IHZ0YWdfcmVhZCA9XG4gICAgICAgIChmdW4gYnVmIH5wb3NfcmVmIG4gLT5cbiAgICAgICAgICAgX19iaW5fcmVhZF90X18gYmluX3JlYWRlcjEucmVhZCBiaW5fcmVhZGVyMi5yZWFkIGJpbl9yZWFkZXIzLnJlYWQgYnVmIH5wb3NfcmVmIG4pXG4gICAgfVxuICA7O1xuXG4gIGxldCBiaW5fdCB0eXBlX2NsYXNzMSB0eXBlX2NsYXNzMiB0eXBlX2NsYXNzMyA9XG4gICAgeyBzaGFwZSA9IGJpbl9zaGFwZV90IHR5cGVfY2xhc3MxLnNoYXBlIHR5cGVfY2xhc3MyLnNoYXBlIHR5cGVfY2xhc3MzLnNoYXBlXG4gICAgOyB3cml0ZXIgPSBiaW5fd3JpdGVyX3QgdHlwZV9jbGFzczEud3JpdGVyIHR5cGVfY2xhc3MyLndyaXRlciB0eXBlX2NsYXNzMy53cml0ZXJcbiAgICA7IHJlYWRlciA9IGJpbl9yZWFkZXJfdCB0eXBlX2NsYXNzMS5yZWFkZXIgdHlwZV9jbGFzczIucmVhZGVyIHR5cGVfY2xhc3MzLnJlYWRlclxuICAgIH1cbiAgOztcbmVuZFxuIiwiKCoqXG4gICBUaGlzIG1vZHVsZSBkZWZpbmVzIGRlZmF1bHQgY29udmVydGVycyBmb3IgdGhlIHR5cGVzIGRlZmluZWQgaW4gdGhlIE9DYW1sXG4gICBzdGFuZGFyZCBsaWJyYXJ5LlxuKilcblxuaW5jbHVkZSBTaXplXG5cbmxldCBiaW5fdW5pdCA9IFR5cGVfY2xhc3MuYmluX3VuaXRcbmxldCBiaW5fc2hhcGVfdW5pdCA9IFR5cGVfY2xhc3MuYmluX3NoYXBlX3VuaXRcbmxldCBiaW5fd3JpdGVyX3VuaXQgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfdW5pdFxubGV0IGJpbl93cml0ZV91bml0ID0gV3JpdGUuYmluX3dyaXRlX3VuaXRcbmxldCBiaW5fcmVhZGVyX3VuaXQgPSBUeXBlX2NsYXNzLmJpbl9yZWFkZXJfdW5pdFxubGV0IGJpbl9yZWFkX3VuaXQgPSBSZWFkLmJpbl9yZWFkX3VuaXRcblxubGV0IF9fYmluX3JlYWRfdW5pdF9fIF9idWYgfnBvc19yZWYgX3ZpbnQgPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwidW5pdFwiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX2Jvb2wgPSBUeXBlX2NsYXNzLmJpbl9ib29sXG5sZXQgYmluX3NoYXBlX2Jvb2wgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9ib29sXG5sZXQgYmluX3dyaXRlcl9ib29sID0gVHlwZV9jbGFzcy5iaW5fd3JpdGVyX2Jvb2xcbmxldCBiaW5fd3JpdGVfYm9vbCA9IFdyaXRlLmJpbl93cml0ZV9ib29sXG5sZXQgYmluX3JlYWRlcl9ib29sID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2Jvb2xcbmxldCBiaW5fcmVhZF9ib29sID0gUmVhZC5iaW5fcmVhZF9ib29sXG5cbmxldCBfX2Jpbl9yZWFkX2Jvb2xfXyBfYnVmIH5wb3NfcmVmIF92aW50ID1cbiAgQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcImJvb2xcIiAhcG9zX3JlZlxuOztcblxubGV0IGJpbl9zdHJpbmcgPSBUeXBlX2NsYXNzLmJpbl9zdHJpbmdcbmxldCBiaW5fc2hhcGVfc3RyaW5nID0gVHlwZV9jbGFzcy5iaW5fc2hhcGVfc3RyaW5nXG5sZXQgYmluX3dyaXRlcl9zdHJpbmcgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfc3RyaW5nXG5sZXQgYmluX3dyaXRlX3N0cmluZyA9IFdyaXRlLmJpbl93cml0ZV9zdHJpbmdcbmxldCBiaW5fcmVhZGVyX3N0cmluZyA9IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9zdHJpbmdcbmxldCBiaW5fcmVhZF9zdHJpbmcgPSBSZWFkLmJpbl9yZWFkX3N0cmluZ1xuXG5sZXQgX19iaW5fcmVhZF9zdHJpbmdfXyBfYnVmIH5wb3NfcmVmIF92aW50ID1cbiAgQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcInN0cmluZ1wiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX2J5dGVzID0gVHlwZV9jbGFzcy5iaW5fYnl0ZXNcbmxldCBiaW5fc2hhcGVfYnl0ZXMgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9ieXRlc1xubGV0IGJpbl93cml0ZXJfYnl0ZXMgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfYnl0ZXNcbmxldCBiaW5fd3JpdGVfYnl0ZXMgPSBXcml0ZS5iaW5fd3JpdGVfYnl0ZXNcbmxldCBiaW5fcmVhZGVyX2J5dGVzID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2J5dGVzXG5sZXQgYmluX3JlYWRfYnl0ZXMgPSBSZWFkLmJpbl9yZWFkX2J5dGVzXG5cbmxldCBfX2Jpbl9yZWFkX2J5dGVzX18gX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJieXRlc1wiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX2NoYXIgPSBUeXBlX2NsYXNzLmJpbl9jaGFyXG5sZXQgYmluX3NoYXBlX2NoYXIgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9jaGFyXG5sZXQgYmluX3dyaXRlcl9jaGFyID0gVHlwZV9jbGFzcy5iaW5fd3JpdGVyX2NoYXJcbmxldCBiaW5fd3JpdGVfY2hhciA9IFdyaXRlLmJpbl93cml0ZV9jaGFyXG5sZXQgYmluX3JlYWRlcl9jaGFyID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2NoYXJcbmxldCBiaW5fcmVhZF9jaGFyID0gUmVhZC5iaW5fcmVhZF9jaGFyXG5cbmxldCBfX2Jpbl9yZWFkX2NoYXJfXyBfYnVmIH5wb3NfcmVmIF92aW50ID1cbiAgQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcImNoYXJcIiAhcG9zX3JlZlxuOztcblxubGV0IGJpbl9pbnQgPSBUeXBlX2NsYXNzLmJpbl9pbnRcbmxldCBiaW5fc2hhcGVfaW50ID0gVHlwZV9jbGFzcy5iaW5fc2hhcGVfaW50XG5sZXQgYmluX3dyaXRlcl9pbnQgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfaW50XG5sZXQgYmluX3dyaXRlX2ludCA9IFdyaXRlLmJpbl93cml0ZV9pbnRcbmxldCBiaW5fcmVhZGVyX2ludCA9IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9pbnRcbmxldCBiaW5fcmVhZF9pbnQgPSBSZWFkLmJpbl9yZWFkX2ludFxubGV0IF9fYmluX3JlYWRfaW50X18gX2J1ZiB+cG9zX3JlZiBfdmludCA9IENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJpbnRcIiAhcG9zX3JlZlxubGV0IGJpbl9mbG9hdCA9IFR5cGVfY2xhc3MuYmluX2Zsb2F0XG5sZXQgYmluX3NoYXBlX2Zsb2F0ID0gVHlwZV9jbGFzcy5iaW5fc2hhcGVfZmxvYXRcbmxldCBiaW5fd3JpdGVyX2Zsb2F0ID0gVHlwZV9jbGFzcy5iaW5fd3JpdGVyX2Zsb2F0XG5sZXQgYmluX3dyaXRlX2Zsb2F0ID0gV3JpdGUuYmluX3dyaXRlX2Zsb2F0XG5sZXQgYmluX3JlYWRlcl9mbG9hdCA9IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9mbG9hdFxubGV0IGJpbl9yZWFkX2Zsb2F0ID0gUmVhZC5iaW5fcmVhZF9mbG9hdFxuXG5sZXQgX19iaW5fcmVhZF9mbG9hdF9fIF9idWYgfnBvc19yZWYgX3ZpbnQgPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiZmxvYXRcIiAhcG9zX3JlZlxuOztcblxubGV0IGJpbl9mbG9hdGFycmF5ID0gVHlwZV9jbGFzcy5iaW5fZmxvYXRhcnJheVxubGV0IGJpbl9zaGFwZV9mbG9hdGFycmF5ID0gVHlwZV9jbGFzcy5iaW5fc2hhcGVfZmxvYXRhcnJheVxubGV0IGJpbl93cml0ZXJfZmxvYXRhcnJheSA9IFR5cGVfY2xhc3MuYmluX3dyaXRlcl9mbG9hdGFycmF5XG5sZXQgYmluX3dyaXRlX2Zsb2F0YXJyYXkgPSBXcml0ZS5iaW5fd3JpdGVfZmxvYXRhcnJheVxubGV0IGJpbl9yZWFkZXJfZmxvYXRhcnJheSA9IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9mbG9hdGFycmF5XG5sZXQgYmluX3JlYWRfZmxvYXRhcnJheSA9IFJlYWQuYmluX3JlYWRfZmxvYXRhcnJheVxuXG5sZXQgX19iaW5fcmVhZF9mbG9hdGFycmF5X18gX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJmbG9hdGFycmF5XCIgIXBvc19yZWZcbjs7XG5cbmluY2x1ZGUgc3RydWN0XG4gIHR5cGUgZmxvYXRfYXJyYXkgPSBmbG9hdCBhcnJheVxuICBbQEBkZXByZWNhdGVkIFwiW3NpbmNlIDIwMjEtMDldIFVzZSBbZmxvYXQgYXJyYXldIG9yIFtmbG9hdGFycmF5XSBpbnN0ZWFkXCJdXG5cbiAgbGV0IChiaW5fc2hhcGVfZmxvYXRfYXJyYXkgW0BkZXByZWNhdGVkXG4gICAgICAgICBcIltzaW5jZSAyMDIxLTA5XSB1c2UgcHB4X2Jpbl9wcm90IHdpdGggdHlwZSBbZmxvYXQgYXJyYXldIFxcXG4gICAgICAgICAgb3IgW2Zsb2F0YXJyYXldIG9yIHRoZSAnZmxvYXRhcnJheScgZnVuY3Rpb25zXCJdKVxuICAgID1cbiAgICBUeXBlX2NsYXNzLmJpbl9zaGFwZV9mbG9hdF9hcnJheVxuICA7O1xuXG4gIGxldCAoYmluX3dyaXRlcl9mbG9hdF9hcnJheSBbQGRlcHJlY2F0ZWRcbiAgICAgICAgIFwiW3NpbmNlIDIwMjEtMDldIHVzZSBwcHhfYmluX3Byb3Qgd2l0aCB0eXBlIFtmbG9hdCBcXFxuICAgICAgICAgIGFycmF5XSBvciBbZmxvYXRhcnJheV0gb3IgdGhlICdmbG9hdGFycmF5JyBmdW5jdGlvbnNcIl0pXG4gICAgPVxuICAgIFR5cGVfY2xhc3MuYmluX3dyaXRlcl9mbG9hdF9hcnJheVxuICA7O1xuXG4gIGxldCAoYmluX3dyaXRlX2Zsb2F0X2FycmF5IFtAZGVwcmVjYXRlZFxuICAgICAgICAgXCJbc2luY2UgMjAyMS0wOV0gdXNlIHBweF9iaW5fcHJvdCB3aXRoIHR5cGUgW2Zsb2F0IGFycmF5XSBcXFxuICAgICAgICAgIG9yIFtmbG9hdGFycmF5XSBvciB0aGUgJ2Zsb2F0YXJyYXknIGZ1bmN0aW9uc1wiXSlcbiAgICA9XG4gICAgV3JpdGUuYmluX3dyaXRlX2Zsb2F0X2FycmF5XG4gIDs7XG5cbiAgbGV0IChiaW5fcmVhZGVyX2Zsb2F0X2FycmF5IFtAZGVwcmVjYXRlZFxuICAgICAgICAgXCJbc2luY2UgMjAyMS0wOV0gdXNlIHBweF9iaW5fcHJvdCB3aXRoIHR5cGUgW2Zsb2F0IFxcXG4gICAgICAgICAgYXJyYXldIG9yIFtmbG9hdGFycmF5XSBvciB0aGUgJ2Zsb2F0YXJyYXknIGZ1bmN0aW9ucyBcXFxuICAgICAgICAgIGRpcmVjdGx5XCJdKVxuICAgID1cbiAgICBUeXBlX2NsYXNzLmJpbl9yZWFkZXJfZmxvYXRfYXJyYXlcbiAgOztcblxuICBsZXQgKGJpbl9yZWFkX2Zsb2F0X2FycmF5IFtAZGVwcmVjYXRlZFxuICAgICAgICAgXCJbc2luY2UgMjAyMS0wOV0gdXNlIHBweF9iaW5fcHJvdCB3aXRoIHR5cGUgW2Zsb2F0IGFycmF5XSBcXFxuICAgICAgICAgIG9yIFtmbG9hdGFycmF5XSBvciB0aGUgJ2Zsb2F0YXJyYXknIGZ1bmN0aW9uc1wiXSlcbiAgICA9XG4gICAgUmVhZC5iaW5fcmVhZF9mbG9hdF9hcnJheVxuICA7O1xuXG4gIGxldCBfX2Jpbl9yZWFkX2Zsb2F0X2FycmF5X18gX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gICAgQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcImZsb2F0X2FycmF5XCIgIXBvc19yZWZcbiAgOztcblxuICBsZXQgKF9fYmluX3JlYWRfZmxvYXRfYXJyYXlfXyBbQGRlcHJlY2F0ZWRcbiAgICAgICAgIFwiW3NpbmNlIDIwMjEtMDldIHVzZSBwcHhfYmluX3Byb3Qgd2l0aCB0eXBlIFtmbG9hdCBcXFxuICAgICAgICAgIGFycmF5XSBvciBbZmxvYXRhcnJheV0gb3IgdGhlIGZsb2F0YXJyYXkgZnVuY3Rpb25zXCJdKVxuICAgID1cbiAgICBfX2Jpbl9yZWFkX2Zsb2F0X2FycmF5X19cbiAgOztcbmVuZCBbQGFsZXJ0IFwiLWRlcHJlY2F0ZWRcIl1cblxubGV0IGJpbl9pbnQzMiA9IFR5cGVfY2xhc3MuYmluX2ludDMyXG5sZXQgYmluX3NoYXBlX2ludDMyID0gVHlwZV9jbGFzcy5iaW5fc2hhcGVfaW50MzJcbmxldCBiaW5fd3JpdGVyX2ludDMyID0gVHlwZV9jbGFzcy5iaW5fd3JpdGVyX2ludDMyXG5sZXQgYmluX3dyaXRlX2ludDMyID0gV3JpdGUuYmluX3dyaXRlX2ludDMyXG5sZXQgYmluX3JlYWRlcl9pbnQzMiA9IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9pbnQzMlxubGV0IGJpbl9yZWFkX2ludDMyID0gUmVhZC5iaW5fcmVhZF9pbnQzMlxuXG5sZXQgX19iaW5fcmVhZF9pbnQzMl9fIF9idWYgfnBvc19yZWYgX3ZpbnQgPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiaW50MzJcIiAhcG9zX3JlZlxuOztcblxubGV0IGJpbl9pbnQ2NCA9IFR5cGVfY2xhc3MuYmluX2ludDY0XG5sZXQgYmluX3NoYXBlX2ludDY0ID0gVHlwZV9jbGFzcy5iaW5fc2hhcGVfaW50NjRcbmxldCBiaW5fd3JpdGVyX2ludDY0ID0gVHlwZV9jbGFzcy5iaW5fd3JpdGVyX2ludDY0XG5sZXQgYmluX3dyaXRlX2ludDY0ID0gV3JpdGUuYmluX3dyaXRlX2ludDY0XG5sZXQgYmluX3JlYWRlcl9pbnQ2NCA9IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9pbnQ2NFxubGV0IGJpbl9yZWFkX2ludDY0ID0gUmVhZC5iaW5fcmVhZF9pbnQ2NFxuXG5sZXQgX19iaW5fcmVhZF9pbnQ2NF9fIF9idWYgfnBvc19yZWYgX3ZpbnQgPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiaW50NjRcIiAhcG9zX3JlZlxuOztcblxubGV0IGJpbl9uYXRpdmVpbnQgPSBUeXBlX2NsYXNzLmJpbl9uYXRpdmVpbnRcbmxldCBiaW5fc2hhcGVfbmF0aXZlaW50ID0gVHlwZV9jbGFzcy5iaW5fc2hhcGVfbmF0aXZlaW50XG5sZXQgYmluX3dyaXRlcl9uYXRpdmVpbnQgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfbmF0aXZlaW50XG5sZXQgYmluX3dyaXRlX25hdGl2ZWludCA9IFdyaXRlLmJpbl93cml0ZV9uYXRpdmVpbnRcbmxldCBiaW5fcmVhZGVyX25hdGl2ZWludCA9IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9uYXRpdmVpbnRcbmxldCBiaW5fcmVhZF9uYXRpdmVpbnQgPSBSZWFkLmJpbl9yZWFkX25hdGl2ZWludFxuXG5sZXQgX19iaW5fcmVhZF9uYXRpdmVpbnRfXyBfYnVmIH5wb3NfcmVmIF92aW50ID1cbiAgQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcIm5hdGl2ZWludFwiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX3JlZiA9IFR5cGVfY2xhc3MuYmluX3JlZlxubGV0IGJpbl9zaGFwZV9yZWYgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9yZWZcbmxldCBiaW5fd3JpdGVyX3JlZiA9IFR5cGVfY2xhc3MuYmluX3dyaXRlcl9yZWZcbmxldCBiaW5fd3JpdGVfcmVmID0gV3JpdGUuYmluX3dyaXRlX3JlZlxubGV0IGJpbl9yZWFkZXJfcmVmID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX3JlZlxubGV0IGJpbl9yZWFkX3JlZiA9IFJlYWQuYmluX3JlYWRfcmVmXG5cbmxldCBfX2Jpbl9yZWFkX3JlZl9fIF9mIF9idWYgfnBvc19yZWYgX3ZpbnQgPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwicmVmXCIgIXBvc19yZWZcbjs7XG5cbmxldCBiaW5fbGF6eV90ID0gVHlwZV9jbGFzcy5iaW5fbGF6eVxubGV0IGJpbl9zaGFwZV9sYXp5X3QgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9sYXp5XG5sZXQgYmluX3dyaXRlcl9sYXp5X3QgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfbGF6eVxubGV0IGJpbl93cml0ZV9sYXp5X3QgPSBXcml0ZS5iaW5fd3JpdGVfbGF6eVxubGV0IGJpbl9yZWFkZXJfbGF6eV90ID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2xhenlcbmxldCBiaW5fcmVhZF9sYXp5X3QgPSBSZWFkLmJpbl9yZWFkX2xhenlcblxubGV0IF9fYmluX3JlYWRfbGF6eV90X18gX2YgX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJsYXp5XCIgIXBvc19yZWZcbjs7XG5cbmxldCBiaW5fbGF6eSA9IFR5cGVfY2xhc3MuYmluX2xhenlcbmxldCBiaW5fc2hhcGVfbGF6eSA9IFR5cGVfY2xhc3MuYmluX3NoYXBlX2xhenlcbmxldCBiaW5fd3JpdGVyX2xhenkgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfbGF6eVxubGV0IGJpbl93cml0ZV9sYXp5ID0gV3JpdGUuYmluX3dyaXRlX2xhenlcbmxldCBiaW5fcmVhZGVyX2xhenkgPSBUeXBlX2NsYXNzLmJpbl9yZWFkZXJfbGF6eVxubGV0IGJpbl9yZWFkX2xhenkgPSBSZWFkLmJpbl9yZWFkX2xhenlcblxubGV0IF9fYmluX3JlYWRfbGF6eV9fIF9mIF9idWYgfnBvc19yZWYgX3ZpbnQgPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwibGF6eVwiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX29wdGlvbiA9IFR5cGVfY2xhc3MuYmluX29wdGlvblxubGV0IGJpbl9zaGFwZV9vcHRpb24gPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9vcHRpb25cbmxldCBiaW5fd3JpdGVyX29wdGlvbiA9IFR5cGVfY2xhc3MuYmluX3dyaXRlcl9vcHRpb25cbmxldCBiaW5fd3JpdGVfb3B0aW9uID0gV3JpdGUuYmluX3dyaXRlX29wdGlvblxubGV0IGJpbl9yZWFkZXJfb3B0aW9uID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX29wdGlvblxubGV0IGJpbl9yZWFkX29wdGlvbiA9IFJlYWQuYmluX3JlYWRfb3B0aW9uXG5cbmxldCBfX2Jpbl9yZWFkX29wdGlvbl9fIF9mIF9idWYgfnBvc19yZWYgX3ZpbnQgPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwib3B0aW9uXCIgIXBvc19yZWZcbjs7XG5cbmxldCBiaW5fbGlzdCA9IFR5cGVfY2xhc3MuYmluX2xpc3RcbmxldCBiaW5fc2hhcGVfbGlzdCA9IFR5cGVfY2xhc3MuYmluX3NoYXBlX2xpc3RcbmxldCBiaW5fd3JpdGVyX2xpc3QgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfbGlzdFxubGV0IGJpbl93cml0ZV9saXN0ID0gV3JpdGUuYmluX3dyaXRlX2xpc3RcbmxldCBiaW5fcmVhZGVyX2xpc3QgPSBUeXBlX2NsYXNzLmJpbl9yZWFkZXJfbGlzdFxubGV0IGJpbl9yZWFkX2xpc3QgPSBSZWFkLmJpbl9yZWFkX2xpc3RcblxubGV0IF9fYmluX3JlYWRfbGlzdF9fIF9mIF9idWYgfnBvc19yZWYgX3ZpbnQgPVxuICBDb21tb24ucmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwibGlzdFwiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX2FycmF5ID0gVHlwZV9jbGFzcy5iaW5fYXJyYXlcbmxldCBiaW5fc2hhcGVfYXJyYXkgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9hcnJheVxubGV0IGJpbl93cml0ZXJfYXJyYXkgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfYXJyYXlcbmxldCBiaW5fd3JpdGVfYXJyYXkgPSBXcml0ZS5iaW5fd3JpdGVfYXJyYXlcbmxldCBiaW5fcmVhZGVyX2FycmF5ID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2FycmF5XG5sZXQgYmluX3JlYWRfYXJyYXkgPSBSZWFkLmJpbl9yZWFkX2FycmF5XG5cbmxldCBfX2Jpbl9yZWFkX2FycmF5X18gX2YgX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJhcnJheVwiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX2hhc2h0YmwgPSBUeXBlX2NsYXNzLmJpbl9oYXNodGJsXG5sZXQgYmluX3NoYXBlX2hhc2h0YmwgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9oYXNodGJsXG5sZXQgYmluX3dyaXRlcl9oYXNodGJsID0gVHlwZV9jbGFzcy5iaW5fd3JpdGVyX2hhc2h0YmxcbmxldCBiaW5fd3JpdGVfaGFzaHRibCA9IFdyaXRlLmJpbl93cml0ZV9oYXNodGJsXG5sZXQgYmluX3JlYWRlcl9oYXNodGJsID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2hhc2h0YmxcbmxldCBiaW5fcmVhZF9oYXNodGJsID0gUmVhZC5iaW5fcmVhZF9oYXNodGJsXG5cbmxldCBfX2Jpbl9yZWFkX2hhc2h0YmxfXyBfZiBfZyBfYnVmIH5wb3NfcmVmIF92aW50ID1cbiAgQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcImhhc2h0YmxcIiAhcG9zX3JlZlxuOztcblxubGV0IGJpbl9iaWdzdHJpbmcgPSBUeXBlX2NsYXNzLmJpbl9iaWdzdHJpbmdcbmxldCBiaW5fc2hhcGVfYmlnc3RyaW5nID0gVHlwZV9jbGFzcy5iaW5fc2hhcGVfYmlnc3RyaW5nXG5sZXQgYmluX3dyaXRlcl9iaWdzdHJpbmcgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfYmlnc3RyaW5nXG5sZXQgYmluX3dyaXRlX2JpZ3N0cmluZyA9IFdyaXRlLmJpbl93cml0ZV9iaWdzdHJpbmdcbmxldCBiaW5fcmVhZGVyX2JpZ3N0cmluZyA9IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9iaWdzdHJpbmdcbmxldCBiaW5fcmVhZF9iaWdzdHJpbmcgPSBSZWFkLmJpbl9yZWFkX2JpZ3N0cmluZ1xuXG5sZXQgX19iaW5fcmVhZF9iaWdzdHJpbmdfXyBfYnVmIH5wb3NfcmVmIF92aW50ID1cbiAgQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcImJpZ3N0cmluZ1wiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX21hdCA9IFR5cGVfY2xhc3MuYmluX21hdFxubGV0IGJpbl9zaGFwZV9tYXQgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9tYXRcbmxldCBiaW5fd3JpdGVyX21hdCA9IFR5cGVfY2xhc3MuYmluX3dyaXRlcl9tYXRcbmxldCBiaW5fd3JpdGVfbWF0ID0gV3JpdGUuYmluX3dyaXRlX21hdFxubGV0IGJpbl9yZWFkZXJfbWF0ID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX21hdFxubGV0IGJpbl9yZWFkX21hdCA9IFJlYWQuYmluX3JlYWRfbWF0XG5sZXQgX19iaW5fcmVhZF9tYXRfXyBfYnVmIH5wb3NfcmVmIF92aW50ID0gQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcIm1hdFwiICFwb3NfcmVmXG5sZXQgYmluX2Zsb2F0MzJfbWF0ID0gVHlwZV9jbGFzcy5iaW5fZmxvYXQzMl9tYXRcbmxldCBiaW5fc2hhcGVfZmxvYXQzMl9tYXQgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9mbG9hdDMyX21hdFxubGV0IGJpbl93cml0ZXJfZmxvYXQzMl9tYXQgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfZmxvYXQzMl9tYXRcbmxldCBiaW5fd3JpdGVfZmxvYXQzMl9tYXQgPSBXcml0ZS5iaW5fd3JpdGVfZmxvYXQzMl9tYXRcbmxldCBiaW5fcmVhZGVyX2Zsb2F0MzJfbWF0ID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2Zsb2F0MzJfbWF0XG5sZXQgYmluX3JlYWRfZmxvYXQzMl9tYXQgPSBSZWFkLmJpbl9yZWFkX2Zsb2F0MzJfbWF0XG5cbmxldCBfX2Jpbl9yZWFkX2Zsb2F0MzJfbWF0X18gX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJmbG9hdDMyX21hdFwiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX2Zsb2F0NjRfbWF0ID0gVHlwZV9jbGFzcy5iaW5fZmxvYXQ2NF9tYXRcbmxldCBiaW5fc2hhcGVfZmxvYXQ2NF9tYXQgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9mbG9hdDY0X21hdFxubGV0IGJpbl93cml0ZXJfZmxvYXQ2NF9tYXQgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfZmxvYXQ2NF9tYXRcbmxldCBiaW5fd3JpdGVfZmxvYXQ2NF9tYXQgPSBXcml0ZS5iaW5fd3JpdGVfZmxvYXQ2NF9tYXRcbmxldCBiaW5fcmVhZGVyX2Zsb2F0NjRfbWF0ID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2Zsb2F0NjRfbWF0XG5sZXQgYmluX3JlYWRfZmxvYXQ2NF9tYXQgPSBSZWFkLmJpbl9yZWFkX2Zsb2F0NjRfbWF0XG5cbmxldCBfX2Jpbl9yZWFkX2Zsb2F0NjRfbWF0X18gX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJmbG9hdDY0X21hdFwiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX3ZlYyA9IFR5cGVfY2xhc3MuYmluX3ZlY1xubGV0IGJpbl9zaGFwZV92ZWMgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV92ZWNcbmxldCBiaW5fd3JpdGVyX3ZlYyA9IFR5cGVfY2xhc3MuYmluX3dyaXRlcl92ZWNcbmxldCBiaW5fd3JpdGVfdmVjID0gV3JpdGUuYmluX3dyaXRlX3ZlY1xubGV0IGJpbl9yZWFkZXJfdmVjID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX3ZlY1xubGV0IGJpbl9yZWFkX3ZlYyA9IFJlYWQuYmluX3JlYWRfdmVjXG5sZXQgX19iaW5fcmVhZF92ZWNfXyBfYnVmIH5wb3NfcmVmIF92aW50ID0gQ29tbW9uLnJhaXNlX3ZhcmlhbnRfd3JvbmdfdHlwZSBcInZlY1wiICFwb3NfcmVmXG5sZXQgYmluX2Zsb2F0MzJfdmVjID0gVHlwZV9jbGFzcy5iaW5fZmxvYXQzMl92ZWNcbmxldCBiaW5fc2hhcGVfZmxvYXQzMl92ZWMgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9mbG9hdDMyX3ZlY1xubGV0IGJpbl93cml0ZXJfZmxvYXQzMl92ZWMgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfZmxvYXQzMl92ZWNcbmxldCBiaW5fd3JpdGVfZmxvYXQzMl92ZWMgPSBXcml0ZS5iaW5fd3JpdGVfZmxvYXQzMl92ZWNcbmxldCBiaW5fcmVhZGVyX2Zsb2F0MzJfdmVjID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2Zsb2F0MzJfdmVjXG5sZXQgYmluX3JlYWRfZmxvYXQzMl92ZWMgPSBSZWFkLmJpbl9yZWFkX2Zsb2F0MzJfdmVjXG5cbmxldCBfX2Jpbl9yZWFkX2Zsb2F0MzJfdmVjX18gX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJmbG9hdDMyX3ZlY1wiICFwb3NfcmVmXG47O1xuXG5sZXQgYmluX2Zsb2F0NjRfdmVjID0gVHlwZV9jbGFzcy5iaW5fZmxvYXQ2NF92ZWNcbmxldCBiaW5fc2hhcGVfZmxvYXQ2NF92ZWMgPSBUeXBlX2NsYXNzLmJpbl9zaGFwZV9mbG9hdDY0X3ZlY1xubGV0IGJpbl93cml0ZXJfZmxvYXQ2NF92ZWMgPSBUeXBlX2NsYXNzLmJpbl93cml0ZXJfZmxvYXQ2NF92ZWNcbmxldCBiaW5fd3JpdGVfZmxvYXQ2NF92ZWMgPSBXcml0ZS5iaW5fd3JpdGVfZmxvYXQ2NF92ZWNcbmxldCBiaW5fcmVhZGVyX2Zsb2F0NjRfdmVjID0gVHlwZV9jbGFzcy5iaW5fcmVhZGVyX2Zsb2F0NjRfdmVjXG5sZXQgYmluX3JlYWRfZmxvYXQ2NF92ZWMgPSBSZWFkLmJpbl9yZWFkX2Zsb2F0NjRfdmVjXG5cbmxldCBfX2Jpbl9yZWFkX2Zsb2F0NjRfdmVjX18gX2J1ZiB+cG9zX3JlZiBfdmludCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJmbG9hdDY0X3ZlY1wiICFwb3NfcmVmXG47O1xuIiwiaW5jbHVkZSBNZDVfbGliXG5cbmxldCBiaW5fc2hhcGVfdCA9XG4gIFNoYXBlLmJhc2V0eXBlIChTaGFwZS5VdWlkLm9mX3N0cmluZyBcImY2YmRjZGQwLTlmNzUtMTFlNi05YTdlLWQzMDIwNDI4ZWZlZFwiKSBbXVxuOztcblxubGV0IGJpbl9zaXplX3QgPSBTaXplLmJpbl9zaXplX21kNVxubGV0IGJpbl93cml0ZV90ID0gV3JpdGUuYmluX3dyaXRlX21kNVxubGV0IGJpbl9yZWFkX3QgPSBSZWFkLmJpbl9yZWFkX21kNVxuXG5sZXQgX19iaW5fcmVhZF90X18gX2J1ZiB+cG9zX3JlZiBfdmRpZ2VzdCA9XG4gIENvbW1vbi5yYWlzZV92YXJpYW50X3dyb25nX3R5cGUgXCJTaGFwZS5NZDUudFwiICFwb3NfcmVmXG47O1xuIiwib3BlbiBDb21tb25cblxubW9kdWxlIFQgPSBzdHJ1Y3RcbiAgdHlwZSAnYSB0ID0gJ2EgW0BAZGVyaXZpbmcgY29tcGFyZSwgc2V4cF9vZl1cblxuICBsZXQgYmluX3NoYXBlX3QgdCA9XG4gICAgU2hhcGUuKGJhc2V0eXBlIChVdWlkLm9mX3N0cmluZyBcIjg1YTI1NTdlLTQ5MGEtMTFlNi05OGFjLTRiODk1M2Q1MjVmZVwiKSBbIHQgXSlcbiAgOztcblxuICBsZXQgYmluX3NpemVfdCBiaW5fc2l6ZV9hIGEgPSBVdGlscy5zaXplX2hlYWRlcl9sZW5ndGggKyBiaW5fc2l6ZV9hIGFcblxuICBsZXQgYmluX3dyaXRlX3QgYmluX3dyaXRlX2EgYnVmIH5wb3MgYSA9XG4gICAgbGV0IHN0YXJ0X2EgPSBwb3MgKyBVdGlscy5zaXplX2hlYWRlcl9sZW5ndGggaW5cbiAgICBsZXQgZW5kX2EgPSBiaW5fd3JpdGVfYSBidWYgfnBvczpzdGFydF9hIGEgaW5cbiAgICBsZXQgc2l6ZSA9IGVuZF9hIC0gc3RhcnRfYSBpblxuICAgIGxldCB3cml0dGVuID0gVXRpbHMuYmluX3dyaXRlX3NpemVfaGVhZGVyIGJ1ZiB+cG9zIHNpemUgaW5cbiAgICBhc3NlcnQgKHdyaXR0ZW4gPSBzdGFydF9hKTtcbiAgICBlbmRfYVxuICA7O1xuXG4gIGxldCBiaW5fcmVhZF90IGJpbl9yZWFkX2EgYnVmIH5wb3NfcmVmID1cbiAgICBsZXQgZXhwZWN0ZWRfc2l6ZSA9IFV0aWxzLmJpbl9yZWFkX3NpemVfaGVhZGVyIGJ1ZiB+cG9zX3JlZiBpblxuICAgIGxldCBzdGFydF9hID0gIXBvc19yZWYgaW5cbiAgICBsZXQgYSA9IGJpbl9yZWFkX2EgYnVmIH5wb3NfcmVmIGluXG4gICAgbGV0IGVuZF9hID0gIXBvc19yZWYgaW5cbiAgICBpZiBlbmRfYSAtIHN0YXJ0X2EgPD4gZXhwZWN0ZWRfc2l6ZVxuICAgIHRoZW5cbiAgICAgIGZhaWx3aXRoXG4gICAgICAgIChQcmludGYuc3ByaW50ZlxuICAgICAgICAgICBcIkJpbl9wcm90LkJsb2IuYmluX3JlYWRfdDogc2l6ZSAoJWQpIDw+IGV4cGVjdGVkICglZClcIlxuICAgICAgICAgICAoZW5kX2EgLSBzdGFydF9hKVxuICAgICAgICAgICBleHBlY3RlZF9zaXplKTtcbiAgICBhXG4gIDs7XG5cbiAgbGV0IF9fYmluX3JlYWRfdF9fIF8gXyB+cG9zX3JlZiA9XG4gICAgcmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiQmluX3Byb3QuQmxvYi50XCIgIXBvc19yZWZcbiAgOztcbmVuZFxuXG50eXBlICdhIGlkID0gJ2FcblxuaW5jbHVkZSBUXG5cbmluY2x1ZGUgVXRpbHMuTWFrZV9iaW5hYmxlMV93aXRob3V0X3V1aWQgW0BhbGVydCBcIi1sZWdhY3lcIl0gKHN0cnVjdFxuICAgIG1vZHVsZSBCaW5hYmxlID0gVFxuXG4gICAgdHlwZSAnYSB0ID0gJ2EgVC50XG5cbiAgICBsZXQgb2ZfYmluYWJsZSB0ID0gdFxuICAgIGxldCB0b19iaW5hYmxlIHQgPSB0XG4gIGVuZClcblxubW9kdWxlIE9wYXF1ZSA9IHN0cnVjdFxuICAoKiBbQmlnc3RyaW5nXSBhbmQgW1N0cmluZ10gc2hhcmUgW2Jpbl9zaGFwZV90XSBiZWNhdXNlIHRoZXkgaGF2ZSBleGFjdGx5IHRoZSBzYW1lXG4gICAgIHNlcmlhbGl6YXRpb24gZm9ybWF0IGFuZCB0aGV5IGRlbm90ZSB0aGUgc2FtZSB2YWx1ZXMuXG5cbiAgICAgSW4gZmFjdCBhbG1vc3QgY2VydGFpbmx5IFtCbG9iLnRdIGl0c2VsZiBzaG91bGQgaGF2ZSB0aGUgc2FtZSBiaW5fc2hhcGVfdCBhcyB3ZWxsLiAqKVxuICBsZXQgYmluX3NoYXBlX3QgPVxuICAgIFNoYXBlLihiYXNldHlwZSAoVXVpZC5vZl9zdHJpbmcgXCI4NWExZjc2ZS00OTBhLTExZTYtODZhOS01YmVmNTg1ZjI2MDJcIikgW10pXG4gIDs7XG5cbiAgbW9kdWxlIEJpZ3N0cmluZyA9IHN0cnVjdFxuICAgICgqIFtidWZdIGlzIHRoZSBiaW4taW8gZGF0YSBleGNsdWRpbmcgdGhlIHNpemUgaGVhZGVyLiBXaGVuIChkZS0pc2VyaWFsaXplZCwgdGhlIHNpemVcbiAgICAgICBoZWFkZXIgaXMgaW5jbHVkZWQuICopXG4gICAgbW9kdWxlIFQgPSBzdHJ1Y3RcbiAgICAgIHR5cGUgdCA9IGJ1ZlxuXG4gICAgICBsZXQgYmluX3NoYXBlX3QgPSBiaW5fc2hhcGVfdFxuICAgICAgbGV0IGJpbl9zaXplX3QgdCA9IFV0aWxzLnNpemVfaGVhZGVyX2xlbmd0aCArIGJ1Zl9sZW4gdFxuXG4gICAgICBsZXQgYmluX3dyaXRlX3QgYnVmIH5wb3MgdCA9XG4gICAgICAgIGxldCBzaXplID0gYnVmX2xlbiB0IGluXG4gICAgICAgIGxldCBwb3MgPSBVdGlscy5iaW5fd3JpdGVfc2l6ZV9oZWFkZXIgYnVmIH5wb3Mgc2l6ZSBpblxuICAgICAgICBibGl0X2J1ZiB+c3JjOnQgfnNyY19wb3M6MCB+ZHN0OmJ1ZiB+ZHN0X3Bvczpwb3Mgc2l6ZTtcbiAgICAgICAgcG9zICsgc2l6ZVxuICAgICAgOztcblxuICAgICAgbGV0IGJpbl9yZWFkX3QgYnVmIH5wb3NfcmVmID1cbiAgICAgICAgbGV0IHNpemUgPSBVdGlscy5iaW5fcmVhZF9zaXplX2hlYWRlciBidWYgfnBvc19yZWYgaW5cbiAgICAgICAgbGV0IHQgPSBjcmVhdGVfYnVmIHNpemUgaW5cbiAgICAgICAgYmxpdF9idWYgfnNyYzpidWYgfnNyY19wb3M6IXBvc19yZWYgfmRzdDp0IH5kc3RfcG9zOjAgc2l6ZTtcbiAgICAgICAgcG9zX3JlZiA6PSAhcG9zX3JlZiArIHNpemU7XG4gICAgICAgIHRcbiAgICAgIDs7XG5cbiAgICAgIGxldCBfX2Jpbl9yZWFkX3RfXyBfIH5wb3NfcmVmID1cbiAgICAgICAgcmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiQmluX3Byb3QuQmxvYi5PcGFxdWUudFwiICFwb3NfcmVmXG4gICAgICA7O1xuICAgIGVuZFxuXG4gICAgaW5jbHVkZSBUXG4gICAgaW5jbHVkZSBVdGlscy5PZl9taW5pbWFsIChUKVxuXG4gICAgbGV0IHRvX29wYXF1ZSBibG9iIGJpbl93cml0ZXIgPSBVdGlscy5iaW5fZHVtcCBiaW5fd3JpdGVyIGJsb2JcbiAgICBsZXQgb2Zfb3BhcXVlX2V4biAodCA6IHQpIGJpbl9yZWFkZXIgPSBiaW5fcmVhZGVyLlR5cGVfY2xhc3MucmVhZCB0IH5wb3NfcmVmOihyZWYgMClcblxuICAgICgqIEJpZ3N0cmluZ3MgYXJlIGEgcHJpbWl0aXZlIHR5cGUgdGhhdCBwb2x5bW9ycGhpYyBjb21wYXJlIGhhbmRsZXMgd2VsbC4gKilcbiAgICBsZXQgY29tcGFyZSA9IChTdGRsaWIuY29tcGFyZSA6IGJ1ZiAtPiBidWYgLT4gaW50KVxuXG4gICAgbGV0IHNleHBfb2ZfdCB0ID1cbiAgICAgIFBweF9zZXhwX2NvbnZfbGliLlNleHAuQXRvbSAob2Zfb3BhcXVlX2V4biB0IFR5cGVfY2xhc3MuYmluX3JlYWRlcl9zdHJpbmcpXG4gICAgOztcbiAgZW5kXG5cbiAgbW9kdWxlIFN0cmluZyA9IHN0cnVjdFxuICAgIG1vZHVsZSBUID0gc3RydWN0XG4gICAgICB0eXBlIHQgPSBzdHJpbmdcblxuICAgICAgbGV0IGJpbl9zaGFwZV90ID0gYmluX3NoYXBlX3RcbiAgICAgIGxldCBiaW5fc2l6ZV90IHQgPSBVdGlscy5zaXplX2hlYWRlcl9sZW5ndGggKyBTdHJpbmcubGVuZ3RoIHRcblxuICAgICAgbGV0IGJpbl93cml0ZV90IGJ1ZiB+cG9zIHQgPVxuICAgICAgICBsZXQgc2l6ZSA9IFN0cmluZy5sZW5ndGggdCBpblxuICAgICAgICBsZXQgcG9zID0gVXRpbHMuYmluX3dyaXRlX3NpemVfaGVhZGVyIGJ1ZiB+cG9zIHNpemUgaW5cbiAgICAgICAgQ29tbW9uLmJsaXRfc3RyaW5nX2J1ZiB0IH5zcmNfcG9zOjAgYnVmIH5kc3RfcG9zOnBvcyB+bGVuOnNpemU7XG4gICAgICAgIHBvcyArIHNpemVcbiAgICAgIDs7XG5cbiAgICAgIGxldCBzdHJpbmdfb2ZfYmlnc3RyaW5nIGJ1ZiB+cG9zIH5sZW4gPVxuICAgICAgICBsZXQgc3RyID0gQnl0ZXMuY3JlYXRlIGxlbiBpblxuICAgICAgICBibGl0X2J1Zl9ieXRlcyB+c3JjX3Bvczpwb3MgYnVmIH5kc3RfcG9zOjAgc3RyIH5sZW47XG4gICAgICAgIEJ5dGVzLnVuc2FmZV90b19zdHJpbmcgc3RyXG4gICAgICA7O1xuXG4gICAgICBsZXQgYmluX3JlYWRfdCBidWYgfnBvc19yZWYgPVxuICAgICAgICBsZXQgbGVuID0gVXRpbHMuYmluX3JlYWRfc2l6ZV9oZWFkZXIgYnVmIH5wb3NfcmVmIGluXG4gICAgICAgIGxldCB0ID0gc3RyaW5nX29mX2JpZ3N0cmluZyBidWYgfnBvczohcG9zX3JlZiB+bGVuIGluXG4gICAgICAgIHBvc19yZWYgOj0gIXBvc19yZWYgKyBsZW47XG4gICAgICAgIHRcbiAgICAgIDs7XG5cbiAgICAgIGxldCBfX2Jpbl9yZWFkX3RfXyBfIH5wb3NfcmVmID1cbiAgICAgICAgcmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiQmluX3Byb3QuQmxvYi5PcGFxdWUudFwiICFwb3NfcmVmXG4gICAgICA7O1xuICAgIGVuZFxuXG4gICAgaW5jbHVkZSBUXG4gICAgaW5jbHVkZSBVdGlscy5PZl9taW5pbWFsIChUKVxuXG4gICAgbGV0IGxlbmd0aCB0ID0gU3RyaW5nLmxlbmd0aCB0XG5cbiAgICBsZXQgdG9fb3BhcXVlIH5idWYgdiBiaW5fd3JpdGVyX3YgOiB0ID1cbiAgICAgIGxldCBwb3MgPSAwIGluXG4gICAgICBsZXQgbGVuID0gYmluX3dyaXRlcl92LlR5cGVfY2xhc3Mud3JpdGUgYnVmIH5wb3MgdiBpblxuICAgICAgc3RyaW5nX29mX2JpZ3N0cmluZyBidWYgfnBvcyB+bGVuXG4gICAgOztcblxuICAgIGxldCBvZl9vcGFxdWVfZXhuIH5idWYgKHQgOiB0KSBiaW5fcmVhZGVyX3YgPVxuICAgICAgbGV0IGxlbiA9IFN0cmluZy5sZW5ndGggdCBpblxuICAgICAgQ29tbW9uLmJsaXRfc3RyaW5nX2J1ZiB0IGJ1ZiB+bGVuO1xuICAgICAgbGV0IHBvc19yZWYgPSByZWYgMCBpblxuICAgICAgbGV0IHJlcyA9IGJpbl9yZWFkZXJfdi5UeXBlX2NsYXNzLnJlYWQgYnVmIH5wb3NfcmVmIGluXG4gICAgICBpZiAhcG9zX3JlZiA8PiBsZW5cbiAgICAgIHRoZW4gKFxuICAgICAgICBsZXQgZXJyb3IgPVxuICAgICAgICAgIFByaW50Zi5zcHJpbnRmXG4gICAgICAgICAgICBcIk9wYXF1ZSBibG9iIGhhcyAlZCBieXRlcyBidXQgW29mX29wYXF1ZV9leG5dIHJlYWQgJWRcIlxuICAgICAgICAgICAgbGVuXG4gICAgICAgICAgICAhcG9zX3JlZlxuICAgICAgICBpblxuICAgICAgICBmYWlsd2l0aCBlcnJvcilcbiAgICAgIGVsc2UgcmVzXG4gICAgOztcblxuICAgICgqIFN0cmluZ3MgYXJlIGEgcHJpbWl0aXZlIHR5cGUgdGhhdCBwb2x5bW9ycGhpYyBjb21wYXJlIGhhbmRsZXMgd2VsbC4gKilcbiAgICBsZXQgY29tcGFyZSA9IChTdGRsaWIuY29tcGFyZSA6IHN0cmluZyAtPiBzdHJpbmcgLT4gaW50KVxuICAgIGxldCBzZXhwX29mX3QgPSBQcHhfc2V4cF9jb252X2xpYi5Db252LnNleHBfb2Zfc3RyaW5nXG4gIGVuZFxuZW5kXG5cbm1vZHVsZSBJZ25vcmVkID0gc3RydWN0XG4gICgqIFRoZSByZXByZXNlbnRhdGlvbiBvZiBhbiBpZ25vcmVkIHZhbHVlIGlzIGp1c3QgdGhlIHNpemUgb2YgdGhlIHZhbHVlIGl0IHdhcyBjcmVhdGVkXG4gICAgIGZyb20gKGkuZS4sIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhhdCB3ZXJlIGlnbm9yZWQgZnJvbSB0aGUgYnVmZmVyIHdlIHdlcmUgcmVhZGluZ1xuICAgICAtLSB3ZSBleGNsdWRlIHRoZSA4IGJ5dGUgc2l6ZSBoZWFkZXIgZnJvbSB3aGljaCB0aGUgc2l6ZSB3YXMgcmVhZCkuICopXG4gIHR5cGUgdCA9IGludFxuXG4gIGxldCBiaW5fc2l6ZV90IHNpemUgPSBVdGlscy5zaXplX2hlYWRlcl9sZW5ndGggKyBzaXplXG5cbiAgbGV0IGJpbl9yZWFkX3QgYnVmIH5wb3NfcmVmID1cbiAgICBsZXQgc2l6ZSA9IFV0aWxzLmJpbl9yZWFkX3NpemVfaGVhZGVyIGJ1ZiB+cG9zX3JlZiBpblxuICAgIHBvc19yZWYgOj0gIXBvc19yZWYgKyBzaXplO1xuICAgIHNpemVcbiAgOztcblxuICBsZXQgX19iaW5fcmVhZF90X18gXyB+cG9zX3JlZiA9XG4gICAgcmFpc2VfdmFyaWFudF93cm9uZ190eXBlIFwiQmluX3Byb3QuQmxvYi5JZ25vcmVkLnRcIiAhcG9zX3JlZlxuICA7O1xuXG4gIGxldCBiaW5fcmVhZGVyX3QgPSB7IFR5cGVfY2xhc3MucmVhZCA9IGJpbl9yZWFkX3Q7IHZ0YWdfcmVhZCA9IF9fYmluX3JlYWRfdF9fIH1cbmVuZFxuIl19
