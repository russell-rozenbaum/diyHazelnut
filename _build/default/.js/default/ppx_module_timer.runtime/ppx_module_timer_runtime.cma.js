// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Ppx_module_timer_runtime
//# unitInfo: Requires: Assert_failure, Base, Base__Int, Base__Int63, Base__List, Base__Option, Base__Printf, Base__String, CamlinternalLazy, Stdio, Stdlib, Stdlib__Gc, Stdlib__Sys, Time_now
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_PPX_MODULE_TIMER = "PPX_MODULE_TIMER",
    cst_ns$1 = "ns",
    cst_runtime_ppx_module_timer_r = "runtime/ppx_module_timer_runtime.ml",
    caml_gc_quick_stat = runtime.caml_gc_quick_stat,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = "\n",
    cst$1 = " ",
    cst$2 = cst$4,
    cst$0 = cst$4,
    cst = cst$4,
    am_recording_environment_varia = cst_PPX_MODULE_TIMER,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Base_String = global_data.Base__String,
    Base_Int63 = global_data.Base__Int63,
    Stdio = global_data.Stdio,
    Base_Option = global_data.Base__Option,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Base_Printf = global_data.Base__Printf,
    Base_Int = global_data.Base__Int,
    Time_now = global_data.Time_now,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib;
   a:
   {
    var
     cst_ppx_module_timer_overridin =
       "ppx_module_timer: overriding time measurements for testing",
     _e_ = [0, [11, "Line ", [4, 0, 0, 0, 0]], "Line %d"],
     _f_ =
       [0, [11, "Fake__Dependency_", [4, 0, 0, 0, 0]], "Fake__Dependency_%d"],
     _d_ = [0, [2, [1, 1], [12, 32, [2, 0, 0]]], "%*s %s"],
     cst_compactions = "compactions",
     cst_major_collections = "major collections",
     cst_minor_collections = "minor collections",
     _c_ = [0, ", "],
     cst_GC = "; GC: ",
     _b_ = [0, cst_runtime_ppx_module_timer_r, 110, 6],
     _a_ = [0, cst_runtime_ppx_module_timer_r, 94, 6],
     cst_ns$0 = cst_ns$1,
     cst_ns = cst_ns$1;
    try{var value = runtime.caml_sys_getenv(cst_PPX_MODULE_TIMER);}
    catch(_M_){var am_recording_value = 0; break a;}
    var am_recording_value = [0, value];
   }
   var am_recording = caml_call1(Base_Option[50], am_recording_value);
   function to_nanoseconds(t){return t;}
   function of_nanoseconds(t){return t;}
   function of_string(string){
    var _L_ = caml_call2(Base_String[102], string, cst_ns);
    return caml_call1(Base_Int63[10], _L_);
   }
   function to_string(nanos){
    var _K_ = caml_call1(Base_Int63[11], nanos);
    return caml_call2(Base[197], _K_, cst_ns$0);
   }
   function to_string_with_same_unit(list){
    return caml_call2(Base_List[76], list, to_string);
   }
   var format = [0, [0, of_string, to_string_with_same_unit]];
   function create(nested_timer, param){
    var _J_ = caml_gc_quick_stat(0);
    return [0, cst, Base_Int63[38], _J_, nested_timer, 0];
   }
   function record_start(t, description){
    if(am_recording){
     if(! caml_call1(Base_String[5], t[1]))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     t[1] = description;
     t[3] = caml_gc_quick_stat(0);
     t[2] = caml_call1(Time_now[1], 0);
     var _I_ = 0;
    }
    else
     var _I_ = am_recording;
    return _I_;
   }
   function record_until(t, description){
    if(! am_recording) return am_recording;
    var
     until = caml_call1(Time_now[1], 0),
     start = t[2],
     gc_stats_after = caml_gc_quick_stat(0),
     gc_stats_before = t[3],
     runtime = caml_call2(Base_Int63[42], until, start);
    if(! caml_call2(Base_String[121], t[1], description))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    var
     gc_events =
       [0,
        gc_stats_after[4] - gc_stats_before[4] | 0,
        gc_stats_after[5] - gc_stats_before[5] | 0,
        gc_stats_after[14] - gc_stats_before[14] | 0],
     match$0 = t[4];
    if(match$0)
     var
      nested$0 = match$0[1],
      nested_timing_events = caml_call1(Base_List[38], nested$0[5]);
    else
     var nested_timing_events = 0;
    var
     timing_event = [0, description, runtime, gc_events, nested_timing_events];
    t[5] = [0, timing_event, t[5]];
    t[1] = cst$0;
    t[2] = Base_Int63[38];
    var match = t[4];
    if(! match) return 0;
    var nested = match[1];
    nested[5] = 0;
    return 0;
   }
   var
    definition_timer = create(0, 0),
    module_timer = create([0, definition_timer], 0);
   function record_start$0(module_name){
    return record_start(module_timer, module_name);
   }
   function record_until$0(module_name){
    return record_until(module_timer, module_name);
   }
   function record_definition_start(loc){
    return record_start(definition_timer, loc);
   }
   function record_definition_until(loc){
    return record_until(definition_timer, loc);
   }
   function timing_events_to_strings(list, indent){
    var
     string =
       caml_call2
        (Base_List[76], list, function(timing_event){return timing_event[2];}),
     Format = format[1],
     duration_strings = caml_call1(Format[2], string),
     prefix = caml_call2(Base_String[50], indent, 32),
     list$0 =
       caml_call3
        (Base_List[83],
         duration_strings,
         list,
         function(duration_string, param){
          var
           nested_timing_events = param[4],
           gc_events = param[3],
           description = param[1],
           _B_ =
             timing_events_to_strings(nested_timing_events, indent + 4 | 0),
           _C_ =
             caml_call2
              (Base_List[76],
               _B_,
               function(line){return caml_call2(Base[197], cst$3, line);}),
           _D_ = caml_call2(Base_String[54], 0, _C_),
           compactions = gc_events[3],
           major_collections = gc_events[2],
           minor_collections = gc_events[1];
          function to_list(description, count){
           if(0 === count) return 0;
           var
            _G_ = caml_call2(Base[197], cst$1, description),
            _H_ = caml_call1(Base_Int[11], count);
           return [0, caml_call2(Base[197], _H_, _G_), 0];
          }
          var
           _w_ = to_list(cst_compactions, compactions),
           _x_ = to_list(cst_major_collections, major_collections),
           _y_ = caml_call2(Base[178], _x_, _w_),
           _z_ = to_list(cst_minor_collections, minor_collections),
           strings = caml_call2(Base[178], _z_, _y_);
          if(caml_call1(Base_List[8], strings))
           var _E_ = cst$2;
          else
           var
            _A_ = caml_call2(Base_String[54], _c_, strings),
            _E_ = caml_call2(Base[197], cst_GC, _A_);
          var _F_ = caml_call2(Base[197], _E_, _D_);
          return [0, duration_string, caml_call2(Base[197], description, _F_)];
         }),
     left_column_width =
       caml_call3
        (Base_List[10],
         list$0,
         0,
         function(width, param){
          var left = param[1];
          return caml_call2
                  (Base_Int[15], width, runtime.caml_ml_string_length(left));
         }),
     _v_ =
       caml_call2
        (Base_List[76],
         list$0,
         function(param){
          var right = param[2], left = param[1];
          return caml_call4
                  (Base_Printf[2], _d_, left_column_width, left, right);
         });
    return caml_call2
            (Base_List[76],
             _v_,
             function(line){return caml_call2(Base[197], prefix, line);});
   }
   function gc_events(i){
    var
     _s_ = 7 === caml_call2(Base[183], i, 8) ? 1 : 0,
     _t_ = 3 === caml_call2(Base[183], i, 4) ? 1 : 0,
     _u_ = 1 === caml_call2(Base[183], i, 2) ? 1 : 0;
    return [0, _u_, _t_, _s_];
   }
   var
    fake_timing_events =
      [246,
       function(_m_){
        return caml_call2
                (Base_List[123],
                 12,
                 function(i){
                  var
                   _n_ =
                     0 === caml_call2(Base[183], i + 1 | 0, 4)
                      ? caml_call2
                        (Base_List[123],
                         i + 1 | 0,
                         function(j){
                          var
                           _q_ = gc_events(j),
                           _r_ = caml_call1(Base_Int63[96], 900 * (j + 1 | 0) | 0);
                          return [0,
                                  caml_call2(Base_Printf[2], _e_, j + 1 | 0),
                                  _r_,
                                  _q_,
                                  0];
                         })
                      : 0,
                   _o_ = gc_events(i),
                   _p_ = caml_call1(Base_Int63[96], 900 * (i + 1 | 0) | 0);
                  return [0,
                          caml_call2(Base_Printf[2], _f_, i + 1 | 0),
                          _p_,
                          _o_,
                          _n_];
                 });
       }];
   if(am_recording)
    caml_call1
     (Stdlib[100],
      function(param){
       var timing_events$0 = caml_call1(Base_List[38], module_timer[5]);
       function notify_of_overriding(param){
        return caml_call1(Stdio[9], cst_ppx_module_timer_overridin);
       }
       var string = caml_call4(Base_Option[28], 0, 0, 0, am_recording_value);
       a:
       if(string !== "FAKE_MODULES"){
        try{var Format = format[1], override = caml_call1(Format[1], string);}
        catch(_l_){var timing_events = timing_events$0; break a;}
        notify_of_overriding(0);
        var
         timing_events =
           caml_call2
            (Base_List[96],
             timing_events$0,
             function(index, timing_event){
              var
               _j_ = caml_call1(Base_Int63[96], index + 1 | 0),
               runtime = caml_call2(Base_Int63[43], override, _j_),
               nested_timing_events =
                 caml_call2
                  (Base_List[96],
                   timing_event[4],
                   function(index, nested_timing_event){
                    var
                     _k_ = caml_call1(Base_Int63[96], index + 1 | 0),
                     runtime = caml_call2(Base_Int63[43], override, _k_);
                    return [0,
                            nested_timing_event[1],
                            runtime,
                            nested_timing_event[3],
                            nested_timing_event[4]];
                   });
              return [0,
                      timing_event[1],
                      runtime,
                      timing_event[3],
                      nested_timing_events];
             });
       }
       else{
        notify_of_overriding(0);
        var
         _h_ = runtime.caml_obj_tag(fake_timing_events),
         _i_ =
           250 === _h_
            ? fake_timing_events[1]
            : 246
              === _h_
              ? caml_call1(CamlinternalLazy[2], fake_timing_events)
              : fake_timing_events,
         timing_events = _i_;
       }
       var _g_ = timing_events_to_strings(timing_events, 0);
       return caml_call2(Base_List[9], _g_, Stdio[9]);
      });
   var
    Ppx_module_timer_runtime =
      [0,
       am_recording,
       am_recording_environment_varia,
       [0, to_nanoseconds, of_nanoseconds, format],
       record_start$0,
       record_until$0,
       record_definition_start,
       record_definition_until];
   runtime.caml_register_global
    (32, Ppx_module_timer_runtime, "Ppx_module_timer_runtime");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
