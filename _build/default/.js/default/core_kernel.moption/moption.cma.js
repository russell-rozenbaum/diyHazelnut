// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Moption__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Moption = [0];
   runtime.caml_register_global(0, Moption, "Moption__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Moption__Import
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Moption_Import = "Moption__Import",
    cst_moption = "moption";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Moption_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_moption);
   caml_call1(Expect_test_collector[5][1], "moption/src/import.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_moption, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_moption);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Moption_Import);
   var Moption_Import = [0];
   runtime.caml_register_global(11, Moption_Import, cst_Moption_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Moption
//# unitInfo: Requires: Base__Invariant, Core, Core__Option, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Moption = "Moption",
    cst_moption = "moption",
    cst_moption_src_moption_ml = "moption/src/moption.ml";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Option = global_data.Core__Option,
    Base_Invariant = global_data.Base__Invariant,
    Core = global_data.Core,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_Obj = global_data.Stdlib__Obj;
   caml_call1(Ppx_module_timer_runtime[4], cst_Moption);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_moption);
   caml_call1(Expect_test_collector[5][1], cst_moption_src_moption_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_moption, cst);
   var
    none = runtime.caml_obj_block(Stdlib_Obj[12], 1),
    cst_Moption_get_some_exn = "Moption.get_some_exn",
    _a_ = [0, "_"],
    _b_ = [0, cst_moption_src_moption_ml, 30, 831, 853];
   function create(param){return [0, none];}
   function is_none(x){return caml_call2(Core[246], x[1], none);}
   function is_some(x){return 1 - is_none(x);}
   function get_some_exn(x){
    if(! is_none(x)) return x[1];
    var _d_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Moption_get_some_exn);
    return caml_call1(Core[253], _d_);
   }
   function get(t){return is_none(t) ? 0 : [0, t[1]];}
   function unsafe_get(t){return t[1];}
   function set_some(t, v){t[1] = v; return 0;}
   function set_none(t){t[1] = none; return 0;}
   function set(t, v){
    if(! v) return set_none(t);
    var v$0 = v[1];
    return set_some(t, v$0);
   }
   function sexp_of_t(sexp_of_a, t){
    var x_001 = get(t);
    return caml_call2(Core[454], sexp_of_a, x_001);
   }
   function invariant(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _b_,
             t,
             function(x_002){
              return sexp_of_t(function(param){return _a_;}, x_002);
             },
             function(param){
              var _c_ = get(t);
              return caml_call2(Core_Option[41], _c_, invariant_a);
             });
   }
   var
    Optional_syntax = [0, is_none, unsafe_get],
    Optional_syntax$0 = [0, Optional_syntax];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_moption);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Moption);
   var
    Moption =
      [0,
       sexp_of_t,
       invariant,
       Optional_syntax$0,
       create,
       is_none,
       is_some,
       get,
       get_some_exn,
       unsafe_get,
       set,
       set_none,
       set_some];
   runtime.caml_register_global(19, Moption, cst_Moption);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtb3B0aW9uLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJub25lIiwiY3JlYXRlIiwiaXNfbm9uZSIsIngiLCJpc19zb21lIiwiZ2V0X3NvbWVfZXhuIiwiZ2V0IiwidCIsInVuc2FmZV9nZXQiLCJzZXRfc29tZSIsInYiLCJzZXRfbm9uZSIsInNldCIsInYkMCIsInNleHBfb2ZfdCIsInNleHBfb2ZfYSIsInhfMDAxIiwiaW52YXJpYW50IiwiaW52YXJpYW50X2EiLCJ4XzAwMiJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvY29yZV9rZXJuZWwvbW9wdGlvbi9tb3B0aW9uLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0U7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBVW1CO0lBQWZBLE9BQWU7Ozs7WUFDZkMsY0FBWSxXQURaRCxNQUNvQjtZQUNwQkUsUUFBUUMsR0FBSSw2QkFBSkEsTUFGUkgsTUFFOEI7WUFDOUJJLFFBQVFELEdBQUksV0FEWkQsUUFDUUMsR0FBbUI7WUFDM0JFLGFBQWFGO0lBQUksS0FGakJELFFBRWFDLFdBQUFBOzs7R0FBdUU7WUFDcEZHLElBQUlDLEdBQUksT0FIUkwsUUFHSUssYUFBQUEsTUFBdUM7WUFDM0NDLFdBQVdELEdBQUksT0FBSkEsS0FBTTtZQUNqQkUsU0FBU0YsR0FBRUcsR0FBRkgsT0FBRUcsWUFBVTtZQUNyQkMsU0FBU0osR0FBQUEsT0FSVFAsZUFRc0I7WUFFdEJZLElBQUlMLEdBQUVHO0lBQ1IsS0FEUUEsR0FFRSxPQUpSQyxTQUVJSjtRQUdDTSxNQUhDSDtJQUdJLE9BTlZELFNBR0lGLEdBR0NNO0dBQWlCO1lBR3RCQyxVQUFVQyxXQUFVUjtJQUFZLElBQVFTLFFBWHhDVixJQVdvQkM7aUNBQVZRLFdBQThCQzs7WUFFeENDLFVBQVVDLGFBQVlYO0lBQ3hCLE9BQThDOzs7YUFEdEJBO3NCQUNpQlk7YyxPQUh2Q0wsMEIsY0FHdUNLOzs7Y0FDM0IsVUFmWmIsSUFhc0JDO2NBRVYsT0FBQSxpQ0FGRlc7YUFFd0I7R0FBQztHQUlaO0lBQUEsc0JBdEJ2QmhCLFNBSUFNO0lBaUJxQjs7Ozs7Ozs7T0FQckJNO09BRUFHOztPQWpCQWhCO09BQ0FDO09BQ0FFO09BRUFFO09BREFEO09BRUFHO09BSUFJO09BRkFEO09BREFGOzs7RSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4hIENvcmVcbm9wZW4hIEltcG9ydFxuXG50eXBlICdhIHQgPSAnYSByZWZcblxuKCogQmVpbmcgYSBwb2ludGVyLCBubyBvbmUgb3V0c2lkZSB0aGlzIG1vZHVsZSBjYW4gY29uc3RydWN0IGEgdmFsdWUgdGhhdCBpc1xuICAgW3BoeXNfc2FtZV0gYXMgdGhpcyBvbmUuXG5cbiAgIHRoaXMgY29kZSBpcyBkdXBsaWNhdGVkIGluIE9wdGlvbl9hcnJheS5DaGVhcF9vcHRpb24sIGFuZCBpZiB3ZSBmaW5kIHlldCBhbm90aGVyXG4gICBwbGFjZSB3aGVyZSB3ZSB3YW50IGl0IHdlIHNob3VsZCByZWNvbnNpZGVyIG1ha2luZyBpdCBzaGFyZWQuICopXG5sZXQgbm9uZSA9IE9iai5vYmogKE9iai5uZXdfYmxvY2sgT2JqLmFic3RyYWN0X3RhZyAxKVxubGV0IGNyZWF0ZSAoKSA9IHJlZiBub25lXG5sZXQgaXNfbm9uZSB4ID0gcGh5c19lcXVhbCAheCBub25lXG5sZXQgaXNfc29tZSB4ID0gbm90IChpc19ub25lIHgpXG5sZXQgZ2V0X3NvbWVfZXhuIHggPSBpZiBpc19ub25lIHggdGhlbiByYWlzZV9zIFslbWVzc2FnZSBcIk1vcHRpb24uZ2V0X3NvbWVfZXhuXCJdIGVsc2UgIXhcbmxldCBnZXQgdCA9IGlmIGlzX25vbmUgdCB0aGVuIE5vbmUgZWxzZSBTb21lICF0XG5sZXQgdW5zYWZlX2dldCB0ID0gIXRcbmxldCBzZXRfc29tZSB0IHYgPSB0IDo9IHZcbmxldCBzZXRfbm9uZSB0ID0gdCA6PSBub25lXG5cbmxldCBzZXQgdCB2ID1cbiAgbWF0Y2ggdiB3aXRoXG4gIHwgTm9uZSAtPiBzZXRfbm9uZSB0XG4gIHwgU29tZSB2IC0+IHNldF9zb21lIHQgdlxuOztcblxubGV0IHNleHBfb2ZfdCBzZXhwX29mX2EgdCA9IFslc2V4cCAoZ2V0IHQgOiBhIG9wdGlvbildXG5cbmxldCBpbnZhcmlhbnQgaW52YXJpYW50X2EgdCA9XG4gIEludmFyaWFudC5pbnZhcmlhbnQgWyVoZXJlXSB0IFslc2V4cF9vZjogXyB0XSAoZnVuICgpIC0+XG4gICAgT3B0aW9uLml0ZXIgKGdldCB0KSB+ZjppbnZhcmlhbnRfYSlcbjs7XG5cbm1vZHVsZSBPcHRpb25hbF9zeW50YXggPSBzdHJ1Y3RcbiAgbW9kdWxlIE9wdGlvbmFsX3N5bnRheCA9IHN0cnVjdFxuICAgIGxldCBpc19ub25lID0gaXNfbm9uZVxuICAgIGxldCB1bnNhZmVfdmFsdWUgPSB1bnNhZmVfZ2V0XG4gIGVuZFxuZW5kXG4iXX0=
