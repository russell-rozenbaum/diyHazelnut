// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Virtual_dom__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Virtual_dom = [0];
   runtime.caml_register_global(0, Virtual_dom, "Virtual_dom__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Dom_float
//# unitInfo: Requires: Core, Core__Float, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Virtual_dom_Dom_float = "Virtual_dom__Dom_float",
    cst_src_dom_float_ml$6 = "src/dom_float.ml",
    cst_virtual_dom = "virtual_dom",
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core_Float = global_data.Core__Float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Dom_float);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], cst_src_dom_float_ml$6);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function to_js_string(value){return value.toString();}
   function to_js_string_fixed(digits, value){return value.toFixed(digits);}
   function to_js_string_precision(digits, value){return value.toPrecision(digits);
   }
   function to_js_string_exponential(value){return value.toExponential();}
   function to_string(value){
    return caml_string_of_jsstring(value.toString());
   }
   function to_string_fixed(digits, value){
    return caml_string_of_jsstring(value.toFixed(digits));
   }
   function to_string_precision(digits, value){
    return caml_string_of_jsstring(value.toPrecision(digits));
   }
   function to_string_exponential(value){
    return caml_string_of_jsstring(value.toExponential());
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    _a_ = [0, [2, 0, 0], "%s"],
    cst_src_dom_float_ml = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$0 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$1 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$2 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$3 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$4 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$5 = cst_src_dom_float_ml$6,
    _b_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       16,
       738,
       749,
       756],
    _c_ =
      [0,
       [0,
        [0, cst$0],
        [1, " 1 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         16,
         738,
         742,
         748],
        _b_],
       0],
    _d_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       18,
       778,
       789,
       798],
    _e_ =
      [0,
       [0,
        [0, cst$0],
        [1, " NaN "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         18,
         778,
         782,
         788],
        _d_],
       _c_],
    _f_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       20,
       825,
       836,
       850],
    _g_ =
      [0,
       [0,
        [0, cst$0],
        [1, " Infinity "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         20,
         825,
         829,
         835],
        _f_],
       _e_],
    _h_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       22,
       881,
       892,
       907],
    _i_ =
      [0,
       [0,
        [0, cst$0],
        [1, " -Infinity "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         22,
         881,
         885,
         891],
        _h_],
       _g_],
    _j_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       24,
       930,
       941,
       951],
    _k_ =
      [0,
       [0,
        [0, cst$0],
        [1, " 1e-8 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         24,
         930,
         934,
         940],
        _j_],
       _i_],
    _l_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       26,
       969,
       980,
       988],
    _m_ =
      [0,
       [0,
        [0, cst$0],
        [1, " -1 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         26,
         969,
         973,
         979],
        _l_],
       _k_],
    _n_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       28,
       1010,
       1021,
       1036],
    _o_ =
      [0,
       [0,
        [0, cst$0],
        [1, " 1.0000001 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         28,
         1010,
         1014,
         1020],
        _n_],
       _m_],
    _p_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       12,
       642,
       642,
       1037],
    _q_ =
      caml_call1
       (Expect_test_common_File[4][3], "e40141a8c595182b4ac2018c0f4b5904");
   caml_call9
    (Expect_test_collector$0[3],
     _q_,
     _p_,
     cst_src_dom_float_ml$6,
     0,
     0,
     _o_,
     0,
     Inline_test_config,
     function(param){
      function print(f){
       var _y_ = to_string(f);
       return caml_call2(Core[250], _a_, _y_);
      }
      print(1.);
      var
       _r_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml),
          16,
          738,
          742,
          748];
      caml_call1(Expect_test_collector$0[1], _r_);
      print(Core_Float[9]);
      var
       _s_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$0),
          18,
          778,
          782,
          788];
      caml_call1(Expect_test_collector$0[1], _s_);
      print(Core_Float[10]);
      var
       _t_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$1),
          20,
          825,
          829,
          835];
      caml_call1(Expect_test_collector$0[1], _t_);
      print(Core_Float[11]);
      var
       _u_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$2),
          22,
          881,
          885,
          891];
      caml_call1(Expect_test_collector$0[1], _u_);
      print(1e-8);
      var
       _v_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$3),
          24,
          930,
          934,
          940];
      caml_call1(Expect_test_collector$0[1], _v_);
      print(-1.);
      var
       _w_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$4),
          26,
          969,
          973,
          979];
      caml_call1(Expect_test_collector$0[1], _w_);
      print(1.0000001);
      var
       _x_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$5),
          28,
          1010,
          1014,
          1020];
      return caml_call1(Expect_test_collector$0[1], _x_);
     });
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Dom_float);
   var
    Virtual_dom_Dom_float =
      [0,
       to_js_string,
       to_js_string_fixed,
       to_js_string_precision,
       to_js_string_exponential,
       to_string,
       to_string_fixed,
       to_string_precision,
       to_string_exponential];
   runtime.caml_register_global
    (63, Virtual_dom_Dom_float, cst_Virtual_dom_Dom_float);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Effect
//# unitInfo: Requires: Base__Hashtbl, Base__List, Base__Option, Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Stdlib__Obj, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Effect = "Virtual_dom__Effect",
    cst_virtual_dom = "virtual_dom",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Base_Option = global_data.Base__Option,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Base_List = global_data.Base__List,
    Ui_effect = global_data.Ui_effect,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Hashtbl = global_data.Base__Hashtbl;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Effect);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/effect.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   var
    Ignore = Ui_effect[1],
    Many = Ui_effect[2],
    symbol_bind = Ui_effect[3],
    symbol_map = Ui_effect[4],
    bind = Ui_effect[6],
    return$0 = Ui_effect[7],
    map = Ui_effect[8],
    join = Ui_effect[9],
    ignore_m = Ui_effect[10],
    all = Ui_effect[11],
    all_unit = Ui_effect[12],
    never = Ui_effect[14],
    lazy = Ui_effect[15],
    print_s = Ui_effect[16],
    of_sync_fun = Ui_effect[17],
    Expert = Ui_effect[20],
    visibility_handlers = [0, 0];
   function Define_visibility(VH){
    visibility_handlers[1] = [0, VH[1], visibility_handlers[1]];
    return [0];
   }
   var
    Viewport_changed =
      [248, "Virtual_dom__Effect.Viewport_changed", caml_fresh_oo_id(0)],
    Stop_propagation =
      [248, "Virtual_dom__Effect.Stop_propagation", caml_fresh_oo_id(0)],
    Stop_immediate_propagation =
      [248,
       "Virtual_dom__Effect.Stop_immediate_propagation",
       caml_fresh_oo_id(0)],
    Prevent_default =
      [248, "Virtual_dom__Effect.Prevent_default", caml_fresh_oo_id(0)];
   function sequence_as_sibling(left, unless_stopped){
    function contains_stop(param){
     if(param[1] !== Many)
      return param === Stop_immediate_propagation ? 1 : 0;
     var es = param[2];
     return caml_call2(Base_List[13], es, contains_stop);
    }
    if(contains_stop(left)) return left;
    var _g_ = [0, left, [0, caml_call1(unless_stopped, 0), 0]];
    return [0, Ui_effect[2], _g_];
   }
   var
    current_dom_event = [0, 0],
    _a_ = caml_call1(Stdlib_Obj[22][1], Viewport_changed),
    _b_ = caml_call1(Stdlib_Obj[22][3], _a_);
   caml_call3
    (Base_Hashtbl[36],
     Expert[2],
     _b_,
     function(param){
      return caml_call2
              (Base_List[9],
               visibility_handlers[1],
               function(f){return caml_call1(f, 0);});
     });
   var
    _c_ = caml_call1(Stdlib_Obj[22][1], Stop_propagation),
    _d_ = caml_call1(Stdlib_Obj[22][3], _c_);
   caml_call3
    (Base_Hashtbl[36],
     Expert[2],
     _d_,
     function(param){
      return caml_call2
              (Base_Option[34],
               current_dom_event[1],
               Js_of_ocaml_Dom_html[117]);
     });
   var
    _e_ = caml_call1(Stdlib_Obj[22][1], Prevent_default),
    _f_ = caml_call1(Stdlib_Obj[22][3], _e_);
   caml_call3
    (Base_Hashtbl[36],
     Expert[2],
     _f_,
     function(param){
      return caml_call2
              (Base_Option[34], current_dom_event[1], Js_of_ocaml_Dom[18]);
     });
   var handle_non_dom_event_exn = Expert[1];
   function handle(dom_event, event){
    var old = current_dom_event[1];
    current_dom_event[1] = [0, dom_event];
    caml_call1(Expert[1], event);
    current_dom_event[1] = old;
    return 0;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Effect);
   var
    Virtual_dom_Effect =
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       never,
       lazy,
       print_s,
       of_sync_fun,
       Viewport_changed,
       Stop_propagation,
       Stop_immediate_propagation,
       Prevent_default,
       sequence_as_sibling,
       Define_visibility,
       [0, handle, handle_non_dom_event_exn]];
   runtime.caml_register_global
    (22, Virtual_dom_Effect, cst_Virtual_dom_Effect);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Gen_js_api
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Gen_js_api = "Virtual_dom__Gen_js_api",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Gen_js_api);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/gen_js_api.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Gen_js_api);
   var Virtual_dom_Gen_js_api = [0];
   runtime.caml_register_global
    (11, Virtual_dom_Gen_js_api, cst_Virtual_dom_Gen_js_api);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Hooks_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Hooks_intf = "Virtual_dom__Hooks_intf",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Hooks_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/hooks_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Hooks_intf);
   var Virtual_dom_Hooks_intf = [0];
   runtime.caml_register_global
    (11, Virtual_dom_Hooks_intf, cst_Virtual_dom_Hooks_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Hooks
//# unitInfo: Requires: CamlinternalLazy, Core, Core__Type_equal, Expect_test_collector, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Virtual_dom_Hooks = "Virtual_dom__Hooks",
    cst_virtual_dom = "virtual_dom",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$2,
    cst$1 = cst$2,
    cst = cst$2,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Hooks);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/hooks.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function sexp_of_t(param){
    var value = param[2], type_id = param[1];
    return caml_call2(Core_Type_equal[8][6], type_id, value);
   }
   var
    Extra = [0, sexp_of_t],
    generic_hook =
      [246, function(param){return Js_of_ocaml_Js[52][1].GenericHook;}],
    cst_hooks_do_not_have_the_same =
      "hooks do not have the same type, so they cannot be combined; taking the second of the two";
   function pack(param){
    var
     id = param[7],
     destroy = param[6],
     update = param[5],
     init = param[4],
     input_id = param[2],
     input = param[1],
     a = caml_call1(init, input),
     init$0 = caml_js_wrap_callback(a),
     a$0 = caml_call1(update, input),
     update$0 = caml_js_wrap_callback(a$0),
     destroy$0 = caml_js_wrap_callback(destroy),
     _h_ = runtime.caml_obj_tag(generic_hook),
     generic_hook$0 =
       250 === _h_
        ? generic_hook[1]
        : 246
          === _h_
          ? caml_call1(CamlinternalLazy[2], generic_hook)
          : generic_hook,
     extra = [0, input_id, input];
    return generic_hook$0(init$0, update$0, destroy$0, id, extra);
   }
   function combine(left, right){
    if(caml_call2(Core_Type_equal[8][9], left[2], right[2])){
     var
      _a_ = right[7],
      _b_ = right[6],
      _c_ = right[5],
      _d_ = right[4],
      _e_ = right[3],
      _f_ = right[2];
     return [0,
             caml_call2(right[3], left[1], right[1]),
             _f_,
             _e_,
             _d_,
             _c_,
             _b_,
             _a_];
    }
    var
     _g_ = caml_call1(Sexplib0_Sexp_conv[7], cst_hooks_do_not_have_the_same);
    caml_call2(Core[249], 0, _g_);
    return right;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Hooks);
   var
    Virtual_dom_Hooks =
      [0,
       combine,
       pack,
       function(S){
        var
         input_and_state_id =
           caml_call2
            (Core_Type_equal[8][3],
             cst$0,
             function(param){
              var
               arg1_002 = param[3],
               arg0_001 = param[1],
               res0_003 = caml_call1(S[2][1], arg0_001),
               res1_004 = caml_call1(Core[150], arg1_002);
              return [1, [0, res0_003, [0, res1_004, 0]]];
             }),
         input_id = caml_call2(Core_Type_equal[8][3], cst$1, S[2][1]);
        function init(input, element){
         var state = caml_call2(S[3], input, element);
         function f(param){return caml_call3(S[4], input, state, element);}
         var
          t2 = caml_js_wrap_callback(f),
          t3 = Js_of_ocaml_Dom_html[8],
          animation_id = t3.requestAnimationFrame(t2);
         return [0, input, animation_id, state];
        }
        function update(input, param, element){
         var state = param[3], animation_id = param[2], old_input = param[1];
         caml_call4(S[5], old_input, input, state, element);
         return [0, input, animation_id, state];
        }
        function destroy(param, element){
         var
          state = param[3],
          animation_id = param[2],
          old_input = param[1],
          t1 = Js_of_ocaml_Dom_html[8];
         t1.cancelAnimationFrame(animation_id);
         return caml_call3(S[6], old_input, state, element);
        }
        function create(input){
         var combine_inputs = S[2][2];
         return [0,
                 input,
                 input_id,
                 combine_inputs,
                 init,
                 update,
                 destroy,
                 input_and_state_id];
        }
        var For_testing = [0, input_id];
        return [0, create, For_testing];
       },
       [0, Extra]];
   runtime.caml_register_global(23, Virtual_dom_Hooks, cst_Virtual_dom_Hooks);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Js_map
//# unitInfo: Requires: Expect_test_collector, Ojs, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Js_map = "Virtual_dom__Js_map",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ojs = global_data.Ojs,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Js_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/js_map.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function create(param){var x2 = new Ojs[19]["Map"]; return x2;}
   function set(x7, x5, x6){x7.set(x5, x6); return 0;}
   function get(x11, x10){
    var _a_ = x11.get(x10);
    return caml_call2(Ojs[7], function(_b_){return _b_;}, _a_);
   }
   function delete$0(x16, x15){x16.delete(x15); return 0;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Js_map);
   var Virtual_dom_Js_map = [0, create, set, get, delete$0];
   runtime.caml_register_global
    (16, Virtual_dom_Js_map, cst_Virtual_dom_Js_map);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Raw
//# unitInfo: Requires: Base, Base__Type_equal, Expect_test_collector, Js_of_ocaml__Js, Ojs, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Virtual_dom__Js_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_VirtualDom = "VirtualDom",
    cst_Virtual_dom_Raw = "Virtual_dom__Raw",
    cst_attributes$0 = "attributes",
    cst_virtual_dom = "virtual_dom",
    caml_js_from_string = runtime.caml_js_from_string,
    caml_js_set = runtime.caml_js_set,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Type_equal = global_data.Base__Type_equal,
    Virtual_dom_Js_map = global_data.Virtual_dom__Js_map,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ojs = global_data.Ojs,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Raw);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/raw.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function t_of_js(x){return x;}
   function t_to_js(x){return x;}
   var Native_node = [0, t_of_js, t_to_js];
   function t_of_js$0(x){return x;}
   function t_to_js$0(x){return x;}
   function create(param){return caml_call1(Ojs[11], 0);}
   var
    set_property = caml_js_set,
    has_property = Ojs[12],
    cst_attributes = cst_attributes$0;
   function has_attribute(t, name){
    var _x_ = caml_call2(Ojs[12], t, cst_attributes);
    if(! _x_) return _x_;
    var _y_ = t[cst_attributes$0];
    return caml_call2(Ojs[12], _y_, name);
   }
   function set_attribute(t, name, value){
    var _w_ = t[cst_attributes$0];
    if(caml_call2(Base[203], _w_, undefined))
     t[cst_attributes$0] = caml_call1(Ojs[11], 0);
    return t[cst_attributes$0][name] = value;
   }
   var
    Attrs =
      [0,
       t_of_js$0,
       t_to_js$0,
       create,
       has_property,
       has_attribute,
       set_property,
       set_attribute];
   function t_of_js$1(param){return function(_v_){return _v_;};}
   function t_to_js$1(param){return function(_u_){return _u_;};}
   var Element_array = [0, t_of_js$1, t_to_js$1];
   function t_of_js$2(x2){return x2;}
   function t_to_js$2(x1){return x1;}
   function node(x3, x4, x5, x7){
    var
     _q_ = caml_call2(Ojs[8], caml_js_from_string, x7),
     _r_ = caml_call2(Element_array[2], t_to_js$2, x5),
     _s_ = caml_call1(Attrs[2], x4),
     _t_ = caml_js_from_string(x3),
     x2 = new Ojs[19][cst_VirtualDom]["VNode"](_t_, _s_, _r_, _q_);
    return x2;
   }
   function text(x9){
    var
     _p_ = caml_js_from_string(x9),
     x2 = new Ojs[19][cst_VirtualDom]["VText"](_p_);
    return x2;
   }
   function svg(x10, x11, x12, x14){
    var
     _l_ = caml_call2(Ojs[8], caml_js_from_string, x14),
     _m_ = caml_call2(Element_array[2], t_to_js$2, x12),
     _n_ = caml_call1(Attrs[2], x11),
     _o_ = caml_js_from_string(x10),
     x2 = new Ojs[19][cst_VirtualDom]["svg"](_o_, _n_, _m_, _l_);
    return x2;
   }
   function to_dom(x16){
    var _k_ = Ojs[19][cst_VirtualDom].createElement(x16);
    return caml_call1(Native_node[1], _k_);
   }
   var Node = [0, t_of_js$2, t_to_js$2, node, text, svg, to_dom];
   function t_of_js$3(x18){return x18;}
   function t_to_js$3(x17){return x17;}
   function create$0(x19, x20){
    var
     _i_ = caml_call1(Node[2], x20),
     _j_ = caml_call1(Node[2], x19),
     x18 = Ojs[19][cst_VirtualDom].diff(_j_, _i_);
    return x18;
   }
   function apply(x21, x22){
    var
     _g_ = caml_call1(Native_node[2], x21),
     _h_ = Ojs[19][cst_VirtualDom].patch(_g_, x22);
    return caml_call1(Native_node[1], _h_);
   }
   function f(patch){
    for(var key in patch) if(key !== "a") return false;
    return true;
   }
   function is_empty(t){return f(t) | 0;}
   var
    Patch = [0, t_of_js$3, t_to_js$3, create$0, apply, is_empty],
    t = caml_call1(Virtual_dom_Js_map[1], 0),
    _a_ = [0, "<opaque>"],
    _b_ = [0, "id_sexp"],
    cst_BUG_element_state_not_foun = "BUG: element state not found";
   function set(id, element, state){
    return caml_call3(Virtual_dom_Js_map[2], t, element, [0, id, state]);
   }
   function get(id, element){
    var match = caml_call2(Virtual_dom_Js_map[3], t, element);
    if(match){
     var match$0 = match[1], state = match$0[2], f_id = match$0[1];
     caml_call2(Base_Type_equal[12][11], id, f_id);
     return state;
    }
    var
     id_sexp =
       caml_call2(Base_Type_equal[12][1], function(param){return _a_;}, id),
     _e_ = [0, [1, [0, _b_, [0, caml_call1(Base[84][4], id_sexp), 0]]], 0],
     _f_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_element_state_not_foun),
         _e_]];
    return caml_call1(Base[202], _f_);
   }
   function delete$0(element){
    return caml_call2(Virtual_dom_Js_map[4], t, element);
   }
   var State_keeper = [0, t, set, get, delete$0];
   function create$1(info, opt, _c_, id){
    if(opt)
     var sth = opt[1], destroy = sth;
    else
     var destroy = function(param, _d_){return;};
    if(_c_)
     var sth$0 = _c_[1], update = sth$0;
    else
     var update = function(s, elt){return [0, s, elt];};
    return function(init, param){
     var obj = {};
     obj.type = "Widget";
     obj.name = 0;
     obj.id = id;
     obj.info = info;
     var
      t8 =
        caml_js_wrap_callback
         (function(param){
           var
            match = caml_call1(init, 0),
            dom_node = match[2],
            s0 = match[1];
           caml_call3(State_keeper[2], id, dom_node, s0);
           return dom_node;
          });
     obj.init = t8;
     var
      t11 =
        caml_js_wrap_callback
         (function(prev, dom_node){
           caml_call2(Base_Type_equal[12][11], prev.id, id);
           var
            prev_state = caml_call2(State_keeper[3], id, dom_node),
            match = caml_call2(update, prev_state, dom_node),
            dom_node$0 = match[2],
            state = match[1];
           caml_call1(State_keeper[4], dom_node);
           caml_call3(State_keeper[2], id, dom_node$0, state);
           return dom_node$0;
          });
     obj.update = t11;
     var
      t13 =
        caml_js_wrap_callback
         (function(dom_node){
           var prev_state = caml_call2(State_keeper[3], id, dom_node);
           caml_call2(destroy, prev_state, dom_node);
           return caml_call1(State_keeper[4], dom_node);
          });
     obj.destroy = t13;
     return caml_call1(Node[1], obj);};
   }
   var Widget = [0, State_keeper, create$1];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Raw);
   var
    Virtual_dom_Raw =
      [0, Native_node, Attrs, Element_array, Node, Patch, Widget];
   runtime.caml_register_global(47, Virtual_dom_Raw, cst_Virtual_dom_Raw);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Attr
//# unitInfo: Requires: Core, Core__Bool, Core__Char, Core__Int, Core__List, Core__Map, Core__Option, Core__Set, Core__String, Core__Type_equal, Core__Unit, Css_gen, Expect_test_collector, Inline_test_config, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ojs, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Dom_float, Virtual_dom__Effect, Virtual_dom__Hooks, Virtual_dom__Raw
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst_Virtual_dom_Attr = "Virtual_dom__Attr",
    cst$8 = "_",
    cst_class$1 = "class",
    cst_first = "first",
    cst_focus$0 = "focus",
    cst_input$1 = "input",
    cst_name$0 = "name",
    cst_on$1 = "on",
    cst_second = "second",
    cst_src_attr_ml = "src/attr.ml",
    cst_style$1 = "style",
    cst_target$0 = "target",
    cst_value$2 = "value",
    cst_virtual_dom = "virtual_dom",
    caml_js_from_string = runtime.caml_js_from_string,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    name$1 = "single-focus-hook",
    name$0 = "always-focus-hook",
    cst$6 = cst$7,
    cst$0 = cst$7,
    cst = cst$7,
    empty = [6, 0],
    cst$1 = cst$7,
    cst$2 = cst$7,
    cst$3 = cst$7,
    cst$4 = cst$7,
    cst$5 = cst$7,
    Core_List = global_data.Core__List,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Css_gen = global_data.Css_gen,
    Core_Set = global_data.Core__Set,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ui_effect = global_data.Ui_effect,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Core_Option = global_data.Core__Option,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Bool = global_data.Core__Bool,
    Core_Int = global_data.Core__Int,
    Core_Char = global_data.Core__Char,
    Virtual_dom_Raw = global_data.Virtual_dom__Raw,
    Core_Map = global_data.Core__Map,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Ojs = global_data.Ojs,
    Virtual_dom_Dom_float = global_data.Virtual_dom__Dom_float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Inline_test_config = global_data.Inline_test_config,
    Core_Unit = global_data.Core__Unit;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Attr);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], cst_src_attr_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   Css_gen[94][1][1] = Virtual_dom_Dom_float[6];
   var
    _a_ = [0, cst$8],
    _b_ = [0, "rtid"],
    _c_ = [0, cst$8],
    _d_ = [0, "ltid"],
    cst_BUG_Type_ids_for_event_han =
      "BUG!  Type-ids for event handlers differ";
   function combine(param, right){
    var
     rhandler = right[2],
     x_002 = right[1],
     lhandler = param[2],
     x_001 = param[1];
    if(caml_call2(Core_Type_equal[8][9], x_001, x_002))
     return [0,
             x_001,
             function(value){
              var _bq_ = caml_call1(lhandler, value);
              return caml_call2
                      (Virtual_dom_Effect[20],
                       _bq_,
                       function(param){return caml_call1(rhandler, value);});
             }];
    var
     _bn_ =
       [0,
        [1,
         [0,
          _b_,
          [0,
           caml_call2
            (Core_Type_equal[8][1], function(param){return _a_;}, x_002),
           0]]],
        0],
     _bo_ =
       [0,
        [1,
         [0,
          _d_,
          [0,
           caml_call2
            (Core_Type_equal[8][1], function(param){return _c_;}, x_001),
           0]]],
        _bn_],
     _bp_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Type_ids_for_event_han),
         _bo_]];
    caml_call2(Core[249], 0, _bp_);
    return right;
   }
   function create(name, value){
    return [1, 0, name, caml_jsstring_of_string(value)];
   }
   function create_float(name, value){
    return [1, 0, name, caml_call1(Virtual_dom_Dom_float[1], value)];
   }
   function property(name, value){return [0, 0, name, value];}
   function string_property(name, value){
    return [0, 0, name, caml_jsstring_of_string(value)];
   }
   function bool_property(name, value){return [0, 0, name, ! ! value];}
   function suppress_merge_warnings(t){
    switch(t[0]){
      case 0:
       return [0, 1, t[2], t[3]];
      case 1:
       return [1, 1, t[2], t[3]];
      default: return t;
    }
   }
   function create_hook(name, hook){return [3, name, hook];}
   function many(attrs){return [6, attrs];}
   function many_without_merge(attrs){return [8, attrs];}
   function combine$0(left, right){return [6, [0, left, [0, right, 0]]];}
   var
    warning_count = [0, 0],
    current = [0, [0, 100]],
    _e_ = [0, "quota"],
    cst_WARNING_reached_warning_me =
      "WARNING: reached warning message quota; no more messages will be printed";
   function warn_s(s){
    warning_count[1]++;
    var match = current[1];
    if(typeof match === "number"){
     if(match) return caml_call2(Core[249], 0, s);
     return;
    }
    var quota = match[1], warning_count$0 = warning_count[1];
    if(caml_call2(Core[89], warning_count$0, quota)){
     caml_call2(Core[249], 0, s);
     if(caml_call2(Core[90], warning_count$0, quota)){
      var
       _bl_ = [0, [1, [0, _e_, [0, caml_call1(Core[356], quota), 0]]], 0],
       _bm_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_reached_warning_me),
           _bl_]];
      return caml_call2(Core[249], 0, _bm_);
     }
    }
    return;
   }
   function reset_warning_count(param){warning_count[1] = 0; return 0;}
   var For_testing = [0, reset_warning_count];
   function combining_map_add(map, key, value, combine){
    return caml_call3
            (Core_Map[37],
             map,
             key,
             function(param){
              if(! param) return value;
              var existing_value = param[1];
              return caml_call3(combine, key, existing_value, value);
             });
   }
   var
    _f_ = caml_call1(Core_Map[4], [0, Core_String[139]]),
    _g_ = caml_call1(Core_Map[4], [0, Core_String[139]]),
    _h_ = caml_call1(Core_Set[6], [0, Core_String[139]]),
    empty_merge = [0, Css_gen[20], _h_, _g_, _f_],
    cst_foo_bar = "foo-bar";
   function style(css){return [4, css];}
   function valid_class_name(s){
    var
     _bk_ = caml_call1(Core_String[5], s),
     invalid = _bk_ || caml_call2(Core_String[10], s, Core_Char[19]);
    return 1 - invalid;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     "valid",
     0,
     cst_src_attr_ml,
     382,
     0,
     45,
     function(param){return valid_class_name(cst_foo_bar);});
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     "invalid-empty",
     0,
     cst_src_attr_ml,
     383,
     0,
     52,
     function(param){return 1 - valid_class_name(cst$0);});
   var cst_foo_bar$0 = "foo bar";
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     "invalid-space",
     0,
     cst_src_attr_ml,
     384,
     0,
     59,
     function(param){return 1 - valid_class_name(cst_foo_bar$0);});
   var
    _r_ = [0, "classname"],
    cst_invalid_classname = "invalid classname",
    _s_ = [0, "classnames"],
    cst_invalid_classnames = "invalid classnames",
    cst_id = "id",
    cst_name = cst_name$0,
    cst_href = "href",
    cst_target = cst_target$0;
   function class$0(classname){
    if(1 - valid_class_name(classname)){
     var
      _bi_ = [0, [1, [0, _r_, [0, caml_call1(Core[471], classname), 0]]], 0],
      _bj_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_invalid_classname), _bi_]];
     caml_call1(Core[253], _bj_);
    }
    return [5, caml_call2(Core_Set[7], [0, Core_String[139]], classname)];
   }
   function classes(classes){return [5, classes];}
   function classes$0(classnames){
    if(1 - caml_call2(Core_List[14], classnames, valid_class_name)){
     var
      _bg_ =
        [0,
         [1, [0, _s_, [0, caml_call2(Core[421], Core[471], classnames), 0]]],
         0],
      _bh_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_invalid_classnames), _bg_]];
     caml_call1(Core[253], _bh_);
    }
    var classes = caml_call2(Core_Set[33], [0, Core_String[139]], classnames);
    return [5, classes];
   }
   function id(s){return create(cst_id, s);}
   function name(s){return create(cst_name, s);}
   function href(r){return create(cst_href, r);}
   function target(s){return create(cst_target, s);}
   var
    checked = create("checked", cst$1),
    selected = create("selected", cst$2),
    hidden = create("hidden", cst$3),
    readonly = create("readonly", cst$4),
    disabled = create("disabled", cst$5),
    cst_placeholder = "placeholder",
    cst_autofocus = "autofocus",
    cst_for = "for",
    cst_type = "type",
    cst_value$0 = cst_value$2,
    cst_value$1 = cst_value$2,
    cst_tabindex = "tabindex",
    cst_title = "title",
    cst_src = "src",
    cst_min = "min",
    cst_max = "max",
    cst_colspan = "colspan",
    cst_rowspan = "rowspan",
    cst_draggable = "draggable",
    _t_ = [1, 0];
   function placeholder(x){return create(cst_placeholder, x);}
   function autofocus(param){
    return param ? create(cst_autofocus, cst$6) : empty;
   }
   function for$0(x){return create(cst_for, x);}
   function type(x){return create(cst_type, x);}
   function value(x){return create(cst_value$0, x);}
   function value_prop(x){return string_property(cst_value$1, x);}
   function tabindex(x){
    return create(cst_tabindex, caml_call1(Core_Int[82], x));
   }
   function title(x){return create(cst_title, x);}
   function src(x){return create(cst_src, x);}
   function min(x){return create_float(cst_min, x);}
   function max(x){return create_float(cst_max, x);}
   function colspan(x){
    return create(cst_colspan, caml_call1(Core_Int[82], x));
   }
   function rowspan(x){
    return create(cst_rowspan, caml_call1(Core_Int[82], x));
   }
   function draggable(b){
    return create(cst_draggable, caml_call1(Core_Bool[19], b));
   }
   function create$0(name){
    return caml_call2
            (Core_Type_equal[8][3], name, function(param){return _t_;});
   }
   var
    event = create$0("event"),
    focus = create$0("focusEvent"),
    mouse = create$0("mouseEvent"),
    keyboard = create$0("keyboardEvent"),
    submit = create$0("submitEvent"),
    mousewheel = create$0("mousewheelEvent"),
    clipboard = create$0("clipboardEvent"),
    drag = create$0("dragEvent"),
    pointer = create$0("pointerEvent"),
    animation = create$0("animationEvent"),
    _i_ = [0, cst_second],
    _j_ = [0, cst_first],
    cst_WARNING_not_combining_styl = "WARNING: not combining styles",
    _k_ = [0, cst_second],
    _l_ = [0, cst_first],
    cst_WARNING_not_combining_clas = "WARNING: not combining classes",
    _m_ = [0, cst_name$0],
    cst_WARNING_not_combining_hand = "WARNING: not combining handlers",
    _n_ = [0, cst_name$0],
    cst_WARNING_not_combining_hook = "WARNING: not combining hooks",
    _o_ = [0, cst_name$0],
    cst_WARNING_not_combining_prop = "WARNING: not combining properties",
    cst_value = cst_value$2,
    _p_ = [0, cst_name$0],
    cst_WARNING_not_combining_attr = "WARNING: not combining attributes",
    cst_on = cst_on$1,
    cst_style = cst_style$1,
    _q_ = [0, " "],
    cst_class = cst_class$1,
    cst_focus = cst_focus$0,
    cst_blur = "blur",
    cst_click = "click",
    cst_contextmenu = "contextmenu",
    cst_dblclick = "dblclick",
    cst_drag = "drag",
    cst_dragstart = "dragstart",
    cst_dragend = "dragend",
    cst_dragenter = "dragenter",
    cst_dragleave = "dragleave",
    cst_dragover = "dragover",
    cst_drop = "drop",
    cst_mousemove = "mousemove",
    cst_mouseup = "mouseup",
    cst_mousedown = "mousedown",
    cst_mouseenter = "mouseenter",
    cst_mouseleave = "mouseleave",
    cst_mouseover = "mouseover",
    cst_mouseout = "mouseout",
    cst_keyup = "keyup",
    cst_keypress = "keypress",
    cst_keydown = "keydown",
    cst_scroll = "scroll",
    cst_submit = "submit",
    cst_pointerdown = "pointerdown",
    cst_pointerup = "pointerup",
    cst_mousewheel = "mousewheel",
    cst_copy = "copy",
    cst_cut = "cut",
    cst_paste = "paste",
    cst_reset = "reset",
    cst_animationend = "animationend",
    cst_change = "change",
    cst_input = cst_input$1,
    cst_input$0 = cst_input$1;
   function on(type_id, name, handler){
    return [2, name, [0, type_id, handler]];
   }
   function on_focus(_bf_){return on(focus, cst_focus, _bf_);}
   function on_blur(_be_){return on(focus, cst_blur, _be_);}
   function on_click(_bd_){return on(mouse, cst_click, _bd_);}
   function on_contextmenu(_bc_){return on(mouse, cst_contextmenu, _bc_);}
   function on_double_click(_bb_){return on(mouse, cst_dblclick, _bb_);}
   function on_drag(_ba_){return on(drag, cst_drag, _ba_);}
   function on_dragstart(_a$_){return on(drag, cst_dragstart, _a$_);}
   function on_dragend(_a__){return on(drag, cst_dragend, _a__);}
   function on_dragenter(_a9_){return on(drag, cst_dragenter, _a9_);}
   function on_dragleave(_a8_){return on(drag, cst_dragleave, _a8_);}
   function on_dragover(_a7_){return on(drag, cst_dragover, _a7_);}
   function on_drop(_a6_){return on(drag, cst_drop, _a6_);}
   function on_mousemove(_a5_){return on(mouse, cst_mousemove, _a5_);}
   function on_mouseup(_a4_){return on(mouse, cst_mouseup, _a4_);}
   function on_mousedown(_a3_){return on(mouse, cst_mousedown, _a3_);}
   function on_mouseenter(_a2_){return on(mouse, cst_mouseenter, _a2_);}
   function on_mouseleave(_a1_){return on(mouse, cst_mouseleave, _a1_);}
   function on_mouseover(_a0_){return on(mouse, cst_mouseover, _a0_);}
   function on_mouseout(_aZ_){return on(mouse, cst_mouseout, _aZ_);}
   function on_keyup(_aY_){return on(keyboard, cst_keyup, _aY_);}
   function on_keypress(_aX_){return on(keyboard, cst_keypress, _aX_);}
   function on_keydown(_aW_){return on(keyboard, cst_keydown, _aW_);}
   function on_scroll(_aV_){return on(event, cst_scroll, _aV_);}
   function on_submit(_aU_){return on(submit, cst_submit, _aU_);}
   function on_pointerdown(_aT_){return on(pointer, cst_pointerdown, _aT_);}
   function on_pointerup(_aS_){return on(pointer, cst_pointerup, _aS_);}
   function on_mousewheel(_aR_){return on(mousewheel, cst_mousewheel, _aR_);}
   function on_copy(_aQ_){return on(clipboard, cst_copy, _aQ_);}
   function on_cut(_aP_){return on(clipboard, cst_cut, _aP_);}
   function on_paste(_aO_){return on(clipboard, cst_paste, _aO_);}
   function on_reset(_aN_){return on(event, cst_reset, _aN_);}
   function on_animationend(_aM_){
    return on(animation, cst_animationend, _aM_);
   }
   function const_ignore(param){return Virtual_dom_Effect[1];}
   function run_coercion(coercion, target, prev){
    if(prev) return prev;
    var _aL_ = caml_call1(coercion, target);
    return caml_call1(Js_of_ocaml_Js[5][10], _aL_);
   }
   function on_input_event(type_id, event, handler){
    return on
            (type_id,
             event,
             function(ev){
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       ev.target,
                       const_ignore,
                       function(target){
                        var
                         _aK_ = Virtual_dom_Effect[1],
                         _aH_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][33], target, 0),
                         _aI_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][50], target, _aH_),
                         _aJ_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][55], target, _aI_);
                        return caml_call3
                                (Core_Option[36],
                                 _aJ_,
                                 _aK_,
                                 function(target){
                                  var text = runtime.caml_string_of_jsstring(target.value);
                                  return caml_call2(handler, ev, text);
                                 });
                       });
             });
   }
   function on_change(_aG_){return on_input_event(event, cst_change, _aG_);}
   function on_input(_aF_){return on_input_event(event, cst_input, _aF_);}
   function to_raw(attr){
    switch(attr[0]){
      case 6:
      case 8:
       if(! attr[1]) return caml_call1(Virtual_dom_Raw[2][3], 0); break;
    }
    var
     attrs = [0, attr, 0],
     attrs_obj = caml_call1(Virtual_dom_Raw[2][3], 0);
    function take_second_styles(first, second){
     if(1 - caml_call1(Css_gen[21], first)){
      var
       _aD_ = [0, [1, [0, _i_, [0, caml_call1(Css_gen[9], second), 0]]], 0],
       _aE_ = [0, [1, [0, _j_, [0, caml_call1(Css_gen[9], first), 0]]], _aD_];
      warn_s
       ([1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_styl),
          _aE_]]);
     }
     return second;
    }
    function take_second_classes(first, second){
     if(1 - caml_call1(Core_Set[9], first)){
      var
       _aB_ =
         [0,
          [1, [0, _k_, [0, caml_call1(Core_String[141][75], second), 0]]],
          0],
       _aC_ =
         [0,
          [1, [0, _l_, [0, caml_call1(Core_String[141][75], first), 0]]],
          _aB_];
      warn_s
       ([1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_clas),
          _aC_]]);
     }
     return second;
    }
    function take_second_handler(name, first, second){
     var _aA_ = [0, [1, [0, _m_, [0, caml_call1(Core[471], name), 0]]], 0];
     warn_s
      ([1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_hand),
         _aA_]]);
     return second;
    }
    function take_second_hook(name, first, second){
     var _az_ = [0, [1, [0, _n_, [0, caml_call1(Core[471], name), 0]]], 0];
     warn_s
      ([1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_hook),
         _az_]]);
     return second;
    }
    function merge
    (combine_hook, combine_handler, combine_styles, combine_classes, acc){
     var ___ = Core_List[10];
     function _$_(acc, attr){
      switch(attr[0]){
        case 0:
         var
          value = attr[3],
          name = attr[2],
          suppress_merge_warnings = attr[1],
          _ab_ = caml_call2(Virtual_dom_Raw[2][4], attrs_obj, name),
          _ac_ = _ab_ ? 1 - suppress_merge_warnings : _ab_;
         if(_ac_){
          var
           _ad_ = [0, [1, [0, _o_, [0, caml_call1(Core[471], name), 0]]], 0];
          warn_s
           ([1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_prop),
              _ad_]]);
         }
         if(name !== cst_value$2)
          caml_call3(Virtual_dom_Raw[2][6], attrs_obj, name, value);
         else{
          var t1 = Js_of_ocaml_Js[52][1], value$0 = t1.SoftSetHook(value);
          caml_call3(Virtual_dom_Raw[2][6], attrs_obj, cst_value, value$0);
         }
         return acc;
        case 1:
         var
          value$1 = attr[3],
          name$0 = attr[2],
          suppress_merge_warnings$0 = attr[1],
          _ae_ = caml_call2(Virtual_dom_Raw[2][5], attrs_obj, name$0),
          _af_ = _ae_ ? 1 - suppress_merge_warnings$0 : _ae_;
         if(_af_){
          var
           _ag_ = [0, [1, [0, _p_, [0, caml_call1(Core[471], name$0), 0]]], 0];
          warn_s
           ([1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_attr),
              _ag_]]);
         }
         caml_call3(Virtual_dom_Raw[2][7], attrs_obj, name$0, value$1);
         return acc;
        case 2:
         var
          handler = attr[2],
          name$1 = attr[1],
          _ah_ = acc[4],
          _ai_ = combining_map_add(acc[3], name$1, handler, combine_handler);
         return [0, acc[1], acc[2], _ai_, _ah_];
        case 3:
         var
          hook = attr[2],
          name$2 = attr[1],
          _aj_ = combining_map_add(acc[4], name$2, hook, combine_hook);
         return [0, acc[1], acc[2], acc[3], _aj_];
        case 4:
         var
          new_styles = attr[1],
          _ak_ = acc[4],
          _al_ = acc[3],
          _am_ = acc[2];
         return [0,
                 caml_call2(combine_styles, acc[1], new_styles),
                 _am_,
                 _al_,
                 _ak_];
        case 5:
         var
          new_classes = attr[1],
          _an_ = acc[4],
          _ao_ = acc[3],
          _ap_ = caml_call2(combine_classes, acc[2], new_classes);
         return [0, acc[1], _ap_, _ao_, _an_];
        case 6:
         var
          attrs = attr[1],
          sub_merge =
            merge
              (function(param){return Virtual_dom_Hooks[1];},
               function(param){return combine;},
               Css_gen[27],
               Core_Set[13],
               empty_merge)
             (attrs),
          _aq_ = caml_call3(Core_Map[78], acc[4], sub_merge[4], combine_hook),
          _ar_ =
            caml_call3(Core_Map[78], acc[3], sub_merge[3], combine_handler),
          _as_ = caml_call2(combine_classes, acc[2], sub_merge[2]);
         return [0,
                 caml_call2(combine_styles, acc[1], sub_merge[1]),
                 _as_,
                 _ar_,
                 _aq_];
        case 7:
         var
          map_classes = attr[3],
          map_styles = attr[2],
          attrs$0 = attr[1],
          sub_merge$0 =
            merge
              (take_second_hook,
               take_second_handler,
               Css_gen[27],
               Core_Set[13],
               empty_merge)
             (attrs$0),
          _at_ =
            caml_call3(Core_Map[78], acc[4], sub_merge$0[4], combine_hook),
          _au_ =
            caml_call3(Core_Map[78], acc[3], sub_merge$0[3], combine_handler),
          _av_ =
            caml_call1
             (map_classes,
              caml_call2(combine_classes, acc[2], sub_merge$0[2]));
         return [0,
                 caml_call1
                  (map_styles,
                   caml_call2(combine_styles, acc[1], sub_merge$0[1])),
                 _av_,
                 _au_,
                 _at_];
        default:
         var
          attrs$1 = attr[1],
          sub_merge$1 =
            merge
              (take_second_hook,
               take_second_handler,
               take_second_styles,
               take_second_classes,
               empty_merge)
             (attrs$1),
          _aw_ =
            caml_call3(Core_Map[78], acc[4], sub_merge$1[4], combine_hook),
          _ax_ =
            caml_call3(Core_Map[78], acc[3], sub_merge$1[3], combine_handler),
          _ay_ = caml_call2(combine_classes, acc[2], sub_merge$1[2]);
         return [0,
                 caml_call2(combine_styles, acc[1], sub_merge$1[1]),
                 _ay_,
                 _ax_,
                 _aw_];
      }
     }
     return function(_aa_){return caml_call3(___, _aa_, acc, _$_);};
    }
    var
     merge$0 =
       merge
         (take_second_hook,
          take_second_handler,
          take_second_styles,
          take_second_classes,
          empty_merge)
        (attrs);
    caml_call2
     (Core_Map[45],
      merge$0[4],
      function(name, hook){
       var _Z_ = caml_call1(Virtual_dom_Hooks[2], hook);
       return caml_call3(Virtual_dom_Raw[2][6], attrs_obj, name, _Z_);
      });
    caml_call2
     (Core_Map[45],
      merge$0[3],
      function(name, param){
       var handler = param[2];
       function f(e){
        var _Y_ = caml_call1(handler, e);
        caml_call2(Virtual_dom_Effect[22][1], e, _Y_);
        return Js_of_ocaml_Js[7];
       }
       var
        _W_ = caml_call1(Js_of_ocaml_Dom[10], f),
        _X_ = caml_call2(Core[18], cst_on, name);
       return caml_call3(Virtual_dom_Raw[2][6], attrs_obj, _X_, _W_);
      });
    if(1 - caml_call1(Css_gen[21], merge$0[1])){
     var
      props = caml_call1(Css_gen[30], merge$0[1]),
      obj = caml_call1(Ojs[11], 0);
     caml_call2
      (Core_List[9],
       props,
       function(param){
        var v = param[2], k = param[1];
        return obj[k] = caml_js_from_string(v);
       });
     caml_call3(Virtual_dom_Raw[2][6], attrs_obj, cst_style, obj);
    }
    if(! caml_call1(Core_Set[9], merge$0[2])){
     var
      _U_ = caml_call1(Core_Set[38], merge$0[2]),
      _V_ = caml_js_from_string(caml_call2(Core_String[32], _q_, _U_));
     caml_call3(Virtual_dom_Raw[2][7], attrs_obj, cst_class, _V_);
    }
    return attrs_obj;
   }
   function on_file_input(handler){
    return on
            (event,
             cst_input$0,
             function(ev){
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       ev.target,
                       const_ignore,
                       function(target){
                        var _T_ = caml_call1(Js_of_ocaml_Dom_html[118][33], target);
                        return caml_call3
                                (Js_of_ocaml_Js[5][7],
                                 _T_,
                                 const_ignore,
                                 function(target){
                                  return caml_call3
                                          (Js_of_ocaml_Js[6][7],
                                           target.files,
                                           const_ignore,
                                           function(files){return caml_call2(handler, ev, files);});
                                 });
                       });
             });
   }
   var sexp_of_t = Core_Unit[15];
   function combine$1(param, _S_){return 0;}
   function init(param, _R_){return 0;}
   function on_mount(param, _Q_, element){return element.focus();}
   function update(param, _P_, _O_, _N_){return 0;}
   function destroy(param, _M_, _L_){return 0;}
   var
    Hook =
      caml_call1
       (Virtual_dom_Hooks[3],
        [0, [0], [0, sexp_of_t, combine$1], init, on_mount, update, destroy]),
    cst_on$0 = cst_on$1,
    cst_style$0 = cst_style$1,
    cst_class$0 = cst_class$1;
   function attr(param){
    var hook = caml_call1(Hook[1], 0);
    return [3, name$0, hook];
   }
   function map_style(t, f){
    return [0, [7, t, f, function(_K_){return _K_;}], 0];
   }
   function add_class(t, c){
    return [0,
            [7,
             t,
             function(_J_){return _J_;},
             function(cs){return caml_call2(Core_Set[11], cs, c);}],
            0];
   }
   function add_style(t, s){
    return map_style(t, function(ss){return caml_call2(Css_gen[27], ss, s);});
   }
   function merge_classes_and_styles(t){
    return [0,
            [7, t, function(_I_){return _I_;}, function(_H_){return _H_;}],
            0];
   }
   function filter_by_kind(t, f){
    switch(t[0]){
      case 0:
       return caml_call1(f, 99222645) ? t : empty;
      case 1:
       return caml_call1(f, 482562044) ? t : empty;
      case 2:
       return caml_call1(f, 321312682) ? t : empty;
      case 3:
       return caml_call1(f, 803993603) ? t : empty;
      case 4:
       return caml_call1(f, 390796561) ? t : empty;
      case 5:
       return caml_call1(f, -611981288) ? t : empty;
      case 6:
       var attrs = t[1];
       return [6,
               caml_call2
                (Core_List[72],
                 attrs,
                 function(_G_){return filter_by_kind(_G_, f);})];
      case 7:
       var b = t[3], a = t[2], attrs$0 = t[1];
       return [7,
               caml_call2
                (Core_List[72],
                 attrs$0,
                 function(_F_){return filter_by_kind(_F_, f);}),
               a,
               b];
      default:
       var attrs$1 = t[1];
       return [8,
               caml_call2
                (Core_List[72],
                 attrs$1,
                 function(_E_){return filter_by_kind(_E_, f);})];
    }
   }
   function contains_name(looking_for, param){
    switch(param[0]){
      case 2:
       var name$0 = param[1], _C_ = caml_call2(Core[18], cst_on$0, name$0);
       return caml_call2(Core_String[126], _C_, looking_for);
      case 3:
       var name = param[1]; break;
      case 4:
       return caml_call2(Core_String[126], looking_for, cst_style$0);
      case 5:
       return caml_call2(Core_String[126], looking_for, cst_class$0);
      case 0:
      case 1:
       var name = param[2]; break;
      default:
       var attrs = param[1];
       return caml_call2
               (Core_List[13],
                attrs,
                function(_D_){return contains_name(looking_for, _D_);});
    }
    return caml_call2(Core_String[126], looking_for, name);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Attr);
   var
    Virtual_dom_Attr =
      [0,
       create,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       many,
       many_without_merge,
       empty,
       combine$0,
       combine$0,
       autofocus,
       checked,
       class$0,
       classes$0,
       classes,
       disabled,
       for$0,
       href,
       target,
       id,
       name,
       placeholder,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       value_prop,
       title,
       src,
       on_focus,
       on_blur,
       [0, current, For_testing],
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_click,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       [0, merge_classes_and_styles, map_style, add_style, add_class],
       [0, attr],
       function(_u_){
        var has_been_used = [0, 0], sexp_of_t = Sexplib0_Sexp_conv[23];
        function combine(left, right){
         return [0, Ui_effect[2], [0, left, [0, right, 0]]];
        }
        var Input = [0, sexp_of_t, combine];
        function init(param, _B_){return 0;}
        function on_mount(event, param, element){
         var _A_ = 1 - has_been_used[1];
         return _A_
                 ? (has_been_used
                    [1]
                   = 1,
                   element.focus(),
                   caml_call1(Virtual_dom_Effect[22][2], event))
                 : _A_;
        }
        function update(param, _z_, _y_, _x_){return 0;}
        function destroy(param, _w_, _v_){return 0;}
        var
         Hook =
           caml_call1
            (Virtual_dom_Hooks[3],
             [0, [0], Input, init, on_mount, update, destroy]);
        function attr(param, after){
         var hook = caml_call1(Hook[1], after);
         return [3, name$1, hook];
        }
        return [0, attr];
       },
       [0, contains_name, filter_by_kind]];
   runtime.caml_register_global(163, Virtual_dom_Attr, cst_Virtual_dom_Attr);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Global_listeners
//# unitInfo: Requires: Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Attr, Virtual_dom__Effect, Virtual_dom__Hooks
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Global_listene = "Virtual_dom__Global_listeners",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ui_effect = global_data.Ui_effect,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Global_listene);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/global_listeners.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function Make(X){
    function sexp_of_t(param){
     return caml_call1(Sexplib0_Sexp_conv[24], function(_f_){return 0;});
    }
    function combine(f, g, event){
     var
      _d_ = [0, caml_call1(g, event), 0],
      _e_ = [0, caml_call1(f, event), _d_];
     return [0, Ui_effect[2], _e_];
    }
    var Input = [0, sexp_of_t, combine];
    function init(f, element){
     var
      handler =
        caml_call1
         (Js_of_ocaml_Dom[10],
          function(ev){
           var _c_ = caml_call1(f, ev);
           caml_call1(Virtual_dom_Effect[22][2], _c_);
           return Js_of_ocaml_Js[7];
          });
     return [0,
             caml_call4
              (Js_of_ocaml_Dom_html[17],
               Js_of_ocaml_Dom_html[8],
               X[1],
               handler,
               Js_of_ocaml_Js[7])];
    }
    function destroy(input, state, element){
     return caml_call1(Js_of_ocaml_Dom_html[18], state[1]);
    }
    function update(old_input, f, state, element){
     destroy(old_input, state, element);
     var new_state = init(f, element);
     state[1] = new_state[1];
     return 0;
    }
    function on_mount(input, state, element){return 0;}
    var
     include =
       caml_call1
        (Virtual_dom_Hooks[3],
         [0, [0], Input, init, on_mount, update, destroy]),
     create = include[1],
     For_testing = include[2];
    return [0, create, For_testing];
   }
   var
    event_kind = Js_of_ocaml_Dom_html[15][9],
    Mouse_up = Make([0, event_kind]),
    event_kind$0 = Js_of_ocaml_Dom_html[15][11],
    Mouse_move = Make([0, event_kind$0]),
    cst_global_mouseup_listener = "global-mouseup-listener",
    cst_global_mousemove_listener = "global-mousemove-listener";
   function mouseup(f){
    var _b_ = caml_call1(Mouse_up[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_mouseup_listener, _b_);
   }
   function mousemove(f){
    var _a_ = caml_call1(Mouse_move[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_mousemove_listener, _a_);
   }
   var
    mouse_up_type_id = Mouse_up[2][1],
    mouse_move_type_id = Mouse_move[2][1],
    For_testing = [0, mouse_up_type_id, mouse_move_type_id];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Global_listene);
   var Virtual_dom_Global_listeners = [0, mouseup, mousemove, For_testing];
   runtime.caml_register_global
    (22, Virtual_dom_Global_listeners, cst_Virtual_dom_Global_listene);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Node
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__Staged, Base__Type_equal, CamlinternalLazy, Expect_test_collector, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Virtual_dom__Attr, Virtual_dom__Raw
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Virtual_dom_Node = "Virtual_dom__Node",
    cst_input$0 = "input",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    res1_009 = [0, "<opaque>"],
    cst = cst$1,
    cst_pre = "pre",
    Virtual_dom_Raw = global_data.Virtual_dom__Raw,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    Base_Type_equal = global_data.Base__Type_equal,
    Base_Staged = global_data.Base__Staged,
    Base_Printf = global_data.Base__Printf,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Node);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/node.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   var include = Virtual_dom_Raw[6], create = include[2], Aliases = [0];
   function tag(t){return t[1];}
   function attrs(t){return t[3];}
   function key(t){return t[2];}
   function with_key(t, key){
    return [0, t[1], [0, key], t[3], t[4], t[5], t[6]];
   }
   function map_attrs(t, f){
    var
     attrs = caml_call1(f, t[3]),
     raw_attrs =
       [246, function(_bw_){return caml_call1(Virtual_dom_Attr[43], attrs);}];
    return [0, t[1], t[2], attrs, raw_attrs, t[5], t[6]];
   }
   function add_class(t, c){
    return map_attrs
            (t,
             function(a){
              var _bv_ = caml_call1(Virtual_dom_Attr[15], c);
              return caml_call2(Virtual_dom_Attr[11], a, _bv_);
             });
   }
   function add_classes(t, c){
    return map_attrs
            (t,
             function(a){
              var _bu_ = caml_call1(Virtual_dom_Attr[16], c);
              return caml_call2(Virtual_dom_Attr[11], a, _bu_);
             });
   }
   function add_style(t, s){
    return map_attrs
            (t,
             function(a){
              var _bt_ = caml_call1(Virtual_dom_Attr[28], s);
              return caml_call2(Virtual_dom_Attr[11], a, _bt_);
             });
   }
   function t_to_js(param){
    if(typeof param === "number")
     return caml_call1(Virtual_dom_Raw[4][4], cst$0);
    switch(param[0]){
      case 0:
       var s = param[1]; return caml_call1(Virtual_dom_Raw[4][4], s);
      case 1:
       var
        _bq_ = param[1],
        _br_ = _bq_[4],
        key = _bq_[2],
        tag = _bq_[1],
        _bs_ = runtime.caml_obj_tag(_br_),
        raw_attrs =
          250 === _bs_
           ? _br_[1]
           : 246 === _bs_ ? caml_call1(CamlinternalLazy[2], _br_) : _br_,
        children = _bq_[5];
       return 4153924 <= _bq_[6]
               ? caml_call4
                 (Virtual_dom_Raw[4][5], tag, raw_attrs, children, key)
               : caml_call4
                 (Virtual_dom_Raw[4][3], tag, raw_attrs, children, key);
      default: var w = param[1]; return w;
    }
   }
   function element(kind, tag, key, attrs, children){
    var t0 = Js_of_ocaml_Js[18], children_raw = new t0;
    caml_call2
     (Base_List[9],
      children,
      function(other){
       if(typeof other === "number") return 0;
       var t1 = t_to_js(other);
       children_raw.push(t1);
       return 0;
      });
    var
     raw_attrs =
       [246, function(_bp_){return caml_call1(Virtual_dom_Attr[43], attrs);}];
    return [0, tag, key, attrs, raw_attrs, children_raw, kind];
   }
   function element_expert(kind, tag, key, attrs, children){
    var
     raw_attrs =
       [246, function(_bo_){return caml_call1(Virtual_dom_Attr[43], attrs);}];
    return [0, tag, key, attrs, raw_attrs, children, kind];
   }
   function text(s){return [0, s];}
   function widget(info, destroy, update, id, init, param){
    return [2, caml_call6(create, info, destroy, update, id, init, 0)];
   }
   function create$0(tag, key, opt, children){
    if(opt)
     var sth = opt[1], attr = sth;
    else
     var attr = Virtual_dom_Attr[10];
    return [1, element(-847254184, tag, key, attr, children)];
   }
   function create_childless(tag, key, attr, param){return create$0(tag, key, attr, 0);
   }
   function create_svg(tag, key, opt, children){
    if(opt)
     var sth = opt[1], attr = sth;
    else
     var attr = Virtual_dom_Attr[10];
    return [1, element(4153924, tag, key, attr, children)];
   }
   var
    _a_ = [0, "state"],
    _b_ = [0, cst_input$0],
    _c_ = [0, "inner-html"],
    cst_inner_html_node = "inner-html-node",
    cst_Vdom_Node_inner_html_was_g = "Vdom.Node.inner_html was given a 'none'",
    cst_Vdom_Node_inner_html_was_g$0 =
      "Vdom.Node.inner_html was given a 'text'",
    cst_Vdom_Node_inner_html_was_g$1 =
      "Vdom.Node.inner_html was given a 'widget'",
    cst_a = "a",
    cst_body = "body",
    cst_button = "button",
    cst_code = "code",
    cst_div = "div",
    cst_main = "main",
    cst_fieldset = "fieldset",
    cst_footer = "footer",
    cst_h1 = "h1",
    cst_h2 = "h2",
    cst_h3 = "h3",
    cst_h4 = "h4",
    cst_h5 = "h5",
    cst_h6 = "h6",
    cst_header = "header",
    cst_html = "html",
    cst_input = cst_input$0,
    cst_textarea = "textarea",
    cst_select = "select",
    cst_option = "option",
    cst_label = "label",
    cst_li = "li",
    cst_p = "p",
    cst_section = "section",
    cst_span = "span",
    cst_strong = "strong",
    cst_table = "table",
    cst_tbody = "tbody",
    cst_td = "td",
    cst_th = "th",
    cst_thead = "thead",
    cst_tr = "tr",
    cst_ul = "ul",
    cst_ol = "ol",
    cst_br = "br",
    cst_hr = "hr";
   function textf(format){return caml_call2(Base_Printf[4], text, format);}
   function widget_of_module(m){
    var
     id =
       caml_call2
        (Base_Type_equal[12][4],
         m[3],
         function(param){
          var
           arg0_006 = param[1],
           state_004 = arg0_006[2],
           input_002 = arg0_006[1],
           arg_005 = caml_call1(m[2][1], state_004),
           bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
           arg_003 = caml_call1(m[1][1], input_002),
           bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001],
           res0_008 = [1, bnds_001$0];
          return [1, [0, res0_008, [0, res1_009, 0]]];
         }),
     _bm_ =
       caml_call1
        (Base_Staged[1],
         function(input){
          var
           info = [246, function(_bn_){return caml_call1(m[1][1], input);}];
          return caml_call6
                  (create,
                   [0, info],
                   [0,
                    function(param, element){
                     var state = param[2], prev_input = param[1];
                     return caml_call3(m[6], prev_input, state, element);
                    }],
                   [0,
                    function(param, element){
                     var
                      state = param[2],
                      prev_input = param[1],
                      match = caml_call4(m[5], prev_input, input, state, element),
                      element$0 = match[2],
                      state$0 = match[1];
                     return [0, [0, input, state$0], element$0];
                    }],
                   id,
                   function(param){
                    var
                     match = caml_call1(m[4], input),
                     element = match[2],
                     state = match[1];
                    return [0, [0, input, state], element];
                   },
                   0);
         }),
     f = caml_call1(Base_Staged[2], _bm_);
    return caml_call1
            (Base_Staged[1], function(i){return [2, caml_call1(f, i)];});
   }
   function to_dom(t){
    var _bl_ = t_to_js(t);
    return caml_call1(Virtual_dom_Raw[4][6], _bl_);
   }
   function inner_html(create, tag, attr, content){
    var element = caml_call3(create, tag, attr, 0);
    function build_sexp(extra, content){
     return [1, [0, _c_, [0, extra, [0, [0, content], 0]]]];
    }
    var
     id =
       caml_call2
        (Base_Type_equal[12][4],
         cst_inner_html_node,
         function(param){
          var match = param[1], content = match[2], element = match[1];
          return build_sexp(element, content);
         });
    if(typeof element === "number")
     var debug = caml_call1(Base[200], cst_Vdom_Node_inner_html_was_g);
    else
     switch(element[0]){
       case 0:
        var debug = caml_call1(Base[200], cst_Vdom_Node_inner_html_was_g$0);
        break;
       case 1:
        var element$0 = element[1], debug = [0, element$0[1]]; break;
       default:
        var debug = caml_call1(Base[200], cst_Vdom_Node_inner_html_was_g$1);
     }
    return widget
            ([0, [246, function(_bk_){return build_sexp(debug, content);}]],
             0,
             0,
             id,
             function(param){
              var
               element$0 = to_dom(element),
               t3 = runtime.caml_jsstring_of_string(content);
              element$0.innerHTML = t3;
              return [0, [0, debug, content], element$0];
             },
             0);
   }
   function _d_(tag, attr){
    var key = 0;
    return function(children){
     return [1, element(4153924, tag, key, attr, children)];};
   }
   function inner_html_svg(_bh_, _bi_, _bj_){
    return inner_html(_d_, _bh_, _bi_, _bj_);
   }
   function _e_(tag, attr){
    var _be_ = [0, attr], _bf_ = 0;
    return function(_bg_){return create$0(tag, _bf_, _be_, _bg_);};
   }
   function inner_html$0(_bb_, _bc_, _bd_){
    return inner_html(_e_, _bb_, _bc_, _bd_);
   }
   function a(_a__, _a$_, _ba_){return create$0(cst_a, _a__, _a$_, _ba_);}
   function body(_a7_, _a8_, _a9_){
    return create$0(cst_body, _a7_, _a8_, _a9_);
   }
   function button(_a4_, _a5_, _a6_){
    return create$0(cst_button, _a4_, _a5_, _a6_);
   }
   function code(_a1_, _a2_, _a3_){
    return create$0(cst_code, _a1_, _a2_, _a3_);
   }
   function div(_aY_, _aZ_, _a0_){return create$0(cst_div, _aY_, _aZ_, _a0_);}
   function main(_aV_, _aW_, _aX_){
    return create$0(cst_main, _aV_, _aW_, _aX_);
   }
   function fieldset(_aS_, _aT_, _aU_){
    return create$0(cst_fieldset, _aS_, _aT_, _aU_);
   }
   function footer(_aP_, _aQ_, _aR_){
    return create$0(cst_footer, _aP_, _aQ_, _aR_);
   }
   function h1(_aM_, _aN_, _aO_){return create$0(cst_h1, _aM_, _aN_, _aO_);}
   function h2(_aJ_, _aK_, _aL_){return create$0(cst_h2, _aJ_, _aK_, _aL_);}
   function h3(_aG_, _aH_, _aI_){return create$0(cst_h3, _aG_, _aH_, _aI_);}
   function h4(_aD_, _aE_, _aF_){return create$0(cst_h4, _aD_, _aE_, _aF_);}
   function h5(_aA_, _aB_, _aC_){return create$0(cst_h5, _aA_, _aB_, _aC_);}
   function h6(_ax_, _ay_, _az_){return create$0(cst_h6, _ax_, _ay_, _az_);}
   function header(_au_, _av_, _aw_){
    return create$0(cst_header, _au_, _av_, _aw_);
   }
   function html(_ar_, _as_, _at_){
    return create$0(cst_html, _ar_, _as_, _at_);
   }
   function input(_ao_, _ap_, _aq_){
    return create$0(cst_input, _ao_, _ap_, _aq_);
   }
   function textarea(_al_, _am_, _an_){
    return create$0(cst_textarea, _al_, _am_, _an_);
   }
   function select(_ai_, _aj_, _ak_){
    return create$0(cst_select, _ai_, _aj_, _ak_);
   }
   function option(_af_, _ag_, _ah_){
    return create$0(cst_option, _af_, _ag_, _ah_);
   }
   function label(_ac_, _ad_, _ae_){
    return create$0(cst_label, _ac_, _ad_, _ae_);
   }
   function li(_$_, _aa_, _ab_){return create$0(cst_li, _$_, _aa_, _ab_);}
   function p(_Y_, _Z_, ___){return create$0(cst_p, _Y_, _Z_, ___);}
   function pre(_V_, _W_, _X_){return create$0(cst_pre, _V_, _W_, _X_);}
   function section(_S_, _T_, _U_){
    return create$0(cst_section, _S_, _T_, _U_);
   }
   function span(_P_, _Q_, _R_){return create$0(cst_span, _P_, _Q_, _R_);}
   function strong(_M_, _N_, _O_){return create$0(cst_strong, _M_, _N_, _O_);}
   function table(_J_, _K_, _L_){return create$0(cst_table, _J_, _K_, _L_);}
   function tbody(_G_, _H_, _I_){return create$0(cst_tbody, _G_, _H_, _I_);}
   function td(_D_, _E_, _F_){return create$0(cst_td, _D_, _E_, _F_);}
   function th(_A_, _B_, _C_){return create$0(cst_th, _A_, _B_, _C_);}
   function thead(_x_, _y_, _z_){return create$0(cst_thead, _x_, _y_, _z_);}
   function tr(_u_, _v_, _w_){return create$0(cst_tr, _u_, _v_, _w_);}
   function ul(_r_, _s_, _t_){return create$0(cst_ul, _r_, _s_, _t_);}
   function ol(_o_, _p_, _q_){return create$0(cst_ol, _o_, _p_, _q_);}
   function br(_l_, _m_, _n_){return create_childless(cst_br, _l_, _m_, _n_);}
   function hr(_i_, _j_, _k_){return create_childless(cst_hr, _i_, _j_, _k_);}
   function sexp_for_debugging(indent, sexp){
    var
     s = caml_call2(Base[84][13], indent, sexp),
     _h_ = caml_call1(Base_List[28], [0, s]);
    return create$0(cst_pre, 0, [0, Virtual_dom_Attr[10]], _h_);
   }
   function create$1(previous, current){
    var _f_ = t_to_js(current), _g_ = t_to_js(previous);
    return caml_call2(Virtual_dom_Raw[5][3], _g_, _f_);
   }
   function apply(t, elt){return caml_call2(Virtual_dom_Raw[5][4], elt, t);}
   function is_empty(t){return caml_call1(Virtual_dom_Raw[5][5], t);}
   var Patch = [0, create$1, apply, is_empty];
   function create$2(key, tag, attrs, children){
    return [1, element_expert(-847254184, tag, key, attrs, children)];
   }
   function create_svg$0(key, tag, attrs, children){
    return [1, element_expert(4153924, tag, key, attrs, children)];
   }
   var Expert = [0, create$2, create_svg$0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Node);
   var
    Virtual_dom_Node =
      [0,
       [0,
        tag,
        attrs,
        key,
        with_key,
        map_attrs,
        add_style,
        add_class,
        add_classes],
       [0],
       Aliases,
       0,
       text,
       textf,
       a,
       body,
       button,
       code,
       div,
       main,
       footer,
       fieldset,
       h1,
       h2,
       h3,
       h4,
       h5,
       h6,
       header,
       html,
       input,
       textarea,
       select,
       option,
       label,
       li,
       p,
       pre,
       section,
       span,
       strong,
       table,
       tbody,
       td,
       th,
       thead,
       tr,
       ul,
       ol,
       br,
       hr,
       sexp_for_debugging,
       inner_html$0,
       inner_html_svg,
       create$0,
       create_svg,
       to_dom,
       t_to_js,
       widget,
       widget_of_module,
       Patch,
       Expert];
   runtime.caml_register_global(68, Virtual_dom_Node, cst_Virtual_dom_Node);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Vdom
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Virtual_dom__Attr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Vdom = "Virtual_dom__Vdom",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Virtual_dom_Attr = global_data.Virtual_dom__Attr;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Vdom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/vdom.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   var
    create = Virtual_dom_Attr[1],
    create_float = Virtual_dom_Attr[2],
    string_property = Virtual_dom_Attr[3],
    bool_property = Virtual_dom_Attr[4],
    property = Virtual_dom_Attr[5],
    suppress_merge_warnings = Virtual_dom_Attr[6],
    create_hook = Virtual_dom_Attr[7],
    many = Virtual_dom_Attr[8],
    many_without_merge = Virtual_dom_Attr[9],
    empty = Virtual_dom_Attr[10],
    symbol = Virtual_dom_Attr[11],
    combine = Virtual_dom_Attr[12],
    autofocus = Virtual_dom_Attr[13],
    checked = Virtual_dom_Attr[14],
    class$0 = Virtual_dom_Attr[15],
    classes = Virtual_dom_Attr[16],
    classes$0 = Virtual_dom_Attr[17],
    disabled = Virtual_dom_Attr[18],
    for$0 = Virtual_dom_Attr[19],
    href = Virtual_dom_Attr[20],
    target = Virtual_dom_Attr[21],
    id = Virtual_dom_Attr[22],
    name = Virtual_dom_Attr[23],
    placeholder = Virtual_dom_Attr[24],
    selected = Virtual_dom_Attr[25],
    hidden = Virtual_dom_Attr[26],
    readonly = Virtual_dom_Attr[27],
    style = Virtual_dom_Attr[28],
    min = Virtual_dom_Attr[29],
    max = Virtual_dom_Attr[30],
    colspan = Virtual_dom_Attr[31],
    rowspan = Virtual_dom_Attr[32],
    draggable = Virtual_dom_Attr[33],
    tabindex = Virtual_dom_Attr[34],
    type = Virtual_dom_Attr[35],
    value = Virtual_dom_Attr[36],
    value_prop = Virtual_dom_Attr[37],
    title = Virtual_dom_Attr[38],
    src = Virtual_dom_Attr[39],
    on_focus = Virtual_dom_Attr[40],
    on_blur = Virtual_dom_Attr[41],
    Unmerged_warning_mode = Virtual_dom_Attr[42],
    to_raw = Virtual_dom_Attr[43],
    on_input = Virtual_dom_Attr[44],
    on_change = Virtual_dom_Attr[45],
    on_file_input = Virtual_dom_Attr[46],
    on_click = Virtual_dom_Attr[47],
    on_contextmenu = Virtual_dom_Attr[48],
    on_double_click = Virtual_dom_Attr[49],
    on_drag = Virtual_dom_Attr[50],
    on_dragstart = Virtual_dom_Attr[51],
    on_dragend = Virtual_dom_Attr[52],
    on_dragenter = Virtual_dom_Attr[53],
    on_dragleave = Virtual_dom_Attr[54],
    on_dragover = Virtual_dom_Attr[55],
    on_drop = Virtual_dom_Attr[56],
    on_mousemove = Virtual_dom_Attr[57],
    on_mouseup = Virtual_dom_Attr[58],
    on_mousedown = Virtual_dom_Attr[59],
    on_mouseenter = Virtual_dom_Attr[60],
    on_mouseleave = Virtual_dom_Attr[61],
    on_mouseover = Virtual_dom_Attr[62],
    on_mouseout = Virtual_dom_Attr[63],
    on_keyup = Virtual_dom_Attr[64],
    on_keypress = Virtual_dom_Attr[65],
    on_keydown = Virtual_dom_Attr[66],
    on_scroll = Virtual_dom_Attr[67],
    on_submit = Virtual_dom_Attr[68],
    on_pointerdown = Virtual_dom_Attr[69],
    on_pointerup = Virtual_dom_Attr[70],
    on_mousewheel = Virtual_dom_Attr[71],
    on_copy = Virtual_dom_Attr[72],
    on_cut = Virtual_dom_Attr[73],
    on_paste = Virtual_dom_Attr[74],
    on_reset = Virtual_dom_Attr[75],
    on_animationend = Virtual_dom_Attr[76],
    Multi = Virtual_dom_Attr[77],
    Always_focus_hook = Virtual_dom_Attr[78],
    Single_focus_hook = Virtual_dom_Attr[79],
    Expert = Virtual_dom_Attr[80],
    Attr =
      [0,
       create,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       many,
       many_without_merge,
       empty,
       symbol,
       combine,
       autofocus,
       checked,
       class$0,
       classes,
       classes$0,
       disabled,
       for$0,
       href,
       target,
       id,
       name,
       placeholder,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       value_prop,
       title,
       src,
       on_focus,
       on_blur,
       Unmerged_warning_mode,
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_click,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       Multi,
       Always_focus_hook,
       Single_focus_hook,
       Expert];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Vdom);
   var Virtual_dom_Vdom = [0, Attr];
   runtime.caml_register_global(12, Virtual_dom_Vdom, cst_Virtual_dom_Vdom);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom
//# unitInfo: Requires: Css_gen, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Virtual_dom__Dom_float
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom = "Virtual_dom",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Virtual_dom_Dom_float = global_data.Virtual_dom__Dom_float,
    Css_gen = global_data.Css_gen;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/virtual_dom.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   Css_gen[94][1][1] = Virtual_dom_Dom_float[6];
   var Top_level_effects = [0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom);
   var Virtual_dom = [0, Top_level_effects];
   runtime.caml_register_global(13, Virtual_dom, cst_Virtual_dom);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ2aXJ0dWFsX2RvbS5jbWEuanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsidG9fanNfc3RyaW5nIiwidG9fanNfc3RyaW5nX2ZpeGVkIiwidG9fanNfc3RyaW5nX3ByZWNpc2lvbiIsInRvX2pzX3N0cmluZ19leHBvbmVudGlhbCIsInRvX3N0cmluZyIsInRvX3N0cmluZ19maXhlZCIsInRvX3N0cmluZ19wcmVjaXNpb24iLCJ0b19zdHJpbmdfZXhwb25lbnRpYWwiLCJwcmludCIsImYiLCJ2aXNpYmlsaXR5X2hhbmRsZXJzIiwic2VxdWVuY2VfYXNfc2libGluZyIsImxlZnQiLCJ1bmxlc3Nfc3RvcHBlZCIsImNvbnRhaW5zX3N0b3AiLCJlcyIsImN1cnJlbnRfZG9tX2V2ZW50IiwiaGFuZGxlX25vbl9kb21fZXZlbnRfZXhuIiwiaGFuZGxlIiwiZG9tX2V2ZW50IiwiZXZlbnQiLCJvbGQiLCJzZXhwX29mX3QiLCJ2YWx1ZSIsInR5cGVfaWQiLCJnZW5lcmljX2hvb2siLCJwYWNrIiwiaWQiLCJkZXN0cm95IiwidXBkYXRlIiwiaW5pdCIsImlucHV0X2lkIiwiaW5wdXQiLCJhIiwiaW5pdCQwIiwiYSQwIiwidXBkYXRlJDAiLCJkZXN0cm95JDAiLCJnZW5lcmljX2hvb2skMCIsImV4dHJhIiwiY29tYmluZSIsInJpZ2h0IiwiaW5wdXRfYW5kX3N0YXRlX2lkIiwiYXJnMV8wMDIiLCJhcmcwXzAwMSIsInJlczBfMDAzIiwicmVzMV8wMDQiLCJlbGVtZW50Iiwic3RhdGUiLCJhbmltYXRpb25faWQiLCJvbGRfaW5wdXQiLCJjcmVhdGUiLCJjb21iaW5lX2lucHV0cyIsIngyIiwic2V0IiwieDciLCJ4NSIsIng2IiwiZ2V0IiwieDExIiwieDEwIiwiZGVsZXRlJDAiLCJ4MTYiLCJ4MTUiLCJ0X29mX2pzIiwieCIsInRfdG9fanMiLCJ0X29mX2pzJDAiLCJ0X3RvX2pzJDAiLCJzZXRfcHJvcGVydHkiLCJoYXNfcHJvcGVydHkiLCJoYXNfYXR0cmlidXRlIiwidCIsIm5hbWUiLCJzZXRfYXR0cmlidXRlIiwidF9vZl9qcyQxIiwidF90b19qcyQxIiwiaXNfZW1wdHkiLCJmX2lkIiwiaWRfc2V4cCIsImNyZWF0ZSQxIiwiaW5mbyIsIm9wdCIsInN0aCIsInN0aCQwIiwicyIsImVsdCIsImRvbV9ub2RlIiwiczAiLCJwcmV2X3N0YXRlIiwiZG9tX25vZGUkMCIsIm5hbWUkMSIsIm5hbWUkMCIsImVtcHR5IiwicmhhbmRsZXIiLCJ4XzAwMiIsImxoYW5kbGVyIiwieF8wMDEiLCJjcmVhdGVfZmxvYXQiLCJwcm9wZXJ0eSIsInN0cmluZ19wcm9wZXJ0eSIsImJvb2xfcHJvcGVydHkiLCJzdXBwcmVzc19tZXJnZV93YXJuaW5ncyIsImNyZWF0ZV9ob29rIiwiaG9vayIsIm1hbnkiLCJhdHRycyIsIm1hbnlfd2l0aG91dF9tZXJnZSIsImNvbWJpbmUkMCIsIndhcm5pbmdfY291bnQiLCJjdXJyZW50Iiwid2Fybl9zIiwicXVvdGEiLCJ3YXJuaW5nX2NvdW50JDAiLCJyZXNldF93YXJuaW5nX2NvdW50IiwiY29tYmluaW5nX21hcF9hZGQiLCJtYXAiLCJrZXkiLCJleGlzdGluZ192YWx1ZSIsImVtcHR5X21lcmdlIiwic3R5bGUiLCJjc3MiLCJ2YWxpZF9jbGFzc19uYW1lIiwiaW52YWxpZCIsImNsYXNzJDAiLCJjbGFzc25hbWUiLCJjbGFzc2VzIiwiY2xhc3NlcyQwIiwiY2xhc3NuYW1lcyIsImhyZWYiLCJyIiwidGFyZ2V0IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwiaGlkZGVuIiwicmVhZG9ubHkiLCJkaXNhYmxlZCIsInBsYWNlaG9sZGVyIiwiYXV0b2ZvY3VzIiwiZm9yJDAiLCJ0eXBlIiwidmFsdWVfcHJvcCIsInRhYmluZGV4IiwidGl0bGUiLCJzcmMiLCJtaW4iLCJtYXgiLCJjb2xzcGFuIiwicm93c3BhbiIsImRyYWdnYWJsZSIsImIiLCJjcmVhdGUkMCIsImZvY3VzIiwibW91c2UiLCJrZXlib2FyZCIsInN1Ym1pdCIsIm1vdXNld2hlZWwiLCJjbGlwYm9hcmQiLCJkcmFnIiwicG9pbnRlciIsImFuaW1hdGlvbiIsIm9uIiwiaGFuZGxlciIsIm9uX2ZvY3VzIiwib25fYmx1ciIsIm9uX2NsaWNrIiwib25fY29udGV4dG1lbnUiLCJvbl9kb3VibGVfY2xpY2siLCJvbl9kcmFnIiwib25fZHJhZ3N0YXJ0Iiwib25fZHJhZ2VuZCIsIm9uX2RyYWdlbnRlciIsIm9uX2RyYWdsZWF2ZSIsIm9uX2RyYWdvdmVyIiwib25fZHJvcCIsIm9uX21vdXNlbW92ZSIsIm9uX21vdXNldXAiLCJvbl9tb3VzZWRvd24iLCJvbl9tb3VzZWVudGVyIiwib25fbW91c2VsZWF2ZSIsIm9uX21vdXNlb3ZlciIsIm9uX21vdXNlb3V0Iiwib25fa2V5dXAiLCJvbl9rZXlwcmVzcyIsIm9uX2tleWRvd24iLCJvbl9zY3JvbGwiLCJvbl9zdWJtaXQiLCJvbl9wb2ludGVyZG93biIsIm9uX3BvaW50ZXJ1cCIsIm9uX21vdXNld2hlZWwiLCJvbl9jb3B5Iiwib25fY3V0Iiwib25fcGFzdGUiLCJvbl9yZXNldCIsIm9uX2FuaW1hdGlvbmVuZCIsImNvbnN0X2lnbm9yZSIsInJ1bl9jb2VyY2lvbiIsImNvZXJjaW9uIiwicHJldiIsIm9uX2lucHV0X2V2ZW50IiwidGV4dCIsIm9uX2NoYW5nZSIsIm9uX2lucHV0IiwidG9fcmF3IiwiYXR0ciIsImF0dHJzX29iaiIsInRha2Vfc2Vjb25kX3N0eWxlcyIsImZpcnN0Iiwic2Vjb25kIiwidGFrZV9zZWNvbmRfY2xhc3NlcyIsInRha2Vfc2Vjb25kX2hhbmRsZXIiLCJ0YWtlX3NlY29uZF9ob29rIiwibWVyZ2UiLCJjb21iaW5lX2hvb2siLCJjb21iaW5lX2hhbmRsZXIiLCJjb21iaW5lX3N0eWxlcyIsImNvbWJpbmVfY2xhc3NlcyIsImFjYyIsInZhbHVlJDAiLCJ2YWx1ZSQxIiwic3VwcHJlc3NfbWVyZ2Vfd2FybmluZ3MkMCIsIm5hbWUkMiIsIm5ld19zdHlsZXMiLCJuZXdfY2xhc3NlcyIsInN1Yl9tZXJnZSIsIm1hcF9jbGFzc2VzIiwibWFwX3N0eWxlcyIsImF0dHJzJDAiLCJzdWJfbWVyZ2UkMCIsImF0dHJzJDEiLCJzdWJfbWVyZ2UkMSIsIm1lcmdlJDAiLCJlIiwicHJvcHMiLCJvYmoiLCJ2IiwiayIsIm9uX2ZpbGVfaW5wdXQiLCJmaWxlcyIsImNvbWJpbmUkMSIsIm9uX21vdW50IiwibWFwX3N0eWxlIiwiYWRkX2NsYXNzIiwiYyIsImNzIiwiYWRkX3N0eWxlIiwic3MiLCJtZXJnZV9jbGFzc2VzX2FuZF9zdHlsZXMiLCJmaWx0ZXJfYnlfa2luZCIsImNvbnRhaW5zX25hbWUiLCJsb29raW5nX2ZvciIsImhhc19iZWVuX3VzZWQiLCJhZnRlciIsImciLCJldiIsIm5ld19zdGF0ZSIsImV2ZW50X2tpbmQiLCJldmVudF9raW5kJDAiLCJtb3VzZXVwIiwibW91c2Vtb3ZlIiwibW91c2VfdXBfdHlwZV9pZCIsIm1vdXNlX21vdmVfdHlwZV9pZCIsInJlczFfMDA5IiwidGFnIiwid2l0aF9rZXkiLCJtYXBfYXR0cnMiLCJyYXdfYXR0cnMiLCJhZGRfY2xhc3NlcyIsImNoaWxkcmVuIiwidyIsImtpbmQiLCJvdGhlciIsImVsZW1lbnRfZXhwZXJ0Iiwid2lkZ2V0IiwiY3JlYXRlX2NoaWxkbGVzcyIsImNyZWF0ZV9zdmciLCJ0ZXh0ZiIsImZvcm1hdCIsIndpZGdldF9vZl9tb2R1bGUiLCJtIiwiYXJnMF8wMDYiLCJzdGF0ZV8wMDQiLCJpbnB1dF8wMDIiLCJhcmdfMDA1IiwiYm5kc18wMDEiLCJhcmdfMDAzIiwiYm5kc18wMDEkMCIsInJlczBfMDA4IiwicHJldl9pbnB1dCIsImVsZW1lbnQkMCIsInN0YXRlJDAiLCJpIiwidG9fZG9tIiwiaW5uZXJfaHRtbCIsImNvbnRlbnQiLCJidWlsZF9zZXhwIiwiZGVidWciLCJpbm5lcl9odG1sX3N2ZyIsImlubmVyX2h0bWwkMCIsImJvZHkiLCJidXR0b24iLCJjb2RlIiwiZGl2IiwibWFpbiIsImZpZWxkc2V0IiwiZm9vdGVyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaGVhZGVyIiwiaHRtbCIsInRleHRhcmVhIiwic2VsZWN0Iiwib3B0aW9uIiwibGFiZWwiLCJsaSIsInAiLCJwcmUiLCJzZWN0aW9uIiwic3BhbiIsInN0cm9uZyIsInRhYmxlIiwidGJvZHkiLCJ0ZCIsInRoIiwidGhlYWQiLCJ0ciIsInVsIiwib2wiLCJiciIsImhyIiwic2V4cF9mb3JfZGVidWdnaW5nIiwiaW5kZW50Iiwic2V4cCIsInByZXZpb3VzIiwiYXBwbHkiLCJjcmVhdGUkMiIsImNyZWF0ZV9zdmckMCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvdmlydHVhbF9kb20vZG9tX2Zsb2F0Lm1sIiwiL1VzZXJzL3J1c3NlbGxyb3plbmJhdW0vLm9wYW0vZGl5LWhhemVsbnV0L2xpYi92aXJ0dWFsX2RvbS9lZmZlY3QubWwiLCIvVXNlcnMvcnVzc2VsbHJvemVuYmF1bS8ub3BhbS9kaXktaGF6ZWxudXQvbGliL3ZpcnR1YWxfZG9tL2hvb2tzLm1sIiwiL1VzZXJzL3J1c3NlbGxyb3plbmJhdW0vLm9wYW0vZGl5LWhhemVsbnV0L2xpYi92aXJ0dWFsX2RvbS9qc19tYXAubWwiLCIvVXNlcnMvcnVzc2VsbHJvemVuYmF1bS8ub3BhbS9kaXktaGF6ZWxudXQvbGliL3ZpcnR1YWxfZG9tL3Jhdy5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvdmlydHVhbF9kb20vYXR0ci5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvdmlydHVhbF9kb20vZ2xvYmFsX2xpc3RlbmVycy5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvdmlydHVhbF9kb20vbm9kZS5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvdmlydHVhbF9kb20vdmRvbS5tbCIsIi9Vc2Vycy9ydXNzZWxscm96ZW5iYXVtLy5vcGFtL2RpeS1oYXplbG51dC9saWIvdmlydHVhbF9kb20vdmlydHVhbF9kb20ubWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFFSUEsb0JBQXFCLHdCQUFvQztZQUN6REMsa0NBQWtDLDZCQUEwQztZQUM1RUMsc0NBQXNDO0dBQThDO1lBQ3BGQyxnQ0FBaUMsNkJBQXlDO1lBQzFFQztJQUFrQixPQUFBO0dBQWtDO1lBQ3BEQztJQUErQixPQUFBO0dBQStDO1lBQzlFQztJQUFtQyxPQUFBO0dBQW1EO1lBQ3RGQztJQUE4QixPQUFBO0dBQThDO0dBTTlFOzs7Ozs7Ozs7OztJQUFBOztPQUFBOzs7Ozs7Ozs7OztTQUFBOzs7Ozs7O0lBRUE7O09BQUE7Ozs7Ozs7Ozs7O1NBQUE7Ozs7Ozs7SUFFQTs7T0FBQTs7Ozs7Ozs7Ozs7U0FBQTs7Ozs7OztJQUVBOztPQUFBOzs7Ozs7Ozs7OztTQUFBOzs7Ozs7O0lBRUE7O09BQUE7Ozs7Ozs7Ozs7O1NBQUE7Ozs7Ozs7SUFFQTs7T0FBQTs7Ozs7Ozs7Ozs7U0FBQTs7Ozs7OztJQUVBOztPQUFBOzs7Ozs7Ozs7OztTQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBZElDLE1BQU1DO09BQWdCLFVBUHhCTCxVQU9RSztPQUFnQixPQUFBO01BQWE7TUFBbkNEO01BRUo7OztVQUFBOzs7OztNQUFBO01BRklBO01BSUo7OztVQUFBOzs7OztNQUFBO01BSklBO01BTUo7OztVQUFBOzs7OztNQUFBO01BTklBO01BUUo7OztVQUFBOzs7OztNQUFBO01BUklBO01BVUo7OztVQUFBOzs7OztNQUFBO01BVklBO01BWUo7OztVQUFBOzs7OztNQUFBO01BWklBO01BY0o7OztVQUFBOzs7OztNQUFBLE9BQUE7S0FBeUI7Ozs7Ozs7O09BekJ2QlI7T0FDQUM7T0FDQUM7T0FDQUM7T0FDQUM7T0FDQUM7T0FDQUM7T0FDQUM7Ozs7RTs7Ozs7Ozs7Ozs7OztHOzs7OztH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T0FDQTBSO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BQ0FDO09BRUFDO09BdkNBcEM7T0FEQUQ7T0F4REFsSjtPQU1BNEg7T0FpQkFpQjtPQTVEQWxPO09BaUNBK007T0FxQkFLOzs7OztFOzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dDeEpVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RTs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dDR2E7Ozs7Ozs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJvcGVuIEpzX29mX29jYW1sXG5cbmxldCB0b19qc19zdHJpbmcgdmFsdWUgPSAoSnMubnVtYmVyX29mX2Zsb2F0IHZhbHVlKSMjdG9TdHJpbmdcbmxldCB0b19qc19zdHJpbmdfZml4ZWQgZGlnaXRzIHZhbHVlID0gKEpzLm51bWJlcl9vZl9mbG9hdCB2YWx1ZSkjI3RvRml4ZWQgZGlnaXRzXG5sZXQgdG9fanNfc3RyaW5nX3ByZWNpc2lvbiBkaWdpdHMgdmFsdWUgPSAoSnMubnVtYmVyX29mX2Zsb2F0IHZhbHVlKSMjdG9QcmVjaXNpb24gZGlnaXRzXG5sZXQgdG9fanNfc3RyaW5nX2V4cG9uZW50aWFsIHZhbHVlID0gKEpzLm51bWJlcl9vZl9mbG9hdCB2YWx1ZSkjI3RvRXhwb25lbnRpYWxcbmxldCB0b19zdHJpbmcgdmFsdWUgPSB0b19qc19zdHJpbmcgdmFsdWUgfD4gSnMudG9fc3RyaW5nXG5sZXQgdG9fc3RyaW5nX2ZpeGVkIGRpZ2l0cyB2YWx1ZSA9IHRvX2pzX3N0cmluZ19maXhlZCBkaWdpdHMgdmFsdWUgfD4gSnMudG9fc3RyaW5nXG5sZXQgdG9fc3RyaW5nX3ByZWNpc2lvbiBkaWdpdHMgdmFsdWUgPSB0b19qc19zdHJpbmdfcHJlY2lzaW9uIGRpZ2l0cyB2YWx1ZSB8PiBKcy50b19zdHJpbmdcbmxldCB0b19zdHJpbmdfZXhwb25lbnRpYWwgdmFsdWUgPSB0b19qc19zdHJpbmdfZXhwb25lbnRpYWwgdmFsdWUgfD4gSnMudG9fc3RyaW5nXG5cbmxldCVleHBlY3RfdGVzdCBfID1cbiAgbGV0IG9wZW4gQ29yZSBpblxuICBsZXQgcHJpbnQgZiA9IHByaW50ZiBcIiVzXCIgKHRvX3N0cmluZyBmKSBpblxuICBwcmludCAxLjtcbiAgWyVleHBlY3Qge3wgMSB8fV07XG4gIHByaW50IEZsb2F0Lm5hbjtcbiAgWyVleHBlY3Qge3wgTmFOIHx9XTtcbiAgcHJpbnQgRmxvYXQuaW5maW5pdHk7XG4gIFslZXhwZWN0IHt8IEluZmluaXR5IHx9XTtcbiAgcHJpbnQgRmxvYXQubmVnX2luZmluaXR5O1xuICBbJWV4cGVjdCB7fCAtSW5maW5pdHkgfH1dO1xuICBwcmludCAwLjAwMDAwMDAxO1xuICBbJWV4cGVjdCB7fCAxZS04IHx9XTtcbiAgcHJpbnQgKC0xLik7XG4gIFslZXhwZWN0IHt8IC0xIHx9XTtcbiAgcHJpbnQgMS4wMDAwMDAxO1xuICBbJWV4cGVjdCB7fCAxLjAwMDAwMDEgfH1dXG47O1xuIiwib3BlbiBCYXNlXG5vcGVuIEpzX29mX29jYW1sXG5pbmNsdWRlIFVpX2VmZmVjdFxuXG4oKiBBbGwgdmlzaWJpbGl0eSBoYW5kbGVycyBzZWUgYWxsIGV2ZW50cywgc28gYSBzaW1wbGUgbGlzdCBpcyBlbm91Z2guICAqKVxubGV0IHZpc2liaWxpdHlfaGFuZGxlcnMgOiAodW5pdCAtPiB1bml0KSBsaXN0IHJlZiA9IHJlZiBbXVxuXG5tb2R1bGUgdHlwZSBWaXNpYmlsaXR5X2hhbmRsZXIgPSBzaWdcbiAgdmFsIGhhbmRsZSA6IHVuaXQgLT4gdW5pdFxuZW5kXG5cbm1vZHVsZSBEZWZpbmVfdmlzaWJpbGl0eSAoVkggOiBWaXNpYmlsaXR5X2hhbmRsZXIpID0gc3RydWN0XG4gIGxldCAoKSA9IHZpc2liaWxpdHlfaGFuZGxlcnMgOj0gVkguaGFuZGxlIDo6ICF2aXNpYmlsaXR5X2hhbmRsZXJzXG5lbmRcblxudHlwZSBfIHQgKz1cbiAgfCBWaWV3cG9ydF9jaGFuZ2VkXG4gIHwgU3RvcF9wcm9wYWdhdGlvblxuICB8IFN0b3BfaW1tZWRpYXRlX3Byb3BhZ2F0aW9uXG4gIHwgUHJldmVudF9kZWZhdWx0XG5cbmxldCBzZXF1ZW5jZV9hc19zaWJsaW5nIGxlZnQgfnVubGVzc19zdG9wcGVkID1cbiAgbGV0IHJlYyBjb250YWluc19zdG9wID0gZnVuY3Rpb25cbiAgICB8IE1hbnkgZXMgLT4gTGlzdC5leGlzdHMgZXMgfmY6Y29udGFpbnNfc3RvcFxuICAgIHwgU3RvcF9pbW1lZGlhdGVfcHJvcGFnYXRpb24gLT4gdHJ1ZVxuICAgIHwgXyAtPiBmYWxzZVxuICBpblxuICBpZiBjb250YWluc19zdG9wIGxlZnQgdGhlbiBsZWZ0IGVsc2UgVWlfZWZmZWN0Lk1hbnkgWyBsZWZ0OyB1bmxlc3Nfc3RvcHBlZCAoKSBdXG47O1xuXG4oKiBXZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgZG9tIGV2ZW50IGhlcmUgc28gdGhhdFxuICAgbW92ZW1lbnQgYmV0d2VlbiBbVmRvbS5FZmZlY3QuRXhwZXJ0LmhhbmRsZV0gYW5kXG4gICBbVWlfY29uY3JldGUuRWZmZWN0LkV4cGVydC5oYW5kbGVdIGtlZXBzIHRoZSBvcmlnaW5hbFxuICAgZG9tIGV2ZW50IGFyb3VuZC4gKilcbmxldCBjdXJyZW50X2RvbV9ldmVudCA9IHJlZiBOb25lXG5cbmxldCAoKSA9XG4gIEhhc2h0YmwuYWRkX2V4blxuICAgIEV4cGVydC5oYW5kbGVyc1xuICAgIH5rZXk6Q2FtbC5PYmouRXh0ZW5zaW9uX2NvbnN0cnVjdG9yLihpZCAob2ZfdmFsIFZpZXdwb3J0X2NoYW5nZWQpKVxuICAgIH5kYXRhOihmdW4gXyAtPiBMaXN0Lml0ZXIgIXZpc2liaWxpdHlfaGFuZGxlcnMgfmY6KGZ1biBmIC0+IGYgKCkpKVxuOztcblxubGV0ICgpID1cbiAgSGFzaHRibC5hZGRfZXhuXG4gICAgRXhwZXJ0LmhhbmRsZXJzXG4gICAgfmtleTpDYW1sLk9iai5FeHRlbnNpb25fY29uc3RydWN0b3IuKGlkIChvZl92YWwgU3RvcF9wcm9wYWdhdGlvbikpXG4gICAgfmRhdGE6KGZ1biBfIC0+IE9wdGlvbi5pdGVyICFjdXJyZW50X2RvbV9ldmVudCB+ZjpEb21faHRtbC5zdG9wUHJvcGFnYXRpb24pXG47O1xuXG5sZXQgKCkgPVxuICBIYXNodGJsLmFkZF9leG5cbiAgICBFeHBlcnQuaGFuZGxlcnNcbiAgICB+a2V5OkNhbWwuT2JqLkV4dGVuc2lvbl9jb25zdHJ1Y3Rvci4oaWQgKG9mX3ZhbCBQcmV2ZW50X2RlZmF1bHQpKVxuICAgIH5kYXRhOihmdW4gXyAtPiBPcHRpb24uaXRlciAhY3VycmVudF9kb21fZXZlbnQgfmY6RG9tLnByZXZlbnREZWZhdWx0KVxuOztcblxubW9kdWxlIEV4cGVydCA9IHN0cnVjdFxuICBsZXQgaGFuZGxlX25vbl9kb21fZXZlbnRfZXhuID0gRXhwZXJ0LmhhbmRsZVxuXG4gIGxldCBoYW5kbGUgZG9tX2V2ZW50IGV2ZW50ID1cbiAgICBsZXQgb2xkID0gIWN1cnJlbnRfZG9tX2V2ZW50IGluXG4gICAgY3VycmVudF9kb21fZXZlbnQgOj0gU29tZSAoZG9tX2V2ZW50IDo+IERvbV9odG1sLmVsZW1lbnQgRG9tLmV2ZW50IEpzLnQpO1xuICAgIEV4cGVydC5oYW5kbGUgZXZlbnQ7XG4gICAgY3VycmVudF9kb21fZXZlbnQgOj0gb2xkXG4gIDs7XG5lbmRcbiIsIm9wZW4hIENvcmVcbm9wZW4hIEpzX29mX29jYW1sXG5cbm1vZHVsZSB0eXBlIFMgPSBIb29rc19pbnRmLlNcblxubGV0IGNhbmNlbF9hbmltYXRpb25fZnJhbWUgaWQgPSBEb21faHRtbC53aW5kb3cjI2NhbmNlbEFuaW1hdGlvbkZyYW1lIGlkXG5cbmxldCByZXF1ZXN0X2FuaW1hdGlvbl9mcmFtZSBmID1cbiAgRG9tX2h0bWwud2luZG93IyNyZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKEpzLndyYXBfY2FsbGJhY2sgZilcbjs7XG5cbm1vZHVsZSBFeHRyYSA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHwgVCA6XG4gICAgICAgIHsgdHlwZV9pZCA6ICdhIFR5cGVfZXF1YWwuSWQudFxuICAgICAgICA7IHZhbHVlIDogJ2FcbiAgICAgICAgfVxuICAgICAgICAtPiB0XG5cbiAgbGV0IHNleHBfb2ZfdCAoVCB7IHR5cGVfaWQ7IHZhbHVlIH0pID0gVHlwZV9lcXVhbC5JZC50b19zZXhwIHR5cGVfaWQgdmFsdWVcbmVuZFxuXG50eXBlIHQgPVxuICB8IFQgOlxuICAgICAgeyBpbnB1dCA6ICdpbnB1dFxuICAgICAgOyBpbnB1dF9pZCA6ICdpbnB1dCBUeXBlX2VxdWFsLklkLnRcbiAgICAgIDsgY29tYmluZV9pbnB1dHMgOiAnaW5wdXQgLT4gJ2lucHV0IC0+ICdpbnB1dFxuICAgICAgOyBpbml0IDpcbiAgICAgICAgICAnaW5wdXRcbiAgICAgICAgICAtPiBEb21faHRtbC5lbGVtZW50IEpzLnRcbiAgICAgICAgICAtPiAnaW5wdXQgKiBEb21faHRtbC5hbmltYXRpb25fZnJhbWVfcmVxdWVzdF9pZCAqICdzdGF0ZVxuICAgICAgOyB1cGRhdGUgOlxuICAgICAgICAgICdpbnB1dFxuICAgICAgICAgIC0+ICdpbnB1dCAqIERvbV9odG1sLmFuaW1hdGlvbl9mcmFtZV9yZXF1ZXN0X2lkICogJ3N0YXRlXG4gICAgICAgICAgLT4gRG9tX2h0bWwuZWxlbWVudCBKcy50XG4gICAgICAgICAgLT4gJ2lucHV0ICogRG9tX2h0bWwuYW5pbWF0aW9uX2ZyYW1lX3JlcXVlc3RfaWQgKiAnc3RhdGVcbiAgICAgIDsgZGVzdHJveSA6XG4gICAgICAgICAgJ2lucHV0ICogRG9tX2h0bWwuYW5pbWF0aW9uX2ZyYW1lX3JlcXVlc3RfaWQgKiAnc3RhdGVcbiAgICAgICAgICAtPiBEb21faHRtbC5lbGVtZW50IEpzLnRcbiAgICAgICAgICAtPiB1bml0XG4gICAgICA7IGlkIDogKCdpbnB1dCAqIERvbV9odG1sLmFuaW1hdGlvbl9mcmFtZV9yZXF1ZXN0X2lkICogJ3N0YXRlKSBDb3JlLlR5cGVfZXF1YWwuSWQudFxuICAgICAgfVxuICAgICAgLT4gdFxuXG5sZXQgZ2VuZXJpY19ob29rID0gbGF6eSBKcy5VbnNhZmUuKGdldCBnbG9iYWwgKEpzLnN0cmluZyBcIkdlbmVyaWNIb29rXCIpKVxuXG5sZXQgbWFrZV9ob29rIH5jb21iaW5lX2lucHV0cyB+aW5pdCB+ZXh0cmE6KGlucHV0LCBpbnB1dF9pZCkgfnVwZGF0ZSB+ZGVzdHJveSB+aWQgPVxuICBUIHsgaW5pdDsgY29tYmluZV9pbnB1dHM7IGlucHV0OyBpbnB1dF9pZDsgdXBkYXRlOyBkZXN0cm95OyBpZCB9XG47O1xuXG5sZXQgcGFjayAoVCB7IGluaXQ7IGlucHV0OyBpbnB1dF9pZDsgdXBkYXRlOyBkZXN0cm95OyBpZDsgXyB9KSA9XG4gIGxldCB3cmFwIGEgPSBhIHw+IEpzLndyYXBfY2FsbGJhY2sgfD4gSnMuVW5zYWZlLmluamVjdCBpblxuICBsZXQgaW5pdCA9IHdyYXAgKGluaXQgaW5wdXQpIGluXG4gIGxldCB1cGRhdGUgPSB3cmFwICh1cGRhdGUgaW5wdXQpIGluXG4gIGxldCBkZXN0cm95ID0gd3JhcCBkZXN0cm95IGluXG4gIGxldCBnZW5lcmljX2hvb2sgPSBMYXp5LmZvcmNlIGdlbmVyaWNfaG9vayBpblxuICBsZXQgZXh0cmEgPSBFeHRyYS5UIHsgdHlwZV9pZCA9IGlucHV0X2lkOyB2YWx1ZSA9IGlucHV0IH0gaW5cbiAgSnMuVW5zYWZlLmZ1bl9jYWxsXG4gICAgZ2VuZXJpY19ob29rXG4gICAgW3wgaW5pdDsgdXBkYXRlOyBkZXN0cm95OyBpZCB8PiBKcy5VbnNhZmUuaW5qZWN0OyBleHRyYSB8PiBKcy5VbnNhZmUuaW5qZWN0IHxdXG47O1xuXG5sZXQgY29tYmluZSAoVCBsZWZ0KSAoVCByaWdodCkgPVxuICBtYXRjaCBUeXBlX2VxdWFsLklkLnNhbWVfd2l0bmVzcyBsZWZ0LmlucHV0X2lkIHJpZ2h0LmlucHV0X2lkIHdpdGhcbiAgfCBOb25lIC0+XG4gICAgZXByaW50X3NcbiAgICAgIFslbWVzc2FnZVxuICAgICAgICBcImhvb2tzIGRvIG5vdCBoYXZlIHRoZSBzYW1lIHR5cGUsIHNvIHRoZXkgY2Fubm90IGJlIGNvbWJpbmVkOyB0YWtpbmcgdGhlIHNlY29uZCBcXFxuICAgICAgICAgb2YgdGhlIHR3b1wiXTtcbiAgICBUIHJpZ2h0XG4gIHwgU29tZSBUIC0+IFQgeyByaWdodCB3aXRoIGlucHV0ID0gcmlnaHQuY29tYmluZV9pbnB1dHMgbGVmdC5pbnB1dCByaWdodC5pbnB1dCB9XG47O1xuXG5tb2R1bGUgTWFrZSAoUyA6IFMpID0gc3RydWN0XG4gIGxldCBpbnB1dF9hbmRfc3RhdGVfaWQgPVxuICAgIFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOlwiXCIgKGZ1biAoaW5wdXQsIF9hbmltYXRpb25faWQsIHN0YXRlKSAtPlxuICAgICAgWyVzZXhwX29mOiBTLklucHV0LnQgKiBvcGFxdWVdIChpbnB1dCwgc3RhdGUpKVxuICA7O1xuXG4gIGxldCBpbnB1dF9pZCA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOlwiXCIgUy5JbnB1dC5zZXhwX29mX3RcblxuICBsZXQgaW5pdCBpbnB1dCBlbGVtZW50ID1cbiAgICBsZXQgc3RhdGUgPSBTLmluaXQgaW5wdXQgZWxlbWVudCBpblxuICAgIGxldCBhbmltYXRpb25faWQgPVxuICAgICAgcmVxdWVzdF9hbmltYXRpb25fZnJhbWUgKGZ1biBfIC0+IFMub25fbW91bnQgaW5wdXQgc3RhdGUgZWxlbWVudClcbiAgICBpblxuICAgIGlucHV0LCBhbmltYXRpb25faWQsIHN0YXRlXG4gIDs7XG5cbiAgbGV0IHVwZGF0ZSBpbnB1dCAob2xkX2lucHV0LCBhbmltYXRpb25faWQsIHN0YXRlKSBlbGVtZW50ID1cbiAgICBTLnVwZGF0ZSB+b2xkX2lucHV0IH5uZXdfaW5wdXQ6aW5wdXQgc3RhdGUgZWxlbWVudDtcbiAgICBpbnB1dCwgYW5pbWF0aW9uX2lkLCBzdGF0ZVxuICA7O1xuXG4gIGxldCBkZXN0cm95IChvbGRfaW5wdXQsIGFuaW1hdGlvbl9pZCwgc3RhdGUpIGVsZW1lbnQgPVxuICAgIGNhbmNlbF9hbmltYXRpb25fZnJhbWUgYW5pbWF0aW9uX2lkO1xuICAgIFMuZGVzdHJveSBvbGRfaW5wdXQgc3RhdGUgZWxlbWVudFxuICA7O1xuXG4gIGxldCBjcmVhdGUgaW5wdXQgPVxuICAgIG1ha2VfaG9va1xuICAgICAgfmV4dHJhOihpbnB1dCwgaW5wdXRfaWQpXG4gICAgICB+Y29tYmluZV9pbnB1dHM6Uy5JbnB1dC5jb21iaW5lXG4gICAgICB+aWQ6aW5wdXRfYW5kX3N0YXRlX2lkXG4gICAgICB+aW5pdFxuICAgICAgfnVwZGF0ZVxuICAgICAgfmRlc3Ryb3lcbiAgOztcblxuICBtb2R1bGUgRm9yX3Rlc3RpbmcgPSBzdHJ1Y3RcbiAgICBsZXQgdHlwZV9pZCA9IGlucHV0X2lkXG4gIGVuZFxuZW5kXG5cbm1vZHVsZSBGb3JfdGVzdGluZyA9IHN0cnVjdFxuICBtb2R1bGUgRXh0cmEgPSBFeHRyYVxuZW5kXG4iLCJbQEBAanMuZHVtbXkgXCIhISBUaGlzIGNvZGUgaGFzIGJlZW4gZ2VuZXJhdGVkIGJ5IGdlbl9qc19hcGkgISFcIl1cbltAQEBvY2FtbC53YXJuaW5nIFwiLTctMzItMzlcIl1cbm9wZW4hIEpzX29mX29jYW1sXG5vcGVuISBHZW5fanNfYXBpXG50eXBlICgnYSwgJ2IpIHQgPSBPanMudFxubGV0IHJlYyB0X29mX2pzIDpcbiAgJ2EgJ2IgLiAoT2pzLnQgLT4gJ2EpIC0+IChPanMudCAtPiAnYikgLT4gT2pzLnQgLT4gKCdhLCAnYikgdCA9IGZ1biAodHlwZVxuICBfX2EpIC0+IGZ1biAodHlwZSBfX2IpIC0+XG4gIGZ1biAoX19hX29mX2pzIDogT2pzLnQgLT4gX19hKSAtPlxuICAgIGZ1biAoX19iX29mX2pzIDogT2pzLnQgLT4gX19iKSAtPiBmdW4gKHgyIDogT2pzLnQpIC0+IHgyXG5hbmQgdF90b19qcyA6ICdhICdiIC4gKCdhIC0+IE9qcy50KSAtPiAoJ2IgLT4gT2pzLnQpIC0+ICgnYSwgJ2IpIHQgLT4gT2pzLnQgPVxuICBmdW4gKHR5cGUgX19hKSAtPiBmdW4gKHR5cGUgX19iKSAtPlxuICBmdW4gKF9fYV90b19qcyA6IF9fYSAtPiBPanMudCkgLT5cbiAgICBmdW4gKF9fYl90b19qcyA6IF9fYiAtPiBPanMudCkgLT4gZnVuICh4MSA6IE9qcy50KSAtPiB4MVxubGV0IChjcmVhdGUgOiB1bml0IC0+ICgnYSwgJ2IpIHQpID1cbiAgZnVuICgpIC0+XG4gICAgdF9vZl9qcyBPYmoubWFnaWMgT2JqLm1hZ2ljXG4gICAgICAoT2pzLm5ld19vYmogKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwiTWFwXCIpIFt8fF0pXG5sZXQgKHNldCA6ICgnYSwgJ2IpIHQgLT4gJ2EgLT4gJ2IgLT4gdW5pdCkgPVxuICBmdW4gKHg3IDogKCdhLCAnYikgdCkgLT5cbiAgICBmdW4gKHg1IDogJ2EpIC0+XG4gICAgICBmdW4gKHg2IDogJ2IpIC0+XG4gICAgICAgIGlnbm9yZVxuICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyBPYmoubWFnaWMgT2JqLm1hZ2ljIHg3KSBcInNldFwiXG4gICAgICAgICAgICAgW3woT2JqLm1hZ2ljIHg1KTsoT2JqLm1hZ2ljIHg2KXxdKVxubGV0IChnZXQgOiAoJ2EsICdiKSB0IC0+ICdhIC0+ICdiIG9wdGlvbikgPVxuICBmdW4gKHgxMSA6ICgnYSwgJ2IpIHQpIC0+XG4gICAgZnVuICh4MTAgOiAnYSkgLT5cbiAgICAgIE9qcy5vcHRpb25fb2ZfanMgT2JqLm1hZ2ljXG4gICAgICAgIChPanMuY2FsbCAodF90b19qcyBPYmoubWFnaWMgT2JqLm1hZ2ljIHgxMSkgXCJnZXRcIiBbfChPYmoubWFnaWMgeDEwKXxdKVxubGV0IChkZWxldGUgOiAoJ2EsICdiKSB0IC0+ICdhIC0+IHVuaXQpID1cbiAgZnVuICh4MTYgOiAoJ2EsICdiKSB0KSAtPlxuICAgIGZ1biAoeDE1IDogJ2EpIC0+XG4gICAgICBpZ25vcmVcbiAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIE9iai5tYWdpYyBPYmoubWFnaWMgeDE2KSBcImRlbGV0ZVwiXG4gICAgICAgICAgIFt8KE9iai5tYWdpYyB4MTUpfF0pXG4iLCJvcGVuIEJhc2Vcbm9wZW4gSnNfb2Zfb2NhbWxcbm9wZW4gR2VuX2pzX2FwaVxuXG5tb2R1bGUgTmF0aXZlX25vZGUgOiBzaWdcbiAgdHlwZSB0ID0gRG9tX2h0bWwuZWxlbWVudCBKcy50XG5cbiAgdmFsIHRfb2ZfanMgOiBPanMudCAtPiB0XG4gIHZhbCB0X3RvX2pzIDogdCAtPiBPanMudFxuZW5kID0gc3RydWN0XG4gIHR5cGUgdCA9IERvbV9odG1sLmVsZW1lbnQgSnMudFxuXG4gIGxldCB0X29mX2pzIHggPSBTdGRsaWIuT2JqLm1hZ2ljIHhcbiAgbGV0IHRfdG9fanMgeCA9IFN0ZGxpYi5PYmoubWFnaWMgeFxuZW5kXG5cbm1vZHVsZSBBdHRycyA6IHNpZ1xuICB0eXBlIHQgPSBwcml2YXRlIE9qcy50XG5cbiAgdmFsIHRfb2ZfanMgOiBPanMudCAtPiB0XG4gIHZhbCB0X3RvX2pzIDogdCAtPiBPanMudFxuICB2YWwgY3JlYXRlIDogdW5pdCAtPiB0XG4gIHZhbCBoYXNfcHJvcGVydHkgOiB0IC0+IHN0cmluZyAtPiBib29sXG4gIHZhbCBoYXNfYXR0cmlidXRlIDogdCAtPiBzdHJpbmcgLT4gYm9vbFxuICB2YWwgc2V0X3Byb3BlcnR5IDogdCAtPiBzdHJpbmcgLT4gT2pzLnQgLT4gdW5pdFxuICB2YWwgc2V0X2F0dHJpYnV0ZSA6IHQgLT4gc3RyaW5nIC0+IE9qcy50IC0+IHVuaXRcbmVuZCA9IHN0cnVjdFxuICB0eXBlIHQgPSBPanMudFxuXG4gIGxldCB0X29mX2pzIHggPSB4XG4gIGxldCB0X3RvX2pzIHggPSB4XG4gIGxldCBjcmVhdGUgKCkgOiB0ID0gT2pzLmVtcHR5X29iaiAoKVxuXG4gIGxldCBzZXRfcHJvcGVydHkgOiB0IC0+IHN0cmluZyAtPiB0IC0+IHVuaXQgPVxuICAgIGZ1biB0IG5hbWUgdmFsdWUgLT4gT2pzLnNldF9wcm9wX2FzY2lpIHQgbmFtZSB2YWx1ZVxuICA7O1xuXG4gIGxldCBoYXNfcHJvcGVydHkgOiB0IC0+IHN0cmluZyAtPiBib29sID0gT2pzLmhhc19wcm9wZXJ0eVxuXG4gIGxldCBoYXNfYXR0cmlidXRlIHQgbmFtZSA9XG4gICAgT2pzLmhhc19wcm9wZXJ0eSB0IFwiYXR0cmlidXRlc1wiXG4gICAgJiYgT2pzLmhhc19wcm9wZXJ0eSAoT2pzLmdldF9wcm9wX2FzY2lpIHQgXCJhdHRyaWJ1dGVzXCIpIG5hbWVcbiAgOztcblxuICBsZXQgc2V0X2F0dHJpYnV0ZSA6IHQgLT4gc3RyaW5nIC0+IHQgLT4gdW5pdCA9XG4gICAgZnVuIHQgbmFtZSB2YWx1ZSAtPlxuICAgICAgaWYgcGh5c19lcXVhbCAoT2pzLmdldF9wcm9wX2FzY2lpIHQgXCJhdHRyaWJ1dGVzXCIpIChPanMudmFyaWFibGUgXCJ1bmRlZmluZWRcIilcbiAgICAgIHRoZW4gT2pzLnNldF9wcm9wX2FzY2lpIHQgXCJhdHRyaWJ1dGVzXCIgKE9qcy5lbXB0eV9vYmogKCkpO1xuICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIChPanMuZ2V0X3Byb3BfYXNjaWkgdCBcImF0dHJpYnV0ZXNcIikgbmFtZSB2YWx1ZVxuICA7O1xuZW5kXG5cbm1vZHVsZSBFbGVtZW50X2FycmF5ID0gc3RydWN0XG4gICgqIFRoaXMgdHlwZSBtdXN0IG9ubHkgYmUgaW5zdGFudGlhdGVkIHdpdGggTm9kZS50IGFzIHRoZVxuICAgICB0eXBlIHBhcmFtZXRlciBiZWNhdXNlIGl0IGlnbm9yZXMgdGhlIGlubmVyLW1vc3QgY29udmVyc2lvblxuICAgICBmdW5jdGlvbi4gIFRoaXMgaXMgc2FmZSBiZWNhdXNlIE5vZGUudCBpcyBkZWZpbmVkIGFzIE9qcy50LFxuICAgICBidXQgd2UgY2FuJ3QgdGFrZSBhZHZhbnRhZ2Ugb2YgdGhhdCBmYWN0IGJlY2F1c2UgdGhlIE5vZGVcbiAgICAgbW9kdWxlIGlzIGdlbmVyYXRlZCB2aWEgcHB4LiAqKVxuXG4gIHR5cGUgJ2EgdCA9ICdhIEpzX29mX29jYW1sLkpzLmpzX2FycmF5IEpzLnRcblxuICBsZXQgdF9vZl9qcyA6IF8gLT4gT2pzLnQgLT4gJ2EgdCA9IGZ1biBfIC0+IENhbWwuT2JqLm1hZ2ljXG4gIGxldCB0X3RvX2pzIDogXyAtPiAnYSB0IC0+IE9qcy50ID0gZnVuIF8gLT4gQ2FtbC5PYmoubWFnaWNcbmVuZFxuXG5tb2R1bGUgTm9kZSA9XG4gIFslanM6XG4gICAgdHlwZSB0ID0gcHJpdmF0ZSBPanMudFxuXG4gICAgdmFsIHRfb2ZfanMgOiBPanMudCAtPiB0XG4gICAgdmFsIHRfdG9fanMgOiB0IC0+IE9qcy50XG5cbiAgICB2YWwgbm9kZSA6IHN0cmluZyAtPiBBdHRycy50IC0+IHQgRWxlbWVudF9hcnJheS50IC0+IHN0cmluZyBvcHRpb24gLT4gdFxuICAgIFtAQGpzLm5ldyBcIlZpcnR1YWxEb20uVk5vZGVcIl1cblxuICAgIHZhbCB0ZXh0IDogc3RyaW5nIC0+IHQgW0BAanMubmV3IFwiVmlydHVhbERvbS5WVGV4dFwiXVxuXG4gICAgdmFsIHN2ZyA6IHN0cmluZyAtPiBBdHRycy50IC0+IHQgRWxlbWVudF9hcnJheS50IC0+IHN0cmluZyBvcHRpb24gLT4gdFxuICAgIFtAQGpzLm5ldyBcIlZpcnR1YWxEb20uc3ZnXCJdXG5cbiAgICB2YWwgdG9fZG9tIDogdCAtPiBOYXRpdmVfbm9kZS50IFtAQGpzLmdsb2JhbCBcIlZpcnR1YWxEb20uY3JlYXRlRWxlbWVudFwiXV1cblxubW9kdWxlIFBhdGNoID1cbiAgWyVqczpcbiAgICB0eXBlIHQgPSBwcml2YXRlIE9qcy50XG5cbiAgICB2YWwgdF9vZl9qcyA6IE9qcy50IC0+IHRcbiAgICB2YWwgdF90b19qcyA6IHQgLT4gT2pzLnRcbiAgICB2YWwgY3JlYXRlIDogcHJldmlvdXM6Tm9kZS50IC0+IGN1cnJlbnQ6Tm9kZS50IC0+IHQgW0BAanMuZ2xvYmFsIFwiVmlydHVhbERvbS5kaWZmXCJdXG4gICAgdmFsIGFwcGx5IDogTmF0aXZlX25vZGUudCAtPiB0IC0+IE5hdGl2ZV9ub2RlLnQgW0BAanMuZ2xvYmFsIFwiVmlydHVhbERvbS5wYXRjaFwiXVxuXG4gICAgdmFsIGlzX2VtcHR5IDogdCAtPiBib29sXG4gICAgW0BAanMuY3VzdG9tXG4gICAgICBsZXQgaXNfZW1wdHkgPVxuICAgICAgICBsZXQgZiA9XG4gICAgICAgICAgSnMuVW5zYWZlLnB1cmVfanNfZXhwclxuICAgICAgICAgICAge2pzfFxuICAgICAgICAoZnVuY3Rpb24gKHBhdGNoKSB7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHBhdGNoKSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAnYScpIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfGpzfVxuICAgICAgICBpblxuICAgICAgICBmdW4gKHQgOiB0KSAtPiBKcy5VbnNhZmUuZnVuX2NhbGwgZiBbfCBKcy5VbnNhZmUuaW5qZWN0IHQgfF0gfD4gSnMudG9fYm9vbFxuICAgICAgOztdXVxuXG5tb2R1bGUgV2lkZ2V0ID0gc3RydWN0XG4gIGNsYXNzIHR5cGUgWydzLCAnZWxlbWVudF0gd2lkZ2V0ID1cbiAgICBvYmplY3RcbiAgICAgIGNvbnN0cmFpbnQgJ2VsZW1lbnQgPSAjRG9tX2h0bWwuZWxlbWVudCBKcy50XG4gICAgICBtZXRob2QgdHlwZV8gOiBKcy5qc19zdHJpbmcgSnMudCBKcy53cml0ZW9ubHlfcHJvcFxuXG4gICAgICAoKiB2aXJ0dWFsLWRvbSBjb25zaWRlcnMgdHdvIHdpZGdldHMgb2YgYmVpbmcgb2YgdGhlIHNhbWUgXCJraW5kXCIgaWYgZWl0aGVyXG4gICAgICAgICBvZiB0aGUgZm9sbG93aW5nIGhvbGRzOlxuXG4gICAgICAgICAxLiBUaGV5IGJvdGggaGF2ZSBhIFwibmFtZVwiIGF0dHJpYnV0ZSBhbmQgdGhlaXIgXCJpZFwiIGZpZWxkcyBhcmUgZXF1YWwuXG4gICAgICAgICAoSSB0aGluayB0aGlzIGlzIHByb2JhYmx5IGEgYnVnIGluIHZpcnR1YWwtZG9tIGFuZCBoYXZlIGZpZWxkIGFuIGlzc3VlXG4gICAgICAgICBvbiBnaXRodWI6IFtodHRwczovL2dpdGh1Yi5jb20vTWF0dC1Fc2NoL3ZpcnR1YWwtZG9tL2lzc3Vlcy8zODBdKVxuXG4gICAgICAgICAyLiBUaGVpciBbaW5pdF0gbWV0aG9kcyBhcmUgXCI9PT1cIiBlcXVhbC4gVGhpcyBpcyB0cnVlIHdoZW4gdXNpbmcgdmlydHVhbC1kb21cbiAgICAgICAgIHdpZGdldHMgaW4gdGhlIHVzdWFsIHN0eWxlIGluIEphdmFzY3JpcHQsIHNpbmNlIHRoZSBbaW5pdF0gbWV0aG9kIHdpbGwgYmUgZGVmaW5lZFxuICAgICAgICAgb24gYSBwcm90b3R5cGUsIGJ1dCBpcyBub3QgdHJ1ZSBpbiB0aGlzIGJpbmRpbmcgYXMgaXQgaXMgcmVkZWZpbmVkIGZvciBlYWNoXG4gICAgICAgICBjYWxsIHRvIFt3aWRnZXRdLlxuXG4gICAgICAgICBTbywgd2UgZ28gd2l0aCBvcHRpb24gMSBhbmQgbXVzdCBoYXZlIGEgdHJpdmlhbCBmaWVsZCBjYWxsZWQgW25hbWVdLlxuICAgICAgKilcbiAgICAgIG1ldGhvZCBuYW1lIDogdW5pdCBKcy53cml0ZW9ubHlfcHJvcFxuICAgICAgbWV0aG9kIGlkIDogKCdzICogJ2VsZW1lbnQpIFR5cGVfZXF1YWwuSWQudCBKcy5wcm9wXG4gICAgICBtZXRob2Qgc3RhdGUgOiAncyBKcy5wcm9wXG4gICAgICBtZXRob2QgaW5mbyA6IFNleHAudCBMYXp5LnQgb3B0aW9uIEpzLnByb3BcbiAgICAgIG1ldGhvZCBkZXN0cm95IDogKCdlbGVtZW50IC0+IHVuaXQpIEpzLmNhbGxiYWNrIEpzLndyaXRlb25seV9wcm9wXG5cbiAgICAgIG1ldGhvZCB1cGRhdGUgOlxuICAgICAgICAoKCdvdGhlcl9zdGF0ZSwgJ290aGVyX2VsZW1lbnQpIHdpZGdldCBKcy50IC0+ICdlbGVtZW50IC0+ICdlbGVtZW50KSBKcy5jYWxsYmFja1xuICAgICAgICAgIEpzLndyaXRlb25seV9wcm9wXG5cbiAgICAgIG1ldGhvZCBpbml0IDogKHVuaXQgLT4gJ2VsZW1lbnQpIEpzLmNhbGxiYWNrIEpzLndyaXRlb25seV9wcm9wXG4gICAgZW5kXG5cbiAgKCogV2UgbW9kZWwgSlMgbGV2ZWwgb2JqZWN0cyBoZXJlIHNvIHRoZXJlIGlzIGEgbG90IG9mIHRocm93aW5nIGF3YXkgb2YgdHlwZVxuICAgICBpbmZvcm1hdGlvbi4gIFdlIGNvdWxkIHBvc3NpYmx5IHRyeSB0byByZWRpc2NvdmVyIG1vcmUgb2YgaXQuICBPciBtYXliZSB3ZVxuICAgICBzaG91bGQgc2VlIGlmIHdlIGNhbiBnZXQgcmlkIFdpZGdldCBjb21wbGV0ZWx5LlxuICAgICB0aGUgdW5pdCB0eXBlIHBhcmFtZXRlcnMgaGVyZSBhcmUgbm90IGFjdHVhbGx5IHVuaXQsIGJ1dCBwYXJ0IG9mXG4gICAgIHRoZSB0eXBlIGluZm8gd2UgaGF2ZSB0aHJvd24gYXdheSBpbnRvIG91ciBkYW5jZVxuICAgICB3aXRoIEpTICopXG4gIHR5cGUgdCA9IE5vZGUudFxuXG4gICgqIGhlcmUgaXMgaG93IHdlIHRocm93IGF3YXkgdHlwZSBpbmZvcm1hdGlvbi4gIE91ciBnb29kIG9sZCBmcmllbmQgT2JqLm1hZ2ljLFxuICAgICBidXQgY29uc3RyYWluZWQgYSBsaXR0bGUgYml0ICopXG4gIGV4dGVybmFsIG9qc19vZl9qcyA6IChfLCBfKSB3aWRnZXQgSnMudCAtPiBPanMudCA9IFwiJWlkZW50aXR5XCJcblxuICBtb2R1bGUgU3RhdGVfa2VlcGVyID0gc3RydWN0XG4gICAgdHlwZSBib3ggPSBUIDogKCdhICogXykgVHlwZV9lcXVhbC5JZC50ICogJ2EgLT4gYm94XG5cbiAgICBsZXQgdCA6IChKcy5VbnNhZmUuYW55LCBib3gpIEpzX21hcC50ID0gSnNfbWFwLmNyZWF0ZSAoKVxuICAgIGxldCBzZXQgfmlkIGVsZW1lbnQgc3RhdGUgPSBKc19tYXAuc2V0IHQgKEpzLlVuc2FmZS5pbmplY3QgZWxlbWVudCkgKFQgKGlkLCBzdGF0ZSkpXG5cbiAgICBsZXQgZ2V0IDogdHlwZSBhIGIuIGlkOihhICogYikgVHlwZV9lcXVhbC5JZC50IC0+IF8gLT4gYSA9XG4gICAgICBmdW4gfmlkIGVsZW1lbnQgLT5cbiAgICAgIGxldCBlbGVtZW50ID0gSnMuVW5zYWZlLmluamVjdCBlbGVtZW50IGluXG4gICAgICBtYXRjaCBKc19tYXAuZ2V0IHQgZWxlbWVudCB3aXRoXG4gICAgICB8IE5vbmUgLT5cbiAgICAgICAgbGV0IGlkX3NleHAgPSBUeXBlX2VxdWFsLklkLnNleHBfb2ZfdCAoZnVuIF8gLT4gU2V4cC5BdG9tIFwiPG9wYXF1ZT5cIikgaWQgaW5cbiAgICAgICAgcmFpc2VfcyBbJW1lc3NhZ2UgXCJCVUc6IGVsZW1lbnQgc3RhdGUgbm90IGZvdW5kXCIgKGlkX3NleHAgOiBTZXhwLnQpXVxuICAgICAgfCBTb21lIChUIChmX2lkLCBzdGF0ZSkpIC0+XG4gICAgICAgIGxldCBUID0gVHlwZV9lcXVhbC5JZC5zYW1lX3dpdG5lc3NfZXhuIGlkIGZfaWQgaW5cbiAgICAgICAgc3RhdGVcbiAgICA7O1xuXG4gICAgbGV0IGRlbGV0ZSBlbGVtZW50ID0gSnNfbWFwLmRlbGV0ZSB0IChKcy5VbnNhZmUuaW5qZWN0IGVsZW1lbnQpXG4gIGVuZFxuXG4gIGxldCBjcmVhdGVcbiAgICAgICAgKHR5cGUgcylcbiAgICAgICAgP2luZm9cbiAgICAgICAgPyhkZXN0cm95IDogcyAtPiAnZWxlbWVudCAtPiB1bml0ID0gZnVuIF8gXyAtPiAoKSlcbiAgICAgICAgPyh1cGRhdGUgOiBzIC0+ICdlbGVtZW50IC0+IHMgKiAnZWxlbWVudCA9IGZ1biBzIGVsdCAtPiBzLCBlbHQpXG4gICAgICAgIH4oaWQgOiAocyAqICdlbGVtZW50KSBUeXBlX2VxdWFsLklkLnQpXG4gICAgICAgIH4oaW5pdCA6IHVuaXQgLT4gcyAqICdlbGVtZW50KVxuICAgICAgICAoKVxuICAgID1cbiAgICBsZXQgb2JqIDogKHMsIF8pIHdpZGdldCBKcy50ID0gSnMuVW5zYWZlLm9iaiBbfHxdIGluXG4gICAgb2JqIyMudHlwZV8gOj0gSnMuc3RyaW5nIFwiV2lkZ2V0XCI7XG4gICAgb2JqIyMubmFtZSA6PSAoKTtcbiAgICBvYmojIy5pZCA6PSBpZDtcbiAgICBvYmojIy5pbmZvIDo9IGluZm87XG4gICAgb2JqIyMuaW5pdFxuICAgIDo9IEpzLndyYXBfY2FsbGJhY2sgKGZ1biAoKSAtPlxuICAgICAgbGV0IHMwLCBkb21fbm9kZSA9IGluaXQgKCkgaW5cbiAgICAgIFN0YXRlX2tlZXBlci5zZXQgfmlkIGRvbV9ub2RlIHMwO1xuICAgICAgZG9tX25vZGUpO1xuICAgIG9iaiMjLnVwZGF0ZVxuICAgIDo9IEpzLndyYXBfY2FsbGJhY2sgKGZ1biBwcmV2IGRvbV9ub2RlIC0+XG4gICAgICAoKiBUaGUgW3VwZGF0ZV0gbWV0aG9kIG9mIFtvYmpdIGlzIG9ubHkgY2FsbGVkIGJ5IHZpcnR1YWwtZG9tIGFmdGVyIGl0IGhhcyBjaGVja2VkXG4gICAgICAgICB0aGF0IHRoZSBbaWRdcyBvZiBbcHJldl0gYW5kIFtvYmpdIGFyZSBcIj09PVwiIGVxdWFsLiBUaHVzIFtzYW1lX3dpdG5lc3NfZXhuXSB3aWxsXG4gICAgICAgICBuZXZlciByYWlzZS4gKilcbiAgICAgIG1hdGNoIFR5cGVfZXF1YWwuSWQuc2FtZV93aXRuZXNzX2V4biBwcmV2IyMuaWQgaWQgd2l0aFxuICAgICAgfCBUeXBlX2VxdWFsLlQgLT5cbiAgICAgICAgbGV0IHByZXZfc3RhdGUgPSBTdGF0ZV9rZWVwZXIuZ2V0IH5pZCBkb21fbm9kZSBpblxuICAgICAgICBsZXQgc3RhdGUnLCBkb21fbm9kZScgPSB1cGRhdGUgcHJldl9zdGF0ZSBkb21fbm9kZSBpblxuICAgICAgICBTdGF0ZV9rZWVwZXIuZGVsZXRlIGRvbV9ub2RlO1xuICAgICAgICBTdGF0ZV9rZWVwZXIuc2V0IH5pZCBkb21fbm9kZScgc3RhdGUnO1xuICAgICAgICBkb21fbm9kZScpO1xuICAgIG9iaiMjLmRlc3Ryb3lcbiAgICA6PSBKcy53cmFwX2NhbGxiYWNrIChmdW4gZG9tX25vZGUgLT5cbiAgICAgIGxldCBwcmV2X3N0YXRlID0gU3RhdGVfa2VlcGVyLmdldCB+aWQgZG9tX25vZGUgaW5cbiAgICAgIGRlc3Ryb3kgcHJldl9zdGF0ZSBkb21fbm9kZTtcbiAgICAgIFN0YXRlX2tlZXBlci5kZWxldGUgZG9tX25vZGUpO1xuICAgIE5vZGUudF9vZl9qcyAob2pzX29mX2pzIG9iailcbiAgOztcbmVuZFxuIiwib3BlbiEgQ29yZVxub3BlbiBKc19vZl9vY2FtbFxubW9kdWxlIFZkb21fcmF3ID0gUmF3XG5cbmxldCAoKSA9XG4gICgqIHVzZSB0aGUgbmF0aXZlLWphdmFzY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgZmxvYXQgLT4gc3RyaW5nIHdpdGggYSBmaXhlZCBudW1iZXIgb2ZcbiAgICAgbnVtYmVycyBhZnRlciB0aGUgZGVjaW1hbCBwbGFjZS4gKilcbiAgQ3NzX2dlbi5Qcml2YXRlLmZsb2F0X3RvX3N0cmluZ193aXRoX2ZpeGVkIDo9IERvbV9mbG9hdC50b19zdHJpbmdfZml4ZWRcbjs7XG5cbigqKiBUaGlzIGhhcyAzIGtpbmRzIG9mIGNvbnN0cnVjdG9ycy5cbiAgICB7dlxuICAgICAgLSBjb25zdHJ1Y3RvcnMgZm9yIHByb3BlcnRpZXMgLyBhdHRyaWJ1dGVzIGZvciB3aGljaCB3ZVxuICAgICAgICBoYXZlIHdyaXR0ZW4gZmlyc3QgY2xhc3Mgb2NhbWwgcmVwcmVzZW50YXRpb25zIChzbyBmYXIgb25seSBTdHlsZSxcbiAgICAgICAgQ2xhc3MsIGFuZCBIYW5kbGVyKVxuXG4gICAgICAtIFRob3NlIHdoaWNoIHdlIGltbWVkaWF0ZWx5IGNvbnZlcnQgaW50byBKcyBjYWxsZWQgUmF3LCB3aGljaFxuICAgICAgICBpbiB0dXJuIGhhcyB0d28gY2FzZXM6XG4gICAgICAgIC0gUHJvcGVydHkgZm9yIHByb3BlcnRpZXMgb24gdGhlIERPTVxuICAgICAgICAtIEF0dHJpYnV0ZSBmb3IgYXR0cmlidXRlcyBvbiB0aGUgRE9NXG5cbiAgICAgIC0gSG9va3MsIHdoaWNoIHJlZ2lzdGVyIGNhbGxiYWNrcyBvbiBwcm9wZXJ0eSBhZGRpdGlvbiBhbmQgcmVtb3ZhbC5cbiAgICB2fVxuXG4gICAgR2VuZXJhbGx5IHNwZWFraW5nIG9uZSBzaG91bGQgYXZvaWQgY3JlYXRpbmcgYSBwcm9wZXJ0eSBvciBhdHRyaWJ1dGVcbiAgICBmb3Igc29tZXRoaW5nIGZvciB3aGljaCB3ZSBoYXZlIGEgZmlyc3QgY2xhc3MgcmVwcmVzZW50YXRpb24uXG4qKVxuXG5tb2R1bGUgRXZlbnRfaGFuZGxlciA9IHN0cnVjdFxuICB0eXBlIHQgPVxuICAgIHwgVCA6XG4gICAgICAgIHsgdHlwZV9pZCA6ICdhIFR5cGVfZXF1YWwuSWQudFxuICAgICAgICA7IGhhbmRsZXIgOiAoI0RvbV9odG1sLmV2ZW50IGFzICdhKSBKcy50IC0+IHVuaXQgVWlfZWZmZWN0LnRcbiAgICAgICAgfVxuICAgICAgICAtPiB0XG5cbiAgbGV0IGNvbWJpbmVcbiAgICAgICAgKFQgeyB0eXBlX2lkID0gbHRpZDsgaGFuZGxlciA9IGxoYW5kbGVyIH0pXG4gICAgICAgIChUIHsgdHlwZV9pZCA9IHJ0aWQ7IGhhbmRsZXIgPSByaGFuZGxlciB9IGFzIHJpZ2h0KVxuICAgID1cbiAgICAoKiBJZiB0aGV5IGFyZSBub3QgdGhlIHNhbWUgd2l0bmVzcywgdGhlbiBpdCBpcyBhIGJ1ZyBpbiB2aXJ0dWFsX2RvbSwgc2luY2VcbiAgICAgICB3ZSBkbyBub3QgZXhwb3NlIFtvbl0gYW55bW9yZSB3aGljaCBtZWFucyB0aGlzIGxpYnJhcnkgY2FuIGRldGVybWluZWQgdGhlXG4gICAgICAgW1R5cGVfZXF1YWwuSWRdIGNvcnJlc3BvbmRpbmcgdG8gZWFjaCBldmVudC4gdmlydHVhbF9kb20gbWFpbnRhaW5zIHRoZVxuICAgICAgIGludmFyaWFudCB0aGF0IGFueSB0d28gZXZlbnRzIHdpdGggdGhlIHNhbWUgbmFtZSB3aWxsIHByb2R1Y2UgaGFuZGxlcnNcbiAgICAgICB0aGF0IGhhdmUgdGhlIHNhbWUgW1R5cGVfZXF1YWwuSWRdLiAqKVxuICAgIG1hdGNoIFR5cGVfZXF1YWwuSWQuc2FtZV93aXRuZXNzIGx0aWQgcnRpZCB3aXRoXG4gICAgfCBTb21lIFQgLT5cbiAgICAgIFRcbiAgICAgICAgeyB0eXBlX2lkID0gbHRpZFxuICAgICAgICA7IGhhbmRsZXIgPVxuICAgICAgICAgICAgKGZ1biB2YWx1ZSAtPlxuICAgICAgICAgICAgICAgRWZmZWN0LnNlcXVlbmNlX2FzX3NpYmxpbmcgKGxoYW5kbGVyIHZhbHVlKSB+dW5sZXNzX3N0b3BwZWQ6KGZ1biAoKSAtPlxuICAgICAgICAgICAgICAgICByaGFuZGxlciB2YWx1ZSkpXG4gICAgICAgIH1cbiAgICB8IE5vbmUgLT5cbiAgICAgIGVwcmludF9zXG4gICAgICAgIFslbWVzc2FnZVxuICAgICAgICAgIFwiQlVHISAgVHlwZS1pZHMgZm9yIGV2ZW50IGhhbmRsZXJzIGRpZmZlclwiXG4gICAgICAgICAgICAobHRpZCA6IF8gVHlwZV9lcXVhbC5JZC50KVxuICAgICAgICAgICAgKHJ0aWQgOiBfIFR5cGVfZXF1YWwuSWQudCldO1xuICAgICAgcmlnaHRcbiAgOztcbmVuZFxuXG50eXBlIHQgPVxuICB8IFByb3BlcnR5IG9mXG4gICAgICB7IHN1cHByZXNzX21lcmdlX3dhcm5pbmdzIDogYm9vbFxuICAgICAgOyBuYW1lIDogc3RyaW5nXG4gICAgICA7IHZhbHVlIDogSnMuVW5zYWZlLmFueVxuICAgICAgfVxuICB8IEF0dHJpYnV0ZSBvZlxuICAgICAgeyBzdXBwcmVzc19tZXJnZV93YXJuaW5ncyA6IGJvb2xcbiAgICAgIDsgbmFtZSA6IHN0cmluZ1xuICAgICAgOyB2YWx1ZSA6IEpzLlVuc2FmZS5hbnlcbiAgICAgIH1cbiAgfCBIYW5kbGVyIG9mXG4gICAgICB7IG5hbWUgOiBzdHJpbmdcbiAgICAgIDsgaGFuZGxlciA6IEV2ZW50X2hhbmRsZXIudFxuICAgICAgfVxuICB8IEhvb2sgb2ZcbiAgICAgIHsgbmFtZSA6IHN0cmluZ1xuICAgICAgOyBob29rIDogSG9va3MudFxuICAgICAgfVxuICB8IFN0eWxlIG9mIENzc19nZW4udFxuICB8IENsYXNzIG9mIChzdHJpbmcsIFN0cmluZy5jb21wYXJhdG9yX3dpdG5lc3MpIFNldC50XG4gIHwgTWFueSBvZiB0IGxpc3RcbiAgfCBNYW55X29ubHlfbWVyZ2VfY2xhc3Nlc19hbmRfc3R5bGVzIG9mXG4gICAgICB0IGxpc3QgKiAoQ3NzX2dlbi50IC0+IENzc19nZW4udCkgKiAoU3RyaW5nLlNldC50IC0+IFN0cmluZy5TZXQudClcbiAgfCBNYW55X3dpdGhvdXRfbWVyZ2Ugb2YgdCBsaXN0XG5cbmxldCBjcmVhdGUgbmFtZSB2YWx1ZSA9XG4gIEF0dHJpYnV0ZVxuICAgIHsgc3VwcHJlc3NfbWVyZ2Vfd2FybmluZ3MgPSBmYWxzZTsgbmFtZTsgdmFsdWUgPSBKcy5VbnNhZmUuaW5qZWN0IChKcy5zdHJpbmcgdmFsdWUpIH1cbjs7XG5cbmxldCBjcmVhdGVfZmxvYXQgbmFtZSB2YWx1ZSA9XG4gIEF0dHJpYnV0ZVxuICAgIHsgc3VwcHJlc3NfbWVyZ2Vfd2FybmluZ3MgPSBmYWxzZVxuICAgIDsgbmFtZVxuICAgIDsgdmFsdWUgPSBKcy5VbnNhZmUuaW5qZWN0IChEb21fZmxvYXQudG9fanNfc3RyaW5nIHZhbHVlKVxuICAgIH1cbjs7XG5cbmxldCBwcm9wZXJ0eSBuYW1lIHZhbHVlID0gUHJvcGVydHkgeyBzdXBwcmVzc19tZXJnZV93YXJuaW5ncyA9IGZhbHNlOyBuYW1lOyB2YWx1ZSB9XG5cbmxldCBzdHJpbmdfcHJvcGVydHkgbmFtZSB2YWx1ZSA9XG4gIFByb3BlcnR5XG4gICAgeyBzdXBwcmVzc19tZXJnZV93YXJuaW5ncyA9IGZhbHNlOyBuYW1lOyB2YWx1ZSA9IEpzLlVuc2FmZS5pbmplY3QgKEpzLnN0cmluZyB2YWx1ZSkgfVxuOztcblxubGV0IGJvb2xfcHJvcGVydHkgbmFtZSB2YWx1ZSA9XG4gIFByb3BlcnR5XG4gICAgeyBzdXBwcmVzc19tZXJnZV93YXJuaW5ncyA9IGZhbHNlOyBuYW1lOyB2YWx1ZSA9IEpzLlVuc2FmZS5pbmplY3QgKEpzLmJvb2wgdmFsdWUpIH1cbjs7XG5cbmxldCBzdXBwcmVzc19tZXJnZV93YXJuaW5ncyA9IGZ1bmN0aW9uXG4gIHwgQXR0cmlidXRlIGF0dHJpYnV0ZSAtPiBBdHRyaWJ1dGUgeyBhdHRyaWJ1dGUgd2l0aCBzdXBwcmVzc19tZXJnZV93YXJuaW5ncyA9IHRydWUgfVxuICB8IFByb3BlcnR5IHByb3BlcnR5IC0+IFByb3BlcnR5IHsgcHJvcGVydHkgd2l0aCBzdXBwcmVzc19tZXJnZV93YXJuaW5ncyA9IHRydWUgfVxuICB8IHQgLT4gdFxuOztcblxubGV0IGNyZWF0ZV9ob29rIG5hbWUgaG9vayA9IEhvb2sgeyBuYW1lOyBob29rIH1cbmxldCBtYW55IGF0dHJzID0gTWFueSBhdHRyc1xubGV0IG1hbnlfd2l0aG91dF9tZXJnZSBhdHRycyA9IE1hbnlfd2l0aG91dF9tZXJnZSBhdHRyc1xubGV0IGVtcHR5ID0gTWFueSBbXVxubGV0IGNvbWJpbmUgbGVmdCByaWdodCA9IE1hbnkgWyBsZWZ0OyByaWdodCBdXG5sZXQgKCBAICkgPSBjb21iaW5lXG5cbmV4dGVybmFsIG9qc19vZl9hbnkgOiBKcy5VbnNhZmUuYW55IC0+IEdlbl9qc19hcGkuT2pzLnQgPSBcIiVpZGVudGl0eVwiXG5cbm1vZHVsZSBVbm1lcmdlZF93YXJuaW5nX21vZGUgPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICB8IE5vX3dhcm5pbmdzXG4gICAgfCBBbGxfd2FybmluZ3NcbiAgICB8IFN0b3BfYWZ0ZXJfcXVvdGEgb2YgaW50XG5cbiAgbGV0IHdhcm5pbmdfY291bnQgPSByZWYgMFxuICBsZXQgY3VycmVudCA9IHJlZiAoU3RvcF9hZnRlcl9xdW90YSAxMDApXG5cbiAgbGV0IHdhcm5fcyBzID1cbiAgICBpbmNyIHdhcm5pbmdfY291bnQ7XG4gICAgbWF0Y2ggIWN1cnJlbnQgd2l0aFxuICAgIHwgTm9fd2FybmluZ3MgLT4gKClcbiAgICB8IEFsbF93YXJuaW5ncyAtPiBlcHJpbnRfcyBzXG4gICAgfCBTdG9wX2FmdGVyX3F1b3RhIHF1b3RhIC0+XG4gICAgICBsZXQgd2FybmluZ19jb3VudCA9ICF3YXJuaW5nX2NvdW50IGluXG4gICAgICBpZiB3YXJuaW5nX2NvdW50IDw9IHF1b3RhXG4gICAgICB0aGVuIChcbiAgICAgICAgZXByaW50X3MgcztcbiAgICAgICAgaWYgd2FybmluZ19jb3VudCA9IHF1b3RhXG4gICAgICAgIHRoZW5cbiAgICAgICAgICBlcHJpbnRfc1xuICAgICAgICAgICAgWyVtZXNzYWdlXG4gICAgICAgICAgICAgIFwiV0FSTklORzogcmVhY2hlZCB3YXJuaW5nIG1lc3NhZ2UgcXVvdGE7IG5vIG1vcmUgbWVzc2FnZXMgd2lsbCBiZSBwcmludGVkXCJcbiAgICAgICAgICAgICAgICAocXVvdGEgOiBpbnQpXSlcbiAgOztcblxuICBtb2R1bGUgRm9yX3Rlc3RpbmcgPSBzdHJ1Y3RcbiAgICBsZXQgcmVzZXRfd2FybmluZ19jb3VudCAoKSA9IHdhcm5pbmdfY291bnQgOj0gMFxuICBlbmRcbmVuZFxuXG50eXBlIG1lcmdlID1cbiAgeyBzdHlsZXMgOiBDc3NfZ2VuLnRcbiAgOyBjbGFzc2VzIDogU2V0Lk0oU3RyaW5nKS50XG4gIDsgaGFuZGxlcnMgOiBFdmVudF9oYW5kbGVyLnQgTWFwLk0oU3RyaW5nKS50XG4gIDsgaG9va3MgOiBIb29rcy50IE1hcC5NKFN0cmluZykudFxuICB9XG5cbmxldCBjb21iaW5pbmdfbWFwX2FkZCBtYXAga2V5IHZhbHVlIH5jb21iaW5lID1cbiAgTWFwLnVwZGF0ZSBtYXAga2V5IH5mOihmdW5jdGlvblxuICAgIHwgU29tZSBleGlzdGluZ192YWx1ZSAtPiBjb21iaW5lIH5rZXkgZXhpc3RpbmdfdmFsdWUgdmFsdWVcbiAgICB8IE5vbmUgLT4gdmFsdWUpXG47O1xuXG5sZXQgZW1wdHlfbWVyZ2UgPVxuICB7IHN0eWxlcyA9IENzc19nZW4uZW1wdHlcbiAgOyBjbGFzc2VzID0gU2V0LmVtcHR5IChtb2R1bGUgU3RyaW5nKVxuICA7IGhhbmRsZXJzID0gTWFwLmVtcHR5IChtb2R1bGUgU3RyaW5nKVxuICA7IGhvb2tzID0gTWFwLmVtcHR5IChtb2R1bGUgU3RyaW5nKVxuICB9XG47O1xuXG5sZXQgdG9fcmF3IGF0dHIgPVxuICBsZXQgYXR0cnMgPSBbIGF0dHIgXSBpblxuICAoKiBXaGVuIGlucHV0IGVsZW1lbnRzIGhhdmUgdGhlaXIgdmFsdWUgc2V0IHRvIHdoYXQgaXQgYWxyZWFkeSBpc1xuICAgICB0aGUgY3Vyc29yIGdldHMgbW92ZWQgdG8gdGhlIGVuZCBvZiB0aGUgZmllbGQgZXZlbiB3aGVuIHRoZSB1c2VyXG4gICAgIGlzIGVkaXRpbmcgaW4gdGhlIG1pZGRsZS4gU29mdFNldEhvb2sgKGZyb20gLi9zb2Z0LXNldC1ob29rLmpzKVxuICAgICBjb21wYXJlcyBiZWZvcmUgc2V0dGluZywgYXZvaWRpbmcgdGhlIHByb2JsZW0ganVzdCBsaWtlIGluXG4gICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0LUVzY2gvdmlydHVhbC1kb20vYmxvYi85NDdlY2Y5MmI2N2QyNWJiNjkzYTBmNjI1ZmE4ZTkwYzA5OTg4N2Q1L3ZpcnR1YWwtaHlwZXJzY3JpcHQvaW5kZXguanMjTDQzLUw1MVxuXG4gICAgIG5vdGUgdGhhdCBFbG0ncyB2aXJ0dWFsLWRvbSBpbmNsdWRlcyBhIHdvcmthcm91bmQgZm9yIHRoaXMgc29cbiAgICAgaWYgd2Ugc3dpdGNoIHRvIHRoYXQgdGhlIHdvcmthcm91bmQgaGVyZSB3aWxsIGJlIHVubmVjZXNzYXJ5LlxuICAgICBodHRwczovL2dpdGh1Yi5jb20vZWxtLWxhbmcvdmlydHVhbC1kb20vYmxvYi8xN2IzMGZiN2RlNDg2NzI1NjVkNjIyN2QzM2MwMTc2ZjA3NTc4NmRiL3NyYy9OYXRpdmUvVmlydHVhbERvbS5qcyNMNDM0LUw0MzlcbiAgKilcbiAgbGV0IGF0dHJzX29iaiA6IFZkb21fcmF3LkF0dHJzLnQgPSBWZG9tX3Jhdy5BdHRycy5jcmVhdGUgKCkgaW5cbiAgKCogW3Rha2Vfc2Vjb25kXypdIGlzIHRoZSB0cml2aWFsIG1lcmdlIGZ1bmN0aW9uIChpLmUuIG5vIG1lcmdlIGF0IGFsbCk7IGl0XG4gICAgIHRha2VzIHR3byBhdHRyaWJ1dGVzIG9mIHRoZSBzYW1lIGtpbmQsIGlnbm9yZXMgYSBmaXJzdCwgYW5kIGVtaXRzXG4gICAgIGEgd2FybmluZyBpZiBbd2Fybl9hYm91dF91bm1lcmdlZF9hdHRyaWJ1dGVzXSBpcyBlbmFibGVkLiAqKVxuICBsZXQgdGFrZV9zZWNvbmRfc3R5bGVzIGZpcnN0IHNlY29uZCA9XG4gICAgaWYgbm90IChDc3NfZ2VuLmlzX2VtcHR5IGZpcnN0KVxuICAgIHRoZW5cbiAgICAgIFVubWVyZ2VkX3dhcm5pbmdfbW9kZS53YXJuX3NcbiAgICAgICAgWyVtZXNzYWdlXG4gICAgICAgICAgXCJXQVJOSU5HOiBub3QgY29tYmluaW5nIHN0eWxlc1wiIChmaXJzdCA6IENzc19nZW4udCkgKHNlY29uZCA6IENzc19nZW4udCldO1xuICAgIHNlY29uZFxuICBpblxuICBsZXQgdGFrZV9zZWNvbmRfY2xhc3NlcyBmaXJzdCBzZWNvbmQgPVxuICAgIGlmIG5vdCAoU2V0LmlzX2VtcHR5IGZpcnN0KVxuICAgIHRoZW5cbiAgICAgIFVubWVyZ2VkX3dhcm5pbmdfbW9kZS53YXJuX3NcbiAgICAgICAgWyVtZXNzYWdlXG4gICAgICAgICAgXCJXQVJOSU5HOiBub3QgY29tYmluaW5nIGNsYXNzZXNcIiAoZmlyc3QgOiBTdHJpbmcuU2V0LnQpIChzZWNvbmQgOiBTdHJpbmcuU2V0LnQpXTtcbiAgICBzZWNvbmRcbiAgaW5cbiAgbGV0IHRha2Vfc2Vjb25kX2hhbmRsZXIgfmtleTpuYW1lIF9maXJzdCBzZWNvbmQgPVxuICAgIFVubWVyZ2VkX3dhcm5pbmdfbW9kZS53YXJuX3NcbiAgICAgIFslbWVzc2FnZSBcIldBUk5JTkc6IG5vdCBjb21iaW5pbmcgaGFuZGxlcnNcIiAobmFtZSA6IHN0cmluZyldO1xuICAgIHNlY29uZFxuICBpblxuICBsZXQgdGFrZV9zZWNvbmRfaG9vayB+a2V5Om5hbWUgX2ZpcnN0IHNlY29uZCA9XG4gICAgVW5tZXJnZWRfd2FybmluZ19tb2RlLndhcm5fcyBbJW1lc3NhZ2UgXCJXQVJOSU5HOiBub3QgY29tYmluaW5nIGhvb2tzXCIgKG5hbWUgOiBzdHJpbmcpXTtcbiAgICBzZWNvbmRcbiAgaW5cbiAgKCogV2UgbWVyZ2UgYXR0cmlidXRlcyB3aGVuIHRoZXkgYXJlIHdyaXR0ZW4gdG8gdGhlIHJhdyBhdHRyaWJ1dGUgb2JqZWN0LFxuICAgICByYXRoZXIgdGhhbiB3aGVuIHRoZSB1c2VyLWZhY2luZyBtZXJnZSBmdW5jdGlvbnMgKFttYW55XSwgW2NvbWJpbmVdLCBhbmRcbiAgICAgW0BdKSBhcmUgY2FsbGVkLiBUaGlzIHN0cmF0ZWd5IGlzIGJldHRlciBpbiBib3RoIHNwZWVkIGFuZCBtZW1vcnkgdXNhZ2UsXG4gICAgIHNpbmNlIGl0IG1lYW5zIHdlIGRvIG5vdCBuZWVkIHRvIGNvbmNhdGVuYXRlIHRoZSBsaXN0IG9mIFwidW5tZXJnZWFibGVcIlxuICAgICBhdHRyaWJ1dGVzIChQcm9wZXJ0eSBhbmQgQXR0cmlidXRlKTsgaW5zdGVhZCwgd2UgY2FuIGl0ZXJhdGUgdGhyb3VnaCB0aGVcbiAgICAgdHJlZSBvZiBhdHRyaWJ1dGVzIGFuZCBlYWdlcmx5IHdyaXRlIHVubWVyZ2VhYmxlIGF0dHJpYnV0ZXMgdG8gdGhlXG4gICAgIGF0dHJpYnV0ZSBvYmplY3QgYXMgd2UgZmluZCB0aGVtLiBJZiB0d28gdW5tZXJnZWFibGUgYXR0cmlidXRlcyBoYXZlIHRoZVxuICAgICBzYW1lIG5hbWUsIHRoZSBzZWNvbmQgd2lsbCBzaW1wbHkgb3ZlcndyaXRlIHRoZSBmaXJzdCwgYXMgZGVzaXJlZC5cblxuICAgICBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgZXhpc3RpbmcgYmVoYXZpb3Igb2YgdGhlIFtNdWx0aV0gbW9kdWxlICh0aGF0IGlzLFxuICAgICBpdCBtdXN0IGJlIHBvc3NpYmxlIHRvIG1lcmdlIGNsYXNzZXMgYW5kIHN0eWxlcywgYnV0IG5vdCBob29rcyBhbmRcbiAgICAgaGFuZGxlcnMpLCB3ZSBpbnRyb2R1Y2UgdGhlIHdvcmthcm91bmQgY29uc3RydWN0b3JcbiAgICAgW01hbnlfb25seV9tZXJnZV9jbGFzc2VzX2FuZF9zdHlsZXNdLlxuXG4gICAgIFRoZXJlIGFyZSB0aHVzIHRocmVlIGNhc2VzIHRoYXQgZWFjaCBoYXZlIGRpZmZlcmVudCBtZXJnZSBiZWhhdmlvcnM6XG4gICAgIC0gU2ltcGxlIGxpc3RzIC0gbm8gbWVyZ2luZ1xuICAgICAtIExpc3RzIHdyYXBwZWQgaW4gYSBbTWFueV0gLSBtZXJnZXMgY2xhc3Nlcywgc3R5bGVzLCBob29rcywgYW5kIGhhbmRsZXJzXG4gICAgIC0gTGlzdHMgd3JhcHBlZCBpbiBhIFtNYW55X29ubHlfbWVyZ2VfY2xhc3Nlc19hbmRfc3R5bGVzXSAtIG1lcmdlcyBjbGFzc2VzIGFuZCBzdHlsZXNcblxuICAgICBUbyBhdm9pZCBkdXBsaWNhdGluZyB0aGUgbWF0Y2ggZXhwcmVzc2lvbiBsb2dpYywgd2UgcGFyZW1ldGVyaXplIGl0IGJ5IHRoZVxuICAgICBtZXJnaW5nIGJlaGF2aW9yLCBzaW5jZSBcIm5vIG1lcmdlXCIgcmVhbGx5IG1lYW5zIFwibWVyZ2UgYnkgdGFraW5nIHRoZVxuICAgICBzZWNvbmQgb25lXCIuICopXG4gIGxldCByZWMgbWVyZ2UgfmNvbWJpbmVfaG9vayB+Y29tYmluZV9oYW5kbGVyIH5jb21iaW5lX3N0eWxlcyB+Y29tYmluZV9jbGFzc2VzIGFjYyA9XG4gICAgTGlzdC5mb2xkIH5pbml0OmFjYyB+ZjooZnVuIGFjYyBhdHRyIC0+XG4gICAgICBtYXRjaCBhdHRyIHdpdGhcbiAgICAgIHwgUHJvcGVydHkgeyBzdXBwcmVzc19tZXJnZV93YXJuaW5nczsgbmFtZTsgdmFsdWUgfSAtPlxuICAgICAgICBpZiBSYXcuQXR0cnMuaGFzX3Byb3BlcnR5IGF0dHJzX29iaiBuYW1lICYmIG5vdCBzdXBwcmVzc19tZXJnZV93YXJuaW5nc1xuICAgICAgICB0aGVuXG4gICAgICAgICAgVW5tZXJnZWRfd2FybmluZ19tb2RlLndhcm5fc1xuICAgICAgICAgICAgWyVtZXNzYWdlIFwiV0FSTklORzogbm90IGNvbWJpbmluZyBwcm9wZXJ0aWVzXCIgKG5hbWUgOiBzdHJpbmcpXTtcbiAgICAgICAgKG1hdGNoIG5hbWUgd2l0aFxuICAgICAgICAgfCBcInZhbHVlXCIgLT5cbiAgICAgICAgICAgbGV0IHNvZnRTZXRIb29rIHggOiBHZW5fanNfYXBpLk9qcy50ID0gSnMuVW5zYWZlLmdsb2JhbCAjIyBTb2Z0U2V0SG9vayB4IGluXG4gICAgICAgICAgIGxldCB2YWx1ZSA9IHNvZnRTZXRIb29rIHZhbHVlIGluXG4gICAgICAgICAgIFZkb21fcmF3LkF0dHJzLnNldF9wcm9wZXJ0eSBhdHRyc19vYmogXCJ2YWx1ZVwiIHZhbHVlXG4gICAgICAgICB8IG5hbWUgLT4gUmF3LkF0dHJzLnNldF9wcm9wZXJ0eSBhdHRyc19vYmogbmFtZSAob2pzX29mX2FueSB2YWx1ZSkpO1xuICAgICAgICBhY2NcbiAgICAgIHwgQXR0cmlidXRlIHsgc3VwcHJlc3NfbWVyZ2Vfd2FybmluZ3M7IG5hbWU7IHZhbHVlIH0gLT5cbiAgICAgICAgaWYgUmF3LkF0dHJzLmhhc19hdHRyaWJ1dGUgYXR0cnNfb2JqIG5hbWUgJiYgbm90IHN1cHByZXNzX21lcmdlX3dhcm5pbmdzXG4gICAgICAgIHRoZW5cbiAgICAgICAgICBVbm1lcmdlZF93YXJuaW5nX21vZGUud2Fybl9zXG4gICAgICAgICAgICBbJW1lc3NhZ2UgXCJXQVJOSU5HOiBub3QgY29tYmluaW5nIGF0dHJpYnV0ZXNcIiAobmFtZSA6IHN0cmluZyldO1xuICAgICAgICBSYXcuQXR0cnMuc2V0X2F0dHJpYnV0ZSBhdHRyc19vYmogbmFtZSAob2pzX29mX2FueSB2YWx1ZSk7XG4gICAgICAgIGFjY1xuICAgICAgfCBTdHlsZSBuZXdfc3R5bGVzIC0+IHsgYWNjIHdpdGggc3R5bGVzID0gY29tYmluZV9zdHlsZXMgYWNjLnN0eWxlcyBuZXdfc3R5bGVzIH1cbiAgICAgIHwgQ2xhc3MgbmV3X2NsYXNzZXMgLT5cbiAgICAgICAgeyBhY2Mgd2l0aCBjbGFzc2VzID0gY29tYmluZV9jbGFzc2VzIGFjYy5jbGFzc2VzIG5ld19jbGFzc2VzIH1cbiAgICAgIHwgSG9vayB7IG5hbWU7IGhvb2sgfSAtPlxuICAgICAgICB7IGFjYyB3aXRoIGhvb2tzID0gY29tYmluaW5nX21hcF9hZGQgYWNjLmhvb2tzIG5hbWUgaG9vayB+Y29tYmluZTpjb21iaW5lX2hvb2sgfVxuICAgICAgfCBIYW5kbGVyIHsgbmFtZTsgaGFuZGxlciB9IC0+XG4gICAgICAgIHsgYWNjIHdpdGhcbiAgICAgICAgICBoYW5kbGVycyA9XG4gICAgICAgICAgICBjb21iaW5pbmdfbWFwX2FkZCBhY2MuaGFuZGxlcnMgbmFtZSBoYW5kbGVyIH5jb21iaW5lOmNvbWJpbmVfaGFuZGxlclxuICAgICAgICB9XG4gICAgICB8IE1hbnkgYXR0cnMgLT5cbiAgICAgICAgbGV0IHN1Yl9tZXJnZSA9XG4gICAgICAgICAgbWVyZ2VcbiAgICAgICAgICAgIH5jb21iaW5lX2hvb2s6KGZ1biB+a2V5Ol8gLT4gSG9va3MuY29tYmluZSlcbiAgICAgICAgICAgIH5jb21iaW5lX2hhbmRsZXI6KGZ1biB+a2V5Ol8gLT4gRXZlbnRfaGFuZGxlci5jb21iaW5lKVxuICAgICAgICAgICAgfmNvbWJpbmVfc3R5bGVzOkNzc19nZW4uY29tYmluZVxuICAgICAgICAgICAgfmNvbWJpbmVfY2xhc3NlczpTZXQudW5pb25cbiAgICAgICAgICAgIGVtcHR5X21lcmdlXG4gICAgICAgICAgICBhdHRyc1xuICAgICAgICBpblxuICAgICAgICB7IHN0eWxlcyA9IGNvbWJpbmVfc3R5bGVzIGFjYy5zdHlsZXMgc3ViX21lcmdlLnN0eWxlc1xuICAgICAgICA7IGNsYXNzZXMgPSBjb21iaW5lX2NsYXNzZXMgYWNjLmNsYXNzZXMgc3ViX21lcmdlLmNsYXNzZXNcbiAgICAgICAgOyBoYW5kbGVycyA9XG4gICAgICAgICAgICBNYXAubWVyZ2Vfc2tld2VkIGFjYy5oYW5kbGVycyBzdWJfbWVyZ2UuaGFuZGxlcnMgfmNvbWJpbmU6Y29tYmluZV9oYW5kbGVyXG4gICAgICAgIDsgaG9va3MgPSBNYXAubWVyZ2Vfc2tld2VkIGFjYy5ob29rcyBzdWJfbWVyZ2UuaG9va3MgfmNvbWJpbmU6Y29tYmluZV9ob29rXG4gICAgICAgIH1cbiAgICAgIHwgTWFueV9vbmx5X21lcmdlX2NsYXNzZXNfYW5kX3N0eWxlcyAoYXR0cnMsIG1hcF9zdHlsZXMsIG1hcF9jbGFzc2VzKSAtPlxuICAgICAgICBsZXQgc3ViX21lcmdlID1cbiAgICAgICAgICBtZXJnZVxuICAgICAgICAgICAgfmNvbWJpbmVfaG9vazp0YWtlX3NlY29uZF9ob29rXG4gICAgICAgICAgICB+Y29tYmluZV9oYW5kbGVyOnRha2Vfc2Vjb25kX2hhbmRsZXJcbiAgICAgICAgICAgIH5jb21iaW5lX3N0eWxlczpDc3NfZ2VuLmNvbWJpbmVcbiAgICAgICAgICAgIH5jb21iaW5lX2NsYXNzZXM6U2V0LnVuaW9uXG4gICAgICAgICAgICBlbXB0eV9tZXJnZVxuICAgICAgICAgICAgYXR0cnNcbiAgICAgICAgaW5cbiAgICAgICAgeyBzdHlsZXMgPSBtYXBfc3R5bGVzIChjb21iaW5lX3N0eWxlcyBhY2Muc3R5bGVzIHN1Yl9tZXJnZS5zdHlsZXMpXG4gICAgICAgIDsgY2xhc3NlcyA9IG1hcF9jbGFzc2VzIChjb21iaW5lX2NsYXNzZXMgYWNjLmNsYXNzZXMgc3ViX21lcmdlLmNsYXNzZXMpXG4gICAgICAgIDsgaGFuZGxlcnMgPVxuICAgICAgICAgICAgTWFwLm1lcmdlX3NrZXdlZCBhY2MuaGFuZGxlcnMgc3ViX21lcmdlLmhhbmRsZXJzIH5jb21iaW5lOmNvbWJpbmVfaGFuZGxlclxuICAgICAgICA7IGhvb2tzID0gTWFwLm1lcmdlX3NrZXdlZCBhY2MuaG9va3Mgc3ViX21lcmdlLmhvb2tzIH5jb21iaW5lOmNvbWJpbmVfaG9va1xuICAgICAgICB9XG4gICAgICB8IE1hbnlfd2l0aG91dF9tZXJnZSBhdHRycyAtPlxuICAgICAgICBsZXQgc3ViX21lcmdlID1cbiAgICAgICAgICBtZXJnZVxuICAgICAgICAgICAgfmNvbWJpbmVfaG9vazp0YWtlX3NlY29uZF9ob29rXG4gICAgICAgICAgICB+Y29tYmluZV9oYW5kbGVyOnRha2Vfc2Vjb25kX2hhbmRsZXJcbiAgICAgICAgICAgIH5jb21iaW5lX3N0eWxlczp0YWtlX3NlY29uZF9zdHlsZXNcbiAgICAgICAgICAgIH5jb21iaW5lX2NsYXNzZXM6dGFrZV9zZWNvbmRfY2xhc3Nlc1xuICAgICAgICAgICAgZW1wdHlfbWVyZ2VcbiAgICAgICAgICAgIGF0dHJzXG4gICAgICAgIGluXG4gICAgICAgIHsgc3R5bGVzID0gY29tYmluZV9zdHlsZXMgYWNjLnN0eWxlcyBzdWJfbWVyZ2Uuc3R5bGVzXG4gICAgICAgIDsgY2xhc3NlcyA9IGNvbWJpbmVfY2xhc3NlcyBhY2MuY2xhc3NlcyBzdWJfbWVyZ2UuY2xhc3Nlc1xuICAgICAgICA7IGhhbmRsZXJzID1cbiAgICAgICAgICAgIE1hcC5tZXJnZV9za2V3ZWQgYWNjLmhhbmRsZXJzIHN1Yl9tZXJnZS5oYW5kbGVycyB+Y29tYmluZTpjb21iaW5lX2hhbmRsZXJcbiAgICAgICAgOyBob29rcyA9IE1hcC5tZXJnZV9za2V3ZWQgYWNjLmhvb2tzIHN1Yl9tZXJnZS5ob29rcyB+Y29tYmluZTpjb21iaW5lX2hvb2tcbiAgICAgICAgfSlcbiAgaW5cbiAgbGV0IG1lcmdlID1cbiAgICBtZXJnZVxuICAgICAgfmNvbWJpbmVfaG9vazp0YWtlX3NlY29uZF9ob29rXG4gICAgICB+Y29tYmluZV9oYW5kbGVyOnRha2Vfc2Vjb25kX2hhbmRsZXJcbiAgICAgIH5jb21iaW5lX3N0eWxlczp0YWtlX3NlY29uZF9zdHlsZXNcbiAgICAgIH5jb21iaW5lX2NsYXNzZXM6dGFrZV9zZWNvbmRfY2xhc3Nlc1xuICAgICAgZW1wdHlfbWVyZ2VcbiAgICAgIGF0dHJzXG4gIGluXG4gIE1hcC5pdGVyaSBtZXJnZS5ob29rcyB+ZjooZnVuIH5rZXk6bmFtZSB+ZGF0YTpob29rIC0+XG4gICAgUmF3LkF0dHJzLnNldF9wcm9wZXJ0eSBhdHRyc19vYmogbmFtZSAob2pzX29mX2FueSAoSG9va3MucGFjayBob29rKSkpO1xuICBNYXAuaXRlcmkgbWVyZ2UuaGFuZGxlcnMgfmY6KGZ1biB+a2V5Om5hbWUgfmRhdGE6KEV2ZW50X2hhbmRsZXIuVCB7IGhhbmRsZXI7IF8gfSkgLT5cbiAgICBsZXQgZiBlID1cbiAgICAgIEVmZmVjdC5FeHBlcnQuaGFuZGxlIGUgKGhhbmRsZXIgZSk7XG4gICAgICBKcy5fdHJ1ZVxuICAgIGluXG4gICAgUmF3LkF0dHJzLnNldF9wcm9wZXJ0eVxuICAgICAgYXR0cnNfb2JqXG4gICAgICAoXCJvblwiIF4gbmFtZSlcbiAgICAgIChvanNfb2ZfYW55IChKcy5VbnNhZmUuaW5qZWN0IChEb20uaGFuZGxlciBmKSkpKTtcbiAgbGV0ICgpID1cbiAgICBpZiBub3QgKENzc19nZW4uaXNfZW1wdHkgbWVyZ2Uuc3R5bGVzKVxuICAgIHRoZW4gKFxuICAgICAgbGV0IHByb3BzID0gQ3NzX2dlbi50b19zdHJpbmdfbGlzdCBtZXJnZS5zdHlsZXMgaW5cbiAgICAgIGxldCBvYmogPSBHZW5fanNfYXBpLk9qcy5lbXB0eV9vYmogKCkgaW5cbiAgICAgIExpc3QuaXRlciBwcm9wcyB+ZjooZnVuIChrLCB2KSAtPlxuICAgICAgICBHZW5fanNfYXBpLk9qcy5zZXRfcHJvcF9hc2NpaSBvYmogayAoR2VuX2pzX2FwaS5PanMuc3RyaW5nX3RvX2pzIHYpKTtcbiAgICAgIFJhdy5BdHRycy5zZXRfcHJvcGVydHkgYXR0cnNfb2JqIFwic3R5bGVcIiBvYmopXG4gIGluXG4gIGxldCAoKSA9XG4gICAgaWYgU2V0LmlzX2VtcHR5IG1lcmdlLmNsYXNzZXNcbiAgICB0aGVuICgpXG4gICAgZWxzZVxuICAgICAgUmF3LkF0dHJzLnNldF9hdHRyaWJ1dGVcbiAgICAgICAgYXR0cnNfb2JqXG4gICAgICAgIFwiY2xhc3NcIlxuICAgICAgICAoR2VuX2pzX2FwaS5PanMuc3RyaW5nX3RvX2pzIChTdHJpbmcuY29uY2F0IChTZXQudG9fbGlzdCBtZXJnZS5jbGFzc2VzKSB+c2VwOlwiIFwiKSlcbiAgaW5cbiAgYXR0cnNfb2JqXG47O1xuXG5sZXQgdG9fcmF3IGF0dHIgPVxuICBtYXRjaCBhdHRyIHdpdGhcbiAgfCBNYW55IFtdIHwgTWFueV93aXRob3V0X21lcmdlIFtdIC0+IFJhdy5BdHRycy5jcmVhdGUgKClcbiAgfCBhdHRyIC0+IHRvX3JhdyBhdHRyXG47O1xuXG5sZXQgc3R5bGUgY3NzID0gU3R5bGUgY3NzXG5cbmxldCB2YWxpZF9jbGFzc19uYW1lIHMgPVxuICBsZXQgaW52YWxpZCA9IFN0cmluZy5pc19lbXB0eSBzIHx8IFN0cmluZy5leGlzdHMgcyB+ZjpDaGFyLmlzX3doaXRlc3BhY2UgaW5cbiAgbm90IGludmFsaWRcbjs7XG5cbmxldCV0ZXN0IFwidmFsaWRcIiA9IHZhbGlkX2NsYXNzX25hbWUgXCJmb28tYmFyXCJcbmxldCV0ZXN0IFwiaW52YWxpZC1lbXB0eVwiID0gbm90ICh2YWxpZF9jbGFzc19uYW1lIFwiXCIpXG5sZXQldGVzdCBcImludmFsaWQtc3BhY2VcIiA9IG5vdCAodmFsaWRfY2xhc3NfbmFtZSBcImZvbyBiYXJcIilcblxubGV0IGNsYXNzXyBjbGFzc25hbWUgPVxuICBpZiBub3QgKHZhbGlkX2NsYXNzX25hbWUgY2xhc3NuYW1lKVxuICB0aGVuIHJhaXNlX3MgWyVtZXNzYWdlIFwiaW52YWxpZCBjbGFzc25hbWVcIiAoY2xhc3NuYW1lIDogc3RyaW5nKV07XG4gIENsYXNzIChTZXQuc2luZ2xldG9uIChtb2R1bGUgU3RyaW5nKSBjbGFzc25hbWUpXG47O1xuXG5sZXQgY2xhc3NlcycgY2xhc3NlcyA9IENsYXNzIGNsYXNzZXNcblxubGV0IGNsYXNzZXMgY2xhc3NuYW1lcyA9XG4gIGlmIG5vdCAoTGlzdC5mb3JfYWxsIH5mOnZhbGlkX2NsYXNzX25hbWUgY2xhc3NuYW1lcylcbiAgdGhlbiByYWlzZV9zIFslbWVzc2FnZSBcImludmFsaWQgY2xhc3NuYW1lc1wiIChjbGFzc25hbWVzIDogc3RyaW5nIGxpc3QpXTtcbiAgY2xhc3NlcycgKFNldC5vZl9saXN0IChtb2R1bGUgU3RyaW5nKSBjbGFzc25hbWVzKVxuOztcblxubGV0IGlkIHMgPSBjcmVhdGUgXCJpZFwiIHNcbmxldCBuYW1lIHMgPSBjcmVhdGUgXCJuYW1lXCIgc1xubGV0IGhyZWYgciA9IGNyZWF0ZSBcImhyZWZcIiByXG5sZXQgdGFyZ2V0IHMgPSBjcmVhdGUgXCJ0YXJnZXRcIiBzXG5sZXQgY2hlY2tlZCA9IGNyZWF0ZSBcImNoZWNrZWRcIiBcIlwiXG5sZXQgc2VsZWN0ZWQgPSBjcmVhdGUgXCJzZWxlY3RlZFwiIFwiXCJcbmxldCBoaWRkZW4gPSBjcmVhdGUgXCJoaWRkZW5cIiBcIlwiXG5sZXQgcmVhZG9ubHkgPSBjcmVhdGUgXCJyZWFkb25seVwiIFwiXCJcbmxldCBkaXNhYmxlZCA9IGNyZWF0ZSBcImRpc2FibGVkXCIgXCJcIlxubGV0IHBsYWNlaG9sZGVyIHggPSBjcmVhdGUgXCJwbGFjZWhvbGRlclwiIHhcblxubGV0IGF1dG9mb2N1cyA9IGZ1bmN0aW9uXG4gIHwgdHJ1ZSAtPiBjcmVhdGUgXCJhdXRvZm9jdXNcIiBcIlwiXG4gIHwgZmFsc2UgLT4gZW1wdHlcbjs7XG5cbmxldCBmb3JfIHggPSBjcmVhdGUgXCJmb3JcIiB4XG5sZXQgdHlwZV8geCA9IGNyZWF0ZSBcInR5cGVcIiB4XG5sZXQgdmFsdWUgeCA9IGNyZWF0ZSBcInZhbHVlXCIgeFxubGV0IHZhbHVlX3Byb3AgeCA9IHN0cmluZ19wcm9wZXJ0eSBcInZhbHVlXCIgeFxubGV0IHRhYmluZGV4IHggPSBjcmVhdGUgXCJ0YWJpbmRleFwiIChJbnQudG9fc3RyaW5nIHgpXG5sZXQgdGl0bGUgeCA9IGNyZWF0ZSBcInRpdGxlXCIgeFxubGV0IHNyYyB4ID0gY3JlYXRlIFwic3JjXCIgeFxubGV0IG1pbiB4ID0gY3JlYXRlX2Zsb2F0IFwibWluXCIgeFxubGV0IG1heCB4ID0gY3JlYXRlX2Zsb2F0IFwibWF4XCIgeFxubGV0IGNvbHNwYW4geCA9IGNyZWF0ZSBcImNvbHNwYW5cIiAoSW50LnRvX3N0cmluZyB4KVxubGV0IHJvd3NwYW4geCA9IGNyZWF0ZSBcInJvd3NwYW5cIiAoSW50LnRvX3N0cmluZyB4KVxubGV0IGRyYWdnYWJsZSBiID0gY3JlYXRlIFwiZHJhZ2dhYmxlXCIgKEJvb2wudG9fc3RyaW5nIGIpXG5cbm1vZHVsZSBUeXBlX2lkID0gc3RydWN0XG4gICgqIFdlIHByb3ZpZGUgYSB0cml2aWFsIFt0b19zZXhwXSBmdW5jdGlvbiBzaW5jZSB3ZSBvbmx5IHdhbnRcbiAgICAgdG8gdW5pZnkgdHlwZSBpZHMgYW5kIG5vdCBjb252ZXJ0IHR5cGVzIHRvIGlkcyAqKVxuICBsZXQgY3JlYXRlIG5hbWUgPSBUeXBlX2VxdWFsLklkLmNyZWF0ZSB+bmFtZSAoZnVuIF8gLT4gU2V4cGxpYi5TZXhwLkxpc3QgW10pXG4gIGxldCAoZXZlbnQgOiBEb21faHRtbC5ldmVudCBUeXBlX2VxdWFsLklkLnQpID0gY3JlYXRlIFwiZXZlbnRcIlxuICBsZXQgKGZvY3VzIDogRG9tX2h0bWwuZm9jdXNFdmVudCBUeXBlX2VxdWFsLklkLnQpID0gY3JlYXRlIFwiZm9jdXNFdmVudFwiXG4gIGxldCAobW91c2UgOiBEb21faHRtbC5tb3VzZUV2ZW50IFR5cGVfZXF1YWwuSWQudCkgPSBjcmVhdGUgXCJtb3VzZUV2ZW50XCJcbiAgbGV0IChrZXlib2FyZCA6IERvbV9odG1sLmtleWJvYXJkRXZlbnQgVHlwZV9lcXVhbC5JZC50KSA9IGNyZWF0ZSBcImtleWJvYXJkRXZlbnRcIlxuICBsZXQgKHN1Ym1pdCA6IERvbV9odG1sLnN1Ym1pdEV2ZW50IFR5cGVfZXF1YWwuSWQudCkgPSBjcmVhdGUgXCJzdWJtaXRFdmVudFwiXG4gIGxldCAobW91c2V3aGVlbCA6IERvbV9odG1sLm1vdXNld2hlZWxFdmVudCBUeXBlX2VxdWFsLklkLnQpID0gY3JlYXRlIFwibW91c2V3aGVlbEV2ZW50XCJcbiAgbGV0IChjbGlwYm9hcmQgOiBEb21faHRtbC5jbGlwYm9hcmRFdmVudCBUeXBlX2VxdWFsLklkLnQpID0gY3JlYXRlIFwiY2xpcGJvYXJkRXZlbnRcIlxuICBsZXQgKGRyYWcgOiBEb21faHRtbC5kcmFnRXZlbnQgVHlwZV9lcXVhbC5JZC50KSA9IGNyZWF0ZSBcImRyYWdFdmVudFwiXG4gIGxldCAocG9pbnRlciA6IERvbV9odG1sLnBvaW50ZXJFdmVudCBUeXBlX2VxdWFsLklkLnQpID0gY3JlYXRlIFwicG9pbnRlckV2ZW50XCJcbiAgbGV0IChhbmltYXRpb24gOiBEb21faHRtbC5hbmltYXRpb25FdmVudCBUeXBlX2VxdWFsLklkLnQpID0gY3JlYXRlIFwiYW5pbWF0aW9uRXZlbnRcIlxuZW5kXG5cbmxldCBvbiB0eXBlX2lkIG5hbWUgKGhhbmRsZXIgOiAjRG9tX2h0bWwuZXZlbnQgSnMudCAtPiB1bml0IFVpX2VmZmVjdC50KSA6IHQgPVxuICBIYW5kbGVyIHsgbmFtZTsgaGFuZGxlciA9IFQgeyBoYW5kbGVyOyB0eXBlX2lkIH0gfVxuOztcblxubGV0IG9uX2ZvY3VzID0gb24gVHlwZV9pZC5mb2N1cyBcImZvY3VzXCJcbmxldCBvbl9ibHVyID0gb24gVHlwZV9pZC5mb2N1cyBcImJsdXJcIlxubGV0IG9uX2NsaWNrID0gb24gVHlwZV9pZC5tb3VzZSBcImNsaWNrXCJcbmxldCBvbl9jb250ZXh0bWVudSA9IG9uIFR5cGVfaWQubW91c2UgXCJjb250ZXh0bWVudVwiXG5sZXQgb25fZG91YmxlX2NsaWNrID0gb24gVHlwZV9pZC5tb3VzZSBcImRibGNsaWNrXCJcbmxldCBvbl9kcmFnID0gb24gVHlwZV9pZC5kcmFnIFwiZHJhZ1wiXG5sZXQgb25fZHJhZ3N0YXJ0ID0gb24gVHlwZV9pZC5kcmFnIFwiZHJhZ3N0YXJ0XCJcbmxldCBvbl9kcmFnZW5kID0gb24gVHlwZV9pZC5kcmFnIFwiZHJhZ2VuZFwiXG5sZXQgb25fZHJhZ2VudGVyID0gb24gVHlwZV9pZC5kcmFnIFwiZHJhZ2VudGVyXCJcbmxldCBvbl9kcmFnbGVhdmUgPSBvbiBUeXBlX2lkLmRyYWcgXCJkcmFnbGVhdmVcIlxubGV0IG9uX2RyYWdvdmVyID0gb24gVHlwZV9pZC5kcmFnIFwiZHJhZ292ZXJcIlxubGV0IG9uX2Ryb3AgPSBvbiBUeXBlX2lkLmRyYWcgXCJkcm9wXCJcbmxldCBvbl9tb3VzZW1vdmUgPSBvbiBUeXBlX2lkLm1vdXNlIFwibW91c2Vtb3ZlXCJcbmxldCBvbl9tb3VzZXVwID0gb24gVHlwZV9pZC5tb3VzZSBcIm1vdXNldXBcIlxubGV0IG9uX21vdXNlZG93biA9IG9uIFR5cGVfaWQubW91c2UgXCJtb3VzZWRvd25cIlxubGV0IG9uX21vdXNlZW50ZXIgPSBvbiBUeXBlX2lkLm1vdXNlIFwibW91c2VlbnRlclwiXG5sZXQgb25fbW91c2VsZWF2ZSA9IG9uIFR5cGVfaWQubW91c2UgXCJtb3VzZWxlYXZlXCJcbmxldCBvbl9tb3VzZW92ZXIgPSBvbiBUeXBlX2lkLm1vdXNlIFwibW91c2VvdmVyXCJcbmxldCBvbl9tb3VzZW91dCA9IG9uIFR5cGVfaWQubW91c2UgXCJtb3VzZW91dFwiXG5sZXQgb25fa2V5dXAgPSBvbiBUeXBlX2lkLmtleWJvYXJkIFwia2V5dXBcIlxubGV0IG9uX2tleXByZXNzID0gb24gVHlwZV9pZC5rZXlib2FyZCBcImtleXByZXNzXCJcbmxldCBvbl9rZXlkb3duID0gb24gVHlwZV9pZC5rZXlib2FyZCBcImtleWRvd25cIlxubGV0IG9uX3Njcm9sbCA9IG9uIFR5cGVfaWQuZXZlbnQgXCJzY3JvbGxcIlxubGV0IG9uX3N1Ym1pdCA9IG9uIFR5cGVfaWQuc3VibWl0IFwic3VibWl0XCJcbmxldCBvbl9wb2ludGVyZG93biA9IG9uIFR5cGVfaWQucG9pbnRlciBcInBvaW50ZXJkb3duXCJcbmxldCBvbl9wb2ludGVydXAgPSBvbiBUeXBlX2lkLnBvaW50ZXIgXCJwb2ludGVydXBcIlxubGV0IG9uX21vdXNld2hlZWwgPSBvbiBUeXBlX2lkLm1vdXNld2hlZWwgXCJtb3VzZXdoZWVsXCJcbmxldCBvbl9jb3B5ID0gb24gVHlwZV9pZC5jbGlwYm9hcmQgXCJjb3B5XCJcbmxldCBvbl9jdXQgPSBvbiBUeXBlX2lkLmNsaXBib2FyZCBcImN1dFwiXG5sZXQgb25fcGFzdGUgPSBvbiBUeXBlX2lkLmNsaXBib2FyZCBcInBhc3RlXCJcbmxldCBvbl9yZXNldCA9IG9uIFR5cGVfaWQuZXZlbnQgXCJyZXNldFwiXG5sZXQgb25fYW5pbWF0aW9uZW5kID0gb24gVHlwZV9pZC5hbmltYXRpb24gXCJhbmltYXRpb25lbmRcIlxubGV0IGNvbnN0X2lnbm9yZSBfID0gRWZmZWN0Lklnbm9yZVxuXG5jbGFzcyB0eXBlIHZhbHVlX2VsZW1lbnQgPVxuICBvYmplY3RcbiAgICBpbmhlcml0IERvbV9odG1sLmVsZW1lbnRcbiAgICBtZXRob2QgdmFsdWUgOiBKcy5qc19zdHJpbmcgSnMudCBKcy5wcm9wXG4gIGVuZFxuXG50eXBlIHZhbHVlX2NvZXJjaW9uID0gRG9tX2h0bWwuZWxlbWVudCBKcy50IC0+IHZhbHVlX2VsZW1lbnQgSnMudCBKcy5vcHRcblxubGV0IHJ1bl9jb2VyY2lvbiBjb2VyY2lvbiB0YXJnZXQgcHJldiA9XG4gIG1hdGNoIHByZXYgd2l0aFxuICB8IFNvbWUgXyAtPiBwcmV2XG4gIHwgTm9uZSAtPiBKcy5PcHQudG9fb3B0aW9uIChjb2VyY2lvbiB0YXJnZXQpXG47O1xuXG5sZXQgY29lcmNlX3ZhbHVlX2VsZW1lbnQgdGFyZ2V0ID1cbiAgbGV0IG9wZW4gRG9tX2h0bWwuQ29lcmNlVG8gaW5cbiAgTm9uZVxuICB8PiBydW5fY29lcmNpb24gKGlucHV0IDo+IHZhbHVlX2NvZXJjaW9uKSB0YXJnZXRcbiAgfD4gcnVuX2NvZXJjaW9uIChzZWxlY3QgOj4gdmFsdWVfY29lcmNpb24pIHRhcmdldFxuICB8PiBydW5fY29lcmNpb24gKHRleHRhcmVhIDo+IHZhbHVlX2NvZXJjaW9uKSB0YXJnZXRcbjs7XG5cbmxldCBvbl9pbnB1dF9ldmVudCB0eXBlX2lkIGV2ZW50IGhhbmRsZXIgPVxuICBvbiB0eXBlX2lkIGV2ZW50IChmdW4gZXYgLT5cbiAgICBKcy5PcHQuY2FzZSBldiMjLnRhcmdldCBjb25zdF9pZ25vcmUgKGZ1biB0YXJnZXQgLT5cbiAgICAgIE9wdGlvbi52YWx1ZV9tYXBcbiAgICAgICAgKGNvZXJjZV92YWx1ZV9lbGVtZW50IHRhcmdldClcbiAgICAgICAgfmRlZmF1bHQ6RWZmZWN0Lklnbm9yZVxuICAgICAgICB+ZjooZnVuIHRhcmdldCAtPlxuICAgICAgICAgIGxldCB0ZXh0ID0gSnMudG9fc3RyaW5nIHRhcmdldCMjLnZhbHVlIGluXG4gICAgICAgICAgaGFuZGxlciBldiB0ZXh0KSkpXG47O1xuXG5sZXQgb25fY2hhbmdlID0gb25faW5wdXRfZXZlbnQgVHlwZV9pZC5ldmVudCBcImNoYW5nZVwiXG5sZXQgb25faW5wdXQgPSBvbl9pbnB1dF9ldmVudCBUeXBlX2lkLmV2ZW50IFwiaW5wdXRcIlxubGV0IHRvX3JhdyBsID0gdG9fcmF3IGxcblxubGV0IG9uX2ZpbGVfaW5wdXQgaGFuZGxlciA9XG4gIG9uIFR5cGVfaWQuZXZlbnQgXCJpbnB1dFwiIChmdW4gZXYgLT5cbiAgICBKcy5PcHQuY2FzZSBldiMjLnRhcmdldCBjb25zdF9pZ25vcmUgKGZ1biB0YXJnZXQgLT5cbiAgICAgIEpzLk9wdC5jYXNlIChEb21faHRtbC5Db2VyY2VUby5pbnB1dCB0YXJnZXQpIGNvbnN0X2lnbm9yZSAoZnVuIHRhcmdldCAtPlxuICAgICAgICBKcy5PcHRkZWYuY2FzZSB0YXJnZXQjIy5maWxlcyBjb25zdF9pZ25vcmUgKGZ1biBmaWxlcyAtPiBoYW5kbGVyIGV2IGZpbGVzKSkpKVxuOztcblxubW9kdWxlIEFsd2F5c19mb2N1c19ob29rID0gc3RydWN0XG4gIG1vZHVsZSBUID0gc3RydWN0XG4gICAgbW9kdWxlIFN0YXRlID0gVW5pdFxuXG4gICAgbW9kdWxlIElucHV0ID0gc3RydWN0XG4gICAgICBpbmNsdWRlIFVuaXRcblxuICAgICAgbGV0IGNvbWJpbmUgKCkgKCkgPSAoKVxuICAgIGVuZFxuXG4gICAgbGV0IGluaXQgKCkgXyA9ICgpXG4gICAgbGV0IG9uX21vdW50ICgpICgpIGVsZW1lbnQgPSBlbGVtZW50IyNmb2N1c1xuICAgIGxldCB1cGRhdGUgfm9sZF9pbnB1dDooKSB+bmV3X2lucHV0OigpICgpIF8gPSAoKVxuICAgIGxldCBkZXN0cm95ICgpICgpIF8gPSAoKVxuICBlbmRcblxuICBtb2R1bGUgSG9vayA9IEhvb2tzLk1ha2UgKFQpXG5cbiAgbGV0IGF0dHIgYFJlYWRfdGhlX2RvY3NfX3RoaXNfaG9va19pc191bnByZWRpY3RhYmxlID1cbiAgICAoKiBBcHBlbmQgdGhlIGlkIHRvIHRoZSBuYW1lIG9mIHRoZSBob29rIHRvIGVuc3VyZSB0aGF0IGl0IGlzIGRpc3RpbmN0XG4gICAgICAgZnJvbSBhbGwgb3RoZXIgZm9jdXMgaG9va3MuICopXG4gICAgY3JlYXRlX2hvb2sgXCJhbHdheXMtZm9jdXMtaG9va1wiIChIb29rLmNyZWF0ZSAoKSlcbiAgOztcbmVuZFxuXG5tb2R1bGUgU2luZ2xlX2ZvY3VzX2hvb2sgKCkgPSBzdHJ1Y3RcbiAgbW9kdWxlIFQgPSBzdHJ1Y3RcbiAgICBtb2R1bGUgU3RhdGUgPSBVbml0XG5cbiAgICBsZXQgaGFzX2JlZW5fdXNlZCA9IHJlZiBmYWxzZVxuXG4gICAgbW9kdWxlIElucHV0ID0gc3RydWN0XG4gICAgICB0eXBlIHQgPSAodW5pdCBVaV9lZmZlY3QudFtAc2V4cC5vcGFxdWVdKSBbQEBkZXJpdmluZyBzZXhwX29mXVxuXG4gICAgICBsZXQgY29tYmluZSBsZWZ0IHJpZ2h0ID0gVWlfZWZmZWN0Lk1hbnkgWyBsZWZ0OyByaWdodCBdXG4gICAgZW5kXG5cbiAgICBsZXQgaW5pdCBfIF8gPSAoKVxuXG4gICAgbGV0IG9uX21vdW50IGV2ZW50ICgpIGVsZW1lbnQgPVxuICAgICAgaWYgbm90ICFoYXNfYmVlbl91c2VkXG4gICAgICB0aGVuIChcbiAgICAgICAgaGFzX2JlZW5fdXNlZCA6PSB0cnVlO1xuICAgICAgICBlbGVtZW50IyNmb2N1cztcbiAgICAgICAgRWZmZWN0LkV4cGVydC5oYW5kbGVfbm9uX2RvbV9ldmVudF9leG4gZXZlbnQpXG4gICAgOztcblxuICAgIGxldCB1cGRhdGUgfm9sZF9pbnB1dDpfIH5uZXdfaW5wdXQ6XyAoKSBfID0gKClcbiAgICBsZXQgZGVzdHJveSBfICgpIF8gPSAoKVxuICBlbmRcblxuICBtb2R1bGUgSG9vayA9IEhvb2tzLk1ha2UgKFQpXG5cbiAgbGV0IGF0dHIgYFJlYWRfdGhlX2RvY3NfX3RoaXNfaG9va19pc191bnByZWRpY3RhYmxlIH5hZnRlciA9XG4gICAgKCogQXBwZW5kIHRoZSBpZCB0byB0aGUgbmFtZSBvZiB0aGUgaG9vayB0byBlbnN1cmUgdGhhdCBpdCBpcyBkaXN0aW5jdFxuICAgICAgIGZyb20gYWxsIG90aGVyIGZvY3VzIGhvb2tzLiAqKVxuICAgIGNyZWF0ZV9ob29rIFwic2luZ2xlLWZvY3VzLWhvb2tcIiAoSG9vay5jcmVhdGUgYWZ0ZXIpXG4gIDs7XG5lbmRcblxubW9kdWxlIE11bHRpID0gc3RydWN0XG5cbiAgdHlwZSBhdHRyID0gdFxuICB0eXBlIHQgPSBhdHRyIGxpc3RcblxuICBsZXQgbWFwX3N0eWxlIHQgfmYgPSBbIE1hbnlfb25seV9tZXJnZV9jbGFzc2VzX2FuZF9zdHlsZXMgKHQsIGYsIEZuLmlkKSBdXG5cbiAgbGV0IGFkZF9jbGFzcyB0IGMgPVxuICAgIFsgTWFueV9vbmx5X21lcmdlX2NsYXNzZXNfYW5kX3N0eWxlcyAodCwgRm4uaWQsIGZ1biBjcyAtPiBTZXQuYWRkIGNzIGMpIF1cbiAgOztcblxuICBsZXQgYWRkX3N0eWxlIHQgcyA9IG1hcF9zdHlsZSB0IH5mOihmdW4gc3MgLT4gQ3NzX2dlbi5jb21iaW5lIHNzIHMpXG5cbiAgbGV0IG1lcmdlX2NsYXNzZXNfYW5kX3N0eWxlcyB0ID1cbiAgICBbIE1hbnlfb25seV9tZXJnZV9jbGFzc2VzX2FuZF9zdHlsZXMgKHQsIEZuLmlkLCBGbi5pZCkgXVxuICA7O1xuZW5kXG5cbm1vZHVsZSBFeHBlcnQgPSBzdHJ1Y3RcbiAgbGV0IHJlYyBmaWx0ZXJfYnlfa2luZCB0IH5mID1cbiAgICBtYXRjaCB0IHdpdGhcbiAgICB8IFByb3BlcnR5IF8gLT4gaWYgZiBgUHJvcGVydHkgdGhlbiB0IGVsc2UgZW1wdHlcbiAgICB8IEF0dHJpYnV0ZSBfIC0+IGlmIGYgYEF0dHJpYnV0ZSB0aGVuIHQgZWxzZSBlbXB0eVxuICAgIHwgSG9vayBfIC0+IGlmIGYgYEhvb2sgdGhlbiB0IGVsc2UgZW1wdHlcbiAgICB8IEhhbmRsZXIgXyAtPiBpZiBmIGBIYW5kbGVyIHRoZW4gdCBlbHNlIGVtcHR5XG4gICAgfCBTdHlsZSBfIC0+IGlmIGYgYFN0eWxlIHRoZW4gdCBlbHNlIGVtcHR5XG4gICAgfCBDbGFzcyBfIC0+IGlmIGYgYENsYXNzIHRoZW4gdCBlbHNlIGVtcHR5XG4gICAgfCBNYW55IGF0dHJzIC0+IE1hbnkgKExpc3QubWFwIGF0dHJzIH5mOihmaWx0ZXJfYnlfa2luZCB+ZikpXG4gICAgfCBNYW55X29ubHlfbWVyZ2VfY2xhc3Nlc19hbmRfc3R5bGVzIChhdHRycywgYSwgYikgLT5cbiAgICAgIE1hbnlfb25seV9tZXJnZV9jbGFzc2VzX2FuZF9zdHlsZXMgKExpc3QubWFwIGF0dHJzIH5mOihmaWx0ZXJfYnlfa2luZCB+ZiksIGEsIGIpXG4gICAgfCBNYW55X3dpdGhvdXRfbWVyZ2UgYXR0cnMgLT5cbiAgICAgIE1hbnlfd2l0aG91dF9tZXJnZSAoTGlzdC5tYXAgYXR0cnMgfmY6KGZpbHRlcl9ieV9raW5kIH5mKSlcbiAgOztcblxuICBsZXQgcmVjIGNvbnRhaW5zX25hbWUgbG9va2luZ19mb3IgPSBmdW5jdGlvblxuICAgIHwgUHJvcGVydHkgeyBuYW1lOyBfIH0gfCBBdHRyaWJ1dGUgeyBuYW1lOyBfIH0gfCBIb29rIHsgbmFtZTsgXyB9IC0+XG4gICAgICBTdHJpbmcuZXF1YWwgbG9va2luZ19mb3IgbmFtZVxuICAgIHwgSGFuZGxlciB7IG5hbWU7IF8gfSAtPiBTdHJpbmcuZXF1YWwgKFwib25cIiBeIG5hbWUpIGxvb2tpbmdfZm9yXG4gICAgfCBTdHlsZSBfIC0+IFN0cmluZy5lcXVhbCBsb29raW5nX2ZvciBcInN0eWxlXCJcbiAgICB8IENsYXNzIF8gLT4gU3RyaW5nLmVxdWFsIGxvb2tpbmdfZm9yIFwiY2xhc3NcIlxuICAgIHwgTWFueSBhdHRyc1xuICAgIHwgTWFueV9vbmx5X21lcmdlX2NsYXNzZXNfYW5kX3N0eWxlcyAoYXR0cnMsIF8sIF8pXG4gICAgfCBNYW55X3dpdGhvdXRfbWVyZ2UgYXR0cnMgLT4gTGlzdC5leGlzdHMgfmY6KGNvbnRhaW5zX25hbWUgbG9va2luZ19mb3IpIGF0dHJzXG4gIDs7XG5lbmRcbiIsIm9wZW4gSnNfb2Zfb2NhbWxcblxubW9kdWxlIE1ha2UgKFggOiBzaWdcbiAgICB2YWwgZXZlbnRfa2luZCA6IERvbV9odG1sLm1vdXNlRXZlbnQgSnMudCBEb20uRXZlbnQudHlwXG4gIGVuZCkgPVxuc3RydWN0XG4gIGluY2x1ZGUgSG9va3MuTWFrZSAoc3RydWN0XG4gICAgICBtb2R1bGUgSW5wdXQgPSBzdHJ1Y3RcbiAgICAgICAgdHlwZSB0ID0gRG9tX2h0bWwubW91c2VFdmVudCBKcy50IC0+IHVuaXQgVWlfZWZmZWN0LnQgW0BAZGVyaXZpbmcgc2V4cF9vZl1cblxuICAgICAgICBsZXQgY29tYmluZSBmIGcgZXZlbnQgPSBVaV9lZmZlY3QuTWFueSBbIGYgZXZlbnQ7IGcgZXZlbnQgXVxuICAgICAgZW5kXG5cbiAgICAgIG1vZHVsZSBTdGF0ZSA9IHN0cnVjdFxuICAgICAgICB0eXBlIHQgPSB7IG11dGFibGUgbGlzdGVuZXIgOiAoRG9tX2h0bWwuZXZlbnRfbGlzdGVuZXJfaWRbQHNleHAub3BhcXVlXSkgfVxuICAgICAgICBbQEBkZXJpdmluZyBzZXhwX29mXVxuICAgICAgZW5kXG5cbiAgICAgIGxldCBzZXQgZiA9XG4gICAgICAgIGxldCBoYW5kbGVyID1cbiAgICAgICAgICBEb20uaGFuZGxlciAoZnVuIGV2IC0+XG4gICAgICAgICAgICBFZmZlY3QuRXhwZXJ0LmhhbmRsZV9ub25fZG9tX2V2ZW50X2V4biAoZiBldik7XG4gICAgICAgICAgICBKcy5fdHJ1ZSlcbiAgICAgICAgaW5cbiAgICAgICAgRG9tX2h0bWwuYWRkRXZlbnRMaXN0ZW5lciBEb21faHRtbC53aW5kb3cgWC5ldmVudF9raW5kIGhhbmRsZXIgSnMuX3RydWVcbiAgICAgIDs7XG5cbiAgICAgIGxldCBpbml0IGYgX2VsZW1lbnQgPSB7IFN0YXRlLmxpc3RlbmVyID0gc2V0IGYgfVxuICAgICAgbGV0IGRlc3Ryb3kgX2lucHV0IHN0YXRlIF9lbGVtZW50ID0gRG9tX2h0bWwucmVtb3ZlRXZlbnRMaXN0ZW5lciBzdGF0ZS5TdGF0ZS5saXN0ZW5lclxuXG4gICAgICBsZXQgdXBkYXRlIH5vbGRfaW5wdXQgfm5ld19pbnB1dDpmIHN0YXRlIGVsZW1lbnQgPVxuICAgICAgICAoKiBpZiB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gY2hhbmdlcywgY2FuY2VsIHRoZSBvbGQgb25lIGFuZCByZS1pbnN0YWxsICopXG4gICAgICAgIGRlc3Ryb3kgb2xkX2lucHV0IHN0YXRlIGVsZW1lbnQ7XG4gICAgICAgIGxldCBuZXdfc3RhdGUgPSBpbml0IGYgZWxlbWVudCBpblxuICAgICAgICBzdGF0ZS5TdGF0ZS5saXN0ZW5lciA8LSBuZXdfc3RhdGUubGlzdGVuZXJcbiAgICAgIDs7XG5cbiAgICAgIGxldCBvbl9tb3VudCBfaW5wdXQgX3N0YXRlIF9lbGVtZW50ID0gKClcbiAgICBlbmQpXG5lbmRcblxubW9kdWxlIE1vdXNlX3VwID0gTWFrZSAoc3RydWN0XG4gICAgbGV0IGV2ZW50X2tpbmQgPSBEb21faHRtbC5FdmVudC5tb3VzZXVwXG4gIGVuZClcblxubW9kdWxlIE1vdXNlX21vdmUgPSBNYWtlIChzdHJ1Y3RcbiAgICBsZXQgZXZlbnRfa2luZCA9IERvbV9odG1sLkV2ZW50Lm1vdXNlbW92ZVxuICBlbmQpXG5cbmxldCBtb3VzZXVwIGYgPSBNb3VzZV91cC5jcmVhdGUgZiB8PiBBdHRyLmNyZWF0ZV9ob29rIFwiZ2xvYmFsLW1vdXNldXAtbGlzdGVuZXJcIlxubGV0IG1vdXNlbW92ZSBmID0gTW91c2VfbW92ZS5jcmVhdGUgZiB8PiBBdHRyLmNyZWF0ZV9ob29rIFwiZ2xvYmFsLW1vdXNlbW92ZS1saXN0ZW5lclwiXG5cbm1vZHVsZSBGb3JfdGVzdGluZyA9IHN0cnVjdFxuICBsZXQgbW91c2VfdXBfdHlwZV9pZCA9IE1vdXNlX3VwLkZvcl90ZXN0aW5nLnR5cGVfaWRcbiAgbGV0IG1vdXNlX21vdmVfdHlwZV9pZCA9IE1vdXNlX21vdmUuRm9yX3Rlc3RpbmcudHlwZV9pZFxuZW5kXG4iLCJvcGVuIEJhc2Vcbm9wZW4gSnNfb2Zfb2NhbWxcblxubW9kdWxlIFdpZGdldCA9IHN0cnVjdFxuICBvcGVuIEpzX29mX29jYW1sXG4gIGluY2x1ZGUgUmF3LldpZGdldFxuXG4gIG1vZHVsZSB0eXBlIFMgPSBzaWdcbiAgICB0eXBlIGRvbSA9IHByaXZhdGUgI0RvbV9odG1sLmVsZW1lbnRcblxuICAgIG1vZHVsZSBJbnB1dCA6IHNpZ1xuICAgICAgdHlwZSB0IFtAQGRlcml2aW5nIHNleHBfb2ZdXG4gICAgZW5kXG5cbiAgICBtb2R1bGUgU3RhdGUgOiBzaWdcbiAgICAgIHR5cGUgdCBbQEBkZXJpdmluZyBzZXhwX29mXVxuICAgIGVuZFxuXG4gICAgdmFsIG5hbWUgOiBzdHJpbmdcbiAgICB2YWwgY3JlYXRlIDogSW5wdXQudCAtPiBTdGF0ZS50ICogZG9tIEpzLnRcblxuICAgIHZhbCB1cGRhdGVcbiAgICAgIDogIHByZXZfaW5wdXQ6SW5wdXQudFxuICAgICAgLT4gaW5wdXQ6SW5wdXQudFxuICAgICAgLT4gc3RhdGU6U3RhdGUudFxuICAgICAgLT4gZWxlbWVudDpkb20gSnMudFxuICAgICAgLT4gU3RhdGUudCAqIGRvbSBKcy50XG5cbiAgICB2YWwgZGVzdHJveSA6IHByZXZfaW5wdXQ6SW5wdXQudCAtPiBzdGF0ZTpTdGF0ZS50IC0+IGVsZW1lbnQ6ZG9tIEpzLnQgLT4gdW5pdFxuICBlbmRcblxuICBsZXQgb2ZfbW9kdWxlICh0eXBlIGlucHV0KSAobW9kdWxlIE0gOiBTIHdpdGggdHlwZSBJbnB1dC50ID0gaW5wdXQpID1cbiAgICBsZXQgbW9kdWxlIFN0YXRlID0gc3RydWN0XG4gICAgICB0eXBlIHQgPVxuICAgICAgICB7IGlucHV0IDogTS5JbnB1dC50XG4gICAgICAgIDsgc3RhdGUgOiBNLlN0YXRlLnRcbiAgICAgICAgfVxuICAgICAgW0BAZGVyaXZpbmcgc2V4cF9vZl1cbiAgICBlbmRcbiAgICBpblxuICAgIGxldCBzZXhwX29mX2RvbSA6IE0uZG9tIEpzLnQgLT4gU2V4cC50ID0gZnVuIF8gLT4gU2V4cC5BdG9tIFwiPG9wYXF1ZT5cIiBpblxuICAgIGxldCBpZCA9IFR5cGVfZXF1YWwuSWQuY3JlYXRlIH5uYW1lOk0ubmFtZSBbJXNleHBfb2Y6IFN0YXRlLnQgKiBkb21dIGluXG4gICAgQmFzZS5TdGFnZWQuc3RhZ2UgKGZ1biBpbnB1dCAtPlxuICAgICAgbGV0IGluZm8gPSBsYXp5IChNLklucHV0LnNleHBfb2ZfdCBpbnB1dCkgaW5cbiAgICAgIGNyZWF0ZVxuICAgICAgICB+aWRcbiAgICAgICAgfmluZm9cbiAgICAgICAgfmluaXQ6KGZ1biAoKSAtPlxuICAgICAgICAgIGxldCBzdGF0ZSwgZWxlbWVudCA9IE0uY3JlYXRlIGlucHV0IGluXG4gICAgICAgICAgeyBpbnB1dDsgc3RhdGUgfSwgZWxlbWVudClcbiAgICAgICAgfnVwZGF0ZTooZnVuIHsgU3RhdGUuaW5wdXQgPSBwcmV2X2lucHV0OyBzdGF0ZSB9IGVsZW1lbnQgLT5cbiAgICAgICAgICBsZXQgc3RhdGUsIGVsZW1lbnQgPSBNLnVwZGF0ZSB+cHJldl9pbnB1dCB+aW5wdXQgfnN0YXRlIH5lbGVtZW50IGluXG4gICAgICAgICAgeyBpbnB1dDsgc3RhdGUgfSwgZWxlbWVudClcbiAgICAgICAgfmRlc3Ryb3k6KGZ1biB7IFN0YXRlLmlucHV0ID0gcHJldl9pbnB1dDsgc3RhdGUgfSBlbGVtZW50IC0+XG4gICAgICAgICAgTS5kZXN0cm95IH5wcmV2X2lucHV0IH5zdGF0ZSB+ZWxlbWVudClcbiAgICAgICAgKCkpXG4gIDs7XG5lbmRcblxudHlwZSBlbGVtZW50ID1cbiAgeyB0YWcgOiBzdHJpbmdcbiAgOyBrZXkgOiBzdHJpbmcgb3B0aW9uXG4gIDsgYXR0cnMgOiBBdHRyLnRcbiAgOyByYXdfYXR0cnMgOiBSYXcuQXR0cnMudCBMYXp5LnRcbiAgOyBjaGlsZHJlbiA6IFJhdy5Ob2RlLnQgSnMuanNfYXJyYXkgSnMudFxuICA7IGtpbmQgOiBbIGBWbm9kZSB8IGBTdmcgXVxuICB9XG5cbmFuZCB0ID1cbiAgfCBOb25lXG4gIHwgVGV4dCBvZiBzdHJpbmdcbiAgfCBFbGVtZW50IG9mIGVsZW1lbnRcbiAgfCBXaWRnZXQgb2YgV2lkZ2V0LnRcblxubW9kdWxlIEFsaWFzZXMgPSBzdHJ1Y3RcbiAgdHlwZSBub2RlX2NyZWF0b3IgPSA/a2V5OnN0cmluZyAtPiA/YXR0cjpBdHRyLnQgLT4gdCBsaXN0IC0+IHRcbiAgdHlwZSBub2RlX2NyZWF0b3JfY2hpbGRsZXNzID0gP2tleTpzdHJpbmcgLT4gP2F0dHI6QXR0ci50IC0+IHVuaXQgLT4gdFxuZW5kXG5cbm1vZHVsZSBFbGVtZW50ID0gc3RydWN0XG4gIHR5cGUgdCA9IGVsZW1lbnRcblxuICBsZXQgdGFnIHQgPSB0LnRhZ1xuICBsZXQgYXR0cnMgdCA9IHQuYXR0cnNcbiAgbGV0IGtleSB0ID0gdC5rZXlcbiAgbGV0IHdpdGhfa2V5IHQga2V5ID0geyB0IHdpdGgga2V5ID0gU29tZSBrZXkgfVxuXG4gIGxldCBtYXBfYXR0cnMgdCB+ZiA9XG4gICAgbGV0IGF0dHJzID0gZiB0LmF0dHJzIGluXG4gICAgbGV0IHJhd19hdHRycyA9IGxhenkgKEF0dHIudG9fcmF3IGF0dHJzKSBpblxuICAgIHsgdCB3aXRoIGF0dHJzOyByYXdfYXR0cnMgfVxuICA7O1xuXG4gIGxldCBhZGRfY2xhc3MgdCBjID0gbWFwX2F0dHJzIHQgfmY6KGZ1biBhIC0+IEF0dHIuKGEgQCBjbGFzc18gYykpXG4gIGxldCBhZGRfY2xhc3NlcyB0IGMgPSBtYXBfYXR0cnMgdCB+ZjooZnVuIGEgLT4gQXR0ci4oYSBAIGNsYXNzZXMgYykpXG4gIGxldCBhZGRfc3R5bGUgdCBzID0gbWFwX2F0dHJzIHQgfmY6KGZ1biBhIC0+IEF0dHIuKGEgQCBzdHlsZSBzKSlcbmVuZFxuXG5sZXQgdF90b19qcyA9IGZ1bmN0aW9uXG4gIHwgTm9uZSAtPlxuICAgICgqIFdlIG5vcm1hbGx5IGZpbHRlciB0aGVzZSBvdXQsIGJ1dCBpZiBbdG9fanNdIGlzIGNhbGxlZCBkaXJlY3RseSBvbiBhIFtOb25lXSBub2RlLFxuICAgICAgIHdlIHVzZSB0aGlzIGhhY2suIEFzaWRlIGZyb20gaGF2aW5nIGEgW1RleHRdIG5vZGUgd2l0aG91dCBhbnkgdGV4dCBwcmVzZW50IGluIHRoZVxuICAgICAgIERvbSwgdGhlcmUgc2hvdWxkIGJlIG5vIHVud2FudGVkIHNpZGUtZWZmZWN0cy4gIEluIGFuIEluY3JfZG9tIGFwcGxpY2F0aW9uLCB0aGlzXG4gICAgICAgY2FuIG9ubHkgaGFwcGVuIHdoZW4gdGhlIHJvb3QgdmlldyBJbmNyZW1lbnRhbCBpcyBpbmhhYml0ZWQgYnkgYSBbTm9uZV0uICopXG4gICAgUmF3Lk5vZGUudGV4dCBcIlwiXG4gIHwgVGV4dCBzIC0+IFJhdy5Ob2RlLnRleHQgc1xuICB8IEVsZW1lbnQgeyB0YWc7IGtleTsgYXR0cnMgPSBfOyByYXdfYXR0cnMgPSAobGF6eSByYXdfYXR0cnMpOyBjaGlsZHJlbjsga2luZCA9IGBWbm9kZSB9XG4gICAgLT4gUmF3Lk5vZGUubm9kZSB0YWcgcmF3X2F0dHJzIGNoaWxkcmVuIGtleVxuICB8IEVsZW1lbnQgeyB0YWc7IGtleTsgYXR0cnMgPSBfOyByYXdfYXR0cnMgPSAobGF6eSByYXdfYXR0cnMpOyBjaGlsZHJlbjsga2luZCA9IGBTdmcgfVxuICAgIC0+IFJhdy5Ob2RlLnN2ZyB0YWcgcmF3X2F0dHJzIGNoaWxkcmVuIGtleVxuICB8IFdpZGdldCB3IC0+IHdcbjs7XG5cbmxldCBlbGVtZW50IGtpbmQgfnRhZyB+a2V5IGF0dHJzIGNoaWxkcmVuID1cbiAgbGV0IGNoaWxkcmVuX3JhdyA9IG5ldyVqcyBKcy5hcnJheV9lbXB0eSBpblxuICBMaXN0Lml0ZXIgY2hpbGRyZW4gfmY6KGZ1bmN0aW9uXG4gICAgfCBOb25lIC0+ICgpXG4gICAgfCAoVGV4dCBfIHwgRWxlbWVudCBfIHwgV2lkZ2V0IF8pIGFzIG90aGVyIC0+XG4gICAgICBsZXQgKF8gOiBpbnQpID0gY2hpbGRyZW5fcmF3IyNwdXNoICh0X3RvX2pzIG90aGVyKSBpblxuICAgICAgKCkpO1xuICBsZXQgcmF3X2F0dHJzID0gbGF6eSAoQXR0ci50b19yYXcgYXR0cnMpIGluXG4gIHsga2luZDsgdGFnOyBrZXk7IGF0dHJzOyByYXdfYXR0cnM7IGNoaWxkcmVuID0gY2hpbGRyZW5fcmF3IH1cbjs7XG5cbmxldCBlbGVtZW50X2V4cGVydCBraW5kIH50YWcgP2tleSBhdHRycyBjaGlsZHJlbiA9XG4gIGxldCByYXdfYXR0cnMgPSBsYXp5IChBdHRyLnRvX3JhdyBhdHRycykgaW5cbiAgeyBraW5kOyB0YWc7IGtleTsgYXR0cnM7IHJhd19hdHRyczsgY2hpbGRyZW4gfVxuOztcblxubGV0IHRleHQgcyA9IFRleHQgc1xuXG5sZXQgd2lkZ2V0ID9pbmZvID9kZXN0cm95ID91cGRhdGUgfmlkIH5pbml0ICgpID1cbiAgV2lkZ2V0IChXaWRnZXQuY3JlYXRlID9pbmZvID9kZXN0cm95ID91cGRhdGUgfmlkIH5pbml0ICgpKVxuOztcblxubGV0IGNyZWF0ZSB0YWcgP2tleSA/KGF0dHIgPSBBdHRyLmVtcHR5KSBjaGlsZHJlbiA9XG4gIEVsZW1lbnQgKGVsZW1lbnQgYFZub2RlIH50YWcgfmtleSBhdHRyIGNoaWxkcmVuKVxuOztcblxubGV0IGNyZWF0ZV9jaGlsZGxlc3MgdGFnID9rZXkgP2F0dHIgKCkgPSBjcmVhdGUgdGFnID9rZXkgP2F0dHIgW11cblxubGV0IGNyZWF0ZV9zdmcgdGFnID9rZXkgPyhhdHRyID0gQXR0ci5lbXB0eSkgY2hpbGRyZW4gPVxuICBFbGVtZW50IChlbGVtZW50IGBTdmcgfnRhZyB+a2V5IGF0dHIgY2hpbGRyZW4pXG47O1xuXG5sZXQgY3JlYXRlX3N2Z19tb25vaWQgdGFnID9rZXkgPyhhdHRyID0gQXR0ci5lbXB0eSkgY2hpbGRyZW4gPVxuICBFbGVtZW50IChlbGVtZW50IGBTdmcgfnRhZyB+a2V5IGF0dHIgY2hpbGRyZW4pXG47O1xuXG5sZXQgbm9uZSA9IE5vbmVcbmxldCB0ZXh0ZiBmb3JtYXQgPSBQcmludGYua3NwcmludGYgdGV4dCBmb3JtYXRcblxubGV0IHdpZGdldF9vZl9tb2R1bGUgbSA9XG4gIGxldCBmID0gQmFzZS5TdGFnZWQudW5zdGFnZSAoV2lkZ2V0Lm9mX21vZHVsZSBtKSBpblxuICBCYXNlLlN0YWdlZC5zdGFnZSAoZnVuIGkgLT4gV2lkZ2V0IChmIGkpKVxuOztcblxubGV0IHRvX3JhdyA9IHRfdG9fanNcbmxldCB0b19kb20gdCA9IFJhdy5Ob2RlLnRvX2RvbSAodG9fcmF3IHQpXG5cbmxldCBpbm5lcl9odG1sXG4gICAgICBjcmVhdGVcbiAgICAgIH50YWdcbiAgICAgIH5hdHRyXG4gICAgICB+dGhpc19odG1sX2lzX3Nhbml0aXplZF9hbmRfaXNfdG90YWxseV9zYWZlX3RydXN0X21lOmNvbnRlbnRcbiAgPVxuICBsZXQgZWxlbWVudCA9IGNyZWF0ZSB0YWcgfmF0dHIgW10gaW5cbiAgbGV0IGJ1aWxkX3NleHAgfmV4dHJhIH5jb250ZW50ID1cbiAgICBTZXhwLkxpc3QgWyBTZXhwLkF0b20gXCJpbm5lci1odG1sXCI7IGV4dHJhOyBTZXhwLkF0b20gY29udGVudCBdXG4gIGluXG4gIGxldCBpZCA9XG4gICAgVHlwZV9lcXVhbC5JZC5jcmVhdGUgfm5hbWU6XCJpbm5lci1odG1sLW5vZGVcIiAoZnVuICgoZWxlbWVudCwgY29udGVudCksIF8pIC0+XG4gICAgICBidWlsZF9zZXhwIH5leHRyYTplbGVtZW50IH5jb250ZW50KVxuICBpblxuICBsZXQgZGVidWcgPVxuICAgIG1hdGNoIGVsZW1lbnQgd2l0aFxuICAgIHwgRWxlbWVudCBlbGVtZW50IC0+IFNleHAuQXRvbSAoRWxlbWVudC50YWcgZWxlbWVudClcbiAgICB8IFdpZGdldCBfIC0+IGZhaWx3aXRoIFwiVmRvbS5Ob2RlLmlubmVyX2h0bWwgd2FzIGdpdmVuIGEgJ3dpZGdldCdcIlxuICAgIHwgTm9uZSAtPiBmYWlsd2l0aCBcIlZkb20uTm9kZS5pbm5lcl9odG1sIHdhcyBnaXZlbiBhICdub25lJ1wiXG4gICAgfCBUZXh0IF8gLT4gZmFpbHdpdGggXCJWZG9tLk5vZGUuaW5uZXJfaHRtbCB3YXMgZ2l2ZW4gYSAndGV4dCdcIlxuICBpblxuICB3aWRnZXRcbiAgICB+aWRcbiAgICB+aW5mbzoobGF6eSAoYnVpbGRfc2V4cCB+ZXh0cmE6ZGVidWcgfmNvbnRlbnQpKVxuICAgIH5pbml0OihmdW4gKCkgLT5cbiAgICAgIGxldCBlbGVtZW50ID0gdG9fZG9tIGVsZW1lbnQgaW5cbiAgICAgIGVsZW1lbnQjIy5pbm5lckhUTUwgOj0gSnMuc3RyaW5nIGNvbnRlbnQ7XG4gICAgICAoZGVidWcsIGNvbnRlbnQpLCBlbGVtZW50KVxuICAgICgpXG47O1xuXG5sZXQgaW5uZXJfaHRtbF9zdmcgPSBpbm5lcl9odG1sIChmdW4gdGFnIH5hdHRyIC0+IGNyZWF0ZV9zdmdfbW9ub2lkIHRhZyA/a2V5Ok5vbmUgfmF0dHIpXG5sZXQgaW5uZXJfaHRtbCA9IGlubmVyX2h0bWwgKGZ1biB0YWcgfmF0dHIgLT4gY3JlYXRlIHRhZyA/a2V5Ok5vbmUgfmF0dHIpXG5sZXQgYSA9IGNyZWF0ZSBcImFcIlxubGV0IGJvZHkgPSBjcmVhdGUgXCJib2R5XCJcbmxldCBidXR0b24gPSBjcmVhdGUgXCJidXR0b25cIlxubGV0IGNvZGUgPSBjcmVhdGUgXCJjb2RlXCJcbmxldCBkaXYgPSBjcmVhdGUgXCJkaXZcIlxubGV0IG1haW4gPSBjcmVhdGUgXCJtYWluXCJcbmxldCBmaWVsZHNldCA9IGNyZWF0ZSBcImZpZWxkc2V0XCJcbmxldCBmb290ZXIgPSBjcmVhdGUgXCJmb290ZXJcIlxubGV0IGgxID0gY3JlYXRlIFwiaDFcIlxubGV0IGgyID0gY3JlYXRlIFwiaDJcIlxubGV0IGgzID0gY3JlYXRlIFwiaDNcIlxubGV0IGg0ID0gY3JlYXRlIFwiaDRcIlxubGV0IGg1ID0gY3JlYXRlIFwiaDVcIlxubGV0IGg2ID0gY3JlYXRlIFwiaDZcIlxubGV0IGhlYWRlciA9IGNyZWF0ZSBcImhlYWRlclwiXG5sZXQgaHRtbCA9IGNyZWF0ZSBcImh0bWxcIlxubGV0IGlucHV0ID0gY3JlYXRlIFwiaW5wdXRcIlxubGV0IHRleHRhcmVhID0gY3JlYXRlIFwidGV4dGFyZWFcIlxubGV0IHNlbGVjdCA9IGNyZWF0ZSBcInNlbGVjdFwiXG5sZXQgb3B0aW9uID0gY3JlYXRlIFwib3B0aW9uXCJcbmxldCBsYWJlbCA9IGNyZWF0ZSBcImxhYmVsXCJcbmxldCBsaSA9IGNyZWF0ZSBcImxpXCJcbmxldCBwID0gY3JlYXRlIFwicFwiXG5sZXQgcHJlID0gY3JlYXRlIFwicHJlXCJcbmxldCBzZWN0aW9uID0gY3JlYXRlIFwic2VjdGlvblwiXG5sZXQgc3BhbiA9IGNyZWF0ZSBcInNwYW5cIlxubGV0IHN0cm9uZyA9IGNyZWF0ZSBcInN0cm9uZ1wiXG5sZXQgdGFibGUgPSBjcmVhdGUgXCJ0YWJsZVwiXG5sZXQgdGJvZHkgPSBjcmVhdGUgXCJ0Ym9keVwiXG5sZXQgdGQgPSBjcmVhdGUgXCJ0ZFwiXG5sZXQgdGggPSBjcmVhdGUgXCJ0aFwiXG5sZXQgdGhlYWQgPSBjcmVhdGUgXCJ0aGVhZFwiXG5sZXQgdHIgPSBjcmVhdGUgXCJ0clwiXG5sZXQgdWwgPSBjcmVhdGUgXCJ1bFwiXG5sZXQgb2wgPSBjcmVhdGUgXCJvbFwiXG5sZXQgYnIgPSBjcmVhdGVfY2hpbGRsZXNzIFwiYnJcIlxubGV0IGhyID0gY3JlYXRlX2NoaWxkbGVzcyBcImhyXCJcblxubGV0IHNleHBfZm9yX2RlYnVnZ2luZyA/aW5kZW50IHNleHAgPVxuICBzZXhwIHw+IFNleHAudG9fc3RyaW5nX2h1bSA/aW5kZW50IHw+IHRleHQgfD4gTGlzdC5yZXR1cm4gfD4gcHJlIH5hdHRyOkF0dHIuZW1wdHlcbjs7XG5cbm1vZHVsZSBQYXRjaCA9IHN0cnVjdFxuICB0eXBlIHQgPSBSYXcuUGF0Y2gudFxuXG4gIGxldCBjcmVhdGUgfnByZXZpb3VzIH5jdXJyZW50ID1cbiAgICBSYXcuUGF0Y2guY3JlYXRlIH5wcmV2aW91czoodF90b19qcyBwcmV2aW91cykgfmN1cnJlbnQ6KHRfdG9fanMgY3VycmVudClcbiAgOztcblxuICBsZXQgYXBwbHkgdCBlbHQgPSBSYXcuUGF0Y2guYXBwbHkgZWx0IHRcbiAgbGV0IGlzX2VtcHR5IHQgPSBSYXcuUGF0Y2guaXNfZW1wdHkgdFxuZW5kXG5cbm1vZHVsZSBFeHBlcnQgPSBzdHJ1Y3RcbiAgbGV0IGNyZWF0ZSA/a2V5IHRhZyBhdHRycyBjaGlsZHJlbiA9XG4gICAgRWxlbWVudCAoZWxlbWVudF9leHBlcnQgYFZub2RlID9rZXkgfnRhZyBhdHRycyBjaGlsZHJlbilcbiAgOztcblxuICBsZXQgY3JlYXRlX3N2ZyA/a2V5IHRhZyBhdHRycyBjaGlsZHJlbiA9XG4gICAgRWxlbWVudCAoZWxlbWVudF9leHBlcnQgYFN2ZyA/a2V5IH50YWcgYXR0cnMgY2hpbGRyZW4pXG4gIDs7XG5lbmRcbiIsIm1vZHVsZSBBdHRyID0gc3RydWN0XG4gIGluY2x1ZGUgQXR0clxuICBtb2R1bGUgSG9va3MgPSBIb29rc1xuICBtb2R1bGUgR2xvYmFsX2xpc3RlbmVycyA9IEdsb2JhbF9saXN0ZW5lcnNcbmVuZFxuXG5tb2R1bGUgQXR0cnMgPSBBdHRyLk11bHRpXG5tb2R1bGUgRWZmZWN0ID0gRWZmZWN0XG5tb2R1bGUgTm9kZSA9IE5vZGVcbiIsIm1vZHVsZSBWZG9tID0gVmRvbVxubW9kdWxlIERvbV9mbG9hdCA9IERvbV9mbG9hdFxuXG5tb2R1bGUgVG9wX2xldmVsX2VmZmVjdHMgPSBzdHJ1Y3RcbiAgbGV0ICgpID1cbiAgICAoKiB1c2UgdGhlIG5hdGl2ZS1qYXZhc2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIGZsb2F0IC0+IHN0cmluZyB3aXRoIGEgZml4ZWQgbnVtYmVyIG9mXG4gICAgICAgbnVtYmVycyBhZnRlciB0aGUgZGVjaW1hbCBwbGFjZS4gKilcbiAgICBDc3NfZ2VuLlByaXZhdGUuZmxvYXRfdG9fc3RyaW5nX3dpdGhfZml4ZWQgOj0gRG9tX2Zsb2F0LnRvX3N0cmluZ19maXhlZFxuICA7O1xuZW5kXG4iXX0=
