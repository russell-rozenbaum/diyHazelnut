// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1+5.8.1

//# unitInfo: Provides: Ui_effect__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Ui_effect = [0];
   runtime.caml_register_global(0, Ui_effect, "Ui_effect__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ui_effect__Ui_effect_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ui_effect_Ui_effect_intf = "Ui_effect__Ui_effect_intf",
    cst_ui_effect = "ui_effect";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Ui_effect_Ui_effect_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_ui_effect);
   caml_call1(Expect_test_collector[5][1], "ui_effect/ui_effect_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_ui_effect, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_ui_effect);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Ui_effect_Ui_effect_intf);
   var Ui_effect_Ui_effect_intf = [0];
   runtime.caml_register_global
    (11, Ui_effect_Ui_effect_intf, cst_Ui_effect_Ui_effect_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Ui_effect
//# unitInfo: Requires: Base__Monad, CamlinternalLazy, Core, Core__Bag, Core__Hashtbl, Core__Int, Core__List, Core__Sexp, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Stdlib__Obj, Ui_effect__Ui_effect_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Ui_effect = "Ui_effect",
    cst_Unrecognized_variant$1 = "Unrecognized variant",
    cst_ui_effect = "ui_effect",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    CamlinternalLazy = global_data.CamlinternalLazy,
    Core_List = global_data.Core__List,
    Core_Bag = global_data.Core__Bag,
    Core = global_data.Core,
    Core_Hashtbl = global_data.Core__Hashtbl,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Base_Monad = global_data.Base__Monad;
   caml_call1(Ppx_module_timer_runtime[4], cst_Ui_effect);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_ui_effect);
   caml_call1(Expect_test_collector[5][1], "ui_effect/ui_effect.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_ui_effect, cst);
   var
    Ignore = [248, "Ui_effect.Ignore", caml_fresh_oo_id(0)],
    Many = [248, "Ui_effect.Many", caml_fresh_oo_id(0)],
    handlers =
      caml_call3
       (Core_Hashtbl[4],
        0,
        [0, 8],
        [0, Core_Int[91], Core_Int[80], Core_Int[104]]),
    cst_Ui_effect_Define_Handler_C = "Ui_effect.Define(Handler).C",
    cst_Unrecognized_variant = cst_Unrecognized_variant$1,
    cst_Ui_effect_Define1_Handler_ = "Ui_effect.Define1(Handler).C",
    cst_on_response_called_multipl = "on_response called multiple times!",
    cst_Unrecognized_variant$0 = cst_Unrecognized_variant$1;
   function Define(Handler){
    var
     C = [248, cst_Ui_effect_Define_Handler_C, caml_fresh_oo_id(0)],
     key = caml_call1(Stdlib_Obj[22][3], C);
    caml_call3
     (Core_Hashtbl[36],
      handlers,
      key,
      function(inp){
       var _r_ = inp[1], match = _r_[1];
       if(match[1] === C){
        var callback = _r_[2], value = match[2];
        caml_call1(Handler[2], value);
        return caml_call1(callback, 0);
       }
       var _s_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Unrecognized_variant);
       return caml_call1(Core[253], _s_);
      });
    function inject(v){return [0, C, v];}
    return [0, inject];
   }
   function Define1(Handler){
    var
     C = [248, cst_Ui_effect_Define1_Handler_, caml_fresh_oo_id(0)],
     key = caml_call1(Stdlib_Obj[22][3], C);
    caml_call3
     (Core_Hashtbl[36],
      handlers,
      key,
      function(inp){
       var _p_ = inp[1], match = _p_[1];
       if(match[1] === C){
        var
         callback = _p_[2],
         value = match[2],
         called = [0, 0],
         callback$0 =
           function(a){
            if(called[1])
             caml_call1(Core[6], cst_on_response_called_multipl);
            else
             called[1] = 1;
            return caml_call1(callback, a);
           };
        return caml_call2(Handler[2], value, callback$0);
       }
       var
        _q_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Unrecognized_variant$0);
       return caml_call1(Core[253], _q_);
      });
    function inject(v){return [0, C, v];}
    return [0, inject];
   }
   function handle(s){return caml_call2(Core[248], 0, s);}
   var
    Print_s = Define([0, [0], handle]),
    print_s = Print_s[1],
    Return = [248, "Ui_effect.Return", caml_fresh_oo_id(0)],
    Lazy = [248, "Ui_effect.Lazy", caml_fresh_oo_id(0)],
    Bind = [248, "Ui_effect.Bind", caml_fresh_oo_id(0)],
    Map = [248, "Ui_effect.Map", caml_fresh_oo_id(0)],
    Never = [248, "Ui_effect.Never", caml_fresh_oo_id(0)],
    Fun = [248, "Ui_effect.Fun", caml_fresh_oo_id(0)];
   function return$0(a){return [0, Return, a];}
   function bind(t, f){return [0, Bind, t, f];}
   function of_fun(f){return [0, Fun, f];}
   function lazy(a){return [0, Lazy, a];}
   var
    map = [0, -198771759, function(t, f){return [0, Map, t, f];}],
    include = caml_call1(Base_Monad[1], [0, bind, return$0, map]),
    symbol_bind = include[1],
    symbol_map = include[2],
    Monad_infix = include[3],
    bind$0 = include[4],
    return$1 = include[5],
    map$0 = include[6],
    join = include[7],
    ignore_m = include[8],
    all = include[9],
    all_unit = include[10],
    Let_syntax = include[11];
   function eval$0(t, callback){
    var t$0 = t, callback$0 = callback;
    for(;;){
     if(t$0[1] === Fun){var f = t$0[2]; return caml_call1(f, callback$0);}
     if(t$0 === Ignore) return caml_call1(callback$0, 0);
     if(t$0[1] === Return){var a = t$0[2]; return caml_call1(callback$0, a);}
     if(t$0[1] === Lazy){
      var
       _k_ = t$0[2],
       _l_ = runtime.caml_obj_tag(_k_),
       t$1 =
         250 === _l_
          ? _k_[1]
          : 246 === _l_ ? caml_call1(CamlinternalLazy[2], _k_) : _k_;
      t$0 = t$1;
     }
     else{
      if(t$0[1] === Many){
       var l = t$0[2], _m_ = function(_o_){return 0;};
       caml_call2(Core_List[9], l, function(_n_){return eval$0(_n_, _m_);});
       return caml_call1(callback$0, 0);
      }
      if(t$0[1] === Bind){
       var f$0 = t$0[3], t$2 = t$0[2];
       let callback = callback$0, f = f$0;
       var
        callback$1 = function(a){return eval$0(caml_call1(f, a), callback);};
       t$0 = t$2;
       callback$0 = callback$1;
      }
      else{
       if(t$0[1] !== Map){
        if(t$0 === Never) return 0;
        var
         _i_ = caml_call1(Stdlib_Obj[22][1], t$0),
         _j_ = caml_call1(Stdlib_Obj[22][3], _i_);
        return caml_call3
                (Core_Hashtbl[54], handlers, _j_, [0, [0, t$0, callback$0]]);
       }
       var f$1 = t$0[3], t$3 = t$0[2];
       let callback = callback$0, f = f$1;
       var
        callback$2 =
          function(a){return caml_call1(callback, caml_call1(f, a));};
       t$0 = t$3;
       callback$0 = callback$2;
      }
     }
    }
   }
   function _a_(_h_){return 0;}
   function handle$0(_g_){return eval$0(_g_, _a_);}
   var Expert = [0, handle$0, handlers, of_fun], Action = [0];
   function handle$1(param, on_response){
    var f = param[2], a = param[1];
    return caml_call1(on_response, caml_call1(f, a));
   }
   var Sync_fun_arg = [0, Action, handle$1], Sync_fun = Define1(Sync_fun_arg);
   function of_sync_fun(f, a){return caml_call1(Sync_fun[1], [0, a, f]);}
   function make(request, on_response){return [0, request, on_response];}
   function request(param){var request = param[1]; return request;}
   function respond_to(param, response){
    var on_response = param[2];
    return caml_call1(on_response, response);
   }
   var Callback = [0, make, request, respond_to];
   function make$0(request, evaluator){
    return caml_call1
            (Expert[3],
             function(callback){
              var
               callback$0 =
                 caml_call2
                  (Callback[1],
                   request,
                   function(response){
                    caml_call1(callback, response);
                    return Ignore;
                   }),
               _f_ = caml_call1(evaluator, callback$0);
              return caml_call1(Expert[1], _f_);
             });
   }
   var Private = [0, Callback, make$0];
   function create(param){return [0, [0, caml_call1(Core_Bag[22], 0)]];}
   function upon(t, handler){
    var match = t[1];
    if(0 === match[0]){
     var handlers = match[1];
     caml_call2(Core_Bag[23], handlers, handler);
     return 0;
    }
    var x = match[1];
    return caml_call1(handler, x);
   }
   function fill_if_empty(t, x){
    var match = t[1];
    if(0 !== match[0]) return 0;
    var handlers = match[1];
    caml_call2
     (Core_Bag[7],
      handlers,
      function(handler){return caml_call1(handler, x);});
    t[1] = [1, x];
    return 0;
   }
   function peek(t){
    var match = t[1];
    if(0 === match[0]) return 0;
    var x = match[1];
    return [0, x];
   }
   var Svar = [0, create, upon, fill_if_empty, peek], Action$0 = [0];
   function handle$2(param, on_response){
    var f = param[2], a = param[1], _e_ = caml_call1(f, a);
    return caml_call2(Svar[2], _e_, on_response);
   }
   var
    Svar_fun_arg = [0, Action$0, handle$2],
    Svar_fun = Define1(Svar_fun_arg);
   function of_svar_fun(f, a){return caml_call1(Svar_fun[1], [0, a, f]);}
   function create$0(param){return caml_call1(Core_Bag[22], 0);}
   function queries_pending_response(t){
    var _d_ = caml_call1(Core_Bag[17], t);
    return caml_call2
            (Core_List[72],
             _d_,
             function(param){var query = param[1]; return query;});
   }
   function maybe_respond(t, f){
    return caml_call2
            (Core_Bag[30],
             t,
             function(param){
              var
               response = param[2],
               query = param[1],
               match = caml_call1(f, query);
              if(! match) return 1;
              var resp = match[1];
              caml_call2(Svar[3], response, resp);
              return 0;
             });
   }
   function of_query_response_tracker(qrt){
    function _b_(query){
     var response = caml_call1(Svar[1], 0);
     caml_call2(Core_Bag[23], qrt, [0, query, response]);
     return response;
    }
    return function(_c_){return of_svar_fun(_b_, _c_);};
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_ui_effect);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Ui_effect);
   var
    Ui_effect =
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       Monad_infix,
       bind$0,
       return$1,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       Let_syntax,
       Never,
       lazy,
       print_s,
       of_sync_fun,
       Define,
       Define1,
       Expert,
       Private,
       [0,
        Svar,
        of_svar_fun,
        [0, create$0, maybe_respond, queries_pending_response],
        of_query_response_tracker]];
   runtime.caml_register_global(34, Ui_effect, cst_Ui_effect);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
